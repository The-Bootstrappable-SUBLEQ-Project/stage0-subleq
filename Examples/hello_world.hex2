# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq. If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
:ZERO &ZERO &ZERO &EP ; lblsq ZERO ZERO EP

; label EP
; var c 0

# Output 'H'

# Start set c 72
:EP &c &c ?+8 ; relsq c c 1
&c &CONST_-48 ?+8 ; relsq c CONST_-48 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'e'

# Start set c 101
&c &c ?+8 ; relsq c c 1
&c &CONST_-65 ?+8 ; relsq c CONST_-65 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'l'

# Start set c 108
&c &c ?+8 ; relsq c c 1
&c &CONST_-6C ?+8 ; relsq c CONST_-6C 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'l'

# Start set c 108
&c &c ?+8 ; relsq c c 1
&c &CONST_-6C ?+8 ; relsq c CONST_-6C 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'o'

# Start set c 111
&c &c ?+8 ; relsq c c 1
&c &CONST_-6F ?+8 ; relsq c CONST_-6F 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output ','

# Start set c 44
&c &c ?+8 ; relsq c c 1
&c &CONST_-2C ?+8 ; relsq c CONST_-2C 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output ' '

# Start set c 32
&c &c ?+8 ; relsq c c 1
&c &CONST_-20 ?+8 ; relsq c CONST_-20 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'w'

# Start set c 87
&c &c ?+8 ; relsq c c 1
&c &CONST_-57 ?+8 ; relsq c CONST_-57 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'o'set_safe

# Start set c 111
&c &c ?+8 ; relsq c c 1
&c &CONST_-6F ?+8 ; relsq c CONST_-6F 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'r'

# Start set c 114
&c &c ?+8 ; relsq c c 1
&c &CONST_-72 ?+8 ; relsq c CONST_-72 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'l'

# Start set c 108
&c &c ?+8 ; relsq c c 1
&c &CONST_-6C ?+8 ; relsq c CONST_-6C 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output 'd'

# Start set c 100
&c &c ?+8 ; relsq c c 1
&c &CONST_-64 ?+8 ; relsq c CONST_-64 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output '!'

# Start set c 33
&c &c ?+8 ; relsq c c 1
&c &CONST_-21 ?+8 ; relsq c CONST_-21 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Output '\n'

# Start set c 10
&c &c ?+8 ; relsq c c 1
&c &CONST_-A ?+8 ; relsq c CONST_-A 1
# End set


# Start putchar c tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar


# Stop CPU 0

# Start set_safe CPU_CONTROL_START 2 tmp tmp2

# Start mov tmp CPU_CONTROL_START tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# dec tmp 2
&tmp &CONST_2 ?+8 ; relsq tmp CONST_2 1
# sub CPU_CONTROL_START tmp
0000000013ee0000 &tmp ?+8 ; relsq CPU_CONTROL_START tmp 1
# End set_safe


# Infinite loop
&ZERO &ZERO ?-10 ; relsq ZERO ZERO 0

; var CONST_-48 -48
; var CONST_1 1
; var CONST_-65 -65
; var CONST_-6C -6c
; var CONST_-6F -6f
; var CONST_-2C -2c
; var CONST_-20 -20
; var CONST_-57 -57
; var CONST_-72 -72
; var CONST_-64 -64
; var CONST_-21 -21
; var CONST_-A -a
; var CONST_2 2

:tmp 0000000000000000 ; raw 0000000000000000 # tmp
:tmp2 0000000000000000 ; raw 0000000000000000 # tmp2
:c 0000000000000000 ; raw 0000000000000000 # c
:CONST_-48 ffffffffffffffb8 ; raw ffffffffffffffb8 # CONST_-48
:CONST_1 0000000000000001 ; raw 0000000000000001 # CONST_1
:CONST_-65 ffffffffffffff9b ; raw ffffffffffffff9b # CONST_-65
:CONST_-6C ffffffffffffff94 ; raw ffffffffffffff94 # CONST_-6C
:CONST_-6F ffffffffffffff91 ; raw ffffffffffffff91 # CONST_-6F
:CONST_-2C ffffffffffffffd4 ; raw ffffffffffffffd4 # CONST_-2C
:CONST_-20 ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:CONST_-57 ffffffffffffffa9 ; raw ffffffffffffffa9 # CONST_-57
:CONST_-72 ffffffffffffff8e ; raw ffffffffffffff8e # CONST_-72
:CONST_-64 ffffffffffffff9c ; raw ffffffffffffff9c # CONST_-64
:CONST_-21 ffffffffffffffdf ; raw ffffffffffffffdf # CONST_-21
:CONST_-A fffffffffffffff6 ; raw fffffffffffffff6 # CONST_-A
:CONST_2 0000000000000002 ; raw 0000000000000002 # CONST_2
~
