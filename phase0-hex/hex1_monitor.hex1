# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq. If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr tmp_addr 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
:aa :ab :ac :ad :ae :af &aa &aa &ag ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp

# Start set tmp 1
:ag :ai &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ak &ak ?+8 ; relsq c c 1
&ak &ah ?+8 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &ak ?+8 ; relsq tmp c 1
# movneg c2 tmp
&al &al ?+8 ; relsq c2 c2 1
&al &ah ?+8 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
&ak &am &ai ; lblsq c CONST_22 MAIN

# Handle #
&ak &an &ao ; lblsq c CONST_1 COMMENT

# Handle $ and %
&ak &ap &ai ; lblsq c CONST_2 MAIN

# Handle &
&ak &an &aq ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
&ak &ar &ai ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &aj ?+8 ; relsq val CONST_-1 1
&ak &at &au ; lblsq c CONST_A WRITE

# Handle :
&ak &an &aq ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
&ak &an &ao ; lblsq c CONST_1 COMMENT

# Handle < ~ >
&ak &av &ai ; lblsq c CONST_3 MAIN

# Handle ?
&ak &an &aw ; lblsq c CONST_1 HANDLE_REL

# Handle @
&ak &an &ai ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &ar ?+8 ; relsq val CONST_9 1
&ak &ax &au ; lblsq c CONST_6 WRITE

# Handle G ~ `
&ak &ay &ai ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &ar ?+8 ; relsq val CONST_9 1
&ak &ax &au ; lblsq c CONST_6 WRITE

# Handle g ~ }
&ak &az &ai ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
&aa &aa &aA ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp

# Start set tmp 1
:ao &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ak &ak ?+8 ; relsq c c 1
&ak &ah ?+8 ; relsq c tmp 1
# End getchar

# putchar c tmp
&ak &ar &ao ; lblsq c CONST_9 COMMENT
# Handle LF
&ak &an &ai ; lblsq c CONST_1 MAIN
&ak &ap &ao ; lblsq c CONST_2 COMMENT
# Handle CR
&ak &an &ai ; lblsq c CONST_1 MAIN
&aa &aa &ao ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
:aw &aB &aB ?+8 ; relsq isNeg isNeg 1

# Start getchar c tmp

# Start set tmp 1
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ak &ak ?+8 ; relsq c c 1
&ak &ah ?+8 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
&ak &aC &aD ; lblsq c CONST_2C REL_INP
&aB &aj ?+8 ; relsq isNeg CONST_-1 1
# Handle -
&ak &an &aD ; lblsq c CONST_1 REL_INP
&aB &aB ?+8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp

# Start set tmp 1
:aD &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ak &ak ?+8 ; relsq c c 1
&ak &ah ?+8 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
&ak &aE &aF ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &aj ?+8 ; relsq val CONST_-1 1
&ak &at &aG ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
&ak &aH &aF ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &ar ?+8 ; relsq val CONST_9 1
&ak &ax &aG ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
&ak &ay &aF ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
&as &as ?+8 ; relsq val val 1
&as &ak ?+8 ; relsq val c 1
&as &ar ?+8 ; relsq val CONST_9 1
&ak &ax &aG ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
&aa &aa &aD ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
:aG &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&aI &ah ?+8 ; relsq cur tmp 1
&aI &ah ?+8 ; relsq cur tmp 1
&aI &ah ?+8 ; relsq cur tmp 1
# End mul_16

&aI &as ?+8 ; relsq cur val 1
&aa &aa &aD ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
:aF &aB &aJ &aK ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
# movneg tmp cur
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aI ?+8 ; relsq tmp cur 1

# Start mov cur tmp tmp2
# movneg tmp2 tmp
&aL &aL ?+8 ; relsq tmp2 tmp2 1
&aL &ah ?+8 ; relsq tmp2 tmp 1
# movneg cur tmp2
&aI &aI ?+8 ; relsq cur cur 1
&aI &aL ?+8 ; relsq cur tmp2 1
# End mov

# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
:aK &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aM ?+8 ; relsq tmp codeLen 1
# sub cur tmp
&aI &ah ?+8 ; relsq cur tmp 1
# End add

&aa &aa &aN ; lblsq ZERO ZERO WRITE_QWORD


; var labelArrStart 300000

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# Transform label name to offset
; var labelOffset 0

# Start getchar labelOffset tmp

# Start set tmp 1
:aq &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg labelOffset tmp
&aO &aO ?+8 ; relsq labelOffset labelOffset 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
# End getchar


# Start mul_16 labelOffset tmp
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
# End mul_16


# Start mul_16 labelOffset tmp
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
# End mul_16


# Start getchar tmp2 tmp

# Start set tmp 1
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aj ?+8 ; relsq tmp CONST_-1 1
# End set

&ah 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg tmp2 tmp
&aL &aL ?+8 ; relsq tmp2 tmp2 1
&aL &ah ?+8 ; relsq tmp2 tmp 1
# End getchar


# Start add labelOffset tmp2 tmp
# movneg tmp tmp2
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aL ?+8 ; relsq tmp tmp2 1
# sub labelOffset tmp
&aO &ah ?+8 ; relsq labelOffset tmp 1
# End add


# Start mul_8 labelOffset tmp
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
&aO &ah ?+8 ; relsq labelOffset tmp 1
# end mul_8


# Start add labelOffset labelArrStart tmp
# movneg tmp labelArrStart
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aP ?+8 ; relsq tmp labelArrStart 1
# sub labelOffset tmp
&aO &ah ?+8 ; relsq labelOffset tmp 1
# End add


&al &aQ &aR ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
; addr curLabel 0

# Start setaddr curLabel labelOffset tmp
&aS &aS ?+8 ; relsq curLabel_addrRef_0 curLabel_addrRef_0 1
&aT &aT ?+8 ; relsq curLabel_addrRef_1 curLabel_addrRef_1 1
&aU &aU ?+8 ; relsq curLabel_addrRef_2 curLabel_addrRef_2 1
# movneg tmp labelOffset
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
&aS &ah ?+8 ; relsq curLabel_addrRef_0 tmp 1
&aT &ah ?+8 ; relsq curLabel_addrRef_1 tmp 1
&aU &ah ?+8 ; relsq curLabel_addrRef_2 tmp 1
# End setaddr


# Start mov curLabel codeLen tmp
# movneg tmp codeLen
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aM ?+8 ; relsq tmp codeLen 1
# movneg curLabel tmp
:aS &ac :aT &ac ?+8 ; relsq curLabel curLabel 1
:aU &ac &ah ?+8 ; relsq curLabel tmp 1
# End mov

&aa &aa &ai ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
; var refs 0
; addr nextRef 400000

# Start mov nextRef labelOffset tmp
# movneg tmp labelOffset
:aR &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aO ?+8 ; relsq tmp labelOffset 1
# movneg nextRef tmp
:aV 0000000000400000 :aW 0000000000400000 ?+8 ; relsq nextRef nextRef 1
:aX 0000000000400000 &ah ?+8 ; relsq nextRef tmp 1
# End mov

&aV &aY ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aW &aY ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aX &aY ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1

# Start mov nextRef codeLen tmp
# movneg tmp codeLen
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &aM ?+8 ; relsq tmp codeLen 1
# movneg nextRef tmp
:aZ 0000000000400000 :ba 0000000000400000 ?+8 ; relsq nextRef nextRef 1
:bb 0000000000400000 &ah ?+8 ; relsq nextRef tmp 1
# End mov


# Start add nextRef bufStart tmp
# movneg tmp bufStart
&ah &ah ?+8 ; relsq tmp tmp 1
&ah &bf ?+8 ; relsq tmp bufStart 1
# sub nextRef tmp
:bc 0000000000400000 &ah ?+8 ; relsq nextRef tmp 1
# End add

&aV &aY ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aW &aY ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aX &aY ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1
&bg &aj ?+8 ; relsq refs CONST_-1 1
&aa &aa &aN ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
:au &ah &ah ?+8 ; relsq tmp tmp 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&ah &aI ?+8 ; relsq tmp cur 1
&aI &ah ?+8 ; relsq cur tmp 1
&aI &ah ?+8 ; relsq cur tmp 1
&aI &ah ?+8 ; relsq cur tmp 1
# End mul_16

&aI &as ?+8 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
&bh &aj &ai ; lblsq i CONST_-1 MAIN
&bh &bi ?+8 ; relsq i CONST_10 1

; label WRITE_QWORD
; addr dstEnd 0
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# The buffer is also intentionally kept negative to ease copying
# movneg bufEnd cur
:aN :bj 0000000000100000 :bk 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
:bl 0000000000100000 &aI ?+8 ; relsq bufEnd cur 1
&aI &aI ?+8 ; relsq cur cur 1
&bm &aY ?+8 ; relsq dstEnd_addrRef_0 CONST_-8 1
&bn &aY ?+8 ; relsq dstEnd_addrRef_1 CONST_-8 1
&bo &aY ?+8 ; relsq dstEnd_addrRef_2 CONST_-8 1
&bj &aY ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bk &aY ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bl &aY ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
&bp &aY ?+8 ; relsq bufEnd_addrRef_3 CONST_-8 1
&aM &aY ?+8 ; relsq codeLen CONST_-8 1
&aa &aa &ai ; lblsq ZERO ZERO MAIN


# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
:aA &bg &aJ &bq ; lblsq refs CONST_0 COPY
&bg &an ?+8 ; relsq refs CONST_1 1
&aV &br ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aW &br ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aX &br ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aZ &br ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&ba &br ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&bb &br ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&bc &br ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bd &br ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&be &br ?+8 ; relsq nextRef_addrRef_8 CONST_8 1

; addr refAt 0

# Start setaddr refAt nextRef tmp
&bs &bs ?+8 ; relsq refAt_addrRef_0 refAt_addrRef_0 1
&bt &bt ?+8 ; relsq refAt_addrRef_1 refAt_addrRef_1 1
&bu &bu ?+8 ; relsq refAt_addrRef_2 refAt_addrRef_2 1
# movneg tmp nextRef
&ah &ah ?+8 ; relsq tmp tmp 1
&ah :bd 0000000000400000 ?+8 ; relsq tmp nextRef 1
&bs &ah ?+8 ; relsq refAt_addrRef_0 tmp 1
&bt &ah ?+8 ; relsq refAt_addrRef_1 tmp 1
&bu &ah ?+8 ; relsq refAt_addrRef_2 tmp 1
# End setaddr

&aV &br ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aW &br ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aX &br ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aZ &br ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&ba &br ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&bb &br ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&bc &br ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bd &br ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&be &br ?+8 ; relsq nextRef_addrRef_8 CONST_8 1

; addr refVal 0

# Start setaddr refVal nextRef tmp
&bv &bv ?+8 ; relsq refVal_addrRef_0 refVal_addrRef_0 1
# movneg tmp nextRef
&ah &ah ?+8 ; relsq tmp tmp 1
&ah :be 0000000000400000 ?+8 ; relsq tmp nextRef 1
&bv &ah ?+8 ; relsq refVal_addrRef_0 tmp 1
# End setaddr


# The buffer is kept negative
# movneg refAt refVal
:bs &ae :bt &ae ?+8 ; relsq refAt refAt 1
:bu &ae :bv &af ?+8 ; relsq refAt refVal 1
&aa &aa &aA ; lblsq ZERO ZERO RESOLVE_REF


# COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
; label COPY
; addr loaderDst 200000
; addr loaderStart 200000
; var loaderLen b0

# Start mov loaderDst LOADER tmp
# movneg tmp LOADER
:bq &ah &ah ?+8 ; relsq tmp tmp 1
&ah :bx &bw ?+8 ; relsq tmp LOADER 1
# movneg loaderDst tmp
:by 0000000000200000 :bz 0000000000200000 ?+8 ; relsq loaderDst loaderDst 1
:bA 0000000000200000 &ah ?+8 ; relsq loaderDst tmp 1
# End mov

&bx &aY ?+8 ; relsq LOADER_addrRef_0 CONST_-8 1
&by &aY ?+8 ; relsq loaderDst_addrRef_0 CONST_-8 1
&bz &aY ?+8 ; relsq loaderDst_addrRef_1 CONST_-8 1
&bA &aY ?+8 ; relsq loaderDst_addrRef_2 CONST_-8 1
# Jump to loaderDst once loaderLen is <= 0
&bB &br 0000000000200000 ; lblsq loaderLen CONST_8 loaderStart
&aa &aa &bq ; lblsq ZERO ZERO COPY


# LOADER copies the buffer to the highest memory (0~...) and jumps to 0
# No external variables are used within LOADER, as those would be overridden by the new program
# The addresses are also hardcoded based on loaderStart
; label LOADER
:bw :bm &ad :bn &ad 0000000000200018 ; abssq dstEnd dstEnd 200018
:bo &ad :bp 0000000000100000 0000000000200030 ; abssq dstEnd bufEnd 200030
# Decrease bufEnd by 8
0000000000200020 00000000002000a8 0000000000200048 ; raw 0000000000200020 00000000002000a8 0000000000200048
# Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
0000000000200000 00000000002000a8 0000000000200060 ; raw 0000000000200000 00000000002000a8 0000000000200060
0000000000200008 00000000002000a8 0000000000200078 ; raw 0000000000200008 00000000002000a8 0000000000200078
0000000000200018 00000000002000a8 0000000000000000 ; raw 0000000000200018 00000000002000a8 0000000000000000
# Rerun the loop
0000000000000000 0000000000000000 0000000000200000 ; raw 0000000000000000 0000000000000000 0000000000200000
# CONST_8
0000000000000008 ; raw 0000000000000008

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_-8 -8
; var CONST_10 10
; var CONST_8 8

:ah 0000000000000000 ; raw 0000000000000000 # tmp
:aL 0000000000000000 ; raw 0000000000000000 # tmp2
:aM 0000000000000000 ; raw 0000000000000000 # codeLen
:as 0000000000000000 ; raw 0000000000000000 # val
:ak 0000000000000000 ; raw 0000000000000000 # c
:al 0000000000000000 ; raw 0000000000000000 # c2
:aB 0000000000000000 ; raw 0000000000000000 # isNeg
:aP 0000000000300000 ; raw 0000000000300000 # labelArrStart
:aO 0000000000000000 ; raw 0000000000000000 # labelOffset
:bg 0000000000000000 ; raw 0000000000000000 # refs
:aI 0000000000000000 ; raw 0000000000000000 # cur
:bh fffffffffffffff1 ; raw fffffffffffffff1 # i
:bf 0000000000100000 ; raw 0000000000100000 # bufStart
:bB 00000000000000b0 ; raw 00000000000000b0 # loaderLen
:aj ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:am 0000000000000022 ; raw 0000000000000022 # CONST_22
:an 0000000000000001 ; raw 0000000000000001 # CONST_1
:ap 0000000000000002 ; raw 0000000000000002 # CONST_2
:ar 0000000000000009 ; raw 0000000000000009 # CONST_9
:at 000000000000000a ; raw 000000000000000a # CONST_A
:av 0000000000000003 ; raw 0000000000000003 # CONST_3
:ax 0000000000000006 ; raw 0000000000000006 # CONST_6
:ay 000000000000001a ; raw 000000000000001a # CONST_1A
:az 0000000000000017 ; raw 0000000000000017 # CONST_17
:aC 000000000000002c ; raw 000000000000002c # CONST_2C
:aE 000000000000002f ; raw 000000000000002f # CONST_2F
:aH 0000000000000007 ; raw 0000000000000007 # CONST_7
:aJ 0000000000000000 ; raw 0000000000000000 # CONST_0
:aQ 0000000000000026 ; raw 0000000000000026 # CONST_26
:aY fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bi 0000000000000010 ; raw 0000000000000010 # CONST_10
:br 0000000000000008 ; raw 0000000000000008 # CONST_8
~
