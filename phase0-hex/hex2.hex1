# hex1
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
; var FREE_START 1000000
:aa :ab :ac :ad :ae :af :ag :ah :ai &aa &aa &aj ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp
# set tmp 1
:aj :al &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&an &an ?+8 ; relsq c c 1
&an &ak ?+8 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1
# movneg c2 tmp
&ao &ao ?+8 ; relsq c2 c2 1
&ao &ak ?+8 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
&an &ap &al ; lblsq c CONST_22 MAIN

# Handle #
&an &aq &ar ; lblsq c CONST_1 COMMENT

# Handle $ and %
&an &as &al ; lblsq c CONST_2 MAIN

# Handle &
&an &aq &at ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
&an &au &al ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &am ?+8 ; relsq val CONST_-1 1
&an &aw &ax ; lblsq c CONST_A WRITE

# Handle :
&an &aq &at ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
&an &aq &ar ; lblsq c CONST_1 COMMENT

# Handle < ~ >
&an &ay &al ; lblsq c CONST_3 MAIN

# Handle ?
&an &aq &az ; lblsq c CONST_1 HANDLE_REL

# Handle @
&an &aq &al ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &au ?+8 ; relsq val CONST_9 1
&an &aA &ax ; lblsq c CONST_6 WRITE

# Handle G ~ `
&an &aB &al ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &au ?+8 ; relsq val CONST_9 1
&an &aA &ax ; lblsq c CONST_6 WRITE

# Handle g ~ }
&an &aC &al ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
&aa &aa &aD ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp
# set tmp 1
:ar &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&an &an ?+8 ; relsq c c 1
&an &ak ?+8 ; relsq c tmp 1
# End getchar

# putchar c tmp
&an &au &ar ; lblsq c CONST_9 COMMENT
# Handle LF
&an &aq &al ; lblsq c CONST_1 MAIN
&an &as &ar ; lblsq c CONST_2 COMMENT
# Handle CR
&an &aq &al ; lblsq c CONST_1 MAIN
&aa &aa &ar ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
:az &aE &aE ?+8 ; relsq isNeg isNeg 1

# Start getchar c tmp
# set tmp 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&an &an ?+8 ; relsq c c 1
&an &ak ?+8 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
&an &aF &aG ; lblsq c CONST_2C REL_INP
&aE &am ?+8 ; relsq isNeg CONST_-1 1
# Handle -
&an &aq &aG ; lblsq c CONST_1 REL_INP
&aE &aE ?+8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp
# set tmp 1
:aG &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&an &an ?+8 ; relsq c c 1
&an &ak ?+8 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
&an &aH &aI ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &am ?+8 ; relsq val CONST_-1 1
&an &aw &aJ ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
&an &aK &aI ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &au ?+8 ; relsq val CONST_9 1
&an &aA &aJ ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
&an &aB &aI ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
&av &av ?+8 ; relsq val val 1
&av &an ?+8 ; relsq val c 1
&av &au ?+8 ; relsq val CONST_9 1
&an &aA &aJ ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
&aa &aa &aG ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
:aJ &ak &ak ?+8 ; relsq tmp tmp 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&aL &ak ?+8 ; relsq cur tmp 1
&aL &ak ?+8 ; relsq cur tmp 1
&aL &ak ?+8 ; relsq cur tmp 1
# End mul_16

&aL &av ?+8 ; relsq cur val 1
&aa &aa &aG ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
:aI &aE &aM &aN ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aL ?+8 ; relsq tmp cur 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aL &aL ?+8 ; relsq cur cur 1
&aL &aO ?+8 ; relsq cur tmp2 1
# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
:aN &ak &ak ?+8 ; relsq tmp tmp 1
&ak &aP ?+8 ; relsq tmp codeLen 1
# sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# End add

&aa &aa &aQ ; lblsq ZERO ZERO WRITE_QWORD

# A log is made of three components, adding to a total of 0x28 bytes:
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

; var logArrStart 300000
; addr logArrNext 300000
; var logCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
:at &aR &am ?+8 ; relsq logCount CONST_-1 1

# Start alloc_str logArrNext 1000 tmp

# Start malloc_const logArrNext 1000 tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aS ?+8 ; relsq tmp FREE_START 1
:aT 0000000000300000 :aU 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:aV 0000000000300000 &ak ?+8 ; relsq logArrNext tmp 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aW ?+8 ; relsq tmp CONST_1000 1
&aS &ak ?+8 ; relsq FREE_START tmp 1
# End malloc_const

# incaddr logArrNext 8
&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
# zero logArrNext
:aY 0000000000300000 :aZ 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
# incaddr logArrNext 8
&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext CONST_1000 tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aW ?+8 ; relsq tmp CONST_1000 1
:ba 0000000000300000 :bb 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bc 0000000000300000 &ak ?+8 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 10
&aT &bp ?+8 ; relsq logArrNext_addrRef_0 CONST_10 1
&aU &bp ?+8 ; relsq logArrNext_addrRef_1 CONST_10 1
&aV &bp ?+8 ; relsq logArrNext_addrRef_2 CONST_10 1
&aY &bp ?+8 ; relsq logArrNext_addrRef_3 CONST_10 1
&aZ &bp ?+8 ; relsq logArrNext_addrRef_4 CONST_10 1
&ba &bp ?+8 ; relsq logArrNext_addrRef_5 CONST_10 1
&bb &bp ?+8 ; relsq logArrNext_addrRef_6 CONST_10 1
&bc &bp ?+8 ; relsq logArrNext_addrRef_7 CONST_10 1
&bd &bp ?+8 ; relsq logArrNext_addrRef_8 CONST_10 1
&be &bp ?+8 ; relsq logArrNext_addrRef_9 CONST_10 1
&bf &bp ?+8 ; relsq logArrNext_addrRef_10 CONST_10 1
&bg &bp ?+8 ; relsq logArrNext_addrRef_11 CONST_10 1
&bh &bp ?+8 ; relsq logArrNext_addrRef_12 CONST_10 1
&bi &bp ?+8 ; relsq logArrNext_addrRef_13 CONST_10 1
&bj &bp ?+8 ; relsq logArrNext_addrRef_14 CONST_10 1
&bk &bp ?+8 ; relsq logArrNext_addrRef_15 CONST_10 1
&bl &bp ?+8 ; relsq logArrNext_addrRef_16 CONST_10 1
&bm &bp ?+8 ; relsq logArrNext_addrRef_17 CONST_10 1
&bn &bp ?+8 ; relsq logArrNext_addrRef_18 CONST_10 1
&bo &bp ?+8 ; relsq logArrNext_addrRef_19 CONST_10 1
# End alloc_str


# Start inp_token logArrNext tmp tmp2
; addr inp_token_0_str 0
# setaddr inp_token_0_str logArrNext tmp
&bq &bq ?+8 ; relsq inp_token_0_str_addrRef_0 inp_token_0_str_addrRef_0 1
&br &br ?+8 ; relsq inp_token_0_str_addrRef_1 inp_token_0_str_addrRef_1 1
&bs &bs ?+8 ; relsq inp_token_0_str_addrRef_2 inp_token_0_str_addrRef_2 1
&bt &bt ?+8 ; relsq inp_token_0_str_addrRef_3 inp_token_0_str_addrRef_3 1
&bu &bu ?+8 ; relsq inp_token_0_str_addrRef_4 inp_token_0_str_addrRef_4 1
&bv &bv ?+8 ; relsq inp_token_0_str_addrRef_5 inp_token_0_str_addrRef_5 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :bd 0000000000300000 ?+8 ; relsq tmp logArrNext 1
&bq &ak ?+8 ; relsq inp_token_0_str_addrRef_0 tmp 1
&br &ak ?+8 ; relsq inp_token_0_str_addrRef_1 tmp 1
&bs &ak ?+8 ; relsq inp_token_0_str_addrRef_2 tmp 1
&bt &ak ?+8 ; relsq inp_token_0_str_addrRef_3 tmp 1
&bu &ak ?+8 ; relsq inp_token_0_str_addrRef_4 tmp 1
&bv &ak ?+8 ; relsq inp_token_0_str_addrRef_5 tmp 1
; var inp_token_0_len 0
# zero inp_token_0_len
&bw &bw ?+8 ; relsq inp_token_0_len inp_token_0_len 1
; label INP_TOKEN_0_LOOP

# Start getchar inp_token_0_str tmp
:bx &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
&aa &aa ?-28 ; relsq ZERO ZERO -1
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
:bq &ab :br &ab ?+8 ; relsq inp_token_0_str inp_token_0_str 1
:bs &ab &ak ?+8 ; relsq inp_token_0_str tmp 1
# End getchar


# Start jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bt &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &by ?+8 ; relsq tmp CONST_20 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bz ; lblsq tmp2 CONST_-1 JZ_0_END
&ak &am &bA ; lblsq tmp CONST_-1 JZ_0_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &bB ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
:bA &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_0_END
# End jeq_const


# Start jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
:bz &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bu &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &bC ?+8 ; relsq tmp CONST_D 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bD ; lblsq tmp2 CONST_-1 JZ_1_END
&ak &am &bE ; lblsq tmp CONST_-1 JZ_1_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &bB ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
:bE &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_1_END
# End jeq_const


# Start jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
:bD &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bv &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &aw ?+8 ; relsq tmp CONST_A 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bF ; lblsq tmp2 CONST_-1 JZ_2_END
&ak &am &bG ; lblsq tmp CONST_-1 JZ_2_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &bB ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
:bG &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_2_END
# End jeq_const

# inc inp_token_0_len 1
:bF &bw &am ?+8 ; relsq inp_token_0_len CONST_-1 1
# incaddr inp_token_0_str 8
&bq &aX ?+8 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
&br &aX ?+8 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
&bs &aX ?+8 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
&bt &aX ?+8 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
&bu &aX ?+8 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
&bv &aX ?+8 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# lbljmp INP_TOKEN_0_LOOP
&aa &aa &bx ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
; label INP_TOKEN_0_TERM
# decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
:bB &bw &aM &bx ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# incaddr logArrNext 8
&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext inp_token_0_len tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &bw ?+8 ; relsq tmp inp_token_0_len 1
:be 0000000000300000 :bf 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bg 0000000000300000 &ak ?+8 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 8
&aT &bH ?+8 ; relsq logArrNext_addrRef_0 CONST_8 1
&aU &bH ?+8 ; relsq logArrNext_addrRef_1 CONST_8 1
&aV &bH ?+8 ; relsq logArrNext_addrRef_2 CONST_8 1
&aY &bH ?+8 ; relsq logArrNext_addrRef_3 CONST_8 1
&aZ &bH ?+8 ; relsq logArrNext_addrRef_4 CONST_8 1
&ba &bH ?+8 ; relsq logArrNext_addrRef_5 CONST_8 1
&bb &bH ?+8 ; relsq logArrNext_addrRef_6 CONST_8 1
&bc &bH ?+8 ; relsq logArrNext_addrRef_7 CONST_8 1
&bd &bH ?+8 ; relsq logArrNext_addrRef_8 CONST_8 1
&be &bH ?+8 ; relsq logArrNext_addrRef_9 CONST_8 1
&bf &bH ?+8 ; relsq logArrNext_addrRef_10 CONST_8 1
&bg &bH ?+8 ; relsq logArrNext_addrRef_11 CONST_8 1
&bh &bH ?+8 ; relsq logArrNext_addrRef_12 CONST_8 1
&bi &bH ?+8 ; relsq logArrNext_addrRef_13 CONST_8 1
&bj &bH ?+8 ; relsq logArrNext_addrRef_14 CONST_8 1
&bk &bH ?+8 ; relsq logArrNext_addrRef_15 CONST_8 1
&bl &bH ?+8 ; relsq logArrNext_addrRef_16 CONST_8 1
&bm &bH ?+8 ; relsq logArrNext_addrRef_17 CONST_8 1
&bn &bH ?+8 ; relsq logArrNext_addrRef_18 CONST_8 1
&bo &bH ?+8 ; relsq logArrNext_addrRef_19 CONST_8 1
# End inp_token

&aT &bI ?+8 ; relsq logArrNext_addrRef_0 CONST_-18 1
&aU &bI ?+8 ; relsq logArrNext_addrRef_1 CONST_-18 1
&aV &bI ?+8 ; relsq logArrNext_addrRef_2 CONST_-18 1
&aY &bI ?+8 ; relsq logArrNext_addrRef_3 CONST_-18 1
&aZ &bI ?+8 ; relsq logArrNext_addrRef_4 CONST_-18 1
&ba &bI ?+8 ; relsq logArrNext_addrRef_5 CONST_-18 1
&bb &bI ?+8 ; relsq logArrNext_addrRef_6 CONST_-18 1
&bc &bI ?+8 ; relsq logArrNext_addrRef_7 CONST_-18 1
&bd &bI ?+8 ; relsq logArrNext_addrRef_8 CONST_-18 1
&be &bI ?+8 ; relsq logArrNext_addrRef_9 CONST_-18 1
&bf &bI ?+8 ; relsq logArrNext_addrRef_10 CONST_-18 1
&bg &bI ?+8 ; relsq logArrNext_addrRef_11 CONST_-18 1
&bh &bI ?+8 ; relsq logArrNext_addrRef_12 CONST_-18 1
&bi &bI ?+8 ; relsq logArrNext_addrRef_13 CONST_-18 1
&bj &bI ?+8 ; relsq logArrNext_addrRef_14 CONST_-18 1
&bk &bI ?+8 ; relsq logArrNext_addrRef_15 CONST_-18 1
&bl &bI ?+8 ; relsq logArrNext_addrRef_16 CONST_-18 1
&bm &bI ?+8 ; relsq logArrNext_addrRef_17 CONST_-18 1
&bn &bI ?+8 ; relsq logArrNext_addrRef_18 CONST_-18 1
&bo &bI ?+8 ; relsq logArrNext_addrRef_19 CONST_-18 1

# Start mov logArrNext codeLen tmp
# movneg tmp codeLen
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aP ?+8 ; relsq tmp codeLen 1
# movneg logArrNext tmp
:bh 0000000000300000 :bi 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bj 0000000000300000 &ak ?+8 ; relsq logArrNext tmp 1
# End mov

&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

&ao &bJ &bK ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
# Set log type to 0
:bk 0000000000300000 :bl 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
&aa &aa &al ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
# set logArrNext 1
:bK :bm 0000000000300000 :bn 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bo 0000000000300000 &am ?+8 ; relsq logArrNext CONST_-1 1
&aT &aX ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aU &aX ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aV &aX ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aY &aX ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&aZ &aX ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&ba &aX ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bb &aX ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bc &aX ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&bd &aX ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&be &aX ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bf &aX ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bg &aX ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bh &aX ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bi &aX ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bj &aX ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bk &aX ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bl &aX ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bm &aX ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bn &aX ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bo &aX ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
&aa &aa &aQ ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
:ax &ak &ak ?+8 ; relsq tmp tmp 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&ak &aL ?+8 ; relsq tmp cur 1
&aL &ak ?+8 ; relsq cur tmp 1
&aL &ak ?+8 ; relsq cur tmp 1
&aL &ak ?+8 ; relsq cur tmp 1
# End mul_16

&aL &av ?+8 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
&bL &am &al ; lblsq i CONST_-1 MAIN
&bL &bp ?+8 ; relsq i CONST_10 1

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address

# Start mov bufEnd cur tmp
# movneg tmp cur
:aQ &ak &ak ?+8 ; relsq tmp tmp 1
&ak &aL ?+8 ; relsq tmp cur 1
# movneg bufEnd tmp
:bM 0000000000100000 :bN 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
:bO 0000000000100000 &ak ?+8 ; relsq bufEnd tmp 1
# End mov

&aL &aL ?+8 ; relsq cur cur 1
&bM &aX ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bN &aX ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bO &aX ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
&aP &aX ?+8 ; relsq codeLen CONST_-8 1
&aa &aa &al ; lblsq ZERO ZERO MAIN


# A log is made of three components, adding to a total of 0x28 bytes:
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var logsToCheck 0

# Start mov logsToCheck logCount tmp
# movneg tmp logCount
:aD &ak &ak ?+8 ; relsq tmp tmp 1
&ak &aR ?+8 ; relsq tmp logCount 1
# movneg logsToCheck tmp
&bP &bP ?+8 ; relsq logsToCheck logsToCheck 1
&bP &ak ?+8 ; relsq logsToCheck tmp 1
# End mov

; addr curRef 300000

; label RESOLVE_REF_LOOP
:bQ &bP &aM &bR ; lblsq logsToCheck CONST_0 PRINT
&bP &aq ?+8 ; relsq logsToCheck CONST_1 1

# Check if the log is a reference
&bS &bT ?+8 ; relsq curRef_addrRef_0 CONST_-20 1
&bU &bT ?+8 ; relsq curRef_addrRef_1 CONST_-20 1
&bV &bT ?+8 ; relsq curRef_addrRef_2 CONST_-20 1
:bS 0000000000300000 &aM &bW ; lblsq curRef CONST_0 RESOLVE_REF_NOT_REF

# Store the reference address and restore the curRef address
&bS &bH ?+8 ; relsq curRef_addrRef_0 CONST_8 1
&bU &bH ?+8 ; relsq curRef_addrRef_1 CONST_8 1
&bV &bH ?+8 ; relsq curRef_addrRef_2 CONST_8 1

# Start add curRef bufStart tmp
# movneg tmp bufStart
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &bX ?+8 ; relsq tmp bufStart 1
# sub curRef tmp
:bU 0000000000300000 &ak ?+8 ; relsq curRef tmp 1
# End add

; addr refAt 0
# setaddr refAt curRef tmp
&bY &bY ?+8 ; relsq refAt_addrRef_0 refAt_addrRef_0 1
&bZ &bZ ?+8 ; relsq refAt_addrRef_1 refAt_addrRef_1 1
&ca &ca ?+8 ; relsq refAt_addrRef_2 refAt_addrRef_2 1

# Start addaddr refAt curRef tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :bV 0000000000300000 ?+8 ; relsq tmp curRef 1
&bY &ak ?+8 ; relsq refAt_addrRef_0 tmp 1
&bZ &ak ?+8 ; relsq refAt_addrRef_1 tmp 1
&ca &ak ?+8 ; relsq refAt_addrRef_2 tmp 1
# End addaddr

&bS &cb ?+8 ; relsq curRef_addrRef_0 CONST_18 1
&bU &cb ?+8 ; relsq curRef_addrRef_1 CONST_18 1
&bV &cb ?+8 ; relsq curRef_addrRef_2 CONST_18 1

# puts resMsg1 tmp
# puts curRef tmp
# set tmp a
# putchar tmp tmp2

; addr curFindLabel 0
# setaddr curFindLabel logArrStart tmp
&cc &cc ?+8 ; relsq curFindLabel_addrRef_0 curFindLabel_addrRef_0 1

# Start addaddr curFindLabel logArrStart tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cd ?+8 ; relsq tmp logArrStart 1
&cc &ak ?+8 ; relsq curFindLabel_addrRef_0 tmp 1
# End addaddr

&cc &bT ?+8 ; relsq curFindLabel_addrRef_0 CONST_-20 1

; label RESOLVE_REF_FIND_LABEL
:ce :cc &ad &aM &cf ; lblsq curFindLabel CONST_0 RESOLVE_REF_CHECK_LABEL

# This is not a label. Try the next one
&cc &cg ?+8 ; relsq curFindLabel_addrRef_0 CONST_-28 1
&aa &aa &ce ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_CHECK_LABEL
; addr curLabel 0
# copyaddr curLabel curFindLabel tmp
; sym curFindLabel_addrRef_0
# setaddr curLabel curFindLabel_addrRef_0 tmp
:cf &ch &ch ?+8 ; relsq curLabel_addrRef_0 curLabel_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cc ?+8 ; relsq tmp curFindLabel_addrRef_0 1
&ch &ak ?+8 ; relsq curLabel_addrRef_0 tmp 1
&ch &by ?+8 ; relsq curLabel_addrRef_0 CONST_20 1

# puts resMsg2 tmp
# puts curLabel tmp
# set tmp a
# putchar tmp tmp2


# Start strcmp curRef curLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_0_b 0
# copyaddr strcmp_0_b curLabel tmp
; sym curLabel_addrRef_0
# setaddr strcmp_0_b curLabel_addrRef_0 tmp
&ci &ci ?+8 ; relsq strcmp_0_b_addrRef_0 strcmp_0_b_addrRef_0 1
&cj &cj ?+8 ; relsq strcmp_0_b_addrRef_1 strcmp_0_b_addrRef_1 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &ch ?+8 ; relsq tmp curLabel_addrRef_0 1
&ci &ak ?+8 ; relsq strcmp_0_b_addrRef_0 tmp 1
&cj &ak ?+8 ; relsq strcmp_0_b_addrRef_1 tmp 1

# Start strcmp_const curRef strcmp_0_b RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_const_0_a 0
# copyaddr strcmp_const_0_a curRef tmp
; sym curRef_addrRef_0
&ck &ck ?+8 ; relsq strcmp_const_0_a_addrRef_0 strcmp_const_0_a_addrRef_0 1
&cl &cl ?+8 ; relsq strcmp_const_0_a_addrRef_1 strcmp_const_0_a_addrRef_1 1
&cm &cm ?+8 ; relsq strcmp_const_0_a_addrRef_2 strcmp_const_0_a_addrRef_2 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &bS ?+8 ; relsq tmp curRef_addrRef_0 1
&ck &ak ?+8 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
&cl &ak ?+8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
&cm &ak ?+8 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# incaddr strcmp_const_0_a 8
&ck &aX ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
&cl &aX ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
&cm &aX ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# incaddr strcmp_0_b 8
&ci &aX ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_-8 1
&cj &aX ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_-8 1

# Start jne strcmp_const_0_a strcmp_0_b STRCMP_CONST_0_REVERT_ADDR tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :ck &ag ?+8 ; relsq tmp2 strcmp_const_0_a 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak :ci &af ?+8 ; relsq tmp strcmp_0_b 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &cn ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
&ak &am &co ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cp ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
:co &ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cn ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# End jne

; var strcmp_const_0_len 0

# Start mov strcmp_const_0_len strcmp_const_0_a tmp
:cp &ak &ak ?+8 ; relsq tmp tmp 1
&ak :cl &ag ?+8 ; relsq tmp strcmp_const_0_a 1
&cq &cq ?+8 ; relsq strcmp_const_0_len strcmp_const_0_len 1
&cq &ak ?+8 ; relsq strcmp_const_0_len tmp 1
# End mov

# decaddr strcmp_const_0_a 8
&ck &bH ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&cl &bH ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&cm &bH ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# decaddr strcmp_0_b 8
&ci &bH ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_8 1
&cj &bH ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_8 1
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0
# setaddr strcmp_const_0_aStr strcmp_const_0_a tmp
&cr &cr ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 strcmp_const_0_aStr_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :cm &ag ?+8 ; relsq tmp strcmp_const_0_a 1
&cr &ak ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# setaddr strcmp_const_0_bStr strcmp_0_b tmp
&cs &cs ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 strcmp_const_0_bStr_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :cj &af ?+8 ; relsq tmp strcmp_0_b 1
&cs &ak ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
; label STRCMP_CONST_0_LOOP
# decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
:ct &cq &aM &cu ; lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# dec strcmp_const_0_len 1
&cq &aq ?+8 ; relsq strcmp_const_0_len CONST_1 1

# Start jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :cr &ah ?+8 ; relsq tmp2 strcmp_const_0_aStr 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak :cs &ai ?+8 ; relsq tmp strcmp_const_0_bStr 1
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &cv ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
&ak &am &cw ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cx ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
:cw &ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cv ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# End jne

# incaddr strcmp_const_0_aStr 8
:cx &cr &aX ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# incaddr strcmp_const_0_bStr 8
&cs &aX ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# lbljmp STRCMP_CONST_0_LOOP
&aa &aa &ct ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
; label STRCMP_CONST_0_REVERT_ADDR
# decaddr strcmp_const_0_a 8
:cn &ck &bH ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&cl &bH ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&cm &bH ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# decaddr strcmp_0_b 8
&ci &bH ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_8 1
&cj &bH ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_8 1
; label STRCMP_CONST_0_END
# End strcmp_const

# End strcmp


# This is the wrong label. Try the next one
:cv &cc &cg ?+8 ; relsq curFindLabel_addrRef_0 CONST_-28 1
&aa &aa &ce ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_FOUND_LABEL
:cu &ch &bI ?+8 ; relsq curLabel_addrRef_0 CONST_-18 1


# Start mov refAt curLabel tmp
# movneg tmp curLabel
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :ch &ae ?+8 ; relsq tmp curLabel 1
# movneg refAt tmp
:bY &ac :bZ &ac ?+8 ; relsq refAt refAt 1
:ca &ac &ak ?+8 ; relsq refAt tmp 1
# End mov

&bS &cg ?+8 ; relsq curRef_addrRef_0 CONST_-28 1
&bU &cg ?+8 ; relsq curRef_addrRef_1 CONST_-28 1
&bV &cg ?+8 ; relsq curRef_addrRef_2 CONST_-28 1
&aa &aa &bQ ; lblsq ZERO ZERO RESOLVE_REF_LOOP

; label RESOLVE_REF_NOT_REF
:bW &bS &aX ?+8 ; relsq curRef_addrRef_0 CONST_-8 1
&bU &aX ?+8 ; relsq curRef_addrRef_1 CONST_-8 1
&bV &aX ?+8 ; relsq curRef_addrRef_2 CONST_-8 1
&aa &aa &bQ ; lblsq ZERO ZERO RESOLVE_REF_LOOP


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# set i 8
:bR &bL &bL ?+8 ; relsq i i 1
&bL &aX ?+8 ; relsq i CONST_-8 1
&cy &bH ?+8 ; relsq charToPrint_addrRef_0 CONST_8 1

; label PRINT_CHAR_START
:cz &cy &am ?+8 ; relsq charToPrint_addrRef_0 CONST_-1 1

# Start mov c charToPrint tmp
# movneg tmp charToPrint
&ak &ak ?+8 ; relsq tmp tmp 1
&ak :cy 0000000000100000 ?+8 ; relsq tmp charToPrint 1
# movneg c tmp
&an &an ?+8 ; relsq c c 1
&an &ak ?+8 ; relsq c tmp 1
# End mov


# Start mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# zero mod_256_0_isNeg
# sub mod_256_0_isNeg mod_256_0_isNeg
&cA &cA ?+8 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# jn c MOD_256_0_IS_NEG tmp tmp2

# Start jl c ZERO MOD_256_0_IS_NEG tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak &aa &cB ; lblsq tmp ZERO MOD_256_0_IS_NEG
# End jl

# lbljmp MOD_256_0_START
&aa &aa &cC ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_IS_NEG
# inc mod_256_0_isNeg 1
# dec mod_256_0_isNeg -1
:cB &cA &am ?+8 ; relsq mod_256_0_isNeg CONST_-1 1

# Start neg c tmp tmp2
# movneg tmp c
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1

# Start mov c tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&an &an ?+8 ; relsq c c 1
&an &aO ?+8 ; relsq c tmp2 1
# End mov

# End neg

; label MOD_256_0_START
; var mod_256_0_subber 0
# set mod_256_0_subber 100
# zero mod_256_0_subber
:cC &cD &cD ?+8 ; relsq mod_256_0_subber mod_256_0_subber 1
# inc mod_256_0_subber 100
&cD &cE ?+8 ; relsq mod_256_0_subber CONST_-100 1

# Start jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2

# Start mov tmp c tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak &cD &cF ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# End jl

; var mod_256_0_nextSubber 0
# set mod_256_0_nextSubber 10000
# zero mod_256_0_nextSubber
&cG &cG ?+8 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# inc mod_256_0_nextSubber 10000
&cG &cH ?+8 ; relsq mod_256_0_nextSubber CONST_-10000 1
; label MOD_256_0_MULT_SUBBER_START

# Start jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2

# Start mov tmp c tmp2
:cI &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak &cG &cJ ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# End jl


# Start mul_256 mod_256_0_subber tmp

# Start mul_16 mod_256_0_subber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
# End mul_16


# Start mul_16 mod_256_0_subber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cD &ak ?+8 ; relsq mod_256_0_subber tmp 1
# End mul_16

# End mul_256


# Start mul_256 mod_256_0_nextSubber tmp

# Start mul_16 mod_256_0_nextSubber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16


# Start mul_16 mod_256_0_nextSubber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &cG ?+8 ; relsq tmp mod_256_0_nextSubber 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&cG &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16

# End mul_256

# decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
&cG &aM &cJ ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# lbljmp MOD_256_0_MULT_SUBBER_START
&aa &aa &cI ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
; label MOD_256_0_SUBTRACT_A
:cJ &an &cD &cK ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cD &cK ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cD &cK ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cD &cK ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# lbljmp MOD_256_0_SUBTRACT_A
&aa &aa &cJ ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
; label MOD_256_0_REVERT_SUB

# Start jz c MOD_256_0_START tmp
# movneg tmp c
:cK &ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1
# incleq tmp 1 JZ_3_END
&ak &am &cL ; lblsq tmp CONST_-1 JZ_3_END
# incleq c 1 JZ_3_REVERT_A
&an &am &cM ; lblsq c CONST_-1 JZ_3_REVERT_A
# dec c 1
&an &aq ?+8 ; relsq c CONST_1 1
# lbljmp MOD_256_0_START
&aa &aa &cC ; lblsq ZERO ZERO MOD_256_0_START
; label JZ_3_REVERT_A
# dec c 1
:cM &an &aq ?+8 ; relsq c CONST_1 1
; label JZ_3_END
# End jz


# Start add c mod_256_0_subber tmp
# movneg tmp mod_256_0_subber
:cL &ak &ak ?+8 ; relsq tmp tmp 1
&ak &cD ?+8 ; relsq tmp mod_256_0_subber 1
# sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# End add

# lbljmp MOD_256_0_START
&aa &aa &cC ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_CHECK_NEG
# decleq mod_256_0_isNeg 0 MOD_256_0_END
:cF &cA &aM &cN ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# decleq c 0 MOD_256_0_END
&an &aM &cN ; lblsq c CONST_0 MOD_256_0_END

# Start mov tmp c tmp2
# movneg tmp2 c
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
# movneg tmp tmp2
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# End mov

# set c 100
# zero c
&an &an ?+8 ; relsq c c 1
# inc c 100
&an &cE ?+8 ; relsq c CONST_-100 1
# sub c tmp
&an &ak ?+8 ; relsq c tmp 1
; label MOD_256_0_END

# Start putchar c tmp
:cN 0000000013ed27f0 &aa ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1
# dec tmp 1
&ak &aq ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &ak ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar

&bL &aq &cO ; lblsq i CONST_1 PRINT_CHAR_END
&aa &aa &cz ; lblsq ZERO ZERO PRINT_CHAR_START

; label PRINT_CHAR_END
# Go to the next qword
:cO &cy &aX ?+8 ; relsq charToPrint_addrRef_0 CONST_-8 1
&aP &bH &cP ; lblsq codeLen CONST_8 HALT
&aa &aa &bR ; lblsq ZERO ZERO PRINT

; label HALT

# Start halt tmp tmp2

# Start set_safe CPU_CONTROL_START 2 tmp tmp2
:cP &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &as ?+8 ; relsq tmp CONST_2 1
0000000013ee0000 &ak ?+8 ; relsq CPU_CONTROL_START tmp 1
# End set_safe

&aa &aa ?-10 ; relsq ZERO ZERO 0

# def_string resMsg1 Resolving reference to 
# def_string resMsg2 Found label 

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_1000 1000
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_26 26
; var CONST_-20 -20
; var CONST_18 18
; var CONST_-28 -28
; var CONST_-100 -100
; var CONST_-10000 -10000

:ak 0000000000000000 ; raw 0000000000000000 # tmp
:aO 0000000000000000 ; raw 0000000000000000 # tmp2
:aS 0000000001000000 ; raw 0000000001000000 # FREE_START
:aP 0000000000000000 ; raw 0000000000000000 # codeLen
:av 0000000000000000 ; raw 0000000000000000 # val
:an 0000000000000000 ; raw 0000000000000000 # c
:ao 0000000000000000 ; raw 0000000000000000 # c2
:aE 0000000000000000 ; raw 0000000000000000 # isNeg
:cd 0000000000300000 ; raw 0000000000300000 # logArrStart
:aR 0000000000000000 ; raw 0000000000000000 # logCount
:bw 0000000000000000 ; raw 0000000000000000 # inp_token_0_len
:aL 0000000000000000 ; raw 0000000000000000 # cur
:bL fffffffffffffff1 ; raw fffffffffffffff1 # i
:bX 0000000000100000 ; raw 0000000000100000 # bufStart
:bP 0000000000000000 ; raw 0000000000000000 # logsToCheck
:cq 0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
:cA 0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
:cD 0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
:cG 0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
:am ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:ap 0000000000000022 ; raw 0000000000000022 # CONST_22
:aq 0000000000000001 ; raw 0000000000000001 # CONST_1
:as 0000000000000002 ; raw 0000000000000002 # CONST_2
:au 0000000000000009 ; raw 0000000000000009 # CONST_9
:aw 000000000000000a ; raw 000000000000000a # CONST_A
:ay 0000000000000003 ; raw 0000000000000003 # CONST_3
:aA 0000000000000006 ; raw 0000000000000006 # CONST_6
:aB 000000000000001a ; raw 000000000000001a # CONST_1A
:aC 0000000000000017 ; raw 0000000000000017 # CONST_17
:aF 000000000000002c ; raw 000000000000002c # CONST_2C
:aH 000000000000002f ; raw 000000000000002f # CONST_2F
:aK 0000000000000007 ; raw 0000000000000007 # CONST_7
:aM 0000000000000000 ; raw 0000000000000000 # CONST_0
:aW 0000000000001000 ; raw 0000000000001000 # CONST_1000
:aX fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bp 0000000000000010 ; raw 0000000000000010 # CONST_10
:by 0000000000000020 ; raw 0000000000000020 # CONST_20
:bC 000000000000000d ; raw 000000000000000d # CONST_D
:bH 0000000000000008 ; raw 0000000000000008 # CONST_8
:bI ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
:bJ 0000000000000026 ; raw 0000000000000026 # CONST_26
:bT ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:cb 0000000000000018 ; raw 0000000000000018 # CONST_18
:cg ffffffffffffffd8 ; raw ffffffffffffffd8 # CONST_-28
:cE ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
:cH ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
