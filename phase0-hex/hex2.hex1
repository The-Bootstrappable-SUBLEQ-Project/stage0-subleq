# hex1
# Step 0: Processed 1640 lines
# Step 1: Found 116 symbols
# Step 2: Now with 125 symbols and 1086 references
# Step 3: Now with 175 symbols and 1873 lines
# Step 4: Current size is 17904 bytes
# Step 5: Size is now 18280 bytes
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
; var FREE_START 1000000
:aa :ab :ac :ad :ae :af :ag :ah :ai &aa &aa &aj ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:aj :al &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Keep a backup of c for INPUT_LABEL
; var c2 0
# MSQ_START 0 mov c2 c tmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
&ak &an ?+8 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c2 tmp
# MSQ_START 2 zero c2
&ao &ao ?+8 ; relsq c2 c2 1
# MSQ_END 2 zero
# MSQ_START 2 sub c2 tmp
&ao &ak ?+8 ; relsq c2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Handle NUL ~ "
# MSQ_START 0 decleq c 22 MAIN
&an &ap &al ; lblsq c CONST_22 MAIN
# MSQ_END 0 decleq

# Handle #
# MSQ_START 0 decleq c 1 COMMENT
&an &aq &ar ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle $ and %
# MSQ_START 0 decleq c 2 MAIN
&an &as &al ; lblsq c CONST_2 MAIN
# MSQ_END 0 decleq

# Handle &
# MSQ_START 0 decleq c 1 INPUT_LABEL
&an &aq &at ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ' ~ /
# MSQ_START 0 decleq c 9 MAIN
&an &au &al ; lblsq c CONST_9 MAIN
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
&av &am ?+8 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a WRITE
&an &aw &ax ; lblsq c CONST_A WRITE
# MSQ_END 0 decleq

# Handle :
# MSQ_START 0 decleq c 1 INPUT_LABEL
&an &aq &at ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ;
# MSQ_START 0 decleq c 1 COMMENT
&an &aq &ar ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle < ~ >
# MSQ_START 0 decleq c 3 MAIN
&an &ay &al ; lblsq c CONST_3 MAIN
# MSQ_END 0 decleq

# Handle ?
# MSQ_START 0 decleq c 1 HANDLE_REL
&an &aq &az ; lblsq c CONST_1 HANDLE_REL
# MSQ_END 0 decleq

# Handle @
# MSQ_START 0 decleq c 1 MAIN
&an &aq &al ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&av &au ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
&an &aA &ax ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a MAIN
&an &aB &al ; lblsq c CONST_1A MAIN
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&av &au ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
&an &aA &ax ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle g ~ }
# MSQ_START 0 decleq c 17 MAIN
&an &aC &al ; lblsq c CONST_17 MAIN
# MSQ_END 0 decleq

# Handle ~ and DEL (0x7f)
# MSQ_START 0 lbljmp RESOLVE_REF
&aa &aa &aD ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# COMMENT ignores characters until \r or \n is fed
; label COMMENT
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:ar &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp
# MSQ_START 0 decleq c 9 COMMENT
&an &au &ar ; lblsq c CONST_9 COMMENT
# MSQ_END 0 decleq
# Handle LF
# MSQ_START 0 decleq c 1 MAIN
&an &aq &al ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 decleq c 2 COMMENT
&an &as &ar ; lblsq c CONST_2 COMMENT
# MSQ_END 0 decleq
# Handle CR
# MSQ_START 0 decleq c 1 MAIN
&an &aq &al ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COMMENT
&aa &aa &ar ; lblsq ZERO ZERO COMMENT
# MSQ_END 0 lbljmp


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
:az &aE &aE ?+8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Handle NUL ~ ,
# MSQ_START 0 decleq c 2c REL_INP
&an &aF &aG ; lblsq c CONST_2C REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 inc isNeg 1
# MSQ_START 1 dec isNeg -1
&aE &am ?+8 ; relsq isNeg CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# Handle -
# MSQ_START 0 decleq c 1 REL_INP
&an &aq &aG ; lblsq c CONST_1 REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
&aE &aE ?+8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label REL_INP
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:aG &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar

# Handle NUL ~ /
# MSQ_START 0 decleq c 2f REL_NEG
&an &aH &aI ; lblsq c CONST_2F REL_NEG
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
&av &am ?+8 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a REL_WRITE
&an &aw &aJ ; lblsq c CONST_A REL_WRITE
# MSQ_END 0 decleq

# Handle : ~ @
# MSQ_START 0 decleq c 7 REL_NEG
&an &aK &aI ; lblsq c CONST_7 REL_NEG
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&av &au ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
&an &aA &aJ ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a REL_NEG
&an &aB &aI ; lblsq c CONST_1A REL_NEG
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&av &av ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&av &an ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&av &au ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
&an &aA &aJ ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle g ~ DEL
# MSQ_START 0 lbljmp REL_INP
&aa &aa &aG ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

; label REL_WRITE
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
:aJ &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
&aL &av ?+8 ; relsq cur val 1
# MSQ_END 0 sub
# MSQ_START 0 lbljmp REL_INP
&aa &aa &aG ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

# Negate cur if the relative jump is negative
; label REL_NEG
# MSQ_START 0 decleq isNeg 0 REL_FIN
:aI &aE &aM &aN ; lblsq isNeg CONST_0 REL_FIN
# MSQ_END 0 decleq
# MSQ_START 0 neg cur tmp tmp2
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 mov cur tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg cur tmp2
&aL &aL ?+8 ; relsq cur cur 1
&aL &aO ?+8 ; relsq cur tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_END 0 neg

; label REL_FIN
# MSQ_START 0 add cur codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
:aN &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&ak &aP ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 lbljmp WRITE_QWORD
&aa &aa &aQ ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp

# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

; var lblArrStart 300000
; addr lblArrNext 300000
; var lblCount 0

; var refArrStart 400000
; addr refArrNext 400000
; var refCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# MSQ_START 0 decleq c2 26 RECORD_REF
:at &ao &aR &aS ; lblsq c2 CONST_26 RECORD_REF
# MSQ_END 0 decleq

# Handle label (:)
# MSQ_START 0 inc lblCount 1
# MSQ_START 1 dec lblCount -1
&aT &am ?+8 ; relsq lblCount CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 alloc_str_const lblArrNext 800 tmp
# MSQ_START 1 malloc_const lblArrNext 800 tmp
# MSQ_START 2 malloc lblArrNext CONST_800 tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aU ?+8 ; relsq tmp FREE_START 1
:aV 0000000000300000 :aW 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:aX 0000000000300000 &ak ?+8 ; relsq lblArrNext tmp 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aY ?+8 ; relsq tmp CONST_800 1
&aU &ak ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr lblArrNext 8
&aV &aZ ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&aW &aZ ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&aX &aZ ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&ba &aZ ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&bb &aZ ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&bc &aZ ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&bd &aZ ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&be &aZ ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&bf &aZ ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&bg &aZ ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&bh &aZ ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&bi &aZ ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&bj &aZ ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&bk &aZ ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&bl &aZ ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero lblArrNext
# MSQ_START 2 sub lblArrNext lblArrNext
:ba 0000000000300000 :bb 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr lblArrNext 8
&aV &aZ ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&aW &aZ ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&aX &aZ ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&ba &aZ ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&bb &aZ ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&bc &aZ ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&bd &aZ ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&be &aZ ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&bf &aZ ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&bg &aZ ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&bh &aZ ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&bi &aZ ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&bj &aZ ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&bk &aZ ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&bl &aZ ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov lblArrNext CONST_800 tmp
# MSQ_START 2 movneg tmp CONST_800
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aY ?+8 ; relsq tmp CONST_800 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg lblArrNext tmp
:bc 0000000000300000 :bd 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:be 0000000000300000 &ak ?+8 ; relsq lblArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lblArrNext 10
&aV &bm ?+8 ; relsq lblArrNext_addrRef_0 CONST_10 1
&aW &bm ?+8 ; relsq lblArrNext_addrRef_1 CONST_10 1
&aX &bm ?+8 ; relsq lblArrNext_addrRef_2 CONST_10 1
&ba &bm ?+8 ; relsq lblArrNext_addrRef_3 CONST_10 1
&bb &bm ?+8 ; relsq lblArrNext_addrRef_4 CONST_10 1
&bc &bm ?+8 ; relsq lblArrNext_addrRef_5 CONST_10 1
&bd &bm ?+8 ; relsq lblArrNext_addrRef_6 CONST_10 1
&be &bm ?+8 ; relsq lblArrNext_addrRef_7 CONST_10 1
&bf &bm ?+8 ; relsq lblArrNext_addrRef_8 CONST_10 1
&bg &bm ?+8 ; relsq lblArrNext_addrRef_9 CONST_10 1
&bh &bm ?+8 ; relsq lblArrNext_addrRef_10 CONST_10 1
&bi &bm ?+8 ; relsq lblArrNext_addrRef_11 CONST_10 1
&bj &bm ?+8 ; relsq lblArrNext_addrRef_12 CONST_10 1
&bk &bm ?+8 ; relsq lblArrNext_addrRef_13 CONST_10 1
&bl &bm ?+8 ; relsq lblArrNext_addrRef_14 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_token lblArrNext tmp tmp2
; addr inp_token_0_str 0
# MSQ_START 1 setaddr inp_token_0_str lblArrNext tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str_addrRef_0 tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &bn ?+8 ; relsq tmp2 inp_token_0_str_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp lblArrNext
&ak :bf 0000000000300000 ?+8 ; relsq tmp lblArrNext 1
# MSQ_END 2 sub
&bn &ak ?+8 ; relsq inp_token_0_str_addrRef_0 tmp 1
&bo &ak ?+8 ; relsq inp_token_0_str_addrRef_1 tmp 1
&bp &ak ?+8 ; relsq inp_token_0_str_addrRef_2 tmp 1
&bq &ak ?+8 ; relsq inp_token_0_str_addrRef_3 tmp 1
&br &ak ?+8 ; relsq inp_token_0_str_addrRef_4 tmp 1
&bs &ak ?+8 ; relsq inp_token_0_str_addrRef_5 tmp 1
# MSQ_END 1 setaddr
; var inp_token_0_len 0
# MSQ_START 1 zero inp_token_0_len
# MSQ_START 2 sub inp_token_0_len inp_token_0_len
&bt &bt ?+8 ; relsq inp_token_0_len inp_token_0_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_TOKEN_0_LOOP
# MSQ_START 1 getchar inp_token_0_str tmp
# MSQ_START 2 set tmp 1
:bu &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_token_0_str tmp
:bn &ab :bo &ab ?+8 ; relsq inp_token_0_str inp_token_0_str 1
:bp &ab &ak ?+8 ; relsq inp_token_0_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bq &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_20
&ak &bv ?+8 ; relsq tmp CONST_20 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bw ; lblsq tmp2 CONST_-1 JZ_0_END
&ak &am &bx ; lblsq tmp CONST_-1 JZ_0_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &by ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
:bx &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_0_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
:bw &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :br &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
&ak &bz ?+8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bA ; lblsq tmp2 CONST_-1 JZ_1_END
&ak &am &bB ; lblsq tmp CONST_-1 JZ_1_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &by ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
:bB &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_1_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
:bA &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bs &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
&ak &aw ?+8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &bC ; lblsq tmp2 CONST_-1 JZ_2_END
&ak &am &bD ; lblsq tmp CONST_-1 JZ_2_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &by ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
:bD &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_2_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_token_0_len 1
# MSQ_START 2 dec inp_token_0_len -1
:bC &bt &am ?+8 ; relsq inp_token_0_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_token_0_str 8
&bn &aZ ?+8 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
&bo &aZ ?+8 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
&bp &aZ ?+8 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
&bq &aZ ?+8 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
&br &aZ ?+8 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
&bs &aZ ?+8 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_TOKEN_0_LOOP
&aa &aa &bu ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
# MSQ_END 1 lbljmp
; label INP_TOKEN_0_TERM
# MSQ_START 1 decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
:by &bt &aM &bu ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 incaddr lblArrNext 8
&aV &aZ ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&aW &aZ ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&aX &aZ ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&ba &aZ ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&bb &aZ ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&bc &aZ ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&bd &aZ ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&be &aZ ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&bf &aZ ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&bg &aZ ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&bh &aZ ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&bi &aZ ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&bj &aZ ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&bk &aZ ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&bl &aZ ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov lblArrNext inp_token_0_len tmp
# MSQ_START 2 movneg tmp inp_token_0_len
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &bt ?+8 ; relsq tmp inp_token_0_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg lblArrNext tmp
:bg 0000000000300000 :bh 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:bi 0000000000300000 &ak ?+8 ; relsq lblArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lblArrNext 8
&aV &bE ?+8 ; relsq lblArrNext_addrRef_0 CONST_8 1
&aW &bE ?+8 ; relsq lblArrNext_addrRef_1 CONST_8 1
&aX &bE ?+8 ; relsq lblArrNext_addrRef_2 CONST_8 1
&ba &bE ?+8 ; relsq lblArrNext_addrRef_3 CONST_8 1
&bb &bE ?+8 ; relsq lblArrNext_addrRef_4 CONST_8 1
&bc &bE ?+8 ; relsq lblArrNext_addrRef_5 CONST_8 1
&bd &bE ?+8 ; relsq lblArrNext_addrRef_6 CONST_8 1
&be &bE ?+8 ; relsq lblArrNext_addrRef_7 CONST_8 1
&bf &bE ?+8 ; relsq lblArrNext_addrRef_8 CONST_8 1
&bg &bE ?+8 ; relsq lblArrNext_addrRef_9 CONST_8 1
&bh &bE ?+8 ; relsq lblArrNext_addrRef_10 CONST_8 1
&bi &bE ?+8 ; relsq lblArrNext_addrRef_11 CONST_8 1
&bj &bE ?+8 ; relsq lblArrNext_addrRef_12 CONST_8 1
&bk &bE ?+8 ; relsq lblArrNext_addrRef_13 CONST_8 1
&bl &bE ?+8 ; relsq lblArrNext_addrRef_14 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_token
# MSQ_START 0 incaddr lblArrNext 18
&aV &bF ?+8 ; relsq lblArrNext_addrRef_0 CONST_-18 1
&aW &bF ?+8 ; relsq lblArrNext_addrRef_1 CONST_-18 1
&aX &bF ?+8 ; relsq lblArrNext_addrRef_2 CONST_-18 1
&ba &bF ?+8 ; relsq lblArrNext_addrRef_3 CONST_-18 1
&bb &bF ?+8 ; relsq lblArrNext_addrRef_4 CONST_-18 1
&bc &bF ?+8 ; relsq lblArrNext_addrRef_5 CONST_-18 1
&bd &bF ?+8 ; relsq lblArrNext_addrRef_6 CONST_-18 1
&be &bF ?+8 ; relsq lblArrNext_addrRef_7 CONST_-18 1
&bf &bF ?+8 ; relsq lblArrNext_addrRef_8 CONST_-18 1
&bg &bF ?+8 ; relsq lblArrNext_addrRef_9 CONST_-18 1
&bh &bF ?+8 ; relsq lblArrNext_addrRef_10 CONST_-18 1
&bi &bF ?+8 ; relsq lblArrNext_addrRef_11 CONST_-18 1
&bj &bF ?+8 ; relsq lblArrNext_addrRef_12 CONST_-18 1
&bk &bF ?+8 ; relsq lblArrNext_addrRef_13 CONST_-18 1
&bl &bF ?+8 ; relsq lblArrNext_addrRef_14 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov lblArrNext codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&ak &aP ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg lblArrNext tmp
# MSQ_START 2 zero lblArrNext
:bj 0000000000300000 :bk 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
# MSQ_END 2 zero
# MSQ_START 2 sub lblArrNext tmp
:bl 0000000000300000 &ak ?+8 ; relsq lblArrNext tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 incaddr lblArrNext 8
&aV &aZ ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&aW &aZ ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&aX &aZ ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&ba &aZ ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&bb &aZ ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&bc &aZ ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&bd &aZ ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&be &aZ ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&bf &aZ ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&bg &aZ ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&bh &aZ ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&bi &aZ ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&bj &aZ ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&bk &aZ ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&bl &aZ ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp MAIN
&aa &aa &al ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp

# Handle reference (&)
; label RECORD_REF
# MSQ_START 0 inc refCount 1
# MSQ_START 1 dec refCount -1
:aS &bG &am ?+8 ; relsq refCount CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 alloc_str_const refArrNext 800 tmp
# MSQ_START 1 malloc_const refArrNext 800 tmp
# MSQ_START 2 malloc refArrNext CONST_800 tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aU ?+8 ; relsq tmp FREE_START 1
:bH 0000000000400000 :bI 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:bJ 0000000000400000 &ak ?+8 ; relsq refArrNext tmp 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aY ?+8 ; relsq tmp CONST_800 1
&aU &ak ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr refArrNext 8
&bH &aZ ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&bI &aZ ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&bJ &aZ ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&bK &aZ ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&bL &aZ ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&bM &aZ ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&bN &aZ ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&bO &aZ ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&bP &aZ ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&bQ &aZ ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&bR &aZ ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&bS &aZ ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&bT &aZ ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&bU &aZ ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&bV &aZ ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero refArrNext
# MSQ_START 2 sub refArrNext refArrNext
:bK 0000000000400000 :bL 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr refArrNext 8
&bH &aZ ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&bI &aZ ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&bJ &aZ ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&bK &aZ ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&bL &aZ ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&bM &aZ ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&bN &aZ ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&bO &aZ ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&bP &aZ ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&bQ &aZ ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&bR &aZ ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&bS &aZ ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&bT &aZ ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&bU &aZ ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&bV &aZ ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov refArrNext CONST_800 tmp
# MSQ_START 2 movneg tmp CONST_800
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aY ?+8 ; relsq tmp CONST_800 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg refArrNext tmp
:bM 0000000000400000 :bN 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:bO 0000000000400000 &ak ?+8 ; relsq refArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr refArrNext 10
&bH &bm ?+8 ; relsq refArrNext_addrRef_0 CONST_10 1
&bI &bm ?+8 ; relsq refArrNext_addrRef_1 CONST_10 1
&bJ &bm ?+8 ; relsq refArrNext_addrRef_2 CONST_10 1
&bK &bm ?+8 ; relsq refArrNext_addrRef_3 CONST_10 1
&bL &bm ?+8 ; relsq refArrNext_addrRef_4 CONST_10 1
&bM &bm ?+8 ; relsq refArrNext_addrRef_5 CONST_10 1
&bN &bm ?+8 ; relsq refArrNext_addrRef_6 CONST_10 1
&bO &bm ?+8 ; relsq refArrNext_addrRef_7 CONST_10 1
&bP &bm ?+8 ; relsq refArrNext_addrRef_8 CONST_10 1
&bQ &bm ?+8 ; relsq refArrNext_addrRef_9 CONST_10 1
&bR &bm ?+8 ; relsq refArrNext_addrRef_10 CONST_10 1
&bS &bm ?+8 ; relsq refArrNext_addrRef_11 CONST_10 1
&bT &bm ?+8 ; relsq refArrNext_addrRef_12 CONST_10 1
&bU &bm ?+8 ; relsq refArrNext_addrRef_13 CONST_10 1
&bV &bm ?+8 ; relsq refArrNext_addrRef_14 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_token refArrNext tmp tmp2
; addr inp_token_1_str 0
# MSQ_START 1 setaddr inp_token_1_str refArrNext tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str_addrRef_0 tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &bW ?+8 ; relsq tmp2 inp_token_1_str_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp refArrNext
&ak :bP 0000000000400000 ?+8 ; relsq tmp refArrNext 1
# MSQ_END 2 sub
&bW &ak ?+8 ; relsq inp_token_1_str_addrRef_0 tmp 1
&bX &ak ?+8 ; relsq inp_token_1_str_addrRef_1 tmp 1
&bY &ak ?+8 ; relsq inp_token_1_str_addrRef_2 tmp 1
&bZ &ak ?+8 ; relsq inp_token_1_str_addrRef_3 tmp 1
&ca &ak ?+8 ; relsq inp_token_1_str_addrRef_4 tmp 1
&cb &ak ?+8 ; relsq inp_token_1_str_addrRef_5 tmp 1
# MSQ_END 1 setaddr
; var inp_token_1_len 0
# MSQ_START 1 zero inp_token_1_len
# MSQ_START 2 sub inp_token_1_len inp_token_1_len
&cc &cc ?+8 ; relsq inp_token_1_len inp_token_1_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_TOKEN_1_LOOP
# MSQ_START 1 getchar inp_token_1_str tmp
# MSQ_START 2 set tmp 1
:cd &ak &ak ?+8 ; relsq tmp tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
&ak 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_token_1_str tmp
:bW &ac :bX &ac ?+8 ; relsq inp_token_1_str inp_token_1_str 1
:bY &ac &ak ?+8 ; relsq inp_token_1_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_token_1_str 20 INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :bZ &ac ?+8 ; relsq tmp2 inp_token_1_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_20
&ak &bv ?+8 ; relsq tmp CONST_20 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &ce ; lblsq tmp2 CONST_-1 JZ_3_END
&ak &am &cf ; lblsq tmp CONST_-1 JZ_3_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cg ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_3_REVERT_A
:cf &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_3_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_1_str d INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
:ce &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :ca &ac ?+8 ; relsq tmp2 inp_token_1_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
&ak &bz ?+8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &ch ; lblsq tmp2 CONST_-1 JZ_4_END
&ak &am &ci ; lblsq tmp CONST_-1 JZ_4_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cg ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_4_REVERT_A
:ci &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_4_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_1_str a INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
:ch &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :cb &ac ?+8 ; relsq tmp2 inp_token_1_str 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
&ak &aw ?+8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &cj ; lblsq tmp2 CONST_-1 JZ_5_END
&ak &am &ck ; lblsq tmp CONST_-1 JZ_5_REVERT_A
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cg ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_5_REVERT_A
:ck &ak &aq ?+8 ; relsq tmp CONST_1 1
; label JZ_5_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_token_1_len 1
# MSQ_START 2 dec inp_token_1_len -1
:cj &cc &am ?+8 ; relsq inp_token_1_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_token_1_str 8
&bW &aZ ?+8 ; relsq inp_token_1_str_addrRef_0 CONST_-8 1
&bX &aZ ?+8 ; relsq inp_token_1_str_addrRef_1 CONST_-8 1
&bY &aZ ?+8 ; relsq inp_token_1_str_addrRef_2 CONST_-8 1
&bZ &aZ ?+8 ; relsq inp_token_1_str_addrRef_3 CONST_-8 1
&ca &aZ ?+8 ; relsq inp_token_1_str_addrRef_4 CONST_-8 1
&cb &aZ ?+8 ; relsq inp_token_1_str_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_TOKEN_1_LOOP
&aa &aa &cd ; lblsq ZERO ZERO INP_TOKEN_1_LOOP
# MSQ_END 1 lbljmp
; label INP_TOKEN_1_TERM
# MSQ_START 1 decleq inp_token_1_len 0 INP_TOKEN_1_LOOP
:cg &cc &aM &cd ; lblsq inp_token_1_len CONST_0 INP_TOKEN_1_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 incaddr refArrNext 8
&bH &aZ ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&bI &aZ ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&bJ &aZ ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&bK &aZ ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&bL &aZ ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&bM &aZ ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&bN &aZ ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&bO &aZ ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&bP &aZ ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&bQ &aZ ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&bR &aZ ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&bS &aZ ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&bT &aZ ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&bU &aZ ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&bV &aZ ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov refArrNext inp_token_1_len tmp
# MSQ_START 2 movneg tmp inp_token_1_len
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cc ?+8 ; relsq tmp inp_token_1_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg refArrNext tmp
:bQ 0000000000400000 :bR 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:bS 0000000000400000 &ak ?+8 ; relsq refArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr refArrNext 8
&bH &bE ?+8 ; relsq refArrNext_addrRef_0 CONST_8 1
&bI &bE ?+8 ; relsq refArrNext_addrRef_1 CONST_8 1
&bJ &bE ?+8 ; relsq refArrNext_addrRef_2 CONST_8 1
&bK &bE ?+8 ; relsq refArrNext_addrRef_3 CONST_8 1
&bL &bE ?+8 ; relsq refArrNext_addrRef_4 CONST_8 1
&bM &bE ?+8 ; relsq refArrNext_addrRef_5 CONST_8 1
&bN &bE ?+8 ; relsq refArrNext_addrRef_6 CONST_8 1
&bO &bE ?+8 ; relsq refArrNext_addrRef_7 CONST_8 1
&bP &bE ?+8 ; relsq refArrNext_addrRef_8 CONST_8 1
&bQ &bE ?+8 ; relsq refArrNext_addrRef_9 CONST_8 1
&bR &bE ?+8 ; relsq refArrNext_addrRef_10 CONST_8 1
&bS &bE ?+8 ; relsq refArrNext_addrRef_11 CONST_8 1
&bT &bE ?+8 ; relsq refArrNext_addrRef_12 CONST_8 1
&bU &bE ?+8 ; relsq refArrNext_addrRef_13 CONST_8 1
&bV &bE ?+8 ; relsq refArrNext_addrRef_14 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_token
# MSQ_START 0 incaddr refArrNext 18
&bH &bF ?+8 ; relsq refArrNext_addrRef_0 CONST_-18 1
&bI &bF ?+8 ; relsq refArrNext_addrRef_1 CONST_-18 1
&bJ &bF ?+8 ; relsq refArrNext_addrRef_2 CONST_-18 1
&bK &bF ?+8 ; relsq refArrNext_addrRef_3 CONST_-18 1
&bL &bF ?+8 ; relsq refArrNext_addrRef_4 CONST_-18 1
&bM &bF ?+8 ; relsq refArrNext_addrRef_5 CONST_-18 1
&bN &bF ?+8 ; relsq refArrNext_addrRef_6 CONST_-18 1
&bO &bF ?+8 ; relsq refArrNext_addrRef_7 CONST_-18 1
&bP &bF ?+8 ; relsq refArrNext_addrRef_8 CONST_-18 1
&bQ &bF ?+8 ; relsq refArrNext_addrRef_9 CONST_-18 1
&bR &bF ?+8 ; relsq refArrNext_addrRef_10 CONST_-18 1
&bS &bF ?+8 ; relsq refArrNext_addrRef_11 CONST_-18 1
&bT &bF ?+8 ; relsq refArrNext_addrRef_12 CONST_-18 1
&bU &bF ?+8 ; relsq refArrNext_addrRef_13 CONST_-18 1
&bV &bF ?+8 ; relsq refArrNext_addrRef_14 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov refArrNext codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&ak &aP ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refArrNext tmp
# MSQ_START 2 zero refArrNext
:bT 0000000000400000 :bU 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
# MSQ_END 2 zero
# MSQ_START 2 sub refArrNext tmp
:bV 0000000000400000 &ak ?+8 ; relsq refArrNext tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 incaddr refArrNext 8
&bH &aZ ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&bI &aZ ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&bJ &aZ ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&bK &aZ ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&bL &aZ ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&bM &aZ ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&bN &aZ ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&bO &aZ ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&bP &aZ ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&bQ &aZ ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&bR &aZ ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&bS &aZ ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&bT &aZ ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&bU &aZ ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&bV &aZ ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp WRITE_QWORD
&aa &aa &aQ ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
:ax &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aL &ak ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
&aL &av ?+8 ; relsq cur val 1
# MSQ_END 0 sub

# i will turn positive every 16 iterations
; var i -f
# MSQ_START 0 incleq i 1 MAIN
# MSQ_START 1 decleq i -1 MAIN
&cl &am &al ; lblsq i CONST_-1 MAIN
# MSQ_END 1 decleq
# MSQ_END 0 incleq
# MSQ_START 0 dec i 10
&cl &bm ?+8 ; relsq i CONST_10 1
# MSQ_END 0 dec

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# MSQ_START 0 mov bufEnd cur tmp
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
:aQ &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
&ak &aL ?+8 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg bufEnd tmp
# MSQ_START 2 zero bufEnd
:cm 0000000000100000 :cn 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
# MSQ_END 2 zero
# MSQ_START 2 sub bufEnd tmp
:co 0000000000100000 &ak ?+8 ; relsq bufEnd tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 zero cur
# MSQ_START 1 sub cur cur
&aL &aL ?+8 ; relsq cur cur 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr bufEnd -8
&cm &aZ ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&cn &aZ ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&co &aZ ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc codeLen 8
# MSQ_START 1 dec codeLen -8
&aP &aZ ?+8 ; relsq codeLen CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp MAIN
&aa &aa &al ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp


# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var refsToResolve 0
# MSQ_START 0 mov refsToResolve refCount tmp
# MSQ_START 1 movneg tmp refCount
# MSQ_START 2 zero tmp
:aD &ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp refCount
&ak &bG ?+8 ; relsq tmp refCount 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refsToResolve tmp
# MSQ_START 2 zero refsToResolve
&cp &cp ?+8 ; relsq refsToResolve refsToResolve 1
# MSQ_END 2 zero
# MSQ_START 2 sub refsToResolve tmp
&cp &ak ?+8 ; relsq refsToResolve tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
; addr curRef 400000

; label RESOLVE_REF_LOOP
# MSQ_START 0 decleq refsToResolve 0 PRINT
:cq &cp &aM &cr ; lblsq refsToResolve CONST_0 PRINT
# MSQ_END 0 decleq
# MSQ_START 0 dec refsToResolve 1
&cp &aq ?+8 ; relsq refsToResolve CONST_1 1
# MSQ_END 0 dec

; addr curFindLabel 0
# MSQ_START 0 setaddr curFindLabel lblArrStart tmp tmp2
# MSQ_START 1 mov tmp curFindLabel_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curFindLabel_addrRef_0
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cs ?+8 ; relsq tmp2 curFindLabel_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp lblArrStart
&ak &ct ?+8 ; relsq tmp lblArrStart 1
# MSQ_END 1 sub
&cs &ak ?+8 ; relsq curFindLabel_addrRef_0 tmp 1
&cu &ak ?+8 ; relsq curFindLabel_addrRef_1 tmp 1
# MSQ_END 0 setaddr

; label RESOLVE_REF_FIND_LABEL
# MSQ_START 0 strcmp_const curRef curFindLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_const_0_a 0
# MSQ_START 1 copyaddr strcmp_const_0_a curRef tmp tmp2
# MSQ_START 2 setaddr strcmp_const_0_a curRef_addrRef_0 tmp tmp2
:cv &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cw ?+8 ; relsq tmp2 strcmp_const_0_a_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &cx ?+8 ; relsq tmp curRef_addrRef_0 1
&cw &ak ?+8 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
&cy &ak ?+8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
&cz &ak ?+8 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_0_a 8
&cw &aZ ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
&cy &aZ ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
&cz &aZ ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr curFindLabel 8
&cs &aZ ?+8 ; relsq curFindLabel_addrRef_0 CONST_-8 1
&cu &aZ ?+8 ; relsq curFindLabel_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_0_a curFindLabel STRCMP_CONST_0_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_a tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :cw &ae ?+8 ; relsq tmp2 strcmp_const_0_a 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel
&ak :cs &ad ?+8 ; relsq tmp curFindLabel 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &cA ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
&ak &am &cB ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cC ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
:cB &ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cA ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_0_len 0
# MSQ_START 1 mov strcmp_const_0_len strcmp_const_0_a tmp
# MSQ_START 2 movneg tmp strcmp_const_0_a
:cC &ak &ak ?+8 ; relsq tmp tmp 1
&ak :cy &ae ?+8 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_0_len tmp
&cD &cD ?+8 ; relsq strcmp_const_0_len strcmp_const_0_len 1
&cD &ak ?+8 ; relsq strcmp_const_0_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_0_a 8
&cw &bE ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&cy &bE ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&cz &bE ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr curFindLabel 8
&cs &bE ?+8 ; relsq curFindLabel_addrRef_0 CONST_8 1
&cu &bE ?+8 ; relsq curFindLabel_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0
# MSQ_START 1 setaddr strcmp_const_0_aStr strcmp_const_0_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr_addrRef_0 tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cE ?+8 ; relsq tmp2 strcmp_const_0_aStr_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_a
&ak :cz &ae ?+8 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 sub
&cE &ak ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_0_bStr curFindLabel tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_bStr_addrRef_0 tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cF ?+8 ; relsq tmp2 strcmp_const_0_bStr_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel
&ak :cu &ad ?+8 ; relsq tmp curFindLabel 1
# MSQ_END 2 sub
&cF &ak ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_0_LOOP
# MSQ_START 1 decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
:cG &cD &aM &cH ; lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_0_len 1
&cD &aq ?+8 ; relsq strcmp_const_0_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO :cE &af ?+8 ; relsq tmp2 strcmp_const_0_aStr 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_bStr
&ak :cF &ag ?+8 ; relsq tmp strcmp_const_0_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_END tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&aO &am &cI ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
&ak &am &cJ ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
&ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cK ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
:cJ &ak &aq ?+8 ; relsq tmp CONST_1 1
&aa &aa &cI ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_0_aStr 8
:cK &cE &aZ ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_0_bStr 8
&cF &aZ ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_0_LOOP
&aa &aa &cG ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_0_REVERT_ADDR
# MSQ_START 1 decaddr curFindLabel 8
:cA &cs &bE ?+8 ; relsq curFindLabel_addrRef_0 CONST_8 1
&cu &bE ?+8 ; relsq curFindLabel_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_0_END
# MSQ_END 0 strcmp_const

# This is the wrong label. Try the next one
# MSQ_START 0 incaddr curFindLabel 20
:cI &cs &cL ?+8 ; relsq curFindLabel_addrRef_0 CONST_-20 1
&cu &cL ?+8 ; relsq curFindLabel_addrRef_1 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp RESOLVE_REF_FIND_LABEL
&aa &aa &cv ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL
# MSQ_END 0 lbljmp

; label RESOLVE_REF_FOUND_LABEL
; addr curLabel 0
# MSQ_START 0 copyaddr curLabel curFindLabel tmp tmp2
# MSQ_START 1 setaddr curLabel curFindLabel_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLabel_addrRef_0 tmp2
:cH &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cM ?+8 ; relsq tmp2 curLabel_addrRef_0 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel_addrRef_0
&ak &cs ?+8 ; relsq tmp curFindLabel_addrRef_0 1
# MSQ_END 2 sub
&cM &ak ?+8 ; relsq curLabel_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 incaddr curLabel 18
&cM &bF ?+8 ; relsq curLabel_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr

# Fetch the reference address and point curRef to the next reference
# MSQ_START 0 incaddr curRef 18
&cx &bF ?+8 ; relsq curRef_addrRef_0 CONST_-18 1
&cN &bF ?+8 ; relsq curRef_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 add curRef bufStart tmp
# MSQ_START 1 movneg tmp bufStart
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp bufStart
&ak &cO ?+8 ; relsq tmp bufStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub curRef tmp
:cx 0000000000400000 &ak ?+8 ; relsq curRef tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
; addr refAt 0
# MSQ_START 0 setaddr refAt curRef tmp tmp2
# MSQ_START 1 mov tmp refAt_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refAt_addrRef_0
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &cP ?+8 ; relsq tmp2 refAt_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curRef
&ak :cN 0000000000400000 ?+8 ; relsq tmp curRef 1
# MSQ_END 1 sub
&cP &ak ?+8 ; relsq refAt_addrRef_0 tmp 1
&cQ &ak ?+8 ; relsq refAt_addrRef_1 tmp 1
&cR &ak ?+8 ; relsq refAt_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 incaddr curRef 8
&cx &aZ ?+8 ; relsq curRef_addrRef_0 CONST_-8 1
&cN &aZ ?+8 ; relsq curRef_addrRef_1 CONST_-8 1
# MSQ_END 0 incaddr

# MSQ_START 0 mov refAt curLabel tmp
# MSQ_START 1 movneg tmp curLabel
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp curLabel
&ak :cM &ah ?+8 ; relsq tmp curLabel 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refAt tmp
# MSQ_START 2 zero refAt
:cP &ai :cQ &ai ?+8 ; relsq refAt refAt 1
# MSQ_END 2 zero
# MSQ_START 2 sub refAt tmp
:cR &ai &ak ?+8 ; relsq refAt tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 lbljmp RESOLVE_REF_LOOP
&aa &aa &cq ; lblsq ZERO ZERO RESOLVE_REF_LOOP
# MSQ_END 0 lbljmp


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# MSQ_START 0 set i 8
# MSQ_START 1 zero i
# MSQ_START 2 sub i i
:cr &cl &cl ?+8 ; relsq i i 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc i 8
# MSQ_START 2 dec i -8
&cl &aZ ?+8 ; relsq i CONST_-8 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 decaddr charToPrint 8
&cS &bE ?+8 ; relsq charToPrint_addrRef_0 CONST_8 1
# MSQ_END 0 decaddr

; label PRINT_CHAR_START
# MSQ_START 0 decaddr charToPrint -1
:cT &cS &am ?+8 ; relsq charToPrint_addrRef_0 CONST_-1 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov c charToPrint tmp
# MSQ_START 1 movneg tmp charToPrint
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp charToPrint
&ak :cS 0000000000100000 ?+8 ; relsq tmp charToPrint 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# MSQ_START 1 zero mod_256_0_isNeg
# MSQ_START 2 sub mod_256_0_isNeg mod_256_0_isNeg
&cU &cU ?+8 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn c MOD_256_0_IS_NEG tmp tmp2
# MSQ_START 2 jl c ZERO MOD_256_0_IS_NEG tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
&ak &aa &cV ; lblsq tmp ZERO MOD_256_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp MOD_256_0_START
&aa &aa &cW ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_IS_NEG
# MSQ_START 1 inc mod_256_0_isNeg 1
# MSQ_START 2 dec mod_256_0_isNeg -1
:cV &cU &am ?+8 ; relsq mod_256_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg c tmp tmp2
# MSQ_START 2 movneg tmp c
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 mov c tmp tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &ak ?+8 ; relsq tmp2 tmp 1
&an &an ?+8 ; relsq c c 1
&an &aO ?+8 ; relsq c tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label MOD_256_0_START
; var mod_256_0_subber 0
# MSQ_START 1 set mod_256_0_subber 100
# MSQ_START 2 zero mod_256_0_subber
:cW &cX &cX ?+8 ; relsq mod_256_0_subber mod_256_0_subber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_subber 100
&cX &cY ?+8 ; relsq mod_256_0_subber CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2
# MSQ_START 2 mov tmp c tmp2
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
&ak &cX &cZ ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# MSQ_END 1 jl
; var mod_256_0_nextSubber 0
# MSQ_START 1 set mod_256_0_nextSubber 10000
# MSQ_START 2 zero mod_256_0_nextSubber
&da &da ?+8 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_nextSubber 10000
&da &db ?+8 ; relsq mod_256_0_nextSubber CONST_-10000 1
# MSQ_END 2 inc
# MSQ_END 1 set
; label MOD_256_0_MULT_SUBBER_START
# MSQ_START 1 jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2
# MSQ_START 2 mov tmp c tmp2
:dc &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
&ak &am ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
&ak &da &dd ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# MSQ_END 1 jl
# MSQ_START 1 mul_256 mod_256_0_subber tmp
# MSQ_START 2 mul_16 mod_256_0_subber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_subber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
&cX &ak ?+8 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 mul_256 mod_256_0_nextSubber tmp
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&ak &da ?+8 ; relsq tmp mod_256_0_nextSubber 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
&da &ak ?+8 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
&da &aM &dd ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp MOD_256_0_MULT_SUBBER_START
&aa &aa &dc ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
# MSQ_END 1 lbljmp
; label MOD_256_0_SUBTRACT_A
:dd &an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&an &cX &de ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# MSQ_START 1 lbljmp MOD_256_0_SUBTRACT_A
&aa &aa &dd ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label MOD_256_0_REVERT_SUB
# MSQ_START 1 jz c MOD_256_0_START tmp
# MSQ_START 2 movneg tmp c
:de &ak &ak ?+8 ; relsq tmp tmp 1
&ak &an ?+8 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp 1 JZ_6_END
&ak &am &df ; lblsq tmp CONST_-1 JZ_6_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq c 1 JZ_6_REVERT_A
&an &am &dg ; lblsq c CONST_-1 JZ_6_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec c 1
&an &aq ?+8 ; relsq c CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp MOD_256_0_START
&aa &aa &cW ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 2 lbljmp
; label JZ_6_REVERT_A
# MSQ_START 2 dec c 1
:dg &an &aq ?+8 ; relsq c CONST_1 1
# MSQ_END 2 dec
; label JZ_6_END
# MSQ_END 1 jz
# MSQ_START 1 add c mod_256_0_subber tmp
# MSQ_START 2 movneg tmp mod_256_0_subber
:df &ak &ak ?+8 ; relsq tmp tmp 1
&ak &cX ?+8 ; relsq tmp mod_256_0_subber 1
# MSQ_END 2 movneg
# MSQ_START 2 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 lbljmp MOD_256_0_START
&aa &aa &cW ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_CHECK_NEG
# MSQ_START 1 decleq mod_256_0_isNeg 0 MOD_256_0_END
:cZ &cU &aM &dh ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 decleq c 0 MOD_256_0_END
&an &aM &dh ; lblsq c CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp c tmp2
# MSQ_START 2 movneg tmp2 c
&aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO &an ?+8 ; relsq tmp2 c 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set c 100
# MSQ_START 2 zero c
&an &an ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 inc c 100
&an &cY ?+8 ; relsq c CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub c tmp
&an &ak ?+8 ; relsq c tmp 1
# MSQ_END 1 sub
; label MOD_256_0_END
# MSQ_END 0 mod_256
# MSQ_START 0 putchar c tmp
:dh 0000000013ed27f0 &aa ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
&ak &ak ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
&ak &an ?+8 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&ak &aq ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &ak ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 decleq i 1 PRINT_CHAR_END
&cl &aq &di ; lblsq i CONST_1 PRINT_CHAR_END
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT_CHAR_START
&aa &aa &cT ; lblsq ZERO ZERO PRINT_CHAR_START
# MSQ_END 0 lbljmp

; label PRINT_CHAR_END
# Go to the next qword
# MSQ_START 0 decaddr charToPrint -8
:di &cS &aZ ?+8 ; relsq charToPrint_addrRef_0 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decleq codeLen 8 HALT
&aP &bE &dj ; lblsq codeLen CONST_8 HALT
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT
&aa &aa &cr ; lblsq ZERO ZERO PRINT
# MSQ_END 0 lbljmp

; label HALT
# MSQ_START 0 halt tmp tmp2
# MSQ_START 1 set_safe CPU_CONTROL_START 2 tmp tmp2
# MSQ_START 2 mov tmp CPU_CONTROL_START tmp2
:dj &aO &aO ?+8 ; relsq tmp2 tmp2 1
&aO 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&ak &ak ?+8 ; relsq tmp tmp 1
&ak &aO ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 dec tmp 2
&ak &as ?+8 ; relsq tmp CONST_2 1
# MSQ_END 2 dec
# MSQ_START 2 sub CPU_CONTROL_START tmp
0000000013ee0000 &ak ?+8 ; relsq CPU_CONTROL_START tmp 1
# MSQ_END 2 sub
# MSQ_END 1 set_safe
&aa &aa ?-10 ; relsq ZERO ZERO 0
# MSQ_END 0 halt

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_800 800
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_-20 -20
; var CONST_-100 -100
; var CONST_-10000 -10000

; end
:ak 0000000000000000 ; raw 0000000000000000 # tmp
:aO 0000000000000000 ; raw 0000000000000000 # tmp2
:aU 0000000001000000 ; raw 0000000001000000 # FREE_START
:aP 0000000000000000 ; raw 0000000000000000 # codeLen
:av 0000000000000000 ; raw 0000000000000000 # val
:an 0000000000000000 ; raw 0000000000000000 # c
:ao 0000000000000000 ; raw 0000000000000000 # c2
:aE 0000000000000000 ; raw 0000000000000000 # isNeg
:ct 0000000000300000 ; raw 0000000000300000 # lblArrStart
:aT 0000000000000000 ; raw 0000000000000000 # lblCount
:dk 0000000000400000 ; raw 0000000000400000 # refArrStart
:bG 0000000000000000 ; raw 0000000000000000 # refCount
:bt 0000000000000000 ; raw 0000000000000000 # inp_token_0_len
:cc 0000000000000000 ; raw 0000000000000000 # inp_token_1_len
:aL 0000000000000000 ; raw 0000000000000000 # cur
:cl fffffffffffffff1 ; raw fffffffffffffff1 # i
:cO 0000000000100000 ; raw 0000000000100000 # bufStart
:cp 0000000000000000 ; raw 0000000000000000 # refsToResolve
:cD 0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
:cU 0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
:cX 0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
:da 0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
:am ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:ap 0000000000000022 ; raw 0000000000000022 # CONST_22
:aq 0000000000000001 ; raw 0000000000000001 # CONST_1
:as 0000000000000002 ; raw 0000000000000002 # CONST_2
:au 0000000000000009 ; raw 0000000000000009 # CONST_9
:aw 000000000000000a ; raw 000000000000000a # CONST_A
:ay 0000000000000003 ; raw 0000000000000003 # CONST_3
:aA 0000000000000006 ; raw 0000000000000006 # CONST_6
:aB 000000000000001a ; raw 000000000000001a # CONST_1A
:aC 0000000000000017 ; raw 0000000000000017 # CONST_17
:aF 000000000000002c ; raw 000000000000002c # CONST_2C
:aH 000000000000002f ; raw 000000000000002f # CONST_2F
:aK 0000000000000007 ; raw 0000000000000007 # CONST_7
:aM 0000000000000000 ; raw 0000000000000000 # CONST_0
:aR 0000000000000026 ; raw 0000000000000026 # CONST_26
:aY 0000000000000800 ; raw 0000000000000800 # CONST_800
:aZ fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bm 0000000000000010 ; raw 0000000000000010 # CONST_10
:bv 0000000000000020 ; raw 0000000000000020 # CONST_20
:bz 000000000000000d ; raw 000000000000000d # CONST_D
:bE 0000000000000008 ; raw 0000000000000008 # CONST_8
:bF ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
:cL ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:cY ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
:db ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
