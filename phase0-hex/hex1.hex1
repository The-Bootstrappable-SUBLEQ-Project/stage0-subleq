# hex1
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq. If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
:aa :ab :ac :ad &aa &aa &ae ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp
# set tmp 1
:ae :ag &af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ai &ai ?+8 ; relsq c c 1
&ai &af ?+8 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
&af &af ?+8 ; relsq tmp tmp 1
&af &ai ?+8 ; relsq tmp c 1
# movneg c2 tmp
&aj &aj ?+8 ; relsq c2 c2 1
&aj &af ?+8 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
&ai &ak &ag ; lblsq c CONST_22 MAIN

# Handle #
&ai &al &am ; lblsq c CONST_1 COMMENT

# Handle $ and %
&ai &an &ag ; lblsq c CONST_2 MAIN

# Handle &
&ai &al &ao ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
&ai &ap &ag ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ah ?+8 ; relsq val CONST_-1 1
&ai &ar &as ; lblsq c CONST_A WRITE

# Handle :
&ai &al &ao ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
&ai &al &am ; lblsq c CONST_1 COMMENT

# Handle < ~ >
&ai &at &ag ; lblsq c CONST_3 MAIN

# Handle ?
&ai &al &au ; lblsq c CONST_1 HANDLE_REL

# Handle @
&ai &al &ag ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ap ?+8 ; relsq val CONST_9 1
&ai &av &as ; lblsq c CONST_6 WRITE

# Handle G ~ `
&ai &aw &ag ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ap ?+8 ; relsq val CONST_9 1
&ai &av &as ; lblsq c CONST_6 WRITE

# Handle g ~ }
&ai &ax &ag ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
&aa &aa &ay ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp
# set tmp 1
:am &af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ai &ai ?+8 ; relsq c c 1
&ai &af ?+8 ; relsq c tmp 1
# End getchar

# putchar c tmp
&ai &ap &am ; lblsq c CONST_9 COMMENT
# Handle LF
&ai &al &ag ; lblsq c CONST_1 MAIN
&ai &an &am ; lblsq c CONST_2 COMMENT
# Handle CR
&ai &al &ag ; lblsq c CONST_1 MAIN
&aa &aa &am ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
:au &az &az ?+8 ; relsq isNeg isNeg 1

# Start getchar c tmp
# set tmp 1
&af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ai &ai ?+8 ; relsq c c 1
&ai &af ?+8 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
&ai &aA &aB ; lblsq c CONST_2C REL_INP
&az &ah ?+8 ; relsq isNeg CONST_-1 1
# Handle -
&ai &al &aB ; lblsq c CONST_1 REL_INP
&az &az ?+8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp
# set tmp 1
:aB &af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ai &ai ?+8 ; relsq c c 1
&ai &af ?+8 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
&ai &aC &aD ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ah ?+8 ; relsq val CONST_-1 1
&ai &ar &aE ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
&ai &aF &aD ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ap ?+8 ; relsq val CONST_9 1
&ai &av &aE ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
&ai &aw &aD ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
&aq &aq ?+8 ; relsq val val 1
&aq &ai ?+8 ; relsq val c 1
&aq &ap ?+8 ; relsq val CONST_9 1
&ai &av &aE ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
&aa &aa &aB ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
:aE &af &af ?+8 ; relsq tmp tmp 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&aG &af ?+8 ; relsq cur tmp 1
&aG &af ?+8 ; relsq cur tmp 1
&aG &af ?+8 ; relsq cur tmp 1
# End mul_16

&aG &aq ?+8 ; relsq cur val 1
&aa &aa &aB ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
:aD &az &aH &aI ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aG ?+8 ; relsq tmp cur 1
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &af ?+8 ; relsq tmp2 tmp 1
&aG &aG ?+8 ; relsq cur cur 1
&aG &aJ ?+8 ; relsq cur tmp2 1
# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
:aI &af &af ?+8 ; relsq tmp tmp 1
&af &aK ?+8 ; relsq tmp codeLen 1
# sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# End add

&aa &aa &aL ; lblsq ZERO ZERO WRITE_QWORD


; var labelArrStart 300000

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# Transform label name to offset
; var labelOffset 0

# Start getchar labelOffset tmp
# set tmp 1
:ao &af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg labelOffset tmp
&aM &aM ?+8 ; relsq labelOffset labelOffset 1
&aM &af ?+8 ; relsq labelOffset tmp 1
# End getchar


# Start mul_16 labelOffset tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
# End mul_16


# Start mul_16 labelOffset tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
# End mul_16


# Start getchar tmp2 tmp
# set tmp 1
&af &af ?+8 ; relsq tmp tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg tmp2 tmp
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &af ?+8 ; relsq tmp2 tmp 1
# End getchar


# Start add labelOffset tmp2 tmp
# movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# End add


# Start mul_8 labelOffset tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
&aM &af ?+8 ; relsq labelOffset tmp 1
# End mul_8


# Start add labelOffset labelArrStart tmp
# movneg tmp labelArrStart
&af &af ?+8 ; relsq tmp tmp 1
&af &aN ?+8 ; relsq tmp labelArrStart 1
# sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# End add


&aj &aO &aP ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
; addr curLabel 0

# Start setaddr curLabel labelOffset tmp
&aQ &aQ ?+8 ; relsq curLabel_addrRef_0 curLabel_addrRef_0 1
&aR &aR ?+8 ; relsq curLabel_addrRef_1 curLabel_addrRef_1 1
&aS &aS ?+8 ; relsq curLabel_addrRef_2 curLabel_addrRef_2 1
# movneg tmp labelOffset
&af &af ?+8 ; relsq tmp tmp 1
&af &aM ?+8 ; relsq tmp labelOffset 1
&aQ &af ?+8 ; relsq curLabel_addrRef_0 tmp 1
&aR &af ?+8 ; relsq curLabel_addrRef_1 tmp 1
&aS &af ?+8 ; relsq curLabel_addrRef_2 tmp 1
# End setaddr


# Start mov curLabel codeLen tmp
# movneg tmp codeLen
&af &af ?+8 ; relsq tmp tmp 1
&af &aK ?+8 ; relsq tmp codeLen 1
# movneg curLabel tmp
:aQ &ab :aR &ab ?+8 ; relsq curLabel curLabel 1
:aS &ab &af ?+8 ; relsq curLabel tmp 1
# End mov

&aa &aa &ag ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
; var refs 0
; addr nextRef 400000

# Start mov nextRef labelOffset tmp
# movneg tmp labelOffset
:aP &af &af ?+8 ; relsq tmp tmp 1
&af &aM ?+8 ; relsq tmp labelOffset 1
# movneg nextRef tmp
:aT 0000000000400000 :aU 0000000000400000 ?+8 ; relsq nextRef nextRef 1
:aV 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# End mov

&aT &aW ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aU &aW ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aV &aW ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aX &aW ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&aY &aW ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&aZ &aW ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&ba &aW ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bb &aW ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&bc &aW ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1

# Start mov nextRef codeLen tmp
# movneg tmp codeLen
&af &af ?+8 ; relsq tmp tmp 1
&af &aK ?+8 ; relsq tmp codeLen 1
# movneg nextRef tmp
:aX 0000000000400000 :aY 0000000000400000 ?+8 ; relsq nextRef nextRef 1
:aZ 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# End mov


# Start add nextRef bufStart tmp
# movneg tmp bufStart
&af &af ?+8 ; relsq tmp tmp 1
&af &bd ?+8 ; relsq tmp bufStart 1
# sub nextRef tmp
:ba 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# End add

&aT &aW ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aU &aW ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aV &aW ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aX &aW ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&aY &aW ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&aZ &aW ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&ba &aW ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bb &aW ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&bc &aW ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1
&be &ah ?+8 ; relsq refs CONST_-1 1
&aa &aa &aL ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
:as &af &af ?+8 ; relsq tmp tmp 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&af &aG ?+8 ; relsq tmp cur 1
&aG &af ?+8 ; relsq cur tmp 1
&aG &af ?+8 ; relsq cur tmp 1
&aG &af ?+8 ; relsq cur tmp 1
# End mul_16

&aG &aq ?+8 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
&bf &ah &ag ; lblsq i CONST_-1 MAIN
&bf &bg ?+8 ; relsq i CONST_10 1

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address

# Start mov bufEnd cur tmp
# movneg tmp cur
:aL &af &af ?+8 ; relsq tmp tmp 1
&af &aG ?+8 ; relsq tmp cur 1
# movneg bufEnd tmp
:bh 0000000000100000 :bi 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
:bj 0000000000100000 &af ?+8 ; relsq bufEnd tmp 1
# End mov

&aG &aG ?+8 ; relsq cur cur 1
&bh &aW ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bi &aW ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bj &aW ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
&aK &aW ?+8 ; relsq codeLen CONST_-8 1
&aa &aa &ag ; lblsq ZERO ZERO MAIN


# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
:ay &be &aH &bk ; lblsq refs CONST_0 PRINT
&be &al ?+8 ; relsq refs CONST_1 1
&aT &bl ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aU &bl ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aV &bl ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aX &bl ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&aY &bl ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&aZ &bl ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&ba &bl ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bb &bl ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&bc &bl ?+8 ; relsq nextRef_addrRef_8 CONST_8 1

; addr refAt 0

# Start setaddr refAt nextRef tmp
&bm &bm ?+8 ; relsq refAt_addrRef_0 refAt_addrRef_0 1
&bn &bn ?+8 ; relsq refAt_addrRef_1 refAt_addrRef_1 1
&bo &bo ?+8 ; relsq refAt_addrRef_2 refAt_addrRef_2 1
# movneg tmp nextRef
&af &af ?+8 ; relsq tmp tmp 1
&af :bb 0000000000400000 ?+8 ; relsq tmp nextRef 1
&bm &af ?+8 ; relsq refAt_addrRef_0 tmp 1
&bn &af ?+8 ; relsq refAt_addrRef_1 tmp 1
&bo &af ?+8 ; relsq refAt_addrRef_2 tmp 1
# End setaddr

&aT &bl ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aU &bl ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aV &bl ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aX &bl ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&aY &bl ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&aZ &bl ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&ba &bl ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bb &bl ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&bc &bl ?+8 ; relsq nextRef_addrRef_8 CONST_8 1

; addr refVal 0

# Start setaddr refVal nextRef tmp
&bp &bp ?+8 ; relsq refVal_addrRef_0 refVal_addrRef_0 1
# movneg tmp nextRef
&af &af ?+8 ; relsq tmp tmp 1
&af :bc 0000000000400000 ?+8 ; relsq tmp nextRef 1
&bp &af ?+8 ; relsq refVal_addrRef_0 tmp 1
# End setaddr



# Start mov refAt refVal tmp
# movneg tmp refVal
&af &af ?+8 ; relsq tmp tmp 1
&af :bp &ad ?+8 ; relsq tmp refVal 1
# movneg refAt tmp
:bm &ac :bn &ac ?+8 ; relsq refAt refAt 1
:bo &ac &af ?+8 ; relsq refAt tmp 1
# End mov

&aa &aa &ay ; lblsq ZERO ZERO RESOLVE_REF


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# set i 8
:bk &bf &bf ?+8 ; relsq i i 1
&bf &aW ?+8 ; relsq i CONST_-8 1
&bq &bl ?+8 ; relsq charToPrint_addrRef_0 CONST_8 1

; label PRINT_CHAR_START
:br &bq &ah ?+8 ; relsq charToPrint_addrRef_0 CONST_-1 1

# Start mov c charToPrint tmp
# movneg tmp charToPrint
&af &af ?+8 ; relsq tmp tmp 1
&af :bq 0000000000100000 ?+8 ; relsq tmp charToPrint 1
# movneg c tmp
&ai &ai ?+8 ; relsq c c 1
&ai &af ?+8 ; relsq c tmp 1
# End mov

# putchar c tmp

# c %= 256

; var mod256IsNeg 0
&bs &bs ?+8 ; relsq mod256IsNeg mod256IsNeg 1
&ai &ah &bt ; lblsq c CONST_-1 MOD256_IS_NEG
&aa &aa &bu ; lblsq ZERO ZERO MOD256_IS_POS
; label MOD256_IS_NEG
:bt &bs &ah ?+8 ; relsq mod256IsNeg CONST_-1 1
&ai &al ?+8 ; relsq c CONST_1 1

# Start neg c tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &ai ?+8 ; relsq tmp c 1
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &af ?+8 ; relsq tmp2 tmp 1
&ai &ai ?+8 ; relsq c c 1
&ai &aJ ?+8 ; relsq c tmp2 1
# End neg

&aa &aa &bv ; lblsq ZERO ZERO MOD256_START
; label MOD256_IS_POS
:bu &ai &al ?+8 ; relsq c CONST_1 1

; label MOD256_START
; var subber 0
# set subber 100
:bv &bw &bw ?+8 ; relsq subber subber 1
&bw &bx ?+8 ; relsq subber CONST_-100 1
# Finish if c < 256

# Start jl c subber MOD256_CHECKNEG tmp tmp2

# Start mov tmp c tmp2
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af &bw &by ; lblsq tmp subber MOD256_CHECKNEG
# End jl


# Multiply subbers by 256 until the next multiplication makes subber > c
; var nextSubber 0
# set nextSubber 10000
&bz &bz ?+8 ; relsq nextSubber nextSubber 1
&bz &bA ?+8 ; relsq nextSubber CONST_-10000 1
; label MULT_SUBBER_START

# Start jl c nextSubber MULT_SUBBER_END tmp tmp2

# Start mov tmp c tmp2
:bB &aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af &bz &bC ; lblsq tmp nextSubber MULT_SUBBER_END
# End jl


# Start mul_256 subber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&bw &af ?+8 ; relsq subber tmp 1
&bw &af ?+8 ; relsq subber tmp 1
&bw &af ?+8 ; relsq subber tmp 1
&af &af ?+8 ; relsq tmp tmp 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&af &bw ?+8 ; relsq tmp subber 1
&bw &af ?+8 ; relsq subber tmp 1
&bw &af ?+8 ; relsq subber tmp 1
&bw &af ?+8 ; relsq subber tmp 1
# End mul_256


# Start mul_256 nextSubber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&bz &af ?+8 ; relsq nextSubber tmp 1
&bz &af ?+8 ; relsq nextSubber tmp 1
&bz &af ?+8 ; relsq nextSubber tmp 1
&af &af ?+8 ; relsq tmp tmp 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&af &bz ?+8 ; relsq tmp nextSubber 1
&bz &af ?+8 ; relsq nextSubber tmp 1
&bz &af ?+8 ; relsq nextSubber tmp 1
&bz &af ?+8 ; relsq nextSubber tmp 1
# End mul_256

# nextSubber overflowed
&bz &aH &bC ; lblsq nextSubber CONST_0 MULT_SUBBER_END
&aa &aa &bB ; lblsq ZERO ZERO MULT_SUBBER_START
; label MULT_SUBBER_END

# Subtract c by subber until the next subtraction makes c < 0
; label SUBTRACT_C

# Start jl c subber MOD256_START tmp tmp2

# Start mov tmp c tmp2
:bC :bD &aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af &bw &bv ; lblsq tmp subber MOD256_START
# End jl

&ai &bw ?+8 ; relsq c subber 1
&aa &aa &bD ; lblsq ZERO ZERO SUBTRACT_C

; label MOD256_CHECKNEG
:by &bs &aH &bE ; lblsq mod256IsNeg CONST_0 MOD256_END
# No need to invert if c == 0
&ai &aH &bE ; lblsq c CONST_0 MOD256_END
# c = 256 - c

# Start mov tmp c tmp2
# movneg tmp2 c
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
# movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# End mov

# set c 100
&ai &ai ?+8 ; relsq c c 1
&ai &bx ?+8 ; relsq c CONST_-100 1
&ai &af ?+8 ; relsq c tmp 1

; label MOD256_END


# Start putchar c tmp
:bE 0000000013ed27f0 &aa ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&af &af ?+8 ; relsq tmp tmp 1
&af &ai ?+8 ; relsq tmp c 1
# dec tmp 1
&af &al ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &af ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar

&bf &al &bF ; lblsq i CONST_1 PRINT_CHAR_END
&aa &aa &br ; lblsq ZERO ZERO PRINT_CHAR_START

; label PRINT_CHAR_END
# Go to the next qword
:bF &bq &aW ?+8 ; relsq charToPrint_addrRef_0 CONST_-8 1
&aK &bl &bG ; lblsq codeLen CONST_8 HALT
&aa &aa &bk ; lblsq ZERO ZERO PRINT

; label HALT
# Stop CPU 0

# Start set_safe CPU_CONTROL_START 2 tmp tmp2

# Start mov tmp CPU_CONTROL_START tmp2
:bG &aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# End mov

# dec tmp 2
&af &an ?+8 ; relsq tmp CONST_2 1
# sub CPU_CONTROL_START tmp
0000000013ee0000 &af ?+8 ; relsq CPU_CONTROL_START tmp 1
# End set_safe


# Infinite loop
&aa &aa ?-10 ; relsq ZERO ZERO 0

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_-8 -8
; var CONST_10 10
; var CONST_8 8
; var CONST_-100 -100
; var CONST_-10000 -10000

:af 0000000000000000 ; raw 0000000000000000 # tmp
:aJ 0000000000000000 ; raw 0000000000000000 # tmp2
:aK 0000000000000000 ; raw 0000000000000000 # codeLen
:aq 0000000000000000 ; raw 0000000000000000 # val
:ai 0000000000000000 ; raw 0000000000000000 # c
:aj 0000000000000000 ; raw 0000000000000000 # c2
:az 0000000000000000 ; raw 0000000000000000 # isNeg
:aN 0000000000300000 ; raw 0000000000300000 # labelArrStart
:aM 0000000000000000 ; raw 0000000000000000 # labelOffset
:be 0000000000000000 ; raw 0000000000000000 # refs
:aG 0000000000000000 ; raw 0000000000000000 # cur
:bf fffffffffffffff1 ; raw fffffffffffffff1 # i
:bd 0000000000100000 ; raw 0000000000100000 # bufStart
:bs 0000000000000000 ; raw 0000000000000000 # mod256IsNeg
:bw 0000000000000000 ; raw 0000000000000000 # subber
:bz 0000000000000000 ; raw 0000000000000000 # nextSubber
:ah ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:ak 0000000000000022 ; raw 0000000000000022 # CONST_22
:al 0000000000000001 ; raw 0000000000000001 # CONST_1
:an 0000000000000002 ; raw 0000000000000002 # CONST_2
:ap 0000000000000009 ; raw 0000000000000009 # CONST_9
:ar 000000000000000a ; raw 000000000000000a # CONST_A
:at 0000000000000003 ; raw 0000000000000003 # CONST_3
:av 0000000000000006 ; raw 0000000000000006 # CONST_6
:aw 000000000000001a ; raw 000000000000001a # CONST_1A
:ax 0000000000000017 ; raw 0000000000000017 # CONST_17
:aA 000000000000002c ; raw 000000000000002c # CONST_2C
:aC 000000000000002f ; raw 000000000000002f # CONST_2F
:aF 0000000000000007 ; raw 0000000000000007 # CONST_7
:aH 0000000000000000 ; raw 0000000000000000 # CONST_0
:aO 0000000000000026 ; raw 0000000000000026 # CONST_26
:aW fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bg 0000000000000010 ; raw 0000000000000010 # CONST_10
:bl 0000000000000008 ; raw 0000000000000008 # CONST_8
:bx ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
:bA ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
