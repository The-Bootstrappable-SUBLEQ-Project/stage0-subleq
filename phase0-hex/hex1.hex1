# hex1
# Step 0: Processed 1295 lines
# Step 1: Found 72 symbols
# Step 2: Now with 75 symbols and 747 references
# Step 3: Now with 92 symbols and 1333 lines
# Step 4: Current size is 9216 bytes
# Step 5: Size is now 9504 bytes
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
:aa :ab :ac :ad &aa &aa &ae ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:ae :ag &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Keep a backup of c for INPUT_LABEL
; var c2 0
# MSQ_START 0 mov c2 c tmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
&af &ai ?+8 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c2 tmp
# MSQ_START 2 zero c2
&aj &aj ?+8 ; relsq c2 c2 1
# MSQ_END 2 zero
# MSQ_START 2 sub c2 tmp
&aj &af ?+8 ; relsq c2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Handle NUL ~ "
# MSQ_START 0 decleq c 22 MAIN
&ai &ak &ag ; lblsq c CONST_22 MAIN
# MSQ_END 0 decleq

# Handle #
# MSQ_START 0 decleq c 1 COMMENT
&ai &al &am ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle $ and %
# MSQ_START 0 decleq c 2 MAIN
&ai &an &ag ; lblsq c CONST_2 MAIN
# MSQ_END 0 decleq

# Handle &
# MSQ_START 0 decleq c 1 INPUT_LABEL
&ai &al &ao ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ' ~ /
# MSQ_START 0 decleq c 9 MAIN
&ai &ap &ag ; lblsq c CONST_9 MAIN
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
&aq &ah ?+8 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a WRITE
&ai &ar &as ; lblsq c CONST_A WRITE
# MSQ_END 0 decleq

# Handle :
# MSQ_START 0 decleq c 1 INPUT_LABEL
&ai &al &ao ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ;
# MSQ_START 0 decleq c 1 COMMENT
&ai &al &am ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle < ~ >
# MSQ_START 0 decleq c 3 MAIN
&ai &at &ag ; lblsq c CONST_3 MAIN
# MSQ_END 0 decleq

# Handle ?
# MSQ_START 0 decleq c 1 HANDLE_REL
&ai &al &au ; lblsq c CONST_1 HANDLE_REL
# MSQ_END 0 decleq

# Handle @
# MSQ_START 0 decleq c 1 MAIN
&ai &al &ag ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&aq &ap ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
&ai &av &as ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a MAIN
&ai &aw &ag ; lblsq c CONST_1A MAIN
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&aq &ap ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
&ai &av &as ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle g ~ }
# MSQ_START 0 decleq c 17 MAIN
&ai &ax &ag ; lblsq c CONST_17 MAIN
# MSQ_END 0 decleq

# Handle ~ and DEL (0x7f)
# MSQ_START 0 lbljmp RESOLVE_REF
&aa &aa &ay ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# COMMENT ignores characters until \r or \n is fed
; label COMMENT
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:am &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp
# MSQ_START 0 decleq c 9 COMMENT
&ai &ap &am ; lblsq c CONST_9 COMMENT
# MSQ_END 0 decleq
# Handle LF
# MSQ_START 0 decleq c 1 MAIN
&ai &al &ag ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 decleq c 2 COMMENT
&ai &an &am ; lblsq c CONST_2 COMMENT
# MSQ_END 0 decleq
# Handle CR
# MSQ_START 0 decleq c 1 MAIN
&ai &al &ag ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COMMENT
&aa &aa &am ; lblsq ZERO ZERO COMMENT
# MSQ_END 0 lbljmp


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
:au &az &az ?+8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Handle NUL ~ ,
# MSQ_START 0 decleq c 2c REL_INP
&ai &aA &aB ; lblsq c CONST_2C REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 inc isNeg 1
# MSQ_START 1 dec isNeg -1
&az &ah ?+8 ; relsq isNeg CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# Handle -
# MSQ_START 0 decleq c 1 REL_INP
&ai &al &aB ; lblsq c CONST_1 REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
&az &az ?+8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label REL_INP
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:aB &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar

# Handle NUL ~ /
# MSQ_START 0 decleq c 2f REL_NEG
&ai &aC &aD ; lblsq c CONST_2F REL_NEG
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
&aq &ah ?+8 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a REL_WRITE
&ai &ar &aE ; lblsq c CONST_A REL_WRITE
# MSQ_END 0 decleq

# Handle : ~ @
# MSQ_START 0 decleq c 7 REL_NEG
&ai &aF &aD ; lblsq c CONST_7 REL_NEG
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&aq &ap ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
&ai &av &aE ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a REL_NEG
&ai &aw &aD ; lblsq c CONST_1A REL_NEG
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
&aq &aq ?+8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
&aq &ai ?+8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
&aq &ap ?+8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
&ai &av &aE ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle g ~ DEL
# MSQ_START 0 lbljmp REL_INP
&aa &aa &aB ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

; label REL_WRITE
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
:aE &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
&aG &aq ?+8 ; relsq cur val 1
# MSQ_END 0 sub
# MSQ_START 0 lbljmp REL_INP
&aa &aa &aB ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

# Negate cur if the relative jump is negative
; label REL_NEG
# MSQ_START 0 decleq isNeg 0 REL_FIN
:aD &az &aH &aI ; lblsq isNeg CONST_0 REL_FIN
# MSQ_END 0 decleq
# MSQ_START 0 neg cur tmp tmp2
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 mov cur tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &af ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg cur tmp2
&aG &aG ?+8 ; relsq cur cur 1
&aG &aJ ?+8 ; relsq cur tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_END 0 neg

; label REL_FIN
# MSQ_START 0 add cur codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
:aI &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&af &aK ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 lbljmp WRITE_QWORD
&aa &aa &aL ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


; var labelArrStart 300000

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# Transform label name to offset
; var labelOffset 0
# MSQ_START 0 getchar labelOffset tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
:ao &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg labelOffset tmp
# MSQ_START 2 zero labelOffset
&aM &aM ?+8 ; relsq labelOffset labelOffset 1
# MSQ_END 2 zero
# MSQ_START 2 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# MSQ_START 0 mul_16 labelOffset tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 mul_16 labelOffset tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 getchar tmp2 tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&af 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
&aJ &af ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# MSQ_START 0 add labelOffset tmp2 tmp
# MSQ_START 1 movneg tmp tmp2
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp tmp2
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 mul_8 labelOffset tmp
# MSQ_START 1 movneg tmp labelOffset
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_8
# MSQ_START 0 add labelOffset labelArrStart tmp
# MSQ_START 1 movneg tmp labelArrStart
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelArrStart
&af &aN ?+8 ; relsq tmp labelArrStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
&aM &af ?+8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add

# MSQ_START 0 decleq c2 26 RECORD_REF
&aj &aO &aP ; lblsq c2 CONST_26 RECORD_REF
# MSQ_END 0 decleq

# Handle label (:)
; addr curLabel 0
# MSQ_START 0 setaddr curLabel labelOffset tmp tmp2
# MSQ_START 1 mov tmp curLabel_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curLabel_addrRef_0
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &aQ ?+8 ; relsq tmp2 curLabel_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
&aQ &af ?+8 ; relsq curLabel_addrRef_0 tmp 1
&aR &af ?+8 ; relsq curLabel_addrRef_1 tmp 1
&aS &af ?+8 ; relsq curLabel_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 mov curLabel codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&af &aK ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg curLabel tmp
# MSQ_START 2 zero curLabel
:aQ &ab :aR &ab ?+8 ; relsq curLabel curLabel 1
# MSQ_END 2 zero
# MSQ_START 2 sub curLabel tmp
:aS &ab &af ?+8 ; relsq curLabel tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 lbljmp MAIN
&aa &aa &ag ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp

# Handle reference (&)
; label RECORD_REF
; var refs 0
; addr nextRef 400000
# MSQ_START 0 mov nextRef labelOffset tmp
# MSQ_START 1 movneg tmp labelOffset
# MSQ_START 2 zero tmp
:aP &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelOffset
&af &aM ?+8 ; relsq tmp labelOffset 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg nextRef tmp
# MSQ_START 2 zero nextRef
:aT 0000000000400000 :aU 0000000000400000 ?+8 ; relsq nextRef nextRef 1
# MSQ_END 2 zero
# MSQ_START 2 sub nextRef tmp
:aV 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr nextRef -8
&aT &aW ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aU &aW ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aV &aW ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aX &aW ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&aY &aW ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&aZ &aW ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&ba &aW ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bb &aW ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&bc &aW ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov nextRef codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
&af &aK ?+8 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg nextRef tmp
# MSQ_START 2 zero nextRef
:aX 0000000000400000 :aY 0000000000400000 ?+8 ; relsq nextRef nextRef 1
# MSQ_END 2 zero
# MSQ_START 2 sub nextRef tmp
:aZ 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 add nextRef bufStart tmp
# MSQ_START 1 movneg tmp bufStart
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp bufStart
&af &bd ?+8 ; relsq tmp bufStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub nextRef tmp
:ba 0000000000400000 &af ?+8 ; relsq nextRef tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 decaddr nextRef -8
&aT &aW ?+8 ; relsq nextRef_addrRef_0 CONST_-8 1
&aU &aW ?+8 ; relsq nextRef_addrRef_1 CONST_-8 1
&aV &aW ?+8 ; relsq nextRef_addrRef_2 CONST_-8 1
&aX &aW ?+8 ; relsq nextRef_addrRef_3 CONST_-8 1
&aY &aW ?+8 ; relsq nextRef_addrRef_4 CONST_-8 1
&aZ &aW ?+8 ; relsq nextRef_addrRef_5 CONST_-8 1
&ba &aW ?+8 ; relsq nextRef_addrRef_6 CONST_-8 1
&bb &aW ?+8 ; relsq nextRef_addrRef_7 CONST_-8 1
&bc &aW ?+8 ; relsq nextRef_addrRef_8 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc refs 1
# MSQ_START 1 dec refs -1
&be &ah ?+8 ; relsq refs CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp WRITE_QWORD
&aa &aa &aL ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
:as &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
&aG &af ?+8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
&aG &aq ?+8 ; relsq cur val 1
# MSQ_END 0 sub

# i will turn positive every 16 iterations
; var i -f
# MSQ_START 0 incleq i 1 MAIN
# MSQ_START 1 decleq i -1 MAIN
&bf &ah &ag ; lblsq i CONST_-1 MAIN
# MSQ_END 1 decleq
# MSQ_END 0 incleq
# MSQ_START 0 dec i 10
&bf &bg ?+8 ; relsq i CONST_10 1
# MSQ_END 0 dec

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# MSQ_START 0 mov bufEnd cur tmp
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
:aL &af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
&af &aG ?+8 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg bufEnd tmp
# MSQ_START 2 zero bufEnd
:bh 0000000000100000 :bi 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
# MSQ_END 2 zero
# MSQ_START 2 sub bufEnd tmp
:bj 0000000000100000 &af ?+8 ; relsq bufEnd tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 zero cur
# MSQ_START 1 sub cur cur
&aG &aG ?+8 ; relsq cur cur 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr bufEnd -8
&bh &aW ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bi &aW ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bj &aW ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc codeLen 8
# MSQ_START 1 dec codeLen -8
&aK &aW ?+8 ; relsq codeLen CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp MAIN
&aa &aa &ag ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp


# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
# MSQ_START 0 decleq refs 0 PRINT
:ay &be &aH &bk ; lblsq refs CONST_0 PRINT
# MSQ_END 0 decleq
# MSQ_START 0 dec refs 1
&be &al ?+8 ; relsq refs CONST_1 1
# MSQ_END 0 dec
# MSQ_START 0 decaddr nextRef 8
&aT &bl ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aU &bl ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aV &bl ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aX &bl ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&aY &bl ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&aZ &bl ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&ba &bl ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bb &bl ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&bc &bl ?+8 ; relsq nextRef_addrRef_8 CONST_8 1
# MSQ_END 0 decaddr

; addr refAt 0
# MSQ_START 0 setaddr refAt nextRef tmp tmp2
# MSQ_START 1 mov tmp refAt_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refAt_addrRef_0
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &bm ?+8 ; relsq tmp2 refAt_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp nextRef
&af :bb 0000000000400000 ?+8 ; relsq tmp nextRef 1
# MSQ_END 1 sub
&bm &af ?+8 ; relsq refAt_addrRef_0 tmp 1
&bn &af ?+8 ; relsq refAt_addrRef_1 tmp 1
&bo &af ?+8 ; relsq refAt_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 decaddr nextRef 8
&aT &bl ?+8 ; relsq nextRef_addrRef_0 CONST_8 1
&aU &bl ?+8 ; relsq nextRef_addrRef_1 CONST_8 1
&aV &bl ?+8 ; relsq nextRef_addrRef_2 CONST_8 1
&aX &bl ?+8 ; relsq nextRef_addrRef_3 CONST_8 1
&aY &bl ?+8 ; relsq nextRef_addrRef_4 CONST_8 1
&aZ &bl ?+8 ; relsq nextRef_addrRef_5 CONST_8 1
&ba &bl ?+8 ; relsq nextRef_addrRef_6 CONST_8 1
&bb &bl ?+8 ; relsq nextRef_addrRef_7 CONST_8 1
&bc &bl ?+8 ; relsq nextRef_addrRef_8 CONST_8 1
# MSQ_END 0 decaddr

; addr refVal 0
# MSQ_START 0 setaddr refVal nextRef tmp tmp2
# MSQ_START 1 mov tmp refVal_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refVal_addrRef_0
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &bp ?+8 ; relsq tmp2 refVal_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp nextRef
&af :bc 0000000000400000 ?+8 ; relsq tmp nextRef 1
# MSQ_END 1 sub
&bp &af ?+8 ; relsq refVal_addrRef_0 tmp 1
# MSQ_END 0 setaddr

# MSQ_START 0 mov refAt refVal tmp
# MSQ_START 1 movneg tmp refVal
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp refVal
&af :bp &ad ?+8 ; relsq tmp refVal 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refAt tmp
# MSQ_START 2 zero refAt
:bm &ac :bn &ac ?+8 ; relsq refAt refAt 1
# MSQ_END 2 zero
# MSQ_START 2 sub refAt tmp
:bo &ac &af ?+8 ; relsq refAt tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 lbljmp RESOLVE_REF
&aa &aa &ay ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# MSQ_START 0 set i 8
# MSQ_START 1 zero i
# MSQ_START 2 sub i i
:bk &bf &bf ?+8 ; relsq i i 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc i 8
# MSQ_START 2 dec i -8
&bf &aW ?+8 ; relsq i CONST_-8 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 decaddr charToPrint 8
&bq &bl ?+8 ; relsq charToPrint_addrRef_0 CONST_8 1
# MSQ_END 0 decaddr

; label PRINT_CHAR_START
# MSQ_START 0 decaddr charToPrint -1
:br &bq &ah ?+8 ; relsq charToPrint_addrRef_0 CONST_-1 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov c charToPrint tmp
# MSQ_START 1 movneg tmp charToPrint
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp charToPrint
&af :bq 0000000000100000 ?+8 ; relsq tmp charToPrint 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# MSQ_START 1 zero mod_256_0_isNeg
# MSQ_START 2 sub mod_256_0_isNeg mod_256_0_isNeg
&bs &bs ?+8 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn c MOD_256_0_IS_NEG tmp tmp2
# MSQ_START 2 jl c ZERO MOD_256_0_IS_NEG tmp tmp2
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
&af &aa &bt ; lblsq tmp ZERO MOD_256_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp MOD_256_0_START
&aa &aa &bu ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_IS_NEG
# MSQ_START 1 inc mod_256_0_isNeg 1
# MSQ_START 2 dec mod_256_0_isNeg -1
:bt &bs &ah ?+8 ; relsq mod_256_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg c tmp tmp2
# MSQ_START 2 movneg tmp c
&af &af ?+8 ; relsq tmp tmp 1
&af &ai ?+8 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 mov c tmp tmp2
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &af ?+8 ; relsq tmp2 tmp 1
&ai &ai ?+8 ; relsq c c 1
&ai &aJ ?+8 ; relsq c tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label MOD_256_0_START
; var mod_256_0_subber 0
# MSQ_START 1 set mod_256_0_subber 100
# MSQ_START 2 zero mod_256_0_subber
:bu &bv &bv ?+8 ; relsq mod_256_0_subber mod_256_0_subber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_subber 100
&bv &bw ?+8 ; relsq mod_256_0_subber CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2
# MSQ_START 2 mov tmp c tmp2
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
&af &bv &bx ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# MSQ_END 1 jl
; var mod_256_0_nextSubber 0
# MSQ_START 1 set mod_256_0_nextSubber 10000
# MSQ_START 2 zero mod_256_0_nextSubber
&by &by ?+8 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_nextSubber 10000
&by &bz ?+8 ; relsq mod_256_0_nextSubber CONST_-10000 1
# MSQ_END 2 inc
# MSQ_END 1 set
; label MOD_256_0_MULT_SUBBER_START
# MSQ_START 1 jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2
# MSQ_START 2 mov tmp c tmp2
:bA &aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
&af &ah ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
&af &by &bB ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# MSQ_END 1 jl
# MSQ_START 1 mul_256 mod_256_0_subber tmp
# MSQ_START 2 mul_16 mod_256_0_subber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_subber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
&bv &af ?+8 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 mul_256 mod_256_0_nextSubber tmp
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
&af &af ?+8 ; relsq tmp tmp 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&af &by ?+8 ; relsq tmp mod_256_0_nextSubber 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
&by &af ?+8 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
&by &aH &bB ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp MOD_256_0_MULT_SUBBER_START
&aa &aa &bA ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
# MSQ_END 1 lbljmp
; label MOD_256_0_SUBTRACT_A
:bB &ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&ai &bv &bC ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# MSQ_START 1 lbljmp MOD_256_0_SUBTRACT_A
&aa &aa &bB ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label MOD_256_0_REVERT_SUB
# MSQ_START 1 jz c MOD_256_0_START tmp
# MSQ_START 2 movneg tmp c
:bC &af &af ?+8 ; relsq tmp tmp 1
&af &ai ?+8 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp 1 JZ_0_END
&af &ah &bD ; lblsq tmp CONST_-1 JZ_0_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq c 1 JZ_0_REVERT_A
&ai &ah &bE ; lblsq c CONST_-1 JZ_0_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec c 1
&ai &al ?+8 ; relsq c CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp MOD_256_0_START
&aa &aa &bu ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 2 lbljmp
; label JZ_0_REVERT_A
# MSQ_START 2 dec c 1
:bE &ai &al ?+8 ; relsq c CONST_1 1
# MSQ_END 2 dec
; label JZ_0_END
# MSQ_END 1 jz
# MSQ_START 1 add c mod_256_0_subber tmp
# MSQ_START 2 movneg tmp mod_256_0_subber
:bD &af &af ?+8 ; relsq tmp tmp 1
&af &bv ?+8 ; relsq tmp mod_256_0_subber 1
# MSQ_END 2 movneg
# MSQ_START 2 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 lbljmp MOD_256_0_START
&aa &aa &bu ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_CHECK_NEG
# MSQ_START 1 decleq mod_256_0_isNeg 0 MOD_256_0_END
:bx &bs &aH &bF ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 decleq c 0 MOD_256_0_END
&ai &aH &bF ; lblsq c CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp c tmp2
# MSQ_START 2 movneg tmp2 c
&aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ &ai ?+8 ; relsq tmp2 c 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set c 100
# MSQ_START 2 zero c
&ai &ai ?+8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 inc c 100
&ai &bw ?+8 ; relsq c CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub c tmp
&ai &af ?+8 ; relsq c tmp 1
# MSQ_END 1 sub
; label MOD_256_0_END
# MSQ_END 0 mod_256
# MSQ_START 0 putchar c tmp
:bF 0000000013ed27f0 &aa ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
&af &af ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
&af &ai ?+8 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&af &al ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &af ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 decleq i 1 PRINT_CHAR_END
&bf &al &bG ; lblsq i CONST_1 PRINT_CHAR_END
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT_CHAR_START
&aa &aa &br ; lblsq ZERO ZERO PRINT_CHAR_START
# MSQ_END 0 lbljmp

; label PRINT_CHAR_END
# Go to the next qword
# MSQ_START 0 decaddr charToPrint -8
:bG &bq &aW ?+8 ; relsq charToPrint_addrRef_0 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decleq codeLen 8 HALT
&aK &bl &bH ; lblsq codeLen CONST_8 HALT
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT
&aa &aa &bk ; lblsq ZERO ZERO PRINT
# MSQ_END 0 lbljmp

; label HALT
# MSQ_START 0 halt tmp tmp2
# MSQ_START 1 set_safe CPU_CONTROL_START 2 tmp tmp2
# MSQ_START 2 mov tmp CPU_CONTROL_START tmp2
:bH &aJ &aJ ?+8 ; relsq tmp2 tmp2 1
&aJ 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&af &af ?+8 ; relsq tmp tmp 1
&af &aJ ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 dec tmp 2
&af &an ?+8 ; relsq tmp CONST_2 1
# MSQ_END 2 dec
# MSQ_START 2 sub CPU_CONTROL_START tmp
0000000013ee0000 &af ?+8 ; relsq CPU_CONTROL_START tmp 1
# MSQ_END 2 sub
# MSQ_END 1 set_safe
&aa &aa ?-10 ; relsq ZERO ZERO 0
# MSQ_END 0 halt

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_-8 -8
; var CONST_10 10
; var CONST_8 8
; var CONST_-100 -100
; var CONST_-10000 -10000

:af 0000000000000000 ; raw 0000000000000000 # tmp
:aJ 0000000000000000 ; raw 0000000000000000 # tmp2
:aK 0000000000000000 ; raw 0000000000000000 # codeLen
:aq 0000000000000000 ; raw 0000000000000000 # val
:ai 0000000000000000 ; raw 0000000000000000 # c
:aj 0000000000000000 ; raw 0000000000000000 # c2
:az 0000000000000000 ; raw 0000000000000000 # isNeg
:aN 0000000000300000 ; raw 0000000000300000 # labelArrStart
:aM 0000000000000000 ; raw 0000000000000000 # labelOffset
:be 0000000000000000 ; raw 0000000000000000 # refs
:aG 0000000000000000 ; raw 0000000000000000 # cur
:bf fffffffffffffff1 ; raw fffffffffffffff1 # i
:bd 0000000000100000 ; raw 0000000000100000 # bufStart
:bs 0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
:bv 0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
:by 0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
:ah ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:ak 0000000000000022 ; raw 0000000000000022 # CONST_22
:al 0000000000000001 ; raw 0000000000000001 # CONST_1
:an 0000000000000002 ; raw 0000000000000002 # CONST_2
:ap 0000000000000009 ; raw 0000000000000009 # CONST_9
:ar 000000000000000a ; raw 000000000000000a # CONST_A
:at 0000000000000003 ; raw 0000000000000003 # CONST_3
:av 0000000000000006 ; raw 0000000000000006 # CONST_6
:aw 000000000000001a ; raw 000000000000001a # CONST_1A
:ax 0000000000000017 ; raw 0000000000000017 # CONST_17
:aA 000000000000002c ; raw 000000000000002c # CONST_2C
:aC 000000000000002f ; raw 000000000000002f # CONST_2F
:aF 0000000000000007 ; raw 0000000000000007 # CONST_7
:aH 0000000000000000 ; raw 0000000000000000 # CONST_0
:aO 0000000000000026 ; raw 0000000000000026 # CONST_26
:aW fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bg 0000000000000010 ; raw 0000000000000010 # CONST_10
:bl 0000000000000008 ; raw 0000000000000008 # CONST_8
:bw ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
:bz ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
