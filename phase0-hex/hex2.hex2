# hex2
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
; var FREE_START 1000000
:ZERO :inp_token_0_str :inp_token_1_str :curFindLabel :strcmp_const_0_a :strcmp_const_0_aStr :strcmp_const_0_bStr :curLabel :refAt &ZERO &ZERO &EP ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp
# set tmp 1
:EP :MAIN &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&c &c ?+8 ; relsq c c 1
&c &tmp ?+8 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# movneg c2 tmp
&c2 &c2 ?+8 ; relsq c2 c2 1
&c2 &tmp ?+8 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
&c &CONST_22 &MAIN ; lblsq c CONST_22 MAIN

# Handle #
&c &CONST_1 &COMMENT ; lblsq c CONST_1 COMMENT

# Handle $ and %
&c &CONST_2 &MAIN ; lblsq c CONST_2 MAIN

# Handle &
&c &CONST_1 &INPUT_LABEL ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
&c &CONST_9 &MAIN ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_-1 ?+8 ; relsq val CONST_-1 1
&c &CONST_A &WRITE ; lblsq c CONST_A WRITE

# Handle :
&c &CONST_1 &INPUT_LABEL ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
&c &CONST_1 &COMMENT ; lblsq c CONST_1 COMMENT

# Handle < ~ >
&c &CONST_3 &MAIN ; lblsq c CONST_3 MAIN

# Handle ?
&c &CONST_1 &HANDLE_REL ; lblsq c CONST_1 HANDLE_REL

# Handle @
&c &CONST_1 &MAIN ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_9 ?+8 ; relsq val CONST_9 1
&c &CONST_6 &WRITE ; lblsq c CONST_6 WRITE

# Handle G ~ `
&c &CONST_1A &MAIN ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_9 ?+8 ; relsq val CONST_9 1
&c &CONST_6 &WRITE ; lblsq c CONST_6 WRITE

# Handle g ~ }
&c &CONST_17 &MAIN ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
&ZERO &ZERO &RESOLVE_REF ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp
# set tmp 1
:COMMENT &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&c &c ?+8 ; relsq c c 1
&c &tmp ?+8 ; relsq c tmp 1
# End getchar

# putchar c tmp
&c &CONST_9 &COMMENT ; lblsq c CONST_9 COMMENT
# Handle LF
&c &CONST_1 &MAIN ; lblsq c CONST_1 MAIN
&c &CONST_2 &COMMENT ; lblsq c CONST_2 COMMENT
# Handle CR
&c &CONST_1 &MAIN ; lblsq c CONST_1 MAIN
&ZERO &ZERO &COMMENT ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
:HANDLE_REL &isNeg &isNeg ?+8 ; relsq isNeg isNeg 1

# Start getchar c tmp
# set tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&c &c ?+8 ; relsq c c 1
&c &tmp ?+8 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
&c &CONST_2C &REL_INP ; lblsq c CONST_2C REL_INP
&isNeg &CONST_-1 ?+8 ; relsq isNeg CONST_-1 1
# Handle -
&c &CONST_1 &REL_INP ; lblsq c CONST_1 REL_INP
&isNeg &isNeg ?+8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp
# set tmp 1
:REL_INP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&c &c ?+8 ; relsq c c 1
&c &tmp ?+8 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
&c &CONST_2F &REL_NEG ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_-1 ?+8 ; relsq val CONST_-1 1
&c &CONST_A &REL_WRITE ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
&c &CONST_7 &REL_NEG ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_9 ?+8 ; relsq val CONST_9 1
&c &CONST_6 &REL_WRITE ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
&c &CONST_1A &REL_NEG ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
&val &val ?+8 ; relsq val val 1
&val &c ?+8 ; relsq val c 1
&val &CONST_9 ?+8 ; relsq val CONST_9 1
&c &CONST_6 &REL_WRITE ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
&ZERO &ZERO &REL_INP ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
:REL_WRITE &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&cur &tmp ?+8 ; relsq cur tmp 1
&cur &tmp ?+8 ; relsq cur tmp 1
&cur &tmp ?+8 ; relsq cur tmp 1
# End mul_16

&cur &val ?+8 ; relsq cur val 1
&ZERO &ZERO &REL_INP ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
:REL_NEG &isNeg &CONST_0 &REL_FIN ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&cur &cur ?+8 ; relsq cur cur 1
&cur &tmp2 ?+8 ; relsq cur tmp2 1
# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
:REL_FIN &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &codeLen ?+8 ; relsq tmp codeLen 1
# sub cur tmp
&cur &tmp ?+8 ; relsq cur tmp 1
# End add

&ZERO &ZERO &WRITE_QWORD ; lblsq ZERO ZERO WRITE_QWORD

# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

; var lblArrStart 300000
; addr lblArrNext 300000
; var lblCount 0

; var refArrStart 400000
; addr refArrNext 400000
; var refCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
:INPUT_LABEL &c2 &CONST_26 &RECORD_REF ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
&lblCount &CONST_-1 ?+8 ; relsq lblCount CONST_-1 1

# Start alloc_str lblArrNext 1000 tmp

# Start malloc_const lblArrNext 1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:lblArrNext_addrRef_0 0000000000300000 :lblArrNext_addrRef_1 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:lblArrNext_addrRef_2 0000000000300000 &tmp ?+8 ; relsq lblArrNext tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# End malloc_const

# incaddr lblArrNext 8
&lblArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&lblArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&lblArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&lblArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&lblArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&lblArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&lblArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&lblArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&lblArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&lblArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&lblArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&lblArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&lblArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&lblArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&lblArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# zero lblArrNext
:lblArrNext_addrRef_3 0000000000300000 :lblArrNext_addrRef_4 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
# incaddr lblArrNext 8
&lblArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&lblArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&lblArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&lblArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&lblArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&lblArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&lblArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&lblArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&lblArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&lblArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&lblArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&lblArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&lblArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&lblArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&lblArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1

# Start mov lblArrNext CONST_1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
:lblArrNext_addrRef_5 0000000000300000 :lblArrNext_addrRef_6 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:lblArrNext_addrRef_7 0000000000300000 &tmp ?+8 ; relsq lblArrNext tmp 1
# End mov

# decaddr lblArrNext 10
&lblArrNext_addrRef_0 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_0 CONST_10 1
&lblArrNext_addrRef_1 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_1 CONST_10 1
&lblArrNext_addrRef_2 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_2 CONST_10 1
&lblArrNext_addrRef_3 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_3 CONST_10 1
&lblArrNext_addrRef_4 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_4 CONST_10 1
&lblArrNext_addrRef_5 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_5 CONST_10 1
&lblArrNext_addrRef_6 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_6 CONST_10 1
&lblArrNext_addrRef_7 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_7 CONST_10 1
&lblArrNext_addrRef_8 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_8 CONST_10 1
&lblArrNext_addrRef_9 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_9 CONST_10 1
&lblArrNext_addrRef_10 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_10 CONST_10 1
&lblArrNext_addrRef_11 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_11 CONST_10 1
&lblArrNext_addrRef_12 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_12 CONST_10 1
&lblArrNext_addrRef_13 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_13 CONST_10 1
&lblArrNext_addrRef_14 &CONST_10 ?+8 ; relsq lblArrNext_addrRef_14 CONST_10 1
# End alloc_str


# Start inp_token lblArrNext tmp tmp2
; addr inp_token_0_str 0

# Start setaddr inp_token_0_str lblArrNext tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inp_token_0_str_addrRef_0 ?+8 ; relsq tmp2 inp_token_0_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :lblArrNext_addrRef_8 0000000000300000 ?+8 ; relsq tmp lblArrNext 1
&inp_token_0_str_addrRef_0 &tmp ?+8 ; relsq inp_token_0_str_addrRef_0 tmp 1
&inp_token_0_str_addrRef_1 &tmp ?+8 ; relsq inp_token_0_str_addrRef_1 tmp 1
&inp_token_0_str_addrRef_2 &tmp ?+8 ; relsq inp_token_0_str_addrRef_2 tmp 1
&inp_token_0_str_addrRef_3 &tmp ?+8 ; relsq inp_token_0_str_addrRef_3 tmp 1
&inp_token_0_str_addrRef_4 &tmp ?+8 ; relsq inp_token_0_str_addrRef_4 tmp 1
&inp_token_0_str_addrRef_5 &tmp ?+8 ; relsq inp_token_0_str_addrRef_5 tmp 1
# End setaddr

; var inp_token_0_len 0
# zero inp_token_0_len
&inp_token_0_len &inp_token_0_len ?+8 ; relsq inp_token_0_len inp_token_0_len 1
; label INP_TOKEN_0_LOOP

# Start getchar inp_token_0_str tmp
:INP_TOKEN_0_LOOP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
:inp_token_0_str_addrRef_0 &inp_token_0_str :inp_token_0_str_addrRef_1 &inp_token_0_str ?+8 ; relsq inp_token_0_str inp_token_0_str 1
:inp_token_0_str_addrRef_2 &inp_token_0_str &tmp ?+8 ; relsq inp_token_0_str tmp 1
# End getchar


# Start jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_0_str_addrRef_3 &inp_token_0_str ?+8 ; relsq tmp2 inp_token_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_20 ?+8 ; relsq tmp CONST_20 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_0_END ; lblsq tmp2 CONST_-1 JZ_0_END
&tmp &CONST_-1 &JZ_0_REVERT_A ; lblsq tmp CONST_-1 JZ_0_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_0_TERM ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
:JZ_0_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_0_END
# End jeq_const


# Start jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
:JZ_0_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_0_str_addrRef_4 &inp_token_0_str ?+8 ; relsq tmp2 inp_token_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_D ?+8 ; relsq tmp CONST_D 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_1_END ; lblsq tmp2 CONST_-1 JZ_1_END
&tmp &CONST_-1 &JZ_1_REVERT_A ; lblsq tmp CONST_-1 JZ_1_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_0_TERM ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
:JZ_1_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_1_END
# End jeq_const


# Start jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
:JZ_1_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_0_str_addrRef_5 &inp_token_0_str ?+8 ; relsq tmp2 inp_token_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_A ?+8 ; relsq tmp CONST_A 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_2_END ; lblsq tmp2 CONST_-1 JZ_2_END
&tmp &CONST_-1 &JZ_2_REVERT_A ; lblsq tmp CONST_-1 JZ_2_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_0_TERM ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
:JZ_2_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_2_END
# End jeq_const

# inc inp_token_0_len 1
:JZ_2_END &inp_token_0_len &CONST_-1 ?+8 ; relsq inp_token_0_len CONST_-1 1
# incaddr inp_token_0_str 8
&inp_token_0_str_addrRef_0 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
&inp_token_0_str_addrRef_1 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
&inp_token_0_str_addrRef_2 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
&inp_token_0_str_addrRef_3 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
&inp_token_0_str_addrRef_4 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
&inp_token_0_str_addrRef_5 &CONST_-8 ?+8 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# lbljmp INP_TOKEN_0_LOOP
&ZERO &ZERO &INP_TOKEN_0_LOOP ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
; label INP_TOKEN_0_TERM
# decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
:INP_TOKEN_0_TERM &inp_token_0_len &CONST_0 &INP_TOKEN_0_LOOP ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# incaddr lblArrNext 8
&lblArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&lblArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&lblArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&lblArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&lblArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&lblArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&lblArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&lblArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&lblArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&lblArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&lblArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&lblArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&lblArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&lblArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&lblArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1

# Start mov lblArrNext inp_token_0_len tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &inp_token_0_len ?+8 ; relsq tmp inp_token_0_len 1
:lblArrNext_addrRef_9 0000000000300000 :lblArrNext_addrRef_10 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:lblArrNext_addrRef_11 0000000000300000 &tmp ?+8 ; relsq lblArrNext tmp 1
# End mov

# decaddr lblArrNext 8
&lblArrNext_addrRef_0 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_0 CONST_8 1
&lblArrNext_addrRef_1 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_1 CONST_8 1
&lblArrNext_addrRef_2 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_2 CONST_8 1
&lblArrNext_addrRef_3 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_3 CONST_8 1
&lblArrNext_addrRef_4 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_4 CONST_8 1
&lblArrNext_addrRef_5 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_5 CONST_8 1
&lblArrNext_addrRef_6 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_6 CONST_8 1
&lblArrNext_addrRef_7 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_7 CONST_8 1
&lblArrNext_addrRef_8 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_8 CONST_8 1
&lblArrNext_addrRef_9 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_9 CONST_8 1
&lblArrNext_addrRef_10 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_10 CONST_8 1
&lblArrNext_addrRef_11 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_11 CONST_8 1
&lblArrNext_addrRef_12 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_12 CONST_8 1
&lblArrNext_addrRef_13 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_13 CONST_8 1
&lblArrNext_addrRef_14 &CONST_8 ?+8 ; relsq lblArrNext_addrRef_14 CONST_8 1
# End inp_token

&lblArrNext_addrRef_0 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_0 CONST_-18 1
&lblArrNext_addrRef_1 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_1 CONST_-18 1
&lblArrNext_addrRef_2 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_2 CONST_-18 1
&lblArrNext_addrRef_3 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_3 CONST_-18 1
&lblArrNext_addrRef_4 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_4 CONST_-18 1
&lblArrNext_addrRef_5 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_5 CONST_-18 1
&lblArrNext_addrRef_6 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_6 CONST_-18 1
&lblArrNext_addrRef_7 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_7 CONST_-18 1
&lblArrNext_addrRef_8 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_8 CONST_-18 1
&lblArrNext_addrRef_9 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_9 CONST_-18 1
&lblArrNext_addrRef_10 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_10 CONST_-18 1
&lblArrNext_addrRef_11 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_11 CONST_-18 1
&lblArrNext_addrRef_12 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_12 CONST_-18 1
&lblArrNext_addrRef_13 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_13 CONST_-18 1
&lblArrNext_addrRef_14 &CONST_-18 ?+8 ; relsq lblArrNext_addrRef_14 CONST_-18 1

# Start mov lblArrNext codeLen tmp
# movneg tmp codeLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &codeLen ?+8 ; relsq tmp codeLen 1
# movneg lblArrNext tmp
:lblArrNext_addrRef_12 0000000000300000 :lblArrNext_addrRef_13 0000000000300000 ?+8 ; relsq lblArrNext lblArrNext 1
:lblArrNext_addrRef_14 0000000000300000 &tmp ?+8 ; relsq lblArrNext tmp 1
# End mov

&lblArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_0 CONST_-8 1
&lblArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
&lblArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
&lblArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
&lblArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
&lblArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
&lblArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_6 CONST_-8 1
&lblArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_7 CONST_-8 1
&lblArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_8 CONST_-8 1
&lblArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
&lblArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_10 CONST_-8 1
&lblArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
&lblArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
&lblArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
&lblArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
&ZERO &ZERO &MAIN ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
:RECORD_REF &refCount &CONST_-1 ?+8 ; relsq refCount CONST_-1 1

# Start alloc_str refArrNext 1000 tmp

# Start malloc_const refArrNext 1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:refArrNext_addrRef_0 0000000000400000 :refArrNext_addrRef_1 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:refArrNext_addrRef_2 0000000000400000 &tmp ?+8 ; relsq refArrNext tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# End malloc_const

# incaddr refArrNext 8
&refArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&refArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&refArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&refArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&refArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&refArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&refArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&refArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&refArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&refArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&refArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&refArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&refArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&refArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&refArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# zero refArrNext
:refArrNext_addrRef_3 0000000000400000 :refArrNext_addrRef_4 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
# incaddr refArrNext 8
&refArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&refArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&refArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&refArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&refArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&refArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&refArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&refArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&refArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&refArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&refArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&refArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&refArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&refArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&refArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1

# Start mov refArrNext CONST_1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
:refArrNext_addrRef_5 0000000000400000 :refArrNext_addrRef_6 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:refArrNext_addrRef_7 0000000000400000 &tmp ?+8 ; relsq refArrNext tmp 1
# End mov

# decaddr refArrNext 10
&refArrNext_addrRef_0 &CONST_10 ?+8 ; relsq refArrNext_addrRef_0 CONST_10 1
&refArrNext_addrRef_1 &CONST_10 ?+8 ; relsq refArrNext_addrRef_1 CONST_10 1
&refArrNext_addrRef_2 &CONST_10 ?+8 ; relsq refArrNext_addrRef_2 CONST_10 1
&refArrNext_addrRef_3 &CONST_10 ?+8 ; relsq refArrNext_addrRef_3 CONST_10 1
&refArrNext_addrRef_4 &CONST_10 ?+8 ; relsq refArrNext_addrRef_4 CONST_10 1
&refArrNext_addrRef_5 &CONST_10 ?+8 ; relsq refArrNext_addrRef_5 CONST_10 1
&refArrNext_addrRef_6 &CONST_10 ?+8 ; relsq refArrNext_addrRef_6 CONST_10 1
&refArrNext_addrRef_7 &CONST_10 ?+8 ; relsq refArrNext_addrRef_7 CONST_10 1
&refArrNext_addrRef_8 &CONST_10 ?+8 ; relsq refArrNext_addrRef_8 CONST_10 1
&refArrNext_addrRef_9 &CONST_10 ?+8 ; relsq refArrNext_addrRef_9 CONST_10 1
&refArrNext_addrRef_10 &CONST_10 ?+8 ; relsq refArrNext_addrRef_10 CONST_10 1
&refArrNext_addrRef_11 &CONST_10 ?+8 ; relsq refArrNext_addrRef_11 CONST_10 1
&refArrNext_addrRef_12 &CONST_10 ?+8 ; relsq refArrNext_addrRef_12 CONST_10 1
&refArrNext_addrRef_13 &CONST_10 ?+8 ; relsq refArrNext_addrRef_13 CONST_10 1
&refArrNext_addrRef_14 &CONST_10 ?+8 ; relsq refArrNext_addrRef_14 CONST_10 1
# End alloc_str


# Start inp_token refArrNext tmp tmp2
; addr inp_token_1_str 0

# Start setaddr inp_token_1_str refArrNext tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inp_token_1_str_addrRef_0 ?+8 ; relsq tmp2 inp_token_1_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :refArrNext_addrRef_8 0000000000400000 ?+8 ; relsq tmp refArrNext 1
&inp_token_1_str_addrRef_0 &tmp ?+8 ; relsq inp_token_1_str_addrRef_0 tmp 1
&inp_token_1_str_addrRef_1 &tmp ?+8 ; relsq inp_token_1_str_addrRef_1 tmp 1
&inp_token_1_str_addrRef_2 &tmp ?+8 ; relsq inp_token_1_str_addrRef_2 tmp 1
&inp_token_1_str_addrRef_3 &tmp ?+8 ; relsq inp_token_1_str_addrRef_3 tmp 1
&inp_token_1_str_addrRef_4 &tmp ?+8 ; relsq inp_token_1_str_addrRef_4 tmp 1
&inp_token_1_str_addrRef_5 &tmp ?+8 ; relsq inp_token_1_str_addrRef_5 tmp 1
# End setaddr

; var inp_token_1_len 0
# zero inp_token_1_len
&inp_token_1_len &inp_token_1_len ?+8 ; relsq inp_token_1_len inp_token_1_len 1
; label INP_TOKEN_1_LOOP

# Start getchar inp_token_1_str tmp
:INP_TOKEN_1_LOOP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
:inp_token_1_str_addrRef_0 &inp_token_1_str :inp_token_1_str_addrRef_1 &inp_token_1_str ?+8 ; relsq inp_token_1_str inp_token_1_str 1
:inp_token_1_str_addrRef_2 &inp_token_1_str &tmp ?+8 ; relsq inp_token_1_str tmp 1
# End getchar


# Start jeq_const inp_token_1_str 20 INP_TOKEN_1_TERM tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_1_str_addrRef_3 &inp_token_1_str ?+8 ; relsq tmp2 inp_token_1_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_20 ?+8 ; relsq tmp CONST_20 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_3_END ; lblsq tmp2 CONST_-1 JZ_3_END
&tmp &CONST_-1 &JZ_3_REVERT_A ; lblsq tmp CONST_-1 JZ_3_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_1_TERM ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_3_REVERT_A
:JZ_3_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_3_END
# End jeq_const


# Start jeq_const inp_token_1_str d INP_TOKEN_1_TERM tmp tmp2
:JZ_3_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_1_str_addrRef_4 &inp_token_1_str ?+8 ; relsq tmp2 inp_token_1_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_D ?+8 ; relsq tmp CONST_D 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_4_END ; lblsq tmp2 CONST_-1 JZ_4_END
&tmp &CONST_-1 &JZ_4_REVERT_A ; lblsq tmp CONST_-1 JZ_4_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_1_TERM ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_4_REVERT_A
:JZ_4_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_4_END
# End jeq_const


# Start jeq_const inp_token_1_str a INP_TOKEN_1_TERM tmp tmp2
:JZ_4_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_1_str_addrRef_5 &inp_token_1_str ?+8 ; relsq tmp2 inp_token_1_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_A ?+8 ; relsq tmp CONST_A 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_5_END ; lblsq tmp2 CONST_-1 JZ_5_END
&tmp &CONST_-1 &JZ_5_REVERT_A ; lblsq tmp CONST_-1 JZ_5_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_1_TERM ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_5_REVERT_A
:JZ_5_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_5_END
# End jeq_const

# inc inp_token_1_len 1
:JZ_5_END &inp_token_1_len &CONST_-1 ?+8 ; relsq inp_token_1_len CONST_-1 1
# incaddr inp_token_1_str 8
&inp_token_1_str_addrRef_0 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_0 CONST_-8 1
&inp_token_1_str_addrRef_1 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_1 CONST_-8 1
&inp_token_1_str_addrRef_2 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_2 CONST_-8 1
&inp_token_1_str_addrRef_3 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_3 CONST_-8 1
&inp_token_1_str_addrRef_4 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_4 CONST_-8 1
&inp_token_1_str_addrRef_5 &CONST_-8 ?+8 ; relsq inp_token_1_str_addrRef_5 CONST_-8 1
# lbljmp INP_TOKEN_1_LOOP
&ZERO &ZERO &INP_TOKEN_1_LOOP ; lblsq ZERO ZERO INP_TOKEN_1_LOOP
; label INP_TOKEN_1_TERM
# decleq inp_token_1_len 0 INP_TOKEN_1_LOOP
:INP_TOKEN_1_TERM &inp_token_1_len &CONST_0 &INP_TOKEN_1_LOOP ; lblsq inp_token_1_len CONST_0 INP_TOKEN_1_LOOP
# incaddr refArrNext 8
&refArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&refArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&refArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&refArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&refArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&refArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&refArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&refArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&refArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&refArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&refArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&refArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&refArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&refArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&refArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1

# Start mov refArrNext inp_token_1_len tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &inp_token_1_len ?+8 ; relsq tmp inp_token_1_len 1
:refArrNext_addrRef_9 0000000000400000 :refArrNext_addrRef_10 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:refArrNext_addrRef_11 0000000000400000 &tmp ?+8 ; relsq refArrNext tmp 1
# End mov

# decaddr refArrNext 8
&refArrNext_addrRef_0 &CONST_8 ?+8 ; relsq refArrNext_addrRef_0 CONST_8 1
&refArrNext_addrRef_1 &CONST_8 ?+8 ; relsq refArrNext_addrRef_1 CONST_8 1
&refArrNext_addrRef_2 &CONST_8 ?+8 ; relsq refArrNext_addrRef_2 CONST_8 1
&refArrNext_addrRef_3 &CONST_8 ?+8 ; relsq refArrNext_addrRef_3 CONST_8 1
&refArrNext_addrRef_4 &CONST_8 ?+8 ; relsq refArrNext_addrRef_4 CONST_8 1
&refArrNext_addrRef_5 &CONST_8 ?+8 ; relsq refArrNext_addrRef_5 CONST_8 1
&refArrNext_addrRef_6 &CONST_8 ?+8 ; relsq refArrNext_addrRef_6 CONST_8 1
&refArrNext_addrRef_7 &CONST_8 ?+8 ; relsq refArrNext_addrRef_7 CONST_8 1
&refArrNext_addrRef_8 &CONST_8 ?+8 ; relsq refArrNext_addrRef_8 CONST_8 1
&refArrNext_addrRef_9 &CONST_8 ?+8 ; relsq refArrNext_addrRef_9 CONST_8 1
&refArrNext_addrRef_10 &CONST_8 ?+8 ; relsq refArrNext_addrRef_10 CONST_8 1
&refArrNext_addrRef_11 &CONST_8 ?+8 ; relsq refArrNext_addrRef_11 CONST_8 1
&refArrNext_addrRef_12 &CONST_8 ?+8 ; relsq refArrNext_addrRef_12 CONST_8 1
&refArrNext_addrRef_13 &CONST_8 ?+8 ; relsq refArrNext_addrRef_13 CONST_8 1
&refArrNext_addrRef_14 &CONST_8 ?+8 ; relsq refArrNext_addrRef_14 CONST_8 1
# End inp_token

&refArrNext_addrRef_0 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_0 CONST_-18 1
&refArrNext_addrRef_1 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_1 CONST_-18 1
&refArrNext_addrRef_2 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_2 CONST_-18 1
&refArrNext_addrRef_3 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_3 CONST_-18 1
&refArrNext_addrRef_4 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_4 CONST_-18 1
&refArrNext_addrRef_5 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_5 CONST_-18 1
&refArrNext_addrRef_6 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_6 CONST_-18 1
&refArrNext_addrRef_7 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_7 CONST_-18 1
&refArrNext_addrRef_8 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_8 CONST_-18 1
&refArrNext_addrRef_9 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_9 CONST_-18 1
&refArrNext_addrRef_10 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_10 CONST_-18 1
&refArrNext_addrRef_11 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_11 CONST_-18 1
&refArrNext_addrRef_12 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_12 CONST_-18 1
&refArrNext_addrRef_13 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_13 CONST_-18 1
&refArrNext_addrRef_14 &CONST_-18 ?+8 ; relsq refArrNext_addrRef_14 CONST_-18 1

# Start mov refArrNext codeLen tmp
# movneg tmp codeLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &codeLen ?+8 ; relsq tmp codeLen 1
# movneg refArrNext tmp
:refArrNext_addrRef_12 0000000000400000 :refArrNext_addrRef_13 0000000000400000 ?+8 ; relsq refArrNext refArrNext 1
:refArrNext_addrRef_14 0000000000400000 &tmp ?+8 ; relsq refArrNext tmp 1
# End mov

&refArrNext_addrRef_0 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_0 CONST_-8 1
&refArrNext_addrRef_1 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_1 CONST_-8 1
&refArrNext_addrRef_2 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_2 CONST_-8 1
&refArrNext_addrRef_3 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_3 CONST_-8 1
&refArrNext_addrRef_4 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_4 CONST_-8 1
&refArrNext_addrRef_5 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_5 CONST_-8 1
&refArrNext_addrRef_6 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_6 CONST_-8 1
&refArrNext_addrRef_7 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_7 CONST_-8 1
&refArrNext_addrRef_8 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_8 CONST_-8 1
&refArrNext_addrRef_9 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_9 CONST_-8 1
&refArrNext_addrRef_10 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_10 CONST_-8 1
&refArrNext_addrRef_11 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_11 CONST_-8 1
&refArrNext_addrRef_12 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_12 CONST_-8 1
&refArrNext_addrRef_13 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_13 CONST_-8 1
&refArrNext_addrRef_14 &CONST_-8 ?+8 ; relsq refArrNext_addrRef_14 CONST_-8 1
&ZERO &ZERO &WRITE_QWORD ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
:WRITE &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&tmp &cur ?+8 ; relsq tmp cur 1
&cur &tmp ?+8 ; relsq cur tmp 1
&cur &tmp ?+8 ; relsq cur tmp 1
&cur &tmp ?+8 ; relsq cur tmp 1
# End mul_16

&cur &val ?+8 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
&i &CONST_-1 &MAIN ; lblsq i CONST_-1 MAIN
&i &CONST_10 ?+8 ; relsq i CONST_10 1

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address

# Start mov bufEnd cur tmp
# movneg tmp cur
:WRITE_QWORD &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &cur ?+8 ; relsq tmp cur 1
# movneg bufEnd tmp
:bufEnd_addrRef_0 0000000000100000 :bufEnd_addrRef_1 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
:bufEnd_addrRef_2 0000000000100000 &tmp ?+8 ; relsq bufEnd tmp 1
# End mov

&cur &cur ?+8 ; relsq cur cur 1
&bufEnd_addrRef_0 &CONST_-8 ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bufEnd_addrRef_1 &CONST_-8 ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bufEnd_addrRef_2 &CONST_-8 ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
&codeLen &CONST_-8 ?+8 ; relsq codeLen CONST_-8 1
&ZERO &ZERO &MAIN ; lblsq ZERO ZERO MAIN


# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var refsToResolve 0

# Start mov refsToResolve refCount tmp
# movneg tmp refCount
:RESOLVE_REF &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &refCount ?+8 ; relsq tmp refCount 1
# movneg refsToResolve tmp
&refsToResolve &refsToResolve ?+8 ; relsq refsToResolve refsToResolve 1
&refsToResolve &tmp ?+8 ; relsq refsToResolve tmp 1
# End mov

; addr curRef 400000

; label RESOLVE_REF_LOOP
:RESOLVE_REF_LOOP &refsToResolve &CONST_0 &PRINT ; lblsq refsToResolve CONST_0 PRINT
&refsToResolve &CONST_1 ?+8 ; relsq refsToResolve CONST_1 1

; addr curFindLabel 0

# Start setaddr curFindLabel lblArrStart tmp tmp2

# Start mov tmp curFindLabel_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curFindLabel_addrRef_0 ?+8 ; relsq tmp2 curFindLabel_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp lblArrStart
&tmp &lblArrStart ?+8 ; relsq tmp lblArrStart 1
&curFindLabel_addrRef_0 &tmp ?+8 ; relsq curFindLabel_addrRef_0 tmp 1
&curFindLabel_addrRef_1 &tmp ?+8 ; relsq curFindLabel_addrRef_1 tmp 1
# End setaddr


; label RESOLVE_REF_FIND_LABEL

# Start strcmp_const curRef curFindLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_const_0_a 0
# copyaddr strcmp_const_0_a curRef tmp tmp2

# Start setaddr strcmp_const_0_a curRef_addrRef_0 tmp tmp2
:RESOLVE_REF_FIND_LABEL &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curRef_addrRef_0 ?+8 ; relsq tmp curRef_addrRef_0 1
&strcmp_const_0_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
&strcmp_const_0_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
&strcmp_const_0_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# End setaddr

# incaddr strcmp_const_0_a 8
&strcmp_const_0_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
&strcmp_const_0_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
&strcmp_const_0_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# incaddr curFindLabel 8
&curFindLabel_addrRef_0 &CONST_-8 ?+8 ; relsq curFindLabel_addrRef_0 CONST_-8 1
&curFindLabel_addrRef_1 &CONST_-8 ?+8 ; relsq curFindLabel_addrRef_1 CONST_-8 1

# Start jne strcmp_const_0_a curFindLabel STRCMP_CONST_0_REVERT_ADDR tmp tmp2

# Start mov tmp strcmp_const_0_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_0_a_addrRef_0 &strcmp_const_0_a ?+8 ; relsq tmp2 strcmp_const_0_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp curFindLabel
&tmp :curFindLabel_addrRef_0 &curFindLabel ?+8 ; relsq tmp curFindLabel 1

# Start jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_0_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
&tmp &CONST_-1 &JNZ_0_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_0_END ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
:JNZ_0_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_0_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# End jnz

# End jne

; var strcmp_const_0_len 0

# Start mov strcmp_const_0_len strcmp_const_0_a tmp
# movneg tmp strcmp_const_0_a
:JNZ_0_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_0_a_addrRef_1 &strcmp_const_0_a ?+8 ; relsq tmp strcmp_const_0_a 1
# movneg strcmp_const_0_len tmp
&strcmp_const_0_len &strcmp_const_0_len ?+8 ; relsq strcmp_const_0_len strcmp_const_0_len 1
&strcmp_const_0_len &tmp ?+8 ; relsq strcmp_const_0_len tmp 1
# End mov

# decaddr strcmp_const_0_a 8
&strcmp_const_0_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&strcmp_const_0_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&strcmp_const_0_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# decaddr curFindLabel 8
&curFindLabel_addrRef_0 &CONST_8 ?+8 ; relsq curFindLabel_addrRef_0 CONST_8 1
&curFindLabel_addrRef_1 &CONST_8 ?+8 ; relsq curFindLabel_addrRef_1 CONST_8 1
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0

# Start setaddr strcmp_const_0_aStr strcmp_const_0_a tmp tmp2

# Start mov tmp strcmp_const_0_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp strcmp_const_0_a
&tmp :strcmp_const_0_a_addrRef_2 &strcmp_const_0_a ?+8 ; relsq tmp strcmp_const_0_a 1
&strcmp_const_0_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# End setaddr


# Start setaddr strcmp_const_0_bStr curFindLabel tmp tmp2

# Start mov tmp strcmp_const_0_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp curFindLabel
&tmp :curFindLabel_addrRef_1 &curFindLabel ?+8 ; relsq tmp curFindLabel 1
&strcmp_const_0_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
# End setaddr

; label STRCMP_CONST_0_LOOP
# decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
:STRCMP_CONST_0_LOOP &strcmp_const_0_len &CONST_0 &RESOLVE_REF_FOUND_LABEL ; lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# dec strcmp_const_0_len 1
&strcmp_const_0_len &CONST_1 ?+8 ; relsq strcmp_const_0_len CONST_1 1

# Start jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2

# Start mov tmp strcmp_const_0_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_0_aStr_addrRef_0 &strcmp_const_0_aStr ?+8 ; relsq tmp2 strcmp_const_0_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp strcmp_const_0_bStr
&tmp :strcmp_const_0_bStr_addrRef_0 &strcmp_const_0_bStr ?+8 ; relsq tmp strcmp_const_0_bStr 1

# Start jnz tmp STRCMP_CONST_0_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_0_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
&tmp &CONST_-1 &JNZ_1_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_1_END ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
:JNZ_1_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_0_END ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# End jnz

# End jne

# incaddr strcmp_const_0_aStr 8
:JNZ_1_END &strcmp_const_0_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# incaddr strcmp_const_0_bStr 8
&strcmp_const_0_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# lbljmp STRCMP_CONST_0_LOOP
&ZERO &ZERO &STRCMP_CONST_0_LOOP ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
; label STRCMP_CONST_0_REVERT_ADDR
# decaddr curFindLabel 8
:STRCMP_CONST_0_REVERT_ADDR &curFindLabel_addrRef_0 &CONST_8 ?+8 ; relsq curFindLabel_addrRef_0 CONST_8 1
&curFindLabel_addrRef_1 &CONST_8 ?+8 ; relsq curFindLabel_addrRef_1 CONST_8 1
; label STRCMP_CONST_0_END
# End strcmp_const


# This is the wrong label. Try the next one
:STRCMP_CONST_0_END &curFindLabel_addrRef_0 &CONST_-20 ?+8 ; relsq curFindLabel_addrRef_0 CONST_-20 1
&curFindLabel_addrRef_1 &CONST_-20 ?+8 ; relsq curFindLabel_addrRef_1 CONST_-20 1
&ZERO &ZERO &RESOLVE_REF_FIND_LABEL ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_FOUND_LABEL
; addr curLabel 0
# copyaddr curLabel curFindLabel tmp tmp2

# Start setaddr curLabel curFindLabel_addrRef_0 tmp tmp2
:RESOLVE_REF_FOUND_LABEL &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLabel_addrRef_0 ?+8 ; relsq tmp2 curLabel_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curFindLabel_addrRef_0 ?+8 ; relsq tmp curFindLabel_addrRef_0 1
&curLabel_addrRef_0 &tmp ?+8 ; relsq curLabel_addrRef_0 tmp 1
# End setaddr

&curLabel_addrRef_0 &CONST_-18 ?+8 ; relsq curLabel_addrRef_0 CONST_-18 1

# Fetch the reference address and point curRef to the next reference
&curRef_addrRef_0 &CONST_-18 ?+8 ; relsq curRef_addrRef_0 CONST_-18 1
&curRef_addrRef_1 &CONST_-18 ?+8 ; relsq curRef_addrRef_1 CONST_-18 1

# Start add curRef bufStart tmp
# movneg tmp bufStart
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &bufStart ?+8 ; relsq tmp bufStart 1
# sub curRef tmp
:curRef_addrRef_0 0000000000400000 &tmp ?+8 ; relsq curRef tmp 1
# End add

; addr refAt 0

# Start setaddr refAt curRef tmp tmp2

# Start mov tmp refAt_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &refAt_addrRef_0 ?+8 ; relsq tmp2 refAt_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# sub tmp curRef
&tmp :curRef_addrRef_1 0000000000400000 ?+8 ; relsq tmp curRef 1
&refAt_addrRef_0 &tmp ?+8 ; relsq refAt_addrRef_0 tmp 1
&refAt_addrRef_1 &tmp ?+8 ; relsq refAt_addrRef_1 tmp 1
&refAt_addrRef_2 &tmp ?+8 ; relsq refAt_addrRef_2 tmp 1
# End setaddr

&curRef_addrRef_0 &CONST_-8 ?+8 ; relsq curRef_addrRef_0 CONST_-8 1
&curRef_addrRef_1 &CONST_-8 ?+8 ; relsq curRef_addrRef_1 CONST_-8 1


# Start mov refAt curLabel tmp
# movneg tmp curLabel
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curLabel_addrRef_0 &curLabel ?+8 ; relsq tmp curLabel 1
# movneg refAt tmp
:refAt_addrRef_0 &refAt :refAt_addrRef_1 &refAt ?+8 ; relsq refAt refAt 1
:refAt_addrRef_2 &refAt &tmp ?+8 ; relsq refAt tmp 1
# End mov

&ZERO &ZERO &RESOLVE_REF_LOOP ; lblsq ZERO ZERO RESOLVE_REF_LOOP


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# set i 8
:PRINT &i &i ?+8 ; relsq i i 1
&i &CONST_-8 ?+8 ; relsq i CONST_-8 1
&charToPrint_addrRef_0 &CONST_8 ?+8 ; relsq charToPrint_addrRef_0 CONST_8 1

; label PRINT_CHAR_START
:PRINT_CHAR_START &charToPrint_addrRef_0 &CONST_-1 ?+8 ; relsq charToPrint_addrRef_0 CONST_-1 1

# Start mov c charToPrint tmp
# movneg tmp charToPrint
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :charToPrint_addrRef_0 0000000000100000 ?+8 ; relsq tmp charToPrint 1
# movneg c tmp
&c &c ?+8 ; relsq c c 1
&c &tmp ?+8 ; relsq c tmp 1
# End mov


# Start mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# zero mod_256_0_isNeg
# sub mod_256_0_isNeg mod_256_0_isNeg
&mod_256_0_isNeg &mod_256_0_isNeg ?+8 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# jn c MOD_256_0_IS_NEG tmp tmp2

# Start jl c ZERO MOD_256_0_IS_NEG tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &c ?+8 ; relsq tmp2 c 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp &ZERO &MOD_256_0_IS_NEG ; lblsq tmp ZERO MOD_256_0_IS_NEG
# End jl

# lbljmp MOD_256_0_START
&ZERO &ZERO &MOD_256_0_START ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_IS_NEG
# inc mod_256_0_isNeg 1
# dec mod_256_0_isNeg -1
:MOD_256_0_IS_NEG &mod_256_0_isNeg &CONST_-1 ?+8 ; relsq mod_256_0_isNeg CONST_-1 1

# Start neg c tmp tmp2
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1

# Start mov c tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&c &c ?+8 ; relsq c c 1
&c &tmp2 ?+8 ; relsq c tmp2 1
# End mov

# End neg

; label MOD_256_0_START
; var mod_256_0_subber 0
# set mod_256_0_subber 100
# zero mod_256_0_subber
:MOD_256_0_START &mod_256_0_subber &mod_256_0_subber ?+8 ; relsq mod_256_0_subber mod_256_0_subber 1
# inc mod_256_0_subber 100
&mod_256_0_subber &CONST_-100 ?+8 ; relsq mod_256_0_subber CONST_-100 1

# Start jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2

# Start mov tmp c tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &c ?+8 ; relsq tmp2 c 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp &mod_256_0_subber &MOD_256_0_CHECK_NEG ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# End jl

; var mod_256_0_nextSubber 0
# set mod_256_0_nextSubber 10000
# zero mod_256_0_nextSubber
&mod_256_0_nextSubber &mod_256_0_nextSubber ?+8 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# inc mod_256_0_nextSubber 10000
&mod_256_0_nextSubber &CONST_-10000 ?+8 ; relsq mod_256_0_nextSubber CONST_-10000 1
; label MOD_256_0_MULT_SUBBER_START

# Start jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2

# Start mov tmp c tmp2
:MOD_256_0_MULT_SUBBER_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &c ?+8 ; relsq tmp2 c 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
&tmp &mod_256_0_nextSubber &MOD_256_0_SUBTRACT_A ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# End jl


# Start mul_256 mod_256_0_subber tmp

# Start mul_16 mod_256_0_subber tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
# End mul_16


# Start mul_16 mod_256_0_subber tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
&mod_256_0_subber &tmp ?+8 ; relsq mod_256_0_subber tmp 1
# End mul_16

# End mul_256


# Start mul_256 mod_256_0_nextSubber tmp

# Start mul_16 mod_256_0_nextSubber tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16


# Start mul_16 mod_256_0_nextSubber tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&tmp &mod_256_0_nextSubber ?+8 ; relsq tmp mod_256_0_nextSubber 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
&mod_256_0_nextSubber &tmp ?+8 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16

# End mul_256

# decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
&mod_256_0_nextSubber &CONST_0 &MOD_256_0_SUBTRACT_A ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# lbljmp MOD_256_0_MULT_SUBBER_START
&ZERO &ZERO &MOD_256_0_MULT_SUBBER_START ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
; label MOD_256_0_SUBTRACT_A
:MOD_256_0_SUBTRACT_A &c &mod_256_0_subber &MOD_256_0_REVERT_SUB ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&c &mod_256_0_subber &MOD_256_0_REVERT_SUB ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&c &mod_256_0_subber &MOD_256_0_REVERT_SUB ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
&c &mod_256_0_subber &MOD_256_0_REVERT_SUB ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# lbljmp MOD_256_0_SUBTRACT_A
&ZERO &ZERO &MOD_256_0_SUBTRACT_A ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
; label MOD_256_0_REVERT_SUB

# Start jz c MOD_256_0_START tmp
# movneg tmp c
:MOD_256_0_REVERT_SUB &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# incleq tmp 1 JZ_6_END
&tmp &CONST_-1 &JZ_6_END ; lblsq tmp CONST_-1 JZ_6_END
# incleq c 1 JZ_6_REVERT_A
&c &CONST_-1 &JZ_6_REVERT_A ; lblsq c CONST_-1 JZ_6_REVERT_A
# dec c 1
&c &CONST_1 ?+8 ; relsq c CONST_1 1
# lbljmp MOD_256_0_START
&ZERO &ZERO &MOD_256_0_START ; lblsq ZERO ZERO MOD_256_0_START
; label JZ_6_REVERT_A
# dec c 1
:JZ_6_REVERT_A &c &CONST_1 ?+8 ; relsq c CONST_1 1
; label JZ_6_END
# End jz


# Start add c mod_256_0_subber tmp
# movneg tmp mod_256_0_subber
:JZ_6_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &mod_256_0_subber ?+8 ; relsq tmp mod_256_0_subber 1
# sub c tmp
&c &tmp ?+8 ; relsq c tmp 1
# End add

# lbljmp MOD_256_0_START
&ZERO &ZERO &MOD_256_0_START ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_CHECK_NEG
# decleq mod_256_0_isNeg 0 MOD_256_0_END
:MOD_256_0_CHECK_NEG &mod_256_0_isNeg &CONST_0 &MOD_256_0_END ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# decleq c 0 MOD_256_0_END
&c &CONST_0 &MOD_256_0_END ; lblsq c CONST_0 MOD_256_0_END

# Start mov tmp c tmp2
# movneg tmp2 c
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &c ?+8 ; relsq tmp2 c 1
# movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# End mov

# set c 100
# zero c
&c &c ?+8 ; relsq c c 1
# inc c 100
&c &CONST_-100 ?+8 ; relsq c CONST_-100 1
# sub c tmp
&c &tmp ?+8 ; relsq c tmp 1
; label MOD_256_0_END

# Start putchar c tmp
:MOD_256_0_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# movneg tmp c
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &c ?+8 ; relsq tmp c 1
# dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# End putchar

&i &CONST_1 &PRINT_CHAR_END ; lblsq i CONST_1 PRINT_CHAR_END
&ZERO &ZERO &PRINT_CHAR_START ; lblsq ZERO ZERO PRINT_CHAR_START

; label PRINT_CHAR_END
# Go to the next qword
:PRINT_CHAR_END &charToPrint_addrRef_0 &CONST_-8 ?+8 ; relsq charToPrint_addrRef_0 CONST_-8 1
&codeLen &CONST_8 &HALT ; lblsq codeLen CONST_8 HALT
&ZERO &ZERO &PRINT ; lblsq ZERO ZERO PRINT

; label HALT

# Start halt tmp tmp2

# Start set_safe CPU_CONTROL_START 2 tmp tmp2
:HALT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &CONST_2 ?+8 ; relsq tmp CONST_2 1
0000000013ee0000 &tmp ?+8 ; relsq CPU_CONTROL_START tmp 1
# End set_safe

&ZERO &ZERO ?-10 ; relsq ZERO ZERO 0

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_1000 1000
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_-20 -20
; var CONST_-100 -100
; var CONST_-10000 -10000

:tmp 0000000000000000 ; raw 0000000000000000 # tmp
:tmp2 0000000000000000 ; raw 0000000000000000 # tmp2
:FREE_START 0000000001000000 ; raw 0000000001000000 # FREE_START
:codeLen 0000000000000000 ; raw 0000000000000000 # codeLen
:val 0000000000000000 ; raw 0000000000000000 # val
:c 0000000000000000 ; raw 0000000000000000 # c
:c2 0000000000000000 ; raw 0000000000000000 # c2
:isNeg 0000000000000000 ; raw 0000000000000000 # isNeg
:lblArrStart 0000000000300000 ; raw 0000000000300000 # lblArrStart
:lblCount 0000000000000000 ; raw 0000000000000000 # lblCount
:refArrStart 0000000000400000 ; raw 0000000000400000 # refArrStart
:refCount 0000000000000000 ; raw 0000000000000000 # refCount
:inp_token_0_len 0000000000000000 ; raw 0000000000000000 # inp_token_0_len
:inp_token_1_len 0000000000000000 ; raw 0000000000000000 # inp_token_1_len
:cur 0000000000000000 ; raw 0000000000000000 # cur
:i fffffffffffffff1 ; raw fffffffffffffff1 # i
:bufStart 0000000000100000 ; raw 0000000000100000 # bufStart
:refsToResolve 0000000000000000 ; raw 0000000000000000 # refsToResolve
:strcmp_const_0_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
:mod_256_0_isNeg 0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
:mod_256_0_subber 0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
:mod_256_0_nextSubber 0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
:CONST_-1 ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:CONST_22 0000000000000022 ; raw 0000000000000022 # CONST_22
:CONST_1 0000000000000001 ; raw 0000000000000001 # CONST_1
:CONST_2 0000000000000002 ; raw 0000000000000002 # CONST_2
:CONST_9 0000000000000009 ; raw 0000000000000009 # CONST_9
:CONST_A 000000000000000a ; raw 000000000000000a # CONST_A
:CONST_3 0000000000000003 ; raw 0000000000000003 # CONST_3
:CONST_6 0000000000000006 ; raw 0000000000000006 # CONST_6
:CONST_1A 000000000000001a ; raw 000000000000001a # CONST_1A
:CONST_17 0000000000000017 ; raw 0000000000000017 # CONST_17
:CONST_2C 000000000000002c ; raw 000000000000002c # CONST_2C
:CONST_2F 000000000000002f ; raw 000000000000002f # CONST_2F
:CONST_7 0000000000000007 ; raw 0000000000000007 # CONST_7
:CONST_0 0000000000000000 ; raw 0000000000000000 # CONST_0
:CONST_26 0000000000000026 ; raw 0000000000000026 # CONST_26
:CONST_1000 0000000000001000 ; raw 0000000000001000 # CONST_1000
:CONST_-8 fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:CONST_10 0000000000000010 ; raw 0000000000000010 # CONST_10
:CONST_20 0000000000000020 ; raw 0000000000000020 # CONST_20
:CONST_D 000000000000000d ; raw 000000000000000d # CONST_D
:CONST_8 0000000000000008 ; raw 0000000000000008 # CONST_8
:CONST_-18 ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
:CONST_-20 ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:CONST_-100 ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
:CONST_-10000 ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
