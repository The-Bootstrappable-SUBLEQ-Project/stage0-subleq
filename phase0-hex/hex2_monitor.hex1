# hex1
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; var FREE_START 1000000
:aa :ab :ac :ad :ae :af :ag :ah :ai :aj &aa &aa &ak ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp
# set tmp 1
:ak :am &al &al ?+8 ; relsq tmp tmp 1
&al &an ?+8 ; relsq tmp CONST_-1 1
&al 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ao &ao ?+8 ; relsq c c 1
&ao &al ?+8 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
&al &al ?+8 ; relsq tmp tmp 1
&al &ao ?+8 ; relsq tmp c 1
# movneg c2 tmp
&ap &ap ?+8 ; relsq c2 c2 1
&ap &al ?+8 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
&ao &aq &am ; lblsq c CONST_22 MAIN

# Handle #
&ao &ar &as ; lblsq c CONST_1 COMMENT

# Handle $ and %
&ao &at &am ; lblsq c CONST_2 MAIN

# Handle &
&ao &ar &au ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
&ao &av &am ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &an ?+8 ; relsq val CONST_-1 1
&ao &ax &ay ; lblsq c CONST_A WRITE

# Handle :
&ao &ar &au ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
&ao &ar &as ; lblsq c CONST_1 COMMENT

# Handle < ~ >
&ao &az &am ; lblsq c CONST_3 MAIN

# Handle ?
&ao &ar &aA ; lblsq c CONST_1 HANDLE_REL

# Handle @
&ao &ar &am ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &av ?+8 ; relsq val CONST_9 1
&ao &aB &ay ; lblsq c CONST_6 WRITE

# Handle G ~ `
&ao &aC &am ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &av ?+8 ; relsq val CONST_9 1
&ao &aB &ay ; lblsq c CONST_6 WRITE

# Handle g ~ }
&ao &aD &am ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
&aa &aa &aE ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp
# set tmp 1
:as &al &al ?+8 ; relsq tmp tmp 1
&al &an ?+8 ; relsq tmp CONST_-1 1
&al 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ao &ao ?+8 ; relsq c c 1
&ao &al ?+8 ; relsq c tmp 1
# End getchar

# putchar c tmp
&ao &av &as ; lblsq c CONST_9 COMMENT
# Handle LF
&ao &ar &am ; lblsq c CONST_1 MAIN
&ao &at &as ; lblsq c CONST_2 COMMENT
# Handle CR
&ao &ar &am ; lblsq c CONST_1 MAIN
&aa &aa &as ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
:aA &aF &aF ?+8 ; relsq isNeg isNeg 1

# Start getchar c tmp
# set tmp 1
&al &al ?+8 ; relsq tmp tmp 1
&al &an ?+8 ; relsq tmp CONST_-1 1
&al 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ao &ao ?+8 ; relsq c c 1
&ao &al ?+8 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
&ao &aG &aH ; lblsq c CONST_2C REL_INP
&aF &an ?+8 ; relsq isNeg CONST_-1 1
# Handle -
&ao &ar &aH ; lblsq c CONST_1 REL_INP
&aF &aF ?+8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp
# set tmp 1
:aH &al &al ?+8 ; relsq tmp tmp 1
&al &an ?+8 ; relsq tmp CONST_-1 1
&al 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# reljmp -1
&aa &aa ?-28 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
&ao &ao ?+8 ; relsq c c 1
&ao &al ?+8 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
&ao &aI &aJ ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &an ?+8 ; relsq val CONST_-1 1
&ao &ax &aK ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
&ao &aL &aJ ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &av ?+8 ; relsq val CONST_9 1
&ao &aB &aK ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
&ao &aC &aJ ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
&aw &aw ?+8 ; relsq val val 1
&aw &ao ?+8 ; relsq val c 1
&aw &av ?+8 ; relsq val CONST_9 1
&ao &aB &aK ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
&aa &aa &aH ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
:aK &al &al ?+8 ; relsq tmp tmp 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&aM &al ?+8 ; relsq cur tmp 1
&aM &al ?+8 ; relsq cur tmp 1
&aM &al ?+8 ; relsq cur tmp 1
# End mul_16

&aM &aw ?+8 ; relsq cur val 1
&aa &aa &aH ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
:aJ &aF &aN &aO ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
&al &al ?+8 ; relsq tmp tmp 1
&al &aM ?+8 ; relsq tmp cur 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aM &aM ?+8 ; relsq cur cur 1
&aM &aP ?+8 ; relsq cur tmp2 1
# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
:aO &al &al ?+8 ; relsq tmp tmp 1
&al &aQ ?+8 ; relsq tmp codeLen 1
# sub cur tmp
&aM &al ?+8 ; relsq cur tmp 1
# End add

&aa &aa &aR ; lblsq ZERO ZERO WRITE_QWORD

# A log is made of three components
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

; var logArrStart 300000
; addr logArrNext 300000
; var logCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
:au &aS &an ?+8 ; relsq logCount CONST_-1 1

# Start alloc_str logArrNext 1000 tmp

# Start malloc_const logArrNext 1000 tmp
&al &al ?+8 ; relsq tmp tmp 1
&al &aT ?+8 ; relsq tmp FREE_START 1
:aU 0000000000300000 :aV 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:aW 0000000000300000 &al ?+8 ; relsq logArrNext tmp 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aX ?+8 ; relsq tmp CONST_1000 1
&aT &al ?+8 ; relsq FREE_START tmp 1
# End malloc_const

# incaddr logArrNext 8
&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
# zero logArrNext
:aZ 0000000000300000 :ba 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
# incaddr logArrNext 8
&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext CONST_1000 tmp
&al &al ?+8 ; relsq tmp tmp 1
&al &aX ?+8 ; relsq tmp CONST_1000 1
:bb 0000000000300000 :bc 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bd 0000000000300000 &al ?+8 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 10
&aU &bq ?+8 ; relsq logArrNext_addrRef_0 CONST_10 1
&aV &bq ?+8 ; relsq logArrNext_addrRef_1 CONST_10 1
&aW &bq ?+8 ; relsq logArrNext_addrRef_2 CONST_10 1
&aZ &bq ?+8 ; relsq logArrNext_addrRef_3 CONST_10 1
&ba &bq ?+8 ; relsq logArrNext_addrRef_4 CONST_10 1
&bb &bq ?+8 ; relsq logArrNext_addrRef_5 CONST_10 1
&bc &bq ?+8 ; relsq logArrNext_addrRef_6 CONST_10 1
&bd &bq ?+8 ; relsq logArrNext_addrRef_7 CONST_10 1
&be &bq ?+8 ; relsq logArrNext_addrRef_8 CONST_10 1
&bf &bq ?+8 ; relsq logArrNext_addrRef_9 CONST_10 1
&bg &bq ?+8 ; relsq logArrNext_addrRef_10 CONST_10 1
&bh &bq ?+8 ; relsq logArrNext_addrRef_11 CONST_10 1
&bi &bq ?+8 ; relsq logArrNext_addrRef_12 CONST_10 1
&bj &bq ?+8 ; relsq logArrNext_addrRef_13 CONST_10 1
&bk &bq ?+8 ; relsq logArrNext_addrRef_14 CONST_10 1
&bl &bq ?+8 ; relsq logArrNext_addrRef_15 CONST_10 1
&bm &bq ?+8 ; relsq logArrNext_addrRef_16 CONST_10 1
&bn &bq ?+8 ; relsq logArrNext_addrRef_17 CONST_10 1
&bo &bq ?+8 ; relsq logArrNext_addrRef_18 CONST_10 1
&bp &bq ?+8 ; relsq logArrNext_addrRef_19 CONST_10 1
# End alloc_str


# Start inp_token logArrNext tmp tmp2
; addr inp_token_0_str 0
# setaddr inp_token_0_str logArrNext tmp
&br &br ?+8 ; relsq inp_token_0_str_addrRef_0 inp_token_0_str_addrRef_0 1
&bs &bs ?+8 ; relsq inp_token_0_str_addrRef_1 inp_token_0_str_addrRef_1 1
&bt &bt ?+8 ; relsq inp_token_0_str_addrRef_2 inp_token_0_str_addrRef_2 1
&bu &bu ?+8 ; relsq inp_token_0_str_addrRef_3 inp_token_0_str_addrRef_3 1
&bv &bv ?+8 ; relsq inp_token_0_str_addrRef_4 inp_token_0_str_addrRef_4 1
&bw &bw ?+8 ; relsq inp_token_0_str_addrRef_5 inp_token_0_str_addrRef_5 1
&al &al ?+8 ; relsq tmp tmp 1
&al :be 0000000000300000 ?+8 ; relsq tmp logArrNext 1
&br &al ?+8 ; relsq inp_token_0_str_addrRef_0 tmp 1
&bs &al ?+8 ; relsq inp_token_0_str_addrRef_1 tmp 1
&bt &al ?+8 ; relsq inp_token_0_str_addrRef_2 tmp 1
&bu &al ?+8 ; relsq inp_token_0_str_addrRef_3 tmp 1
&bv &al ?+8 ; relsq inp_token_0_str_addrRef_4 tmp 1
&bw &al ?+8 ; relsq inp_token_0_str_addrRef_5 tmp 1
; var inp_token_0_len 0
# zero inp_token_0_len
&bx &bx ?+8 ; relsq inp_token_0_len inp_token_0_len 1
; label INP_TOKEN_0_LOOP

# Start getchar inp_token_0_str tmp
:by &al &al ?+8 ; relsq tmp tmp 1
&al &an ?+8 ; relsq tmp CONST_-1 1
&al 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
&aa &aa ?-28 ; relsq ZERO ZERO -1
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
:br &ab :bs &ab ?+8 ; relsq inp_token_0_str inp_token_0_str 1
:bt &ab &al ?+8 ; relsq inp_token_0_str tmp 1
# End getchar


# Start jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP :bu &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aP ?+8 ; relsq tmp tmp2 1
&al &bz ?+8 ; relsq tmp CONST_20 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aP &an &bA ; lblsq tmp2 CONST_-1 JZ_0_END
&al &an &bB ; lblsq tmp CONST_-1 JZ_0_REVERT_A
&al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &bC ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
:bB &al &ar ?+8 ; relsq tmp CONST_1 1
; label JZ_0_END
# End jeq_const


# Start jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
:bA &aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP :bv &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aP ?+8 ; relsq tmp tmp2 1
&al &bD ?+8 ; relsq tmp CONST_D 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aP &an &bE ; lblsq tmp2 CONST_-1 JZ_1_END
&al &an &bF ; lblsq tmp CONST_-1 JZ_1_REVERT_A
&al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &bC ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
:bF &al &ar ?+8 ; relsq tmp CONST_1 1
; label JZ_1_END
# End jeq_const


# Start jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
:bE &aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP :bw &ab ?+8 ; relsq tmp2 inp_token_0_str 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aP ?+8 ; relsq tmp tmp2 1
&al &ax ?+8 ; relsq tmp CONST_A 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aP &an &bG ; lblsq tmp2 CONST_-1 JZ_2_END
&al &an &bH ; lblsq tmp CONST_-1 JZ_2_REVERT_A
&al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &bC ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
:bH &al &ar ?+8 ; relsq tmp CONST_1 1
; label JZ_2_END
# End jeq_const

# inc inp_token_0_len 1
:bG &bx &an ?+8 ; relsq inp_token_0_len CONST_-1 1
# incaddr inp_token_0_str 8
&br &aY ?+8 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
&bs &aY ?+8 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
&bt &aY ?+8 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
&bu &aY ?+8 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
&bv &aY ?+8 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
&bw &aY ?+8 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# lbljmp INP_TOKEN_0_LOOP
&aa &aa &by ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
; label INP_TOKEN_0_TERM
# decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
:bC &bx &aN &by ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# incaddr logArrNext 8
&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext inp_token_0_len tmp
&al &al ?+8 ; relsq tmp tmp 1
&al &bx ?+8 ; relsq tmp inp_token_0_len 1
:bf 0000000000300000 :bg 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bh 0000000000300000 &al ?+8 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 8
&aU &bI ?+8 ; relsq logArrNext_addrRef_0 CONST_8 1
&aV &bI ?+8 ; relsq logArrNext_addrRef_1 CONST_8 1
&aW &bI ?+8 ; relsq logArrNext_addrRef_2 CONST_8 1
&aZ &bI ?+8 ; relsq logArrNext_addrRef_3 CONST_8 1
&ba &bI ?+8 ; relsq logArrNext_addrRef_4 CONST_8 1
&bb &bI ?+8 ; relsq logArrNext_addrRef_5 CONST_8 1
&bc &bI ?+8 ; relsq logArrNext_addrRef_6 CONST_8 1
&bd &bI ?+8 ; relsq logArrNext_addrRef_7 CONST_8 1
&be &bI ?+8 ; relsq logArrNext_addrRef_8 CONST_8 1
&bf &bI ?+8 ; relsq logArrNext_addrRef_9 CONST_8 1
&bg &bI ?+8 ; relsq logArrNext_addrRef_10 CONST_8 1
&bh &bI ?+8 ; relsq logArrNext_addrRef_11 CONST_8 1
&bi &bI ?+8 ; relsq logArrNext_addrRef_12 CONST_8 1
&bj &bI ?+8 ; relsq logArrNext_addrRef_13 CONST_8 1
&bk &bI ?+8 ; relsq logArrNext_addrRef_14 CONST_8 1
&bl &bI ?+8 ; relsq logArrNext_addrRef_15 CONST_8 1
&bm &bI ?+8 ; relsq logArrNext_addrRef_16 CONST_8 1
&bn &bI ?+8 ; relsq logArrNext_addrRef_17 CONST_8 1
&bo &bI ?+8 ; relsq logArrNext_addrRef_18 CONST_8 1
&bp &bI ?+8 ; relsq logArrNext_addrRef_19 CONST_8 1
# End inp_token

&aU &bJ ?+8 ; relsq logArrNext_addrRef_0 CONST_-18 1
&aV &bJ ?+8 ; relsq logArrNext_addrRef_1 CONST_-18 1
&aW &bJ ?+8 ; relsq logArrNext_addrRef_2 CONST_-18 1
&aZ &bJ ?+8 ; relsq logArrNext_addrRef_3 CONST_-18 1
&ba &bJ ?+8 ; relsq logArrNext_addrRef_4 CONST_-18 1
&bb &bJ ?+8 ; relsq logArrNext_addrRef_5 CONST_-18 1
&bc &bJ ?+8 ; relsq logArrNext_addrRef_6 CONST_-18 1
&bd &bJ ?+8 ; relsq logArrNext_addrRef_7 CONST_-18 1
&be &bJ ?+8 ; relsq logArrNext_addrRef_8 CONST_-18 1
&bf &bJ ?+8 ; relsq logArrNext_addrRef_9 CONST_-18 1
&bg &bJ ?+8 ; relsq logArrNext_addrRef_10 CONST_-18 1
&bh &bJ ?+8 ; relsq logArrNext_addrRef_11 CONST_-18 1
&bi &bJ ?+8 ; relsq logArrNext_addrRef_12 CONST_-18 1
&bj &bJ ?+8 ; relsq logArrNext_addrRef_13 CONST_-18 1
&bk &bJ ?+8 ; relsq logArrNext_addrRef_14 CONST_-18 1
&bl &bJ ?+8 ; relsq logArrNext_addrRef_15 CONST_-18 1
&bm &bJ ?+8 ; relsq logArrNext_addrRef_16 CONST_-18 1
&bn &bJ ?+8 ; relsq logArrNext_addrRef_17 CONST_-18 1
&bo &bJ ?+8 ; relsq logArrNext_addrRef_18 CONST_-18 1
&bp &bJ ?+8 ; relsq logArrNext_addrRef_19 CONST_-18 1

# Start mov logArrNext codeLen tmp
# movneg tmp codeLen
&al &al ?+8 ; relsq tmp tmp 1
&al &aQ ?+8 ; relsq tmp codeLen 1
# movneg logArrNext tmp
:bi 0000000000300000 :bj 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bk 0000000000300000 &al ?+8 ; relsq logArrNext tmp 1
# End mov

&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1

&ap &bK &bL ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
# Set log type to 0
:bl 0000000000300000 :bm 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
&aa &aa &am ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
# set logArrNext 1
:bL :bn 0000000000300000 :bo 0000000000300000 ?+8 ; relsq logArrNext logArrNext 1
:bp 0000000000300000 &an ?+8 ; relsq logArrNext CONST_-1 1
&aU &aY ?+8 ; relsq logArrNext_addrRef_0 CONST_-8 1
&aV &aY ?+8 ; relsq logArrNext_addrRef_1 CONST_-8 1
&aW &aY ?+8 ; relsq logArrNext_addrRef_2 CONST_-8 1
&aZ &aY ?+8 ; relsq logArrNext_addrRef_3 CONST_-8 1
&ba &aY ?+8 ; relsq logArrNext_addrRef_4 CONST_-8 1
&bb &aY ?+8 ; relsq logArrNext_addrRef_5 CONST_-8 1
&bc &aY ?+8 ; relsq logArrNext_addrRef_6 CONST_-8 1
&bd &aY ?+8 ; relsq logArrNext_addrRef_7 CONST_-8 1
&be &aY ?+8 ; relsq logArrNext_addrRef_8 CONST_-8 1
&bf &aY ?+8 ; relsq logArrNext_addrRef_9 CONST_-8 1
&bg &aY ?+8 ; relsq logArrNext_addrRef_10 CONST_-8 1
&bh &aY ?+8 ; relsq logArrNext_addrRef_11 CONST_-8 1
&bi &aY ?+8 ; relsq logArrNext_addrRef_12 CONST_-8 1
&bj &aY ?+8 ; relsq logArrNext_addrRef_13 CONST_-8 1
&bk &aY ?+8 ; relsq logArrNext_addrRef_14 CONST_-8 1
&bl &aY ?+8 ; relsq logArrNext_addrRef_15 CONST_-8 1
&bm &aY ?+8 ; relsq logArrNext_addrRef_16 CONST_-8 1
&bn &aY ?+8 ; relsq logArrNext_addrRef_17 CONST_-8 1
&bo &aY ?+8 ; relsq logArrNext_addrRef_18 CONST_-8 1
&bp &aY ?+8 ; relsq logArrNext_addrRef_19 CONST_-8 1
&aa &aa &aR ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
:ay &al &al ?+8 ; relsq tmp tmp 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&al &aM ?+8 ; relsq tmp cur 1
&aM &al ?+8 ; relsq cur tmp 1
&aM &al ?+8 ; relsq cur tmp 1
&aM &al ?+8 ; relsq cur tmp 1
# End mul_16

&aM &aw ?+8 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
&bM &an &am ; lblsq i CONST_-1 MAIN
&bM &bq ?+8 ; relsq i CONST_10 1

; label WRITE_QWORD
; addr dstEnd 0
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# The buffer is also intentionally kept negative to ease copying
# movneg bufEnd cur
:aR :bN 0000000000100000 :bO 0000000000100000 ?+8 ; relsq bufEnd bufEnd 1
:bP 0000000000100000 &aM ?+8 ; relsq bufEnd cur 1
&aM &aM ?+8 ; relsq cur cur 1
&bQ &aY ?+8 ; relsq dstEnd_addrRef_0 CONST_-8 1
&bR &aY ?+8 ; relsq dstEnd_addrRef_1 CONST_-8 1
&bS &aY ?+8 ; relsq dstEnd_addrRef_2 CONST_-8 1
&bN &aY ?+8 ; relsq bufEnd_addrRef_0 CONST_-8 1
&bO &aY ?+8 ; relsq bufEnd_addrRef_1 CONST_-8 1
&bP &aY ?+8 ; relsq bufEnd_addrRef_2 CONST_-8 1
&bT &aY ?+8 ; relsq bufEnd_addrRef_3 CONST_-8 1
&aQ &aY ?+8 ; relsq codeLen CONST_-8 1
&aa &aa &am ; lblsq ZERO ZERO MAIN


# A log is made of three components, adding to a total of 0x28 bytes:
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var logsToCheck 0

# Start mov logsToCheck logCount tmp
# movneg tmp logCount
:aE &al &al ?+8 ; relsq tmp tmp 1
&al &aS ?+8 ; relsq tmp logCount 1
# movneg logsToCheck tmp
&bU &bU ?+8 ; relsq logsToCheck logsToCheck 1
&bU &al ?+8 ; relsq logsToCheck tmp 1
# End mov

; addr curRef 300000

; label RESOLVE_REF_LOOP
:bV &bU &aN &bW ; lblsq logsToCheck CONST_0 COPY
&bU &ar ?+8 ; relsq logsToCheck CONST_1 1

# Check if the log is a reference
&bX &bY ?+8 ; relsq curRef_addrRef_0 CONST_-20 1
&bZ &bY ?+8 ; relsq curRef_addrRef_1 CONST_-20 1
&ca &bY ?+8 ; relsq curRef_addrRef_2 CONST_-20 1
:bX 0000000000300000 &aN &cb ; lblsq curRef CONST_0 RESOLVE_REF_NOT_REF

# Store the reference address and restore the curRef address
&bX &bI ?+8 ; relsq curRef_addrRef_0 CONST_8 1
&bZ &bI ?+8 ; relsq curRef_addrRef_1 CONST_8 1
&ca &bI ?+8 ; relsq curRef_addrRef_2 CONST_8 1

# Start add curRef bufStart tmp
# movneg tmp bufStart
&al &al ?+8 ; relsq tmp tmp 1
&al &cc ?+8 ; relsq tmp bufStart 1
# sub curRef tmp
:bZ 0000000000300000 &al ?+8 ; relsq curRef tmp 1
# End add

; addr refAt 0
# setaddr refAt curRef tmp
&cd &cd ?+8 ; relsq refAt_addrRef_0 refAt_addrRef_0 1
&ce &ce ?+8 ; relsq refAt_addrRef_1 refAt_addrRef_1 1
&cf &cf ?+8 ; relsq refAt_addrRef_2 refAt_addrRef_2 1

# Start addaddr refAt curRef tmp
&al &al ?+8 ; relsq tmp tmp 1
&al :ca 0000000000300000 ?+8 ; relsq tmp curRef 1
&cd &al ?+8 ; relsq refAt_addrRef_0 tmp 1
&ce &al ?+8 ; relsq refAt_addrRef_1 tmp 1
&cf &al ?+8 ; relsq refAt_addrRef_2 tmp 1
# End addaddr

&bX &cg ?+8 ; relsq curRef_addrRef_0 CONST_18 1
&bZ &cg ?+8 ; relsq curRef_addrRef_1 CONST_18 1
&ca &cg ?+8 ; relsq curRef_addrRef_2 CONST_18 1

# puts resMsg1 tmp
# puts curRef tmp
# set tmp a
# putchar tmp tmp2

; addr curFindLabel 0
# setaddr curFindLabel logArrStart tmp
&ch &ch ?+8 ; relsq curFindLabel_addrRef_0 curFindLabel_addrRef_0 1

# Start addaddr curFindLabel logArrStart tmp
&al &al ?+8 ; relsq tmp tmp 1
&al &ci ?+8 ; relsq tmp logArrStart 1
&ch &al ?+8 ; relsq curFindLabel_addrRef_0 tmp 1
# End addaddr

&ch &bY ?+8 ; relsq curFindLabel_addrRef_0 CONST_-20 1

; label RESOLVE_REF_FIND_LABEL
:cj :ch &ae &aN &ck ; lblsq curFindLabel CONST_0 RESOLVE_REF_CHECK_LABEL

# This is not a label. Try the next one
&ch &cl ?+8 ; relsq curFindLabel_addrRef_0 CONST_-28 1
&aa &aa &cj ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_CHECK_LABEL
; addr curLabel 0
# copyaddr curLabel curFindLabel tmp
; sym curFindLabel_addrRef_0
# setaddr curLabel curFindLabel_addrRef_0 tmp
:ck &cm &cm ?+8 ; relsq curLabel_addrRef_0 curLabel_addrRef_0 1
&al &al ?+8 ; relsq tmp tmp 1
&al &ch ?+8 ; relsq tmp curFindLabel_addrRef_0 1
&cm &al ?+8 ; relsq curLabel_addrRef_0 tmp 1
&cm &bz ?+8 ; relsq curLabel_addrRef_0 CONST_20 1

# puts resMsg2 tmp
# puts curLabel tmp
# set tmp a
# putchar tmp tmp2


# Start strcmp curRef curLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_0_b 0
# copyaddr strcmp_0_b curLabel tmp
; sym curLabel_addrRef_0
# setaddr strcmp_0_b curLabel_addrRef_0 tmp
&cn &cn ?+8 ; relsq strcmp_0_b_addrRef_0 strcmp_0_b_addrRef_0 1
&co &co ?+8 ; relsq strcmp_0_b_addrRef_1 strcmp_0_b_addrRef_1 1
&al &al ?+8 ; relsq tmp tmp 1
&al &cm ?+8 ; relsq tmp curLabel_addrRef_0 1
&cn &al ?+8 ; relsq strcmp_0_b_addrRef_0 tmp 1
&co &al ?+8 ; relsq strcmp_0_b_addrRef_1 tmp 1

# Start strcmp_const curRef strcmp_0_b RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_const_0_a 0
# copyaddr strcmp_const_0_a curRef tmp
; sym curRef_addrRef_0
&cp &cp ?+8 ; relsq strcmp_const_0_a_addrRef_0 strcmp_const_0_a_addrRef_0 1
&cq &cq ?+8 ; relsq strcmp_const_0_a_addrRef_1 strcmp_const_0_a_addrRef_1 1
&cr &cr ?+8 ; relsq strcmp_const_0_a_addrRef_2 strcmp_const_0_a_addrRef_2 1
&al &al ?+8 ; relsq tmp tmp 1
&al &bX ?+8 ; relsq tmp curRef_addrRef_0 1
&cp &al ?+8 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
&cq &al ?+8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
&cr &al ?+8 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# incaddr strcmp_const_0_a 8
&cp &aY ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
&cq &aY ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
&cr &aY ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# incaddr strcmp_0_b 8
&cn &aY ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_-8 1
&co &aY ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_-8 1

# Start jne strcmp_const_0_a strcmp_0_b STRCMP_CONST_0_REVERT_ADDR tmp tmp2
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP :cp &ah ?+8 ; relsq tmp2 strcmp_const_0_a 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aP ?+8 ; relsq tmp tmp2 1
&al :cn &ag ?+8 ; relsq tmp strcmp_0_b 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aP &an &cs ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
&al &an &ct ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
&al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &cu ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
:ct &al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &cs ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# End jne

; var strcmp_const_0_len 0

# Start mov strcmp_const_0_len strcmp_const_0_a tmp
:cu &al &al ?+8 ; relsq tmp tmp 1
&al :cq &ah ?+8 ; relsq tmp strcmp_const_0_a 1
&cv &cv ?+8 ; relsq strcmp_const_0_len strcmp_const_0_len 1
&cv &al ?+8 ; relsq strcmp_const_0_len tmp 1
# End mov

# decaddr strcmp_const_0_a 8
&cp &bI ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&cq &bI ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&cr &bI ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# decaddr strcmp_0_b 8
&cn &bI ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_8 1
&co &bI ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_8 1
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0
# setaddr strcmp_const_0_aStr strcmp_const_0_a tmp
&cw &cw ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 strcmp_const_0_aStr_addrRef_0 1
&al &al ?+8 ; relsq tmp tmp 1
&al :cr &ah ?+8 ; relsq tmp strcmp_const_0_a 1
&cw &al ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# setaddr strcmp_const_0_bStr strcmp_0_b tmp
&cx &cx ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 strcmp_const_0_bStr_addrRef_0 1
&al &al ?+8 ; relsq tmp tmp 1
&al :co &ag ?+8 ; relsq tmp strcmp_0_b 1
&cx &al ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
; label STRCMP_CONST_0_LOOP
# decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
:cy &cv &aN &cz ; lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# dec strcmp_const_0_len 1
&cv &ar ?+8 ; relsq strcmp_const_0_len CONST_1 1

# Start jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP :cw &ai ?+8 ; relsq tmp2 strcmp_const_0_aStr 1
&al &al ?+8 ; relsq tmp tmp 1
&al &aP ?+8 ; relsq tmp tmp2 1
&al :cx &aj ?+8 ; relsq tmp strcmp_const_0_bStr 1
&aP &aP ?+8 ; relsq tmp2 tmp2 1
&aP &al ?+8 ; relsq tmp2 tmp 1
&aP &an &cA ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
&al &an &cB ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
&al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &cC ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
:cB &al &ar ?+8 ; relsq tmp CONST_1 1
&aa &aa &cA ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# End jne

# incaddr strcmp_const_0_aStr 8
:cC &cw &aY ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# incaddr strcmp_const_0_bStr 8
&cx &aY ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# lbljmp STRCMP_CONST_0_LOOP
&aa &aa &cy ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
; label STRCMP_CONST_0_REVERT_ADDR
# decaddr strcmp_const_0_a 8
:cs &cp &bI ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&cq &bI ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&cr &bI ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# decaddr strcmp_0_b 8
&cn &bI ?+8 ; relsq strcmp_0_b_addrRef_0 CONST_8 1
&co &bI ?+8 ; relsq strcmp_0_b_addrRef_1 CONST_8 1
; label STRCMP_CONST_0_END
# End strcmp_const

# End strcmp


# This is the wrong label. Try the next one
:cA &ch &cl ?+8 ; relsq curFindLabel_addrRef_0 CONST_-28 1
&aa &aa &cj ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_FOUND_LABEL
:cz &cm &bJ ?+8 ; relsq curLabel_addrRef_0 CONST_-18 1

# The buffer is kept negative
# movneg refAt curLabel
:cd &ad :ce &ad ?+8 ; relsq refAt refAt 1
:cf &ad :cm &af ?+8 ; relsq refAt curLabel 1
&bX &cl ?+8 ; relsq curRef_addrRef_0 CONST_-28 1
&bZ &cl ?+8 ; relsq curRef_addrRef_1 CONST_-28 1
&ca &cl ?+8 ; relsq curRef_addrRef_2 CONST_-28 1
&aa &aa &bV ; lblsq ZERO ZERO RESOLVE_REF_LOOP

; label RESOLVE_REF_NOT_REF
:cb &bX &aY ?+8 ; relsq curRef_addrRef_0 CONST_-8 1
&bZ &aY ?+8 ; relsq curRef_addrRef_1 CONST_-8 1
&ca &aY ?+8 ; relsq curRef_addrRef_2 CONST_-8 1
&aa &aa &bV ; lblsq ZERO ZERO RESOLVE_REF_LOOP


# COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
; label COPY
; addr loaderDst 200000
; addr loaderStart 200000
; var loaderLen b0

# Start mov loaderDst LOADER tmp
# movneg tmp LOADER
:bW &al &al ?+8 ; relsq tmp tmp 1
&al :cE &cD ?+8 ; relsq tmp LOADER 1
# movneg loaderDst tmp
:cF 0000000000200000 :cG 0000000000200000 ?+8 ; relsq loaderDst loaderDst 1
:cH 0000000000200000 &al ?+8 ; relsq loaderDst tmp 1
# End mov

&cE &aY ?+8 ; relsq LOADER_addrRef_0 CONST_-8 1
&cF &aY ?+8 ; relsq loaderDst_addrRef_0 CONST_-8 1
&cG &aY ?+8 ; relsq loaderDst_addrRef_1 CONST_-8 1
&cH &aY ?+8 ; relsq loaderDst_addrRef_2 CONST_-8 1
# Jump to loaderDst once loaderLen is <= 0
&cI &bI 0000000000200000 ; lblsq loaderLen CONST_8 loaderStart
&aa &aa &bW ; lblsq ZERO ZERO COPY


# LOADER copies the buffer to the highest memory (0~...) and jumps to 0
# No external variables are used within LOADER, as those would be overridden by the new program
# The addresses are also hardcoded based on loaderStart
; label LOADER
:cD :bQ &ac :bR &ac 0000000000200018 ; abssq dstEnd dstEnd 200018
:bS &ac :bT 0000000000100000 0000000000200030 ; abssq dstEnd bufEnd 200030
# Decrease bufEnd by 8
0000000000200020 00000000002000a8 0000000000200048 ; raw 0000000000200020 00000000002000a8 0000000000200048
# Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
0000000000200000 00000000002000a8 0000000000200060 ; raw 0000000000200000 00000000002000a8 0000000000200060
0000000000200008 00000000002000a8 0000000000200078 ; raw 0000000000200008 00000000002000a8 0000000000200078
0000000000200018 00000000002000a8 0000000000000000 ; raw 0000000000200018 00000000002000a8 0000000000000000
# Rerun the loop
0000000000000000 0000000000000000 0000000000200000 ; raw 0000000000000000 0000000000000000 0000000000200000
# CONST_8
0000000000000008 ; raw 0000000000000008

# def_string resMsg1 Resolving reference to 
# def_string resMsg2 Found label 

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_1000 1000
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_26 26
; var CONST_-20 -20
; var CONST_18 18
; var CONST_-28 -28

:al 0000000000000000 ; raw 0000000000000000 # tmp
:aP 0000000000000000 ; raw 0000000000000000 # tmp2
:aT 0000000001000000 ; raw 0000000001000000 # FREE_START
:aQ 0000000000000000 ; raw 0000000000000000 # codeLen
:aw 0000000000000000 ; raw 0000000000000000 # val
:ao 0000000000000000 ; raw 0000000000000000 # c
:ap 0000000000000000 ; raw 0000000000000000 # c2
:aF 0000000000000000 ; raw 0000000000000000 # isNeg
:ci 0000000000300000 ; raw 0000000000300000 # logArrStart
:aS 0000000000000000 ; raw 0000000000000000 # logCount
:bx 0000000000000000 ; raw 0000000000000000 # inp_token_0_len
:aM 0000000000000000 ; raw 0000000000000000 # cur
:bM fffffffffffffff1 ; raw fffffffffffffff1 # i
:cc 0000000000100000 ; raw 0000000000100000 # bufStart
:bU 0000000000000000 ; raw 0000000000000000 # logsToCheck
:cv 0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
:cI 00000000000000b0 ; raw 00000000000000b0 # loaderLen
:an ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:aq 0000000000000022 ; raw 0000000000000022 # CONST_22
:ar 0000000000000001 ; raw 0000000000000001 # CONST_1
:at 0000000000000002 ; raw 0000000000000002 # CONST_2
:av 0000000000000009 ; raw 0000000000000009 # CONST_9
:ax 000000000000000a ; raw 000000000000000a # CONST_A
:az 0000000000000003 ; raw 0000000000000003 # CONST_3
:aB 0000000000000006 ; raw 0000000000000006 # CONST_6
:aC 000000000000001a ; raw 000000000000001a # CONST_1A
:aD 0000000000000017 ; raw 0000000000000017 # CONST_17
:aG 000000000000002c ; raw 000000000000002c # CONST_2C
:aI 000000000000002f ; raw 000000000000002f # CONST_2F
:aL 0000000000000007 ; raw 0000000000000007 # CONST_7
:aN 0000000000000000 ; raw 0000000000000000 # CONST_0
:aX 0000000000001000 ; raw 0000000000001000 # CONST_1000
:aY fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:bq 0000000000000010 ; raw 0000000000000010 # CONST_10
:bz 0000000000000020 ; raw 0000000000000020 # CONST_20
:bD 000000000000000d ; raw 000000000000000d # CONST_D
:bI 0000000000000008 ; raw 0000000000000008 # CONST_8
:bJ ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
:bK 0000000000000026 ; raw 0000000000000026 # CONST_26
:bY ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:cg 0000000000000018 ; raw 0000000000000018 # CONST_18
:cl ffffffffffffffd8 ; raw ffffffffffffffd8 # CONST_-28
~
