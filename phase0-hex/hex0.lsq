rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Standard program start
addr ZERO 0
var tmp 0
var tmp2 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
addr CPU_CONTROL_START 13EE0000
lblsq ZERO ZERO EP

label EP
rem MAIN is the main routine for handling inputs
label MAIN
rem val is intentionally kept negative to make it easier to add to cur
var val 0
var c 0

rem Start getchar c tmp

rem Start set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
rem End set

relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem putchar c tmp

rem Handle NUL ~ "
lblsq c CONST_22 MAIN

rem Handle #
lblsq c CONST_1 COMMENT

rem Handle $ ~ /
lblsq c CONST_C MAIN

rem Handle 0 ~ 9
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_-1 1
lblsq c CONST_A WRITE

rem Handle :
lblsq c CONST_1 MAIN

rem Handle ;
lblsq c CONST_1 COMMENT

rem Handle < ~ @
lblsq c CONST_5 MAIN

rem Handle A ~ F
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle G ~ `
lblsq c CONST_1A MAIN

rem Handle a ~ f
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle g ~ }
lblsq c CONST_17 MAIN

rem Handle ~ and DEL (0x7f)
lblsq ZERO ZERO PRINT


rem COMMENT ignores characters until \r or \n is fed
label COMMENT

rem Start getchar c tmp

rem Start set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
rem End set

relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem putchar c tmp
lblsq c CONST_9 COMMENT
rem Handle LF
lblsq c CONST_1 MAIN
lblsq c CONST_2 COMMENT
rem Handle CR
lblsq c CONST_1 MAIN
lblsq ZERO ZERO COMMENT


rem WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
label WRITE
var cur 0

rem Start mul_16 cur tmp
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq cur tmp 1
relsq cur tmp 1
relsq cur tmp 1
rem End mul_16

relsq cur val 1

rem i will turn positive every 16 iterations
var i -f
lblsq i CONST_-1 MAIN

rem Copy to the buffer and increase its address
addr bufEnd 100000
var codeLen 0

rem Start mov bufEnd cur tmp
rem movneg tmp cur
relsq tmp tmp 1
relsq tmp cur 1
rem movneg bufEnd tmp
relsq bufEnd bufEnd 1
relsq bufEnd tmp 1
rem End mov

relsq cur cur 1
subaddr bufEnd CONST_-8
relsq codeLen CONST_-8 1
lblsq i CONST_10 MAIN


rem PRINT prints the assembled binary file to the serial
label PRINT

addr charToPrint 100000

rem Start from the most significant byte

rem Start set i 8
relsq i i 1
relsq i CONST_-8 1
rem End set

subaddr charToPrint CONST_8

label PRINT_CHAR_START
subaddr charToPrint CONST_-1

rem Start mov c charToPrint tmp
rem movneg tmp charToPrint
relsq tmp tmp 1
relsq tmp charToPrint 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End mov

rem putchar c tmp

rem c %= 256

var mod256IsNeg 0
relsq mod256IsNeg mod256IsNeg 1
lblsq c CONST_-1 MOD256_IS_NEG
lblsq ZERO ZERO MOD256_IS_POS
label MOD256_IS_NEG
relsq mod256IsNeg CONST_-1 1
relsq c CONST_1 1

rem Start neg c tmp tmp2
rem movneg tmp c
relsq tmp tmp 1
relsq tmp c 1

rem Start mov c tmp tmp2
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem movneg c tmp2
relsq c c 1
relsq c tmp2 1
rem End mov

rem End neg

lblsq ZERO ZERO MOD256_START
label MOD256_IS_POS
relsq c CONST_1 1

label MOD256_START
var subber 0

rem Start set subber 256
relsq subber subber 1
relsq subber CONST_-100 1
rem End set

rem Finish if c < 256

rem Start jl c subber MOD256_CHECKNEG tmp tmp2

rem Start mov tmp c tmp2
relsq tmp2 tmp2 1
relsq tmp2 c 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem inc tmp CONST_1
relsq tmp CONST_-1 1
lblsq tmp subber MOD256_CHECKNEG
rem End jl


rem Multiply subbers by 256 until the next multiplication makes subber > c
var nextSubber 0

rem Start set nextSubber 65536
relsq nextSubber nextSubber 1
relsq nextSubber CONST_-10000 1
rem End set

label MULT_SUBBER_START

rem Start jl c nextSubber MULT_SUBBER_END tmp tmp2

rem Start mov tmp c tmp2
relsq tmp2 tmp2 1
relsq tmp2 c 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem inc tmp CONST_1
relsq tmp CONST_-1 1
lblsq tmp nextSubber MULT_SUBBER_END
rem End jl


rem Start mul_256 subber tmp
relsq tmp tmp 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq subber tmp 1
relsq subber tmp 1
relsq subber tmp 1
relsq tmp tmp 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq tmp subber 1
relsq subber tmp 1
relsq subber tmp 1
relsq subber tmp 1
rem End mul_256


rem Start mul_256 nextSubber tmp
relsq tmp tmp 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq nextSubber tmp 1
relsq nextSubber tmp 1
relsq nextSubber tmp 1
relsq tmp tmp 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq tmp nextSubber 1
relsq nextSubber tmp 1
relsq nextSubber tmp 1
relsq nextSubber tmp 1
rem End mul_256

rem nextSubber overflowed
lblsq nextSubber CONST_0 MULT_SUBBER_END
lblsq ZERO ZERO MULT_SUBBER_START
label MULT_SUBBER_END

rem Subtract c by subber until the next subtraction makes c < 0
label SUBTRACT_C

rem Start jl c subber MOD256_START tmp tmp2

rem Start mov tmp c tmp2
relsq tmp2 tmp2 1
relsq tmp2 c 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem inc tmp CONST_1
relsq tmp CONST_-1 1
lblsq tmp subber MOD256_START
rem End jl

relsq c subber 1
lblsq ZERO ZERO SUBTRACT_C

label MOD256_CHECKNEG
lblsq mod256IsNeg CONST_0 MOD256_END
rem No need to invert if c == 0
lblsq c CONST_0 MOD256_END
rem c = 256 - c

rem Start mov tmp c tmp2
rem movneg tmp2 c
relsq tmp2 tmp2 1
relsq tmp2 c 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov


rem Start set c 256
relsq c c 1
relsq c CONST_-100 1
rem End set

relsq c tmp 1

label MOD256_END


rem Start putchar c tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp c
relsq tmp tmp 1
relsq tmp c 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

lblsq i CONST_1 PRINT_CHAR_END
lblsq ZERO ZERO PRINT_CHAR_START

label PRINT_CHAR_END
rem Go to the next qword
subaddr charToPrint CONST_-8
lblsq codeLen CONST_8 HALT
lblsq ZERO ZERO PRINT

label HALT
rem Stop CPU 0

rem Start set_safe CPU_CONTROL_START 2 tmp tmp2

rem Start mov tmp CPU_CONTROL_START tmp2
relsq tmp2 tmp2 1
relsq tmp2 CPU_CONTROL_START 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem dec tmp 2
relsq tmp CONST_2 1
rem sub CPU_CONTROL_START tmp
relsq CPU_CONTROL_START tmp 1
rem End set_safe


rem Infinite loop
relsq ZERO ZERO 0

var CONST_-1 -1
var CONST_22 22
var CONST_1 1
var CONST_C c
var CONST_A a
var CONST_5 5
var CONST_9 9
var CONST_6 6
var CONST_1A 1a
var CONST_17 17
var CONST_2 2
var CONST_-8 -8
var CONST_10 10
var CONST_8 8
var CONST_-100 -100
var CONST_-10000 -10000
var CONST_0 0
