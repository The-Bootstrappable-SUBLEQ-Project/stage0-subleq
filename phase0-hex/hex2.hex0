# hex0
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
; var FREE_START 1000000
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0

# Start getchar c tmp
# set tmp 1
0000000000003ee8 0000000000003ee8 0000000000000030 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f80 0000000000000048 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000013ed27e8 0000000000000078 ; relsq tmp SERIAL_IN 2
# reljmp -1
0000000000000000 0000000000000000 0000000000000048 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000090 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
0000000000003f10 0000000000003f10 00000000000000a8 ; relsq c c 1
0000000000003f10 0000000000003ee8 00000000000000c0 ; relsq c tmp 1
# End getchar

# Keep a backup of c for INPUT_LABEL
; var c2 0

# Start mov c2 c tmp
# movneg tmp c
0000000000003ee8 0000000000003ee8 00000000000000d8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f10 00000000000000f0 ; relsq tmp c 1
# movneg c2 tmp
0000000000003f18 0000000000003f18 0000000000000108 ; relsq c2 c2 1
0000000000003f18 0000000000003ee8 0000000000000120 ; relsq c2 tmp 1
# End mov


# Handle NUL ~ "
0000000000003f10 0000000000003f88 0000000000000018 ; lblsq c CONST_22 MAIN

# Handle #
0000000000003f10 0000000000003f90 0000000000000378 ; lblsq c CONST_1 COMMENT

# Handle $ and %
0000000000003f10 0000000000003f98 0000000000000018 ; lblsq c CONST_2 MAIN

# Handle &
0000000000003f10 0000000000003f90 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL

# Handle ' ~ /
0000000000003f10 0000000000003fa0 0000000000000018 ; lblsq c CONST_9 MAIN

# Handle 0 ~ 9
# movneg val c
0000000000003f08 0000000000003f08 00000000000001b0 ; relsq val val 1
0000000000003f08 0000000000003f10 00000000000001c8 ; relsq val c 1
0000000000003f08 0000000000003f80 00000000000001e0 ; relsq val CONST_-1 1
0000000000003f10 0000000000003fa8 00000000000023a0 ; lblsq c CONST_A WRITE

# Handle :
0000000000003f10 0000000000003f90 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL

# Handle ;
0000000000003f10 0000000000003f90 0000000000000378 ; lblsq c CONST_1 COMMENT

# Handle < ~ >
0000000000003f10 0000000000003fb0 0000000000000018 ; lblsq c CONST_3 MAIN

# Handle ?
0000000000003f10 0000000000003f90 0000000000000498 ; lblsq c CONST_1 HANDLE_REL

# Handle @
0000000000003f10 0000000000003f90 0000000000000018 ; lblsq c CONST_1 MAIN

# Handle A ~ F
# movneg val c
0000000000003f08 0000000000003f08 0000000000000288 ; relsq val val 1
0000000000003f08 0000000000003f10 00000000000002a0 ; relsq val c 1
0000000000003f08 0000000000003fa0 00000000000002b8 ; relsq val CONST_9 1
0000000000003f10 0000000000003fb8 00000000000023a0 ; lblsq c CONST_6 WRITE

# Handle G ~ `
0000000000003f10 0000000000003fc0 0000000000000018 ; lblsq c CONST_1A MAIN

# Handle a ~ f
# movneg val c
0000000000003f08 0000000000003f08 0000000000000300 ; relsq val val 1
0000000000003f08 0000000000003f10 0000000000000318 ; relsq val c 1
0000000000003f08 0000000000003fa0 0000000000000330 ; relsq val CONST_9 1
0000000000003f10 0000000000003fb8 00000000000023a0 ; lblsq c CONST_6 WRITE

# Handle g ~ }
0000000000003f10 0000000000003fc8 0000000000000018 ; lblsq c CONST_17 MAIN

# Handle ~ and DEL (0x7f)
0000000000000000 0000000000000000 00000000000025b0 ; lblsq ZERO ZERO RESOLVE_REF


# COMMENT ignores characters until \r or \n is fed
; label COMMENT

# Start getchar c tmp
# set tmp 1
0000000000003ee8 0000000000003ee8 0000000000000390 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f80 00000000000003a8 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000013ed27e8 00000000000003d8 ; relsq tmp SERIAL_IN 2
# reljmp -1
0000000000000000 0000000000000000 00000000000003a8 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 00000000000003f0 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
0000000000003f10 0000000000003f10 0000000000000408 ; relsq c c 1
0000000000003f10 0000000000003ee8 0000000000000420 ; relsq c tmp 1
# End getchar

# putchar c tmp
0000000000003f10 0000000000003fa0 0000000000000378 ; lblsq c CONST_9 COMMENT
# Handle LF
0000000000003f10 0000000000003f90 0000000000000018 ; lblsq c CONST_1 MAIN
0000000000003f10 0000000000003f98 0000000000000378 ; lblsq c CONST_2 COMMENT
# Handle CR
0000000000003f10 0000000000003f90 0000000000000018 ; lblsq c CONST_1 MAIN
0000000000000000 0000000000000000 0000000000000378 ; lblsq ZERO ZERO COMMENT


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
0000000000003f20 0000000000003f20 00000000000004b0 ; relsq isNeg isNeg 1

# Start getchar c tmp
# set tmp 1
0000000000003ee8 0000000000003ee8 00000000000004c8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f80 00000000000004e0 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000013ed27e8 0000000000000510 ; relsq tmp SERIAL_IN 2
# reljmp -1
0000000000000000 0000000000000000 00000000000004e0 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000528 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
0000000000003f10 0000000000003f10 0000000000000540 ; relsq c c 1
0000000000003f10 0000000000003ee8 0000000000000558 ; relsq c tmp 1
# End getchar

# Handle NUL ~ ,
0000000000003f10 0000000000003fd0 00000000000005b8 ; lblsq c CONST_2C REL_INP
0000000000003f20 0000000000003f80 0000000000000588 ; relsq isNeg CONST_-1 1
# Handle -
0000000000003f10 0000000000003f90 00000000000005b8 ; lblsq c CONST_1 REL_INP
0000000000003f20 0000000000003f20 00000000000005b8 ; relsq isNeg isNeg 1

; label REL_INP

# Start getchar c tmp
# set tmp 1
0000000000003ee8 0000000000003ee8 00000000000005d0 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f80 00000000000005e8 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000013ed27e8 0000000000000618 ; relsq tmp SERIAL_IN 2
# reljmp -1
0000000000000000 0000000000000000 00000000000005e8 ; relsq ZERO ZERO -1
# zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000630 ; relsq SERIAL_IN SERIAL_IN 1
# movneg c tmp
0000000000003f10 0000000000003f10 0000000000000648 ; relsq c c 1
0000000000003f10 0000000000003ee8 0000000000000660 ; relsq c tmp 1
# End getchar


# Handle NUL ~ /
0000000000003f10 0000000000003fd8 00000000000008e8 ; lblsq c CONST_2F REL_NEG

# Handle 0 ~ 9
# movneg val c
0000000000003f08 0000000000003f08 0000000000000690 ; relsq val val 1
0000000000003f08 0000000000003f10 00000000000006a8 ; relsq val c 1
0000000000003f08 0000000000003f80 00000000000006c0 ; relsq val CONST_-1 1
0000000000003f10 0000000000003fa8 00000000000007e0 ; lblsq c CONST_A REL_WRITE

# Handle : ~ @
0000000000003f10 0000000000003fe0 00000000000008e8 ; lblsq c CONST_7 REL_NEG

# Handle A ~ F
# movneg val c
0000000000003f08 0000000000003f08 0000000000000708 ; relsq val val 1
0000000000003f08 0000000000003f10 0000000000000720 ; relsq val c 1
0000000000003f08 0000000000003fa0 0000000000000738 ; relsq val CONST_9 1
0000000000003f10 0000000000003fb8 00000000000007e0 ; lblsq c CONST_6 REL_WRITE

# Handle G ~ `
0000000000003f10 0000000000003fc0 00000000000008e8 ; lblsq c CONST_1A REL_NEG

# Handle a ~ f
# movneg val c
0000000000003f08 0000000000003f08 0000000000000780 ; relsq val val 1
0000000000003f08 0000000000003f10 0000000000000798 ; relsq val c 1
0000000000003f08 0000000000003fa0 00000000000007b0 ; relsq val CONST_9 1
0000000000003f10 0000000000003fb8 00000000000007e0 ; lblsq c CONST_6 REL_WRITE

# Handle g ~ DEL
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP

; label REL_WRITE

# Start mul_16 cur tmp
0000000000003ee8 0000000000003ee8 00000000000007f8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f40 0000000000000810 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000000828 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000000840 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000000858 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000000870 ; relsq tmp cur 1
0000000000003f40 0000000000003ee8 0000000000000888 ; relsq cur tmp 1
0000000000003f40 0000000000003ee8 00000000000008a0 ; relsq cur tmp 1
0000000000003f40 0000000000003ee8 00000000000008b8 ; relsq cur tmp 1
# End mul_16

0000000000003f40 0000000000003f08 00000000000008d0 ; relsq cur val 1
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP

# Negate cur if the relative jump is negative
; label REL_NEG
0000000000003f20 0000000000003fe8 0000000000000990 ; lblsq isNeg CONST_0 REL_FIN

# Start neg cur tmp tmp2
0000000000003ee8 0000000000003ee8 0000000000000918 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f40 0000000000000930 ; relsq tmp cur 1
0000000000003ef0 0000000000003ef0 0000000000000948 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 0000000000000960 ; relsq tmp2 tmp 1
0000000000003f40 0000000000003f40 0000000000000978 ; relsq cur cur 1
0000000000003f40 0000000000003ef0 0000000000000990 ; relsq cur tmp2 1
# End neg


; label REL_FIN

# Start add cur codeLen tmp
# movneg tmp codeLen
0000000000003ee8 0000000000003ee8 00000000000009a8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f00 00000000000009c0 ; relsq tmp codeLen 1
# sub cur tmp
0000000000003f40 0000000000003ee8 00000000000009d8 ; relsq cur tmp 1
# End add

0000000000000000 0000000000000000 00000000000024c0 ; lblsq ZERO ZERO WRITE_QWORD

# A log is made of three components, adding to a total of 0x28 bytes:
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

; var logArrStart 300000
; addr logArrNext 300000
; var logCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
0000000000003f30 0000000000003f80 0000000000000a08 ; relsq logCount CONST_-1 1

# Start alloc_str logArrNext 1000 tmp

# Start malloc_const logArrNext 1000 tmp
0000000000003ee8 0000000000003ee8 0000000000000a20 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef8 0000000000000a38 ; relsq tmp FREE_START 1
0000000000300000 0000000000300000 0000000000000a50 ; relsq logArrNext logArrNext 1
0000000000300000 0000000000003ee8 0000000000000a68 ; relsq logArrNext tmp 1
0000000000003ee8 0000000000003ee8 0000000000000a80 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ff0 0000000000000a98 ; relsq tmp CONST_1000 1
0000000000003ef8 0000000000003ee8 0000000000000ab0 ; relsq FREE_START tmp 1
# End malloc_const

# incaddr logArrNext 8
0000000000000a38 0000000000003ff8 0000000000000ac8 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 0000000000000ae0 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 0000000000000af8 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000000b10 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000000b28 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 0000000000000b40 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 0000000000000b58 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 0000000000000b70 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 0000000000000b88 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000000ba0 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 0000000000000bb8 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 0000000000000bd0 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 0000000000000be8 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 0000000000000c00 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 0000000000000c18 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000000c30 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 0000000000000c48 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 0000000000000c60 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 0000000000000c78 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 0000000000000c90 ; relsq logArrNext_addrRef_19 CONST_-8 1
# zero logArrNext
0000000000300000 0000000000300000 0000000000000ca8 ; relsq logArrNext logArrNext 1
# incaddr logArrNext 8
0000000000000a38 0000000000003ff8 0000000000000cc0 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 0000000000000cd8 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 0000000000000cf0 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000000d08 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000000d20 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 0000000000000d38 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 0000000000000d50 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 0000000000000d68 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 0000000000000d80 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000000d98 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 0000000000000db0 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 0000000000000dc8 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 0000000000000de0 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 0000000000000df8 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 0000000000000e10 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000000e28 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 0000000000000e40 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 0000000000000e58 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 0000000000000e70 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 0000000000000e88 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext CONST_1000 tmp
0000000000003ee8 0000000000003ee8 0000000000000ea0 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ff0 0000000000000eb8 ; relsq tmp CONST_1000 1
0000000000300000 0000000000300000 0000000000000ed0 ; relsq logArrNext logArrNext 1
0000000000300000 0000000000003ee8 0000000000000ee8 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 10
0000000000000a38 0000000000004000 0000000000000f00 ; relsq logArrNext_addrRef_0 CONST_10 1
0000000000000a40 0000000000004000 0000000000000f18 ; relsq logArrNext_addrRef_1 CONST_10 1
0000000000000a50 0000000000004000 0000000000000f30 ; relsq logArrNext_addrRef_2 CONST_10 1
0000000000000c90 0000000000004000 0000000000000f48 ; relsq logArrNext_addrRef_3 CONST_10 1
0000000000000c98 0000000000004000 0000000000000f60 ; relsq logArrNext_addrRef_4 CONST_10 1
0000000000000eb8 0000000000004000 0000000000000f78 ; relsq logArrNext_addrRef_5 CONST_10 1
0000000000000ec0 0000000000004000 0000000000000f90 ; relsq logArrNext_addrRef_6 CONST_10 1
0000000000000ed0 0000000000004000 0000000000000fa8 ; relsq logArrNext_addrRef_7 CONST_10 1
0000000000001178 0000000000004000 0000000000000fc0 ; relsq logArrNext_addrRef_8 CONST_10 1
0000000000001920 0000000000004000 0000000000000fd8 ; relsq logArrNext_addrRef_9 CONST_10 1
0000000000001928 0000000000004000 0000000000000ff0 ; relsq logArrNext_addrRef_10 CONST_10 1
0000000000001938 0000000000004000 0000000000001008 ; relsq logArrNext_addrRef_11 CONST_10 1
0000000000001d40 0000000000004000 0000000000001020 ; relsq logArrNext_addrRef_12 CONST_10 1
0000000000001d48 0000000000004000 0000000000001038 ; relsq logArrNext_addrRef_13 CONST_10 1
0000000000001d58 0000000000004000 0000000000001050 ; relsq logArrNext_addrRef_14 CONST_10 1
0000000000001f68 0000000000004000 0000000000001068 ; relsq logArrNext_addrRef_15 CONST_10 1
0000000000001f70 0000000000004000 0000000000001080 ; relsq logArrNext_addrRef_16 CONST_10 1
0000000000002178 0000000000004000 0000000000001098 ; relsq logArrNext_addrRef_17 CONST_10 1
0000000000002180 0000000000004000 00000000000010b0 ; relsq logArrNext_addrRef_18 CONST_10 1
0000000000002190 0000000000004000 00000000000010c8 ; relsq logArrNext_addrRef_19 CONST_10 1
# End alloc_str


# Start inp_token logArrNext tmp tmp2
; addr inp_token_0_str 0
# setaddr inp_token_0_str logArrNext tmp
00000000000012a8 00000000000012a8 00000000000010e0 ; relsq inp_token_0_str_addrRef_0 inp_token_0_str_addrRef_0 1
00000000000012b0 00000000000012b0 00000000000010f8 ; relsq inp_token_0_str_addrRef_1 inp_token_0_str_addrRef_1 1
00000000000012c0 00000000000012c0 0000000000001110 ; relsq inp_token_0_str_addrRef_2 inp_token_0_str_addrRef_2 1
00000000000012f8 00000000000012f8 0000000000001128 ; relsq inp_token_0_str_addrRef_3 inp_token_0_str_addrRef_3 1
0000000000001418 0000000000001418 0000000000001140 ; relsq inp_token_0_str_addrRef_4 inp_token_0_str_addrRef_4 1
0000000000001538 0000000000001538 0000000000001158 ; relsq inp_token_0_str_addrRef_5 inp_token_0_str_addrRef_5 1
0000000000003ee8 0000000000003ee8 0000000000001170 ; relsq tmp tmp 1
0000000000003ee8 0000000000300000 0000000000001188 ; relsq tmp logArrNext 1
00000000000012a8 0000000000003ee8 00000000000011a0 ; relsq inp_token_0_str_addrRef_0 tmp 1
00000000000012b0 0000000000003ee8 00000000000011b8 ; relsq inp_token_0_str_addrRef_1 tmp 1
00000000000012c0 0000000000003ee8 00000000000011d0 ; relsq inp_token_0_str_addrRef_2 tmp 1
00000000000012f8 0000000000003ee8 00000000000011e8 ; relsq inp_token_0_str_addrRef_3 tmp 1
0000000000001418 0000000000003ee8 0000000000001200 ; relsq inp_token_0_str_addrRef_4 tmp 1
0000000000001538 0000000000003ee8 0000000000001218 ; relsq inp_token_0_str_addrRef_5 tmp 1
; var inp_token_0_len 0
# zero inp_token_0_len
0000000000003f38 0000000000003f38 0000000000001230 ; relsq inp_token_0_len inp_token_0_len 1
; label INP_TOKEN_0_LOOP

# Start getchar inp_token_0_str tmp
0000000000003ee8 0000000000003ee8 0000000000001248 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f80 0000000000001260 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000013ed27e8 0000000000001290 ; relsq tmp SERIAL_IN 2
0000000000000000 0000000000000000 0000000000001260 ; relsq ZERO ZERO -1
0000000013ed27e8 0000000013ed27e8 00000000000012a8 ; relsq SERIAL_IN SERIAL_IN 1
0000000000000000 0000000000000000 00000000000012c0 ; relsq inp_token_0_str inp_token_0_str 1
0000000000000000 0000000000003ee8 00000000000012d8 ; relsq inp_token_0_str tmp 1
# End getchar


# Start jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
0000000000003ef0 0000000000003ef0 00000000000012f0 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000000000 0000000000001308 ; relsq tmp2 inp_token_0_str 1
0000000000003ee8 0000000000003ee8 0000000000001320 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000001338 ; relsq tmp tmp2 1
0000000000003ee8 0000000000004008 0000000000001350 ; relsq tmp CONST_20 1
0000000000003ef0 0000000000003ef0 0000000000001368 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 0000000000001380 ; relsq tmp2 tmp 1
0000000000003ef0 0000000000003f80 00000000000013f8 ; lblsq tmp2 CONST_-1 JZ_0_END
0000000000003ee8 0000000000003f80 00000000000013e0 ; lblsq tmp CONST_-1 JZ_0_REVERT_A
0000000000003ee8 0000000000003f90 00000000000013c8 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 00000000000016f8 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
0000000000003ee8 0000000000003f90 00000000000013f8 ; relsq tmp CONST_1 1
; label JZ_0_END
# End jeq_const


# Start jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
0000000000003ef0 0000000000003ef0 0000000000001410 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000000000 0000000000001428 ; relsq tmp2 inp_token_0_str 1
0000000000003ee8 0000000000003ee8 0000000000001440 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000001458 ; relsq tmp tmp2 1
0000000000003ee8 0000000000004010 0000000000001470 ; relsq tmp CONST_D 1
0000000000003ef0 0000000000003ef0 0000000000001488 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 00000000000014a0 ; relsq tmp2 tmp 1
0000000000003ef0 0000000000003f80 0000000000001518 ; lblsq tmp2 CONST_-1 JZ_1_END
0000000000003ee8 0000000000003f80 0000000000001500 ; lblsq tmp CONST_-1 JZ_1_REVERT_A
0000000000003ee8 0000000000003f90 00000000000014e8 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 00000000000016f8 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
0000000000003ee8 0000000000003f90 0000000000001518 ; relsq tmp CONST_1 1
; label JZ_1_END
# End jeq_const


# Start jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
0000000000003ef0 0000000000003ef0 0000000000001530 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000000000 0000000000001548 ; relsq tmp2 inp_token_0_str 1
0000000000003ee8 0000000000003ee8 0000000000001560 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000001578 ; relsq tmp tmp2 1
0000000000003ee8 0000000000003fa8 0000000000001590 ; relsq tmp CONST_A 1
0000000000003ef0 0000000000003ef0 00000000000015a8 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 00000000000015c0 ; relsq tmp2 tmp 1
0000000000003ef0 0000000000003f80 0000000000001638 ; lblsq tmp2 CONST_-1 JZ_2_END
0000000000003ee8 0000000000003f80 0000000000001620 ; lblsq tmp CONST_-1 JZ_2_REVERT_A
0000000000003ee8 0000000000003f90 0000000000001608 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 00000000000016f8 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
0000000000003ee8 0000000000003f90 0000000000001638 ; relsq tmp CONST_1 1
; label JZ_2_END
# End jeq_const

# inc inp_token_0_len 1
0000000000003f38 0000000000003f80 0000000000001650 ; relsq inp_token_0_len CONST_-1 1
# incaddr inp_token_0_str 8
00000000000012a8 0000000000003ff8 0000000000001668 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
00000000000012b0 0000000000003ff8 0000000000001680 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
00000000000012c0 0000000000003ff8 0000000000001698 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
00000000000012f8 0000000000003ff8 00000000000016b0 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
0000000000001418 0000000000003ff8 00000000000016c8 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
0000000000001538 0000000000003ff8 00000000000016e0 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# lbljmp INP_TOKEN_0_LOOP
0000000000000000 0000000000000000 0000000000001230 ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
; label INP_TOKEN_0_TERM
# decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
0000000000003f38 0000000000003fe8 0000000000001230 ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# incaddr logArrNext 8
0000000000000a38 0000000000003ff8 0000000000001728 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 0000000000001740 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 0000000000001758 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000001770 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000001788 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 00000000000017a0 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 00000000000017b8 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 00000000000017d0 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 00000000000017e8 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000001800 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 0000000000001818 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 0000000000001830 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 0000000000001848 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 0000000000001860 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 0000000000001878 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000001890 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 00000000000018a8 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 00000000000018c0 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 00000000000018d8 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 00000000000018f0 ; relsq logArrNext_addrRef_19 CONST_-8 1

# Start mov logArrNext inp_token_0_len tmp
0000000000003ee8 0000000000003ee8 0000000000001908 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f38 0000000000001920 ; relsq tmp inp_token_0_len 1
0000000000300000 0000000000300000 0000000000001938 ; relsq logArrNext logArrNext 1
0000000000300000 0000000000003ee8 0000000000001950 ; relsq logArrNext tmp 1
# End mov

# decaddr logArrNext 8
0000000000000a38 0000000000004018 0000000000001968 ; relsq logArrNext_addrRef_0 CONST_8 1
0000000000000a40 0000000000004018 0000000000001980 ; relsq logArrNext_addrRef_1 CONST_8 1
0000000000000a50 0000000000004018 0000000000001998 ; relsq logArrNext_addrRef_2 CONST_8 1
0000000000000c90 0000000000004018 00000000000019b0 ; relsq logArrNext_addrRef_3 CONST_8 1
0000000000000c98 0000000000004018 00000000000019c8 ; relsq logArrNext_addrRef_4 CONST_8 1
0000000000000eb8 0000000000004018 00000000000019e0 ; relsq logArrNext_addrRef_5 CONST_8 1
0000000000000ec0 0000000000004018 00000000000019f8 ; relsq logArrNext_addrRef_6 CONST_8 1
0000000000000ed0 0000000000004018 0000000000001a10 ; relsq logArrNext_addrRef_7 CONST_8 1
0000000000001178 0000000000004018 0000000000001a28 ; relsq logArrNext_addrRef_8 CONST_8 1
0000000000001920 0000000000004018 0000000000001a40 ; relsq logArrNext_addrRef_9 CONST_8 1
0000000000001928 0000000000004018 0000000000001a58 ; relsq logArrNext_addrRef_10 CONST_8 1
0000000000001938 0000000000004018 0000000000001a70 ; relsq logArrNext_addrRef_11 CONST_8 1
0000000000001d40 0000000000004018 0000000000001a88 ; relsq logArrNext_addrRef_12 CONST_8 1
0000000000001d48 0000000000004018 0000000000001aa0 ; relsq logArrNext_addrRef_13 CONST_8 1
0000000000001d58 0000000000004018 0000000000001ab8 ; relsq logArrNext_addrRef_14 CONST_8 1
0000000000001f68 0000000000004018 0000000000001ad0 ; relsq logArrNext_addrRef_15 CONST_8 1
0000000000001f70 0000000000004018 0000000000001ae8 ; relsq logArrNext_addrRef_16 CONST_8 1
0000000000002178 0000000000004018 0000000000001b00 ; relsq logArrNext_addrRef_17 CONST_8 1
0000000000002180 0000000000004018 0000000000001b18 ; relsq logArrNext_addrRef_18 CONST_8 1
0000000000002190 0000000000004018 0000000000001b30 ; relsq logArrNext_addrRef_19 CONST_8 1
# End inp_token

0000000000000a38 0000000000004020 0000000000001b48 ; relsq logArrNext_addrRef_0 CONST_-18 1
0000000000000a40 0000000000004020 0000000000001b60 ; relsq logArrNext_addrRef_1 CONST_-18 1
0000000000000a50 0000000000004020 0000000000001b78 ; relsq logArrNext_addrRef_2 CONST_-18 1
0000000000000c90 0000000000004020 0000000000001b90 ; relsq logArrNext_addrRef_3 CONST_-18 1
0000000000000c98 0000000000004020 0000000000001ba8 ; relsq logArrNext_addrRef_4 CONST_-18 1
0000000000000eb8 0000000000004020 0000000000001bc0 ; relsq logArrNext_addrRef_5 CONST_-18 1
0000000000000ec0 0000000000004020 0000000000001bd8 ; relsq logArrNext_addrRef_6 CONST_-18 1
0000000000000ed0 0000000000004020 0000000000001bf0 ; relsq logArrNext_addrRef_7 CONST_-18 1
0000000000001178 0000000000004020 0000000000001c08 ; relsq logArrNext_addrRef_8 CONST_-18 1
0000000000001920 0000000000004020 0000000000001c20 ; relsq logArrNext_addrRef_9 CONST_-18 1
0000000000001928 0000000000004020 0000000000001c38 ; relsq logArrNext_addrRef_10 CONST_-18 1
0000000000001938 0000000000004020 0000000000001c50 ; relsq logArrNext_addrRef_11 CONST_-18 1
0000000000001d40 0000000000004020 0000000000001c68 ; relsq logArrNext_addrRef_12 CONST_-18 1
0000000000001d48 0000000000004020 0000000000001c80 ; relsq logArrNext_addrRef_13 CONST_-18 1
0000000000001d58 0000000000004020 0000000000001c98 ; relsq logArrNext_addrRef_14 CONST_-18 1
0000000000001f68 0000000000004020 0000000000001cb0 ; relsq logArrNext_addrRef_15 CONST_-18 1
0000000000001f70 0000000000004020 0000000000001cc8 ; relsq logArrNext_addrRef_16 CONST_-18 1
0000000000002178 0000000000004020 0000000000001ce0 ; relsq logArrNext_addrRef_17 CONST_-18 1
0000000000002180 0000000000004020 0000000000001cf8 ; relsq logArrNext_addrRef_18 CONST_-18 1
0000000000002190 0000000000004020 0000000000001d10 ; relsq logArrNext_addrRef_19 CONST_-18 1

# Start mov logArrNext codeLen tmp
# movneg tmp codeLen
0000000000003ee8 0000000000003ee8 0000000000001d28 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f00 0000000000001d40 ; relsq tmp codeLen 1
# movneg logArrNext tmp
0000000000300000 0000000000300000 0000000000001d58 ; relsq logArrNext logArrNext 1
0000000000300000 0000000000003ee8 0000000000001d70 ; relsq logArrNext tmp 1
# End mov

0000000000000a38 0000000000003ff8 0000000000001d88 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 0000000000001da0 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 0000000000001db8 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000001dd0 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000001de8 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 0000000000001e00 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 0000000000001e18 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 0000000000001e30 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 0000000000001e48 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000001e60 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 0000000000001e78 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 0000000000001e90 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 0000000000001ea8 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 0000000000001ec0 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 0000000000001ed8 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000001ef0 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 0000000000001f08 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 0000000000001f20 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 0000000000001f38 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 0000000000001f50 ; relsq logArrNext_addrRef_19 CONST_-8 1

0000000000003f18 0000000000004028 0000000000002178 ; lblsq c2 CONST_26 RECORD_REF

# Handle label (:)
# Set log type to 0
0000000000300000 0000000000300000 0000000000001f80 ; relsq logArrNext logArrNext 1
0000000000000a38 0000000000003ff8 0000000000001f98 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 0000000000001fb0 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 0000000000001fc8 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000001fe0 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000001ff8 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 0000000000002010 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 0000000000002028 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 0000000000002040 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 0000000000002058 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000002070 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 0000000000002088 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 00000000000020a0 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 00000000000020b8 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 00000000000020d0 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 00000000000020e8 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000002100 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 0000000000002118 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 0000000000002130 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 0000000000002148 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 0000000000002160 ; relsq logArrNext_addrRef_19 CONST_-8 1
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN

# Handle reference (&)
; label RECORD_REF
# set logArrNext 1
0000000000300000 0000000000300000 0000000000002190 ; relsq logArrNext logArrNext 1
0000000000300000 0000000000003f80 00000000000021a8 ; relsq logArrNext CONST_-1 1
0000000000000a38 0000000000003ff8 00000000000021c0 ; relsq logArrNext_addrRef_0 CONST_-8 1
0000000000000a40 0000000000003ff8 00000000000021d8 ; relsq logArrNext_addrRef_1 CONST_-8 1
0000000000000a50 0000000000003ff8 00000000000021f0 ; relsq logArrNext_addrRef_2 CONST_-8 1
0000000000000c90 0000000000003ff8 0000000000002208 ; relsq logArrNext_addrRef_3 CONST_-8 1
0000000000000c98 0000000000003ff8 0000000000002220 ; relsq logArrNext_addrRef_4 CONST_-8 1
0000000000000eb8 0000000000003ff8 0000000000002238 ; relsq logArrNext_addrRef_5 CONST_-8 1
0000000000000ec0 0000000000003ff8 0000000000002250 ; relsq logArrNext_addrRef_6 CONST_-8 1
0000000000000ed0 0000000000003ff8 0000000000002268 ; relsq logArrNext_addrRef_7 CONST_-8 1
0000000000001178 0000000000003ff8 0000000000002280 ; relsq logArrNext_addrRef_8 CONST_-8 1
0000000000001920 0000000000003ff8 0000000000002298 ; relsq logArrNext_addrRef_9 CONST_-8 1
0000000000001928 0000000000003ff8 00000000000022b0 ; relsq logArrNext_addrRef_10 CONST_-8 1
0000000000001938 0000000000003ff8 00000000000022c8 ; relsq logArrNext_addrRef_11 CONST_-8 1
0000000000001d40 0000000000003ff8 00000000000022e0 ; relsq logArrNext_addrRef_12 CONST_-8 1
0000000000001d48 0000000000003ff8 00000000000022f8 ; relsq logArrNext_addrRef_13 CONST_-8 1
0000000000001d58 0000000000003ff8 0000000000002310 ; relsq logArrNext_addrRef_14 CONST_-8 1
0000000000001f68 0000000000003ff8 0000000000002328 ; relsq logArrNext_addrRef_15 CONST_-8 1
0000000000001f70 0000000000003ff8 0000000000002340 ; relsq logArrNext_addrRef_16 CONST_-8 1
0000000000002178 0000000000003ff8 0000000000002358 ; relsq logArrNext_addrRef_17 CONST_-8 1
0000000000002180 0000000000003ff8 0000000000002370 ; relsq logArrNext_addrRef_18 CONST_-8 1
0000000000002190 0000000000003ff8 0000000000002388 ; relsq logArrNext_addrRef_19 CONST_-8 1
0000000000000000 0000000000000000 00000000000024c0 ; lblsq ZERO ZERO WRITE_QWORD


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0

# Start mul_16 cur tmp
0000000000003ee8 0000000000003ee8 00000000000023b8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f40 00000000000023d0 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 00000000000023e8 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000002400 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000002418 ; relsq tmp cur 1
0000000000003ee8 0000000000003f40 0000000000002430 ; relsq tmp cur 1
0000000000003f40 0000000000003ee8 0000000000002448 ; relsq cur tmp 1
0000000000003f40 0000000000003ee8 0000000000002460 ; relsq cur tmp 1
0000000000003f40 0000000000003ee8 0000000000002478 ; relsq cur tmp 1
# End mul_16

0000000000003f40 0000000000003f08 0000000000002490 ; relsq cur val 1

# i will turn positive every 16 iterations
; var i -f
0000000000003f48 0000000000003f80 0000000000000018 ; lblsq i CONST_-1 MAIN
0000000000003f48 0000000000004000 00000000000024c0 ; relsq i CONST_10 1

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address

# Start mov bufEnd cur tmp
# movneg tmp cur
0000000000003ee8 0000000000003ee8 00000000000024d8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f40 00000000000024f0 ; relsq tmp cur 1
# movneg bufEnd tmp
0000000000100000 0000000000100000 0000000000002508 ; relsq bufEnd bufEnd 1
0000000000100000 0000000000003ee8 0000000000002520 ; relsq bufEnd tmp 1
# End mov

0000000000003f40 0000000000003f40 0000000000002538 ; relsq cur cur 1
00000000000024f0 0000000000003ff8 0000000000002550 ; relsq bufEnd_addrRef_0 CONST_-8 1
00000000000024f8 0000000000003ff8 0000000000002568 ; relsq bufEnd_addrRef_1 CONST_-8 1
0000000000002508 0000000000003ff8 0000000000002580 ; relsq bufEnd_addrRef_2 CONST_-8 1
0000000000003f00 0000000000003ff8 0000000000002598 ; relsq codeLen CONST_-8 1
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN


# A log is made of three components, adding to a total of 0x28 bytes:
# 0x0 A string containing the symbol name
# 0x18 The offset on which the log occured
# 0x20 Whether the log is a label (0x0) or a reference (0x1)

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var logsToCheck 0

# Start mov logsToCheck logCount tmp
# movneg tmp logCount
0000000000003ee8 0000000000003ee8 00000000000025c8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f30 00000000000025e0 ; relsq tmp logCount 1
# movneg logsToCheck tmp
0000000000003f58 0000000000003f58 00000000000025f8 ; relsq logsToCheck logsToCheck 1
0000000000003f58 0000000000003ee8 0000000000002610 ; relsq logsToCheck tmp 1
# End mov

; addr curRef 300000

; label RESOLVE_REF_LOOP
0000000000003f58 0000000000003fe8 0000000000003390 ; lblsq logsToCheck CONST_0 PRINT
0000000000003f58 0000000000003f90 0000000000002640 ; relsq logsToCheck CONST_1 1

# Check if the log is a reference
00000000000026d0 0000000000004030 0000000000002658 ; relsq curRef_addrRef_0 CONST_-20 1
00000000000027a8 0000000000004030 0000000000002670 ; relsq curRef_addrRef_1 CONST_-20 1
0000000000002828 0000000000004030 0000000000002688 ; relsq curRef_addrRef_2 CONST_-20 1
0000000000002bd0 0000000000004030 00000000000026a0 ; relsq curRef_addrRef_3 CONST_-20 1
0000000000002d08 0000000000004030 00000000000026b8 ; relsq curRef_addrRef_4 CONST_-20 1
0000000000002e58 0000000000004030 00000000000026d0 ; relsq curRef_addrRef_5 CONST_-20 1
0000000000300000 0000000000003fe8 00000000000032e8 ; lblsq curRef CONST_0 RESOLVE_REF_NOT_REF

# Store the reference address and restore the curRef address
00000000000026d0 0000000000004018 0000000000002700 ; relsq curRef_addrRef_0 CONST_8 1
00000000000027a8 0000000000004018 0000000000002718 ; relsq curRef_addrRef_1 CONST_8 1
0000000000002828 0000000000004018 0000000000002730 ; relsq curRef_addrRef_2 CONST_8 1
0000000000002bd0 0000000000004018 0000000000002748 ; relsq curRef_addrRef_3 CONST_8 1
0000000000002d08 0000000000004018 0000000000002760 ; relsq curRef_addrRef_4 CONST_8 1
0000000000002e58 0000000000004018 0000000000002778 ; relsq curRef_addrRef_5 CONST_8 1

# Start add curRef bufStart tmp
# movneg tmp bufStart
0000000000003ee8 0000000000003ee8 0000000000002790 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f50 00000000000027a8 ; relsq tmp bufStart 1
# sub curRef tmp
0000000000300000 0000000000003ee8 00000000000027c0 ; relsq curRef tmp 1
# End add

; addr refAt 0
# setaddr refAt curRef tmp
0000000000003210 0000000000003210 00000000000027d8 ; relsq refAt_addrRef_0 refAt_addrRef_0 1
0000000000003218 0000000000003218 00000000000027f0 ; relsq refAt_addrRef_1 refAt_addrRef_1 1
0000000000003228 0000000000003228 0000000000002808 ; relsq refAt_addrRef_2 refAt_addrRef_2 1

# Start addaddr refAt curRef tmp
0000000000003ee8 0000000000003ee8 0000000000002820 ; relsq tmp tmp 1
0000000000003ee8 0000000000300000 0000000000002838 ; relsq tmp curRef 1
0000000000003210 0000000000003ee8 0000000000002850 ; relsq refAt_addrRef_0 tmp 1
0000000000003218 0000000000003ee8 0000000000002868 ; relsq refAt_addrRef_1 tmp 1
0000000000003228 0000000000003ee8 0000000000002880 ; relsq refAt_addrRef_2 tmp 1
# End addaddr

00000000000026d0 0000000000004038 0000000000002898 ; relsq curRef_addrRef_0 CONST_18 1
00000000000027a8 0000000000004038 00000000000028b0 ; relsq curRef_addrRef_1 CONST_18 1
0000000000002828 0000000000004038 00000000000028c8 ; relsq curRef_addrRef_2 CONST_18 1
0000000000002bd0 0000000000004038 00000000000028e0 ; relsq curRef_addrRef_3 CONST_18 1
0000000000002d08 0000000000004038 00000000000028f8 ; relsq curRef_addrRef_4 CONST_18 1
0000000000002e58 0000000000004038 0000000000002910 ; relsq curRef_addrRef_5 CONST_18 1

# puts resMsg1 tmp
# puts curRef tmp
# set tmp a
# putchar tmp tmp2

; addr curFindLabel 0
# setaddr curFindLabel logArrStart tmp
0000000000002988 0000000000002988 0000000000002928 ; relsq curFindLabel_addrRef_0 curFindLabel_addrRef_0 1

# Start addaddr curFindLabel logArrStart tmp
0000000000003ee8 0000000000003ee8 0000000000002940 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f28 0000000000002958 ; relsq tmp logArrStart 1
0000000000002988 0000000000003ee8 0000000000002970 ; relsq curFindLabel_addrRef_0 tmp 1
# End addaddr

0000000000002988 0000000000004030 0000000000002988 ; relsq curFindLabel_addrRef_0 CONST_-20 1

; label RESOLVE_REF_FIND_LABEL
0000000000000000 0000000000003fe8 00000000000029d0 ; lblsq curFindLabel CONST_0 RESOLVE_REF_CHECK_LABEL

# This is not a label. Try the next one
0000000000002988 0000000000004040 00000000000029b8 ; relsq curFindLabel_addrRef_0 CONST_-28 1
0000000000000000 0000000000000000 0000000000002988 ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_CHECK_LABEL
; addr curLabel 0
# copyaddr curLabel curFindLabel tmp
; sym curFindLabel_addrRef_0
# setaddr curLabel curFindLabel_addrRef_0 tmp
0000000000002c18 0000000000002c18 00000000000029e8 ; relsq curLabel_addrRef_0 curLabel_addrRef_0 1
0000000000002eb8 0000000000002eb8 0000000000002a00 ; relsq curLabel_addrRef_1 curLabel_addrRef_1 1
0000000000003200 0000000000003200 0000000000002a18 ; relsq curLabel_addrRef_2 curLabel_addrRef_2 1
0000000000003ee8 0000000000003ee8 0000000000002a30 ; relsq tmp tmp 1
0000000000003ee8 0000000000002988 0000000000002a48 ; relsq tmp curFindLabel_addrRef_0 1
0000000000002c18 0000000000003ee8 0000000000002a60 ; relsq curLabel_addrRef_0 tmp 1
0000000000002eb8 0000000000003ee8 0000000000002a78 ; relsq curLabel_addrRef_1 tmp 1
0000000000003200 0000000000003ee8 0000000000002a90 ; relsq curLabel_addrRef_2 tmp 1
0000000000002c18 0000000000004008 0000000000002aa8 ; relsq curLabel_addrRef_0 CONST_20 1
0000000000002eb8 0000000000004008 0000000000002ac0 ; relsq curLabel_addrRef_1 CONST_20 1
0000000000003200 0000000000004008 0000000000002ad8 ; relsq curLabel_addrRef_2 CONST_20 1

# puts resMsg2 tmp
# puts curLabel tmp
# set tmp a
# putchar tmp tmp2


# Start strcmp curRef curLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
# incaddr curRef 8
00000000000026d0 0000000000003ff8 0000000000002af0 ; relsq curRef_addrRef_0 CONST_-8 1
00000000000027a8 0000000000003ff8 0000000000002b08 ; relsq curRef_addrRef_1 CONST_-8 1
0000000000002828 0000000000003ff8 0000000000002b20 ; relsq curRef_addrRef_2 CONST_-8 1
0000000000002bd0 0000000000003ff8 0000000000002b38 ; relsq curRef_addrRef_3 CONST_-8 1
0000000000002d08 0000000000003ff8 0000000000002b50 ; relsq curRef_addrRef_4 CONST_-8 1
0000000000002e58 0000000000003ff8 0000000000002b68 ; relsq curRef_addrRef_5 CONST_-8 1
# incaddr curLabel 8
0000000000002c18 0000000000003ff8 0000000000002b80 ; relsq curLabel_addrRef_0 CONST_-8 1
0000000000002eb8 0000000000003ff8 0000000000002b98 ; relsq curLabel_addrRef_1 CONST_-8 1
0000000000003200 0000000000003ff8 0000000000002bb0 ; relsq curLabel_addrRef_2 CONST_-8 1

# Start jne curRef curLabel STRCMP_0_REVERT_ADDR tmp tmp2

# Start mov tmp curRef tmp2
0000000000003ef0 0000000000003ef0 0000000000002bc8 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000300000 0000000000002be0 ; relsq tmp2 curRef 1
0000000000003ee8 0000000000003ee8 0000000000002bf8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000002c10 ; relsq tmp tmp2 1
# End mov

# sub tmp curLabel
0000000000003ee8 0000000000000000 0000000000002c28 ; relsq tmp curLabel 1

# Start jnz tmp STRCMP_0_REVERT_ADDR tmp2
0000000000003ef0 0000000000003ef0 0000000000002c40 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 0000000000002c58 ; relsq tmp2 tmp 1
0000000000003ef0 0000000000003f80 0000000000003090 ; lblsq tmp2 CONST_-1 STRCMP_0_REVERT_ADDR
0000000000003ee8 0000000000003f80 0000000000002cb8 ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
0000000000003ee8 0000000000003f90 0000000000002ca0 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000002ce8 ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
0000000000003ee8 0000000000003f90 0000000000002cd0 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003090 ; lblsq ZERO ZERO STRCMP_0_REVERT_ADDR
; label JNZ_0_END
# End jnz

# End jne

; var strcmp_0_len 0

# Start mov strcmp_0_len curRef tmp
# movneg tmp curRef
0000000000003ee8 0000000000003ee8 0000000000002d00 ; relsq tmp tmp 1
0000000000003ee8 0000000000300000 0000000000002d18 ; relsq tmp curRef 1
# movneg strcmp_0_len tmp
0000000000003f60 0000000000003f60 0000000000002d30 ; relsq strcmp_0_len strcmp_0_len 1
0000000000003f60 0000000000003ee8 0000000000002d48 ; relsq strcmp_0_len tmp 1
# End mov

# decaddr curRef 8
00000000000026d0 0000000000004018 0000000000002d60 ; relsq curRef_addrRef_0 CONST_8 1
00000000000027a8 0000000000004018 0000000000002d78 ; relsq curRef_addrRef_1 CONST_8 1
0000000000002828 0000000000004018 0000000000002d90 ; relsq curRef_addrRef_2 CONST_8 1
0000000000002bd0 0000000000004018 0000000000002da8 ; relsq curRef_addrRef_3 CONST_8 1
0000000000002d08 0000000000004018 0000000000002dc0 ; relsq curRef_addrRef_4 CONST_8 1
0000000000002e58 0000000000004018 0000000000002dd8 ; relsq curRef_addrRef_5 CONST_8 1
# decaddr curLabel 8
0000000000002c18 0000000000004018 0000000000002df0 ; relsq curLabel_addrRef_0 CONST_8 1
0000000000002eb8 0000000000004018 0000000000002e08 ; relsq curLabel_addrRef_1 CONST_8 1
0000000000003200 0000000000004018 0000000000002e20 ; relsq curLabel_addrRef_2 CONST_8 1
; addr strcmp_0_aStr 0
; addr strcmp_0_bStr 0
# setaddr strcmp_0_aStr curRef tmp
0000000000002f30 0000000000002f30 0000000000002e38 ; relsq strcmp_0_aStr_addrRef_0 strcmp_0_aStr_addrRef_0 1

# Start addaddr strcmp_0_aStr curRef tmp
0000000000003ee8 0000000000003ee8 0000000000002e50 ; relsq tmp tmp 1
0000000000003ee8 0000000000300000 0000000000002e68 ; relsq tmp curRef 1
0000000000002f30 0000000000003ee8 0000000000002e80 ; relsq strcmp_0_aStr_addrRef_0 tmp 1
# End addaddr

# setaddr strcmp_0_bStr curLabel tmp
0000000000002f78 0000000000002f78 0000000000002e98 ; relsq strcmp_0_bStr_addrRef_0 strcmp_0_bStr_addrRef_0 1

# Start addaddr strcmp_0_bStr curLabel tmp
0000000000003ee8 0000000000003ee8 0000000000002eb0 ; relsq tmp tmp 1
0000000000003ee8 0000000000000000 0000000000002ec8 ; relsq tmp curLabel 1
0000000000002f78 0000000000003ee8 0000000000002ee0 ; relsq strcmp_0_bStr_addrRef_0 tmp 1
# End addaddr

; label STRCMP_0_LOOP
# decleq strcmp_0_len 0 RESOLVE_REF_FOUND_LABEL
0000000000003f60 0000000000003fe8 0000000000003198 ; lblsq strcmp_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# dec strcmp_0_len 1
0000000000003f60 0000000000003f90 0000000000002f10 ; relsq strcmp_0_len CONST_1 1

# Start jne strcmp_0_aStr strcmp_0_bStr STRCMP_0_END tmp tmp2

# Start mov tmp strcmp_0_aStr tmp2
0000000000003ef0 0000000000003ef0 0000000000002f28 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000000000 0000000000002f40 ; relsq tmp2 strcmp_0_aStr 1
0000000000003ee8 0000000000003ee8 0000000000002f58 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000002f70 ; relsq tmp tmp2 1
# End mov

# sub tmp strcmp_0_bStr
0000000000003ee8 0000000000000000 0000000000002f88 ; relsq tmp strcmp_0_bStr 1

# Start jnz tmp STRCMP_0_END tmp2
0000000000003ef0 0000000000003ef0 0000000000002fa0 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 0000000000002fb8 ; relsq tmp2 tmp 1
0000000000003ef0 0000000000003f80 0000000000003168 ; lblsq tmp2 CONST_-1 STRCMP_0_END
0000000000003ee8 0000000000003f80 0000000000003018 ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
0000000000003ee8 0000000000003f90 0000000000003000 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003048 ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
0000000000003ee8 0000000000003f90 0000000000003030 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003168 ; lblsq ZERO ZERO STRCMP_0_END
; label JNZ_1_END
# End jnz

# End jne

# incaddr strcmp_0_aStr 8
0000000000002f30 0000000000003ff8 0000000000003060 ; relsq strcmp_0_aStr_addrRef_0 CONST_-8 1
# incaddr strcmp_0_bStr 8
0000000000002f78 0000000000003ff8 0000000000003078 ; relsq strcmp_0_bStr_addrRef_0 CONST_-8 1
# lbljmp STRCMP_0_LOOP
0000000000000000 0000000000000000 0000000000002ee0 ; lblsq ZERO ZERO STRCMP_0_LOOP
; label STRCMP_0_REVERT_ADDR
# decaddr curRef 8
00000000000026d0 0000000000004018 00000000000030a8 ; relsq curRef_addrRef_0 CONST_8 1
00000000000027a8 0000000000004018 00000000000030c0 ; relsq curRef_addrRef_1 CONST_8 1
0000000000002828 0000000000004018 00000000000030d8 ; relsq curRef_addrRef_2 CONST_8 1
0000000000002bd0 0000000000004018 00000000000030f0 ; relsq curRef_addrRef_3 CONST_8 1
0000000000002d08 0000000000004018 0000000000003108 ; relsq curRef_addrRef_4 CONST_8 1
0000000000002e58 0000000000004018 0000000000003120 ; relsq curRef_addrRef_5 CONST_8 1
# decaddr curLabel 8
0000000000002c18 0000000000004018 0000000000003138 ; relsq curLabel_addrRef_0 CONST_8 1
0000000000002eb8 0000000000004018 0000000000003150 ; relsq curLabel_addrRef_1 CONST_8 1
0000000000003200 0000000000004018 0000000000003168 ; relsq curLabel_addrRef_2 CONST_8 1
; label STRCMP_0_END
# End strcmp


# This is the wrong label. Try the next one
0000000000002988 0000000000004040 0000000000003180 ; relsq curFindLabel_addrRef_0 CONST_-28 1
0000000000000000 0000000000000000 0000000000002988 ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

; label RESOLVE_REF_FOUND_LABEL
0000000000002c18 0000000000004020 00000000000031b0 ; relsq curLabel_addrRef_0 CONST_-18 1
0000000000002eb8 0000000000004020 00000000000031c8 ; relsq curLabel_addrRef_1 CONST_-18 1
0000000000003200 0000000000004020 00000000000031e0 ; relsq curLabel_addrRef_2 CONST_-18 1


# Start mov refAt curLabel tmp
# movneg tmp curLabel
0000000000003ee8 0000000000003ee8 00000000000031f8 ; relsq tmp tmp 1
0000000000003ee8 0000000000000000 0000000000003210 ; relsq tmp curLabel 1
# movneg refAt tmp
0000000000000000 0000000000000000 0000000000003228 ; relsq refAt refAt 1
0000000000000000 0000000000003ee8 0000000000003240 ; relsq refAt tmp 1
# End mov

00000000000026d0 0000000000004040 0000000000003258 ; relsq curRef_addrRef_0 CONST_-28 1
00000000000027a8 0000000000004040 0000000000003270 ; relsq curRef_addrRef_1 CONST_-28 1
0000000000002828 0000000000004040 0000000000003288 ; relsq curRef_addrRef_2 CONST_-28 1
0000000000002bd0 0000000000004040 00000000000032a0 ; relsq curRef_addrRef_3 CONST_-28 1
0000000000002d08 0000000000004040 00000000000032b8 ; relsq curRef_addrRef_4 CONST_-28 1
0000000000002e58 0000000000004040 00000000000032d0 ; relsq curRef_addrRef_5 CONST_-28 1
0000000000000000 0000000000000000 0000000000002610 ; lblsq ZERO ZERO RESOLVE_REF_LOOP

; label RESOLVE_REF_NOT_REF
00000000000026d0 0000000000003ff8 0000000000003300 ; relsq curRef_addrRef_0 CONST_-8 1
00000000000027a8 0000000000003ff8 0000000000003318 ; relsq curRef_addrRef_1 CONST_-8 1
0000000000002828 0000000000003ff8 0000000000003330 ; relsq curRef_addrRef_2 CONST_-8 1
0000000000002bd0 0000000000003ff8 0000000000003348 ; relsq curRef_addrRef_3 CONST_-8 1
0000000000002d08 0000000000003ff8 0000000000003360 ; relsq curRef_addrRef_4 CONST_-8 1
0000000000002e58 0000000000003ff8 0000000000003378 ; relsq curRef_addrRef_5 CONST_-8 1
0000000000000000 0000000000000000 0000000000002610 ; lblsq ZERO ZERO RESOLVE_REF_LOOP


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# set i 8
0000000000003f48 0000000000003f48 00000000000033a8 ; relsq i i 1
0000000000003f48 0000000000003ff8 00000000000033c0 ; relsq i CONST_-8 1
0000000000003410 0000000000004018 00000000000033d8 ; relsq charToPrint_addrRef_0 CONST_8 1

; label PRINT_CHAR_START
0000000000003410 0000000000003f80 00000000000033f0 ; relsq charToPrint_addrRef_0 CONST_-1 1

# Start mov c charToPrint tmp
# movneg tmp charToPrint
0000000000003ee8 0000000000003ee8 0000000000003408 ; relsq tmp tmp 1
0000000000003ee8 0000000000100000 0000000000003420 ; relsq tmp charToPrint 1
# movneg c tmp
0000000000003f10 0000000000003f10 0000000000003438 ; relsq c c 1
0000000000003f10 0000000000003ee8 0000000000003450 ; relsq c tmp 1
# End mov


# Start mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# zero mod_256_0_isNeg
# sub mod_256_0_isNeg mod_256_0_isNeg
0000000000003f68 0000000000003f68 0000000000003468 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# jn c MOD_256_0_IS_NEG tmp tmp2

# Start jl c ZERO MOD_256_0_IS_NEG tmp tmp2
0000000000003ef0 0000000000003ef0 0000000000003480 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003f10 0000000000003498 ; relsq tmp2 c 1
0000000000003ee8 0000000000003ee8 00000000000034b0 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 00000000000034c8 ; relsq tmp tmp2 1
0000000000003ee8 0000000000003f80 00000000000034e0 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000000000000 0000000000003510 ; lblsq tmp ZERO MOD_256_0_IS_NEG
# End jl

# lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000035b8 ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_IS_NEG
# inc mod_256_0_isNeg 1
# dec mod_256_0_isNeg -1
0000000000003f68 0000000000003f80 0000000000003528 ; relsq mod_256_0_isNeg CONST_-1 1

# Start neg c tmp tmp2
# movneg tmp c
0000000000003ee8 0000000000003ee8 0000000000003540 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f10 0000000000003558 ; relsq tmp c 1

# Start mov c tmp tmp2
0000000000003ef0 0000000000003ef0 0000000000003570 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003ee8 0000000000003588 ; relsq tmp2 tmp 1
0000000000003f10 0000000000003f10 00000000000035a0 ; relsq c c 1
0000000000003f10 0000000000003ef0 00000000000035b8 ; relsq c tmp2 1
# End mov

# End neg

; label MOD_256_0_START
; var mod_256_0_subber 0
# set mod_256_0_subber 100
# zero mod_256_0_subber
0000000000003f70 0000000000003f70 00000000000035d0 ; relsq mod_256_0_subber mod_256_0_subber 1
# inc mod_256_0_subber 100
0000000000003f70 0000000000004048 00000000000035e8 ; relsq mod_256_0_subber CONST_-100 1

# Start jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2

# Start mov tmp c tmp2
0000000000003ef0 0000000000003ef0 0000000000003600 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003f10 0000000000003618 ; relsq tmp2 c 1
0000000000003ee8 0000000000003ee8 0000000000003630 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000003648 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
0000000000003ee8 0000000000003f80 0000000000003660 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000000003f70 0000000000003c48 ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# End jl

; var mod_256_0_nextSubber 0
# set mod_256_0_nextSubber 10000
# zero mod_256_0_nextSubber
0000000000003f78 0000000000003f78 0000000000003690 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# inc mod_256_0_nextSubber 10000
0000000000003f78 0000000000004050 00000000000036a8 ; relsq mod_256_0_nextSubber CONST_-10000 1
; label MOD_256_0_MULT_SUBBER_START

# Start jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2

# Start mov tmp c tmp2
0000000000003ef0 0000000000003ef0 00000000000036c0 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003f10 00000000000036d8 ; relsq tmp2 c 1
0000000000003ee8 0000000000003ee8 00000000000036f0 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000003708 ; relsq tmp tmp2 1
# End mov

# inc tmp 1
0000000000003ee8 0000000000003f80 0000000000003720 ; relsq tmp CONST_-1 1
0000000000003ee8 0000000000003f78 0000000000003ac8 ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# End jl


# Start mul_256 mod_256_0_subber tmp

# Start mul_16 mod_256_0_subber tmp
0000000000003ee8 0000000000003ee8 0000000000003750 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f70 0000000000003768 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 0000000000003780 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 0000000000003798 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 00000000000037b0 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 00000000000037c8 ; relsq tmp mod_256_0_subber 1
0000000000003f70 0000000000003ee8 00000000000037e0 ; relsq mod_256_0_subber tmp 1
0000000000003f70 0000000000003ee8 00000000000037f8 ; relsq mod_256_0_subber tmp 1
0000000000003f70 0000000000003ee8 0000000000003810 ; relsq mod_256_0_subber tmp 1
# End mul_16


# Start mul_16 mod_256_0_subber tmp
0000000000003ee8 0000000000003ee8 0000000000003828 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f70 0000000000003840 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 0000000000003858 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 0000000000003870 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 0000000000003888 ; relsq tmp mod_256_0_subber 1
0000000000003ee8 0000000000003f70 00000000000038a0 ; relsq tmp mod_256_0_subber 1
0000000000003f70 0000000000003ee8 00000000000038b8 ; relsq mod_256_0_subber tmp 1
0000000000003f70 0000000000003ee8 00000000000038d0 ; relsq mod_256_0_subber tmp 1
0000000000003f70 0000000000003ee8 00000000000038e8 ; relsq mod_256_0_subber tmp 1
# End mul_16

# End mul_256


# Start mul_256 mod_256_0_nextSubber tmp

# Start mul_16 mod_256_0_nextSubber tmp
0000000000003ee8 0000000000003ee8 0000000000003900 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f78 0000000000003918 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003930 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003948 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003960 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003978 ; relsq tmp mod_256_0_nextSubber 1
0000000000003f78 0000000000003ee8 0000000000003990 ; relsq mod_256_0_nextSubber tmp 1
0000000000003f78 0000000000003ee8 00000000000039a8 ; relsq mod_256_0_nextSubber tmp 1
0000000000003f78 0000000000003ee8 00000000000039c0 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16


# Start mul_16 mod_256_0_nextSubber tmp
0000000000003ee8 0000000000003ee8 00000000000039d8 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f78 00000000000039f0 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003a08 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003a20 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003a38 ; relsq tmp mod_256_0_nextSubber 1
0000000000003ee8 0000000000003f78 0000000000003a50 ; relsq tmp mod_256_0_nextSubber 1
0000000000003f78 0000000000003ee8 0000000000003a68 ; relsq mod_256_0_nextSubber tmp 1
0000000000003f78 0000000000003ee8 0000000000003a80 ; relsq mod_256_0_nextSubber tmp 1
0000000000003f78 0000000000003ee8 0000000000003a98 ; relsq mod_256_0_nextSubber tmp 1
# End mul_16

# End mul_256

# decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
0000000000003f78 0000000000003fe8 0000000000003ac8 ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# lbljmp MOD_256_0_MULT_SUBBER_START
0000000000000000 0000000000000000 00000000000036a8 ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
; label MOD_256_0_SUBTRACT_A
0000000000003f10 0000000000003f70 0000000000003b40 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000003f10 0000000000003f70 0000000000003b40 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000003f10 0000000000003f70 0000000000003b40 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000003f10 0000000000003f70 0000000000003b40 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# lbljmp MOD_256_0_SUBTRACT_A
0000000000000000 0000000000000000 0000000000003ac8 ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
; label MOD_256_0_REVERT_SUB

# Start jz c MOD_256_0_START tmp
# movneg tmp c
0000000000003ee8 0000000000003ee8 0000000000003b58 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f10 0000000000003b70 ; relsq tmp c 1
# incleq tmp 1 JZ_3_END
0000000000003ee8 0000000000003f80 0000000000003be8 ; lblsq tmp CONST_-1 JZ_3_END
# incleq c 1 JZ_3_REVERT_A
0000000000003f10 0000000000003f80 0000000000003bd0 ; lblsq c CONST_-1 JZ_3_REVERT_A
# dec c 1
0000000000003f10 0000000000003f90 0000000000003bb8 ; relsq c CONST_1 1
# lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000035b8 ; lblsq ZERO ZERO MOD_256_0_START
; label JZ_3_REVERT_A
# dec c 1
0000000000003f10 0000000000003f90 0000000000003be8 ; relsq c CONST_1 1
; label JZ_3_END
# End jz


# Start add c mod_256_0_subber tmp
# movneg tmp mod_256_0_subber
0000000000003ee8 0000000000003ee8 0000000000003c00 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f70 0000000000003c18 ; relsq tmp mod_256_0_subber 1
# sub c tmp
0000000000003f10 0000000000003ee8 0000000000003c30 ; relsq c tmp 1
# End add

# lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000035b8 ; lblsq ZERO ZERO MOD_256_0_START
; label MOD_256_0_CHECK_NEG
# decleq mod_256_0_isNeg 0 MOD_256_0_END
0000000000003f68 0000000000003fe8 0000000000003d20 ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# decleq c 0 MOD_256_0_END
0000000000003f10 0000000000003fe8 0000000000003d20 ; lblsq c CONST_0 MOD_256_0_END

# Start mov tmp c tmp2
# movneg tmp2 c
0000000000003ef0 0000000000003ef0 0000000000003c90 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000000003f10 0000000000003ca8 ; relsq tmp2 c 1
# movneg tmp tmp2
0000000000003ee8 0000000000003ee8 0000000000003cc0 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000003cd8 ; relsq tmp tmp2 1
# End mov

# set c 100
# zero c
0000000000003f10 0000000000003f10 0000000000003cf0 ; relsq c c 1
# inc c 100
0000000000003f10 0000000000004048 0000000000003d08 ; relsq c CONST_-100 1
# sub c tmp
0000000000003f10 0000000000003ee8 0000000000003d20 ; relsq c tmp 1
; label MOD_256_0_END

# Start putchar c tmp
0000000013ed27f0 0000000000000000 0000000000003d50 ; relsq SERIAL_OUT ZERO 2
# reljmp -1
0000000000000000 0000000000000000 0000000000003d20 ; relsq ZERO ZERO -1
# movneg tmp c
0000000000003ee8 0000000000003ee8 0000000000003d68 ; relsq tmp tmp 1
0000000000003ee8 0000000000003f10 0000000000003d80 ; relsq tmp c 1
# dec tmp 1
0000000000003ee8 0000000000003f90 0000000000003d98 ; relsq tmp CONST_1 1
# movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 0000000000003db0 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 0000000000003ee8 0000000000003dc8 ; relsq SERIAL_OUT tmp 1
# End putchar

0000000000003f48 0000000000003f90 0000000000003df8 ; lblsq i CONST_1 PRINT_CHAR_END
0000000000000000 0000000000000000 00000000000033d8 ; lblsq ZERO ZERO PRINT_CHAR_START

; label PRINT_CHAR_END
# Go to the next qword
0000000000003410 0000000000003ff8 0000000000003e10 ; relsq charToPrint_addrRef_0 CONST_-8 1
0000000000003f00 0000000000004018 0000000000003e40 ; lblsq codeLen CONST_8 HALT
0000000000000000 0000000000000000 0000000000003390 ; lblsq ZERO ZERO PRINT

; label HALT

# Start halt tmp tmp2

# Start set_safe CPU_CONTROL_START 2 tmp tmp2
0000000000003ef0 0000000000003ef0 0000000000003e58 ; relsq tmp2 tmp2 1
0000000000003ef0 0000000013ee0000 0000000000003e70 ; relsq tmp2 CPU_CONTROL_START 1
0000000000003ee8 0000000000003ee8 0000000000003e88 ; relsq tmp tmp 1
0000000000003ee8 0000000000003ef0 0000000000003ea0 ; relsq tmp tmp2 1
0000000000003ee8 0000000000003f98 0000000000003eb8 ; relsq tmp CONST_2 1
0000000013ee0000 0000000000003ee8 0000000000003ed0 ; relsq CPU_CONTROL_START tmp 1
# End set_safe

0000000000000000 0000000000000000 0000000000003ed0 ; relsq ZERO ZERO 0

# def_string resMsg1 Resolving reference to 
# def_string resMsg2 Found label 

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_1000 1000
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_26 26
; var CONST_-20 -20
; var CONST_18 18
; var CONST_-28 -28
; var CONST_-100 -100
; var CONST_-10000 -10000

0000000000000000 ; raw 0000000000000000 # tmp
0000000000000000 ; raw 0000000000000000 # tmp2
0000000001000000 ; raw 0000000001000000 # FREE_START
0000000000000000 ; raw 0000000000000000 # codeLen
0000000000000000 ; raw 0000000000000000 # val
0000000000000000 ; raw 0000000000000000 # c
0000000000000000 ; raw 0000000000000000 # c2
0000000000000000 ; raw 0000000000000000 # isNeg
0000000000300000 ; raw 0000000000300000 # logArrStart
0000000000000000 ; raw 0000000000000000 # logCount
0000000000000000 ; raw 0000000000000000 # inp_token_0_len
0000000000000000 ; raw 0000000000000000 # cur
fffffffffffffff1 ; raw fffffffffffffff1 # i
0000000000100000 ; raw 0000000000100000 # bufStart
0000000000000000 ; raw 0000000000000000 # logsToCheck
0000000000000000 ; raw 0000000000000000 # strcmp_0_len
0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
0000000000000022 ; raw 0000000000000022 # CONST_22
0000000000000001 ; raw 0000000000000001 # CONST_1
0000000000000002 ; raw 0000000000000002 # CONST_2
0000000000000009 ; raw 0000000000000009 # CONST_9
000000000000000a ; raw 000000000000000a # CONST_A
0000000000000003 ; raw 0000000000000003 # CONST_3
0000000000000006 ; raw 0000000000000006 # CONST_6
000000000000001a ; raw 000000000000001a # CONST_1A
0000000000000017 ; raw 0000000000000017 # CONST_17
000000000000002c ; raw 000000000000002c # CONST_2C
000000000000002f ; raw 000000000000002f # CONST_2F
0000000000000007 ; raw 0000000000000007 # CONST_7
0000000000000000 ; raw 0000000000000000 # CONST_0
0000000000001000 ; raw 0000000000001000 # CONST_1000
fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
0000000000000010 ; raw 0000000000000010 # CONST_10
0000000000000020 ; raw 0000000000000020 # CONST_20
000000000000000d ; raw 000000000000000d # CONST_D
0000000000000008 ; raw 0000000000000008 # CONST_8
ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
0000000000000026 ; raw 0000000000000026 # CONST_26
ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
0000000000000018 ; raw 0000000000000018 # CONST_18
ffffffffffffffd8 ; raw ffffffffffffffd8 # CONST_-28
ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
