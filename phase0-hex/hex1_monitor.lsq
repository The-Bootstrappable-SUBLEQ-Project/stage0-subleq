rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Standard program start
addr ZERO 0
var tmp 0
var tmp2 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
lblsq ZERO ZERO EP

label EP
var codeLen 0
rem MAIN is the main routine for handling inputs
label MAIN
rem val is intentionally kept negative to make it easier to add to cur
var val 0
var c 0

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem Keep a backup of c for INPUT_LABEL
var c2 0

rem Start mov c2 c tmp
rem movneg tmp c
relsq tmp tmp 1
relsq tmp c 1
rem movneg c2 tmp
relsq c2 c2 1
relsq c2 tmp 1
rem End mov


rem Handle NUL ~ "
lblsq c CONST_22 MAIN

rem Handle #
lblsq c CONST_1 COMMENT

rem Handle $ and %
lblsq c CONST_2 MAIN

rem Handle &
lblsq c CONST_1 INPUT_LABEL

rem Handle ' ~ /
lblsq c CONST_9 MAIN

rem Handle 0 ~ 9
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_-1 1
lblsq c CONST_A WRITE

rem Handle :
lblsq c CONST_1 INPUT_LABEL

rem Handle ;
lblsq c CONST_1 COMMENT

rem Handle < ~ >
lblsq c CONST_3 MAIN

rem Handle ?
lblsq c CONST_1 HANDLE_REL

rem Handle @
lblsq c CONST_1 MAIN

rem Handle A ~ F
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle G ~ `
lblsq c CONST_1A MAIN

rem Handle a ~ f
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle g ~ }
lblsq c CONST_17 MAIN

rem Handle ~ and DEL (0x7f)
lblsq ZERO ZERO RESOLVE_REF


rem COMMENT ignores characters until \r or \n is fed
label COMMENT

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem putchar c tmp
lblsq c CONST_9 COMMENT
rem Handle LF
lblsq c CONST_1 MAIN
lblsq c CONST_2 COMMENT
rem Handle CR
lblsq c CONST_1 MAIN
lblsq ZERO ZERO COMMENT


rem HANDLE_REL handles relative labels
label HANDLE_REL

rem Handle sign (+-)
var isNeg 0
relsq isNeg isNeg 1

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem Handle NUL ~ ,
lblsq c CONST_2C REL_INP
relsq isNeg CONST_-1 1
rem Handle -
lblsq c CONST_1 REL_INP
relsq isNeg isNeg 1

label REL_INP

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar


rem Handle NUL ~ /
lblsq c CONST_2F REL_NEG

rem Handle 0 ~ 9
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_-1 1
lblsq c CONST_A REL_WRITE

rem Handle : ~ @
lblsq c CONST_7 REL_NEG

rem Handle A ~ F
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 REL_WRITE

rem Handle G ~ `
lblsq c CONST_1A REL_NEG

rem Handle a ~ f
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 REL_WRITE

rem Handle g ~ DEL
lblsq ZERO ZERO REL_INP

label REL_WRITE

rem Start mul_16 cur tmp
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq cur tmp 1
relsq cur tmp 1
relsq cur tmp 1
rem End mul_16

relsq cur val 1
lblsq ZERO ZERO REL_INP

rem Negate cur if the relative jump is negative
label REL_NEG
lblsq isNeg CONST_0 REL_FIN

rem Start neg cur tmp tmp2
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
relsq cur cur 1
relsq cur tmp2 1
rem End neg


label REL_FIN

rem Start add cur codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem sub cur tmp
relsq cur tmp 1
rem End add

lblsq ZERO ZERO WRITE_QWORD


var labelArrStart 300000

rem INPUT_LABEL handles both labels (:) and references to them (&)
label INPUT_LABEL
rem Transform label name to offset
var labelOffset 0

rem Start getchar labelOffset tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg labelOffset tmp
relsq labelOffset labelOffset 1
relsq labelOffset tmp 1
rem End getchar


rem Start mul_16 labelOffset tmp
relsq tmp tmp 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
rem End mul_16


rem Start mul_16 labelOffset tmp
relsq tmp tmp 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq tmp labelOffset 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
rem End mul_16


rem Start getchar tmp2 tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem End getchar


rem Start add labelOffset tmp2 tmp
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem sub labelOffset tmp
relsq labelOffset tmp 1
rem End add


rem Start mul_8 labelOffset tmp
relsq tmp tmp 1
relsq tmp labelOffset 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
relsq labelOffset tmp 1
rem End mul_8


rem Start add labelOffset labelArrStart tmp
rem movneg tmp labelArrStart
relsq tmp tmp 1
relsq tmp labelArrStart 1
rem sub labelOffset tmp
relsq labelOffset tmp 1
rem End add


lblsq c2 CONST_26 RECORD_REF

rem Handle label (:)
addr curLabel 0

rem Start setaddr curLabel labelOffset tmp
zeroaddr curLabel
rem movneg tmp labelOffset
relsq tmp tmp 1
relsq tmp labelOffset 1
subaddr curLabel tmp
rem End setaddr


rem Start mov curLabel codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem movneg curLabel tmp
relsq curLabel curLabel 1
relsq curLabel tmp 1
rem End mov

lblsq ZERO ZERO MAIN

rem Handle reference (&)
label RECORD_REF
var refs 0
addr nextRef 400000

rem Start mov nextRef labelOffset tmp
rem movneg tmp labelOffset
relsq tmp tmp 1
relsq tmp labelOffset 1
rem movneg nextRef tmp
relsq nextRef nextRef 1
relsq nextRef tmp 1
rem End mov

subaddr nextRef CONST_-8

rem Start mov nextRef codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem movneg nextRef tmp
relsq nextRef nextRef 1
relsq nextRef tmp 1
rem End mov


rem Start add nextRef bufStart tmp
rem movneg tmp bufStart
relsq tmp tmp 1
relsq tmp bufStart 1
rem sub nextRef tmp
relsq nextRef tmp 1
rem End add

subaddr nextRef CONST_-8
relsq refs CONST_-1 1
lblsq ZERO ZERO WRITE_QWORD


rem WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
label WRITE
var cur 0

rem Start mul_16 cur tmp
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq cur tmp 1
relsq cur tmp 1
relsq cur tmp 1
rem End mul_16

relsq cur val 1

rem i will turn positive every 16 iterations
var i -f
lblsq i CONST_-1 MAIN
relsq i CONST_10 1

label WRITE_QWORD
addr dstEnd 0
var bufStart 100000
addr bufEnd 100000
rem Copy to the buffer and increase its address
rem The buffer is also intentionally kept negative to ease copying
rem movneg bufEnd cur
relsq bufEnd bufEnd 1
relsq bufEnd cur 1
relsq cur cur 1
subaddr dstEnd CONST_-8
subaddr bufEnd CONST_-8
relsq codeLen CONST_-8 1
lblsq ZERO ZERO MAIN


rem RESOLVE_REF resolves references by setting their value to the label's address
label RESOLVE_REF
lblsq refs CONST_0 COPY
relsq refs CONST_1 1
subaddr nextRef CONST_8

addr refAt 0

rem Start setaddr refAt nextRef tmp
zeroaddr refAt
rem movneg tmp nextRef
relsq tmp tmp 1
relsq tmp nextRef 1
subaddr refAt tmp
rem End setaddr

subaddr nextRef CONST_8

addr refVal 0

rem Start setaddr refVal nextRef tmp
zeroaddr refVal
rem movneg tmp nextRef
relsq tmp tmp 1
relsq tmp nextRef 1
subaddr refVal tmp
rem End setaddr


rem The buffer is kept negative
rem movneg refAt refVal
relsq refAt refAt 1
relsq refAt refVal 1
lblsq ZERO ZERO RESOLVE_REF


rem COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
label COPY
addr loaderDst 200000
addr loaderStart 200000
var loaderLen b0

rem Start mov loaderDst LOADER tmp
rem movneg tmp LOADER
relsq tmp tmp 1
relsq tmp LOADER 1
rem movneg loaderDst tmp
relsq loaderDst loaderDst 1
relsq loaderDst tmp 1
rem End mov

subaddr LOADER CONST_-8
subaddr loaderDst CONST_-8
rem Jump to loaderDst once loaderLen is <= 0
lblsq loaderLen CONST_8 loaderStart
lblsq ZERO ZERO COPY


rem LOADER copies the buffer to the highest memory (0~...) and jumps to 0
rem No external variables are used within LOADER, as those would be overridden by the new program
rem The addresses are also hardcoded based on loaderStart
label LOADER
abssq dstEnd dstEnd 200018
abssq dstEnd bufEnd 200030
rem Decrease bufEnd by 8
raw 0000000000200020 00000000002000a8 0000000000200048
rem Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
raw 0000000000200000 00000000002000a8 0000000000200060
raw 0000000000200008 00000000002000a8 0000000000200078
raw 0000000000200018 00000000002000a8 0000000000000000
rem Rerun the loop
raw 0000000000000000 0000000000000000 0000000000200000
rem CONST_8
raw 0000000000000008

var CONST_-1 -1
var CONST_22 22
var CONST_1 1
var CONST_2 2
var CONST_9 9
var CONST_A a
var CONST_3 3
var CONST_6 6
var CONST_1A 1a
var CONST_17 17
var CONST_2C 2c
var CONST_2F 2f
var CONST_7 7
var CONST_0 0
var CONST_26 26
var CONST_-8 -8
var CONST_10 10
var CONST_8 8

end
