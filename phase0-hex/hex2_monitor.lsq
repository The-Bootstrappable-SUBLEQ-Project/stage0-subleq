rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Standard program start
addr ZERO 0
var tmp 0
var tmp2 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
var FREE_START 1000000
lblsq ZERO ZERO EP

label EP
var codeLen 0
rem MAIN is the main routine for handling inputs
label MAIN
rem val is intentionally kept negative to make it easier to add to cur
var val 0
var c 0

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem Keep a backup of c for INPUT_LABEL
var c2 0

rem Start mov c2 c tmp
rem movneg tmp c
relsq tmp tmp 1
relsq tmp c 1
rem movneg c2 tmp
relsq c2 c2 1
relsq c2 tmp 1
rem End mov


rem Handle NUL ~ "
lblsq c CONST_22 MAIN

rem Handle #
lblsq c CONST_1 COMMENT

rem Handle $ and %
lblsq c CONST_2 MAIN

rem Handle &
lblsq c CONST_1 INPUT_LABEL

rem Handle ' ~ /
lblsq c CONST_9 MAIN

rem Handle 0 ~ 9
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_-1 1
lblsq c CONST_A WRITE

rem Handle :
lblsq c CONST_1 INPUT_LABEL

rem Handle ;
lblsq c CONST_1 COMMENT

rem Handle < ~ >
lblsq c CONST_3 MAIN

rem Handle ?
lblsq c CONST_1 HANDLE_REL

rem Handle @
lblsq c CONST_1 MAIN

rem Handle A ~ F
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle G ~ `
lblsq c CONST_1A MAIN

rem Handle a ~ f
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 WRITE

rem Handle g ~ }
lblsq c CONST_17 MAIN

rem Handle ~ and DEL (0x7f)
lblsq ZERO ZERO RESOLVE_REF


rem COMMENT ignores characters until \r or \n is fed
label COMMENT

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem putchar c tmp
lblsq c CONST_9 COMMENT
rem Handle LF
lblsq c CONST_1 MAIN
lblsq c CONST_2 COMMENT
rem Handle CR
lblsq c CONST_1 MAIN
lblsq ZERO ZERO COMMENT


rem HANDLE_REL handles relative labels
label HANDLE_REL

rem Handle sign (+-)
var isNeg 0
relsq isNeg isNeg 1

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar

rem Handle NUL ~ ,
lblsq c CONST_2C REL_INP
relsq isNeg CONST_-1 1
rem Handle -
lblsq c CONST_1 REL_INP
relsq isNeg isNeg 1

label REL_INP

rem Start getchar c tmp
rem set tmp 1
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg c tmp
relsq c c 1
relsq c tmp 1
rem End getchar


rem Handle NUL ~ /
lblsq c CONST_2F REL_NEG

rem Handle 0 ~ 9
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_-1 1
lblsq c CONST_A REL_WRITE

rem Handle : ~ @
lblsq c CONST_7 REL_NEG

rem Handle A ~ F
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 REL_WRITE

rem Handle G ~ `
lblsq c CONST_1A REL_NEG

rem Handle a ~ f
rem movneg val c
relsq val val 1
relsq val c 1
relsq val CONST_9 1
lblsq c CONST_6 REL_WRITE

rem Handle g ~ DEL
lblsq ZERO ZERO REL_INP

label REL_WRITE

rem Start mul_16 cur tmp
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq cur tmp 1
relsq cur tmp 1
relsq cur tmp 1
rem End mul_16

relsq cur val 1
lblsq ZERO ZERO REL_INP

rem Negate cur if the relative jump is negative
label REL_NEG
lblsq isNeg CONST_0 REL_FIN

rem Start neg cur tmp tmp2
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
relsq cur cur 1
relsq cur tmp2 1
rem End neg


label REL_FIN

rem Start add cur codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem sub cur tmp
relsq cur tmp 1
rem End add

lblsq ZERO ZERO WRITE_QWORD

rem A label/reference is made of two components, adding to a total of 0x20 bytes:
rem 0x0 A string containing its name
rem 0x18 The offset on which it occured

var lblArrStart 300000
addr lblArrNext 300000
var lblCount 0

var refArrStart 400000
addr refArrNext 400000
var refCount 0

rem INPUT_LABEL handles both labels (:) and references to them (&)
label INPUT_LABEL
lblsq c2 CONST_26 RECORD_REF

rem Handle label (:)
relsq lblCount CONST_-1 1

rem Start alloc_str lblArrNext 1000 tmp

rem Start malloc_const lblArrNext 1000 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq lblArrNext lblArrNext 1
relsq lblArrNext tmp 1
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr lblArrNext 8
subaddr lblArrNext CONST_-8
rem zero lblArrNext
relsq lblArrNext lblArrNext 1
rem incaddr lblArrNext 8
subaddr lblArrNext CONST_-8

rem Start mov lblArrNext CONST_1000 tmp
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq lblArrNext lblArrNext 1
relsq lblArrNext tmp 1
rem End mov

rem decaddr lblArrNext 10
subaddr lblArrNext CONST_10
rem End alloc_str


rem Start inp_token lblArrNext tmp tmp2
addr inp_token_0_str 0
rem setaddr inp_token_0_str lblArrNext tmp
zeroaddr inp_token_0_str
relsq tmp tmp 1
relsq tmp lblArrNext 1
subaddr inp_token_0_str tmp
var inp_token_0_len 0
rem zero inp_token_0_len
relsq inp_token_0_len inp_token_0_len 1
label INP_TOKEN_0_LOOP

rem Start getchar inp_token_0_str tmp
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
relsq ZERO ZERO -1
relsq SERIAL_IN SERIAL_IN 1
relsq inp_token_0_str inp_token_0_str 1
relsq inp_token_0_str tmp 1
rem End getchar


rem Start jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_20 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_0_END
lblsq tmp CONST_-1 JZ_0_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_0_TERM
label JZ_0_REVERT_A
relsq tmp CONST_1 1
label JZ_0_END
rem End jeq_const


rem Start jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_D 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_1_END
lblsq tmp CONST_-1 JZ_1_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_0_TERM
label JZ_1_REVERT_A
relsq tmp CONST_1 1
label JZ_1_END
rem End jeq_const


rem Start jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_A 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_2_END
lblsq tmp CONST_-1 JZ_2_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_0_TERM
label JZ_2_REVERT_A
relsq tmp CONST_1 1
label JZ_2_END
rem End jeq_const

rem inc inp_token_0_len 1
relsq inp_token_0_len CONST_-1 1
rem incaddr inp_token_0_str 8
subaddr inp_token_0_str CONST_-8
rem lbljmp INP_TOKEN_0_LOOP
lblsq ZERO ZERO INP_TOKEN_0_LOOP
label INP_TOKEN_0_TERM
rem decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
rem incaddr lblArrNext 8
subaddr lblArrNext CONST_-8

rem Start mov lblArrNext inp_token_0_len tmp
relsq tmp tmp 1
relsq tmp inp_token_0_len 1
relsq lblArrNext lblArrNext 1
relsq lblArrNext tmp 1
rem End mov

rem decaddr lblArrNext 8
subaddr lblArrNext CONST_8
rem End inp_token

subaddr lblArrNext CONST_-18

rem Start mov lblArrNext codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem movneg lblArrNext tmp
relsq lblArrNext lblArrNext 1
relsq lblArrNext tmp 1
rem End mov

subaddr lblArrNext CONST_-8
lblsq ZERO ZERO MAIN

rem Handle reference (&)
label RECORD_REF
relsq refCount CONST_-1 1

rem Start alloc_str refArrNext 1000 tmp

rem Start malloc_const refArrNext 1000 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq refArrNext refArrNext 1
relsq refArrNext tmp 1
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr refArrNext 8
subaddr refArrNext CONST_-8
rem zero refArrNext
relsq refArrNext refArrNext 1
rem incaddr refArrNext 8
subaddr refArrNext CONST_-8

rem Start mov refArrNext CONST_1000 tmp
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq refArrNext refArrNext 1
relsq refArrNext tmp 1
rem End mov

rem decaddr refArrNext 10
subaddr refArrNext CONST_10
rem End alloc_str


rem Start inp_token refArrNext tmp tmp2
addr inp_token_1_str 0
rem setaddr inp_token_1_str refArrNext tmp
zeroaddr inp_token_1_str
relsq tmp tmp 1
relsq tmp refArrNext 1
subaddr inp_token_1_str tmp
var inp_token_1_len 0
rem zero inp_token_1_len
relsq inp_token_1_len inp_token_1_len 1
label INP_TOKEN_1_LOOP

rem Start getchar inp_token_1_str tmp
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
relsq ZERO ZERO -1
relsq SERIAL_IN SERIAL_IN 1
relsq inp_token_1_str inp_token_1_str 1
relsq inp_token_1_str tmp 1
rem End getchar


rem Start jeq_const inp_token_1_str 20 INP_TOKEN_1_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_1_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_20 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_3_END
lblsq tmp CONST_-1 JZ_3_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_1_TERM
label JZ_3_REVERT_A
relsq tmp CONST_1 1
label JZ_3_END
rem End jeq_const


rem Start jeq_const inp_token_1_str d INP_TOKEN_1_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_1_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_D 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_4_END
lblsq tmp CONST_-1 JZ_4_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_1_TERM
label JZ_4_REVERT_A
relsq tmp CONST_1 1
label JZ_4_END
rem End jeq_const


rem Start jeq_const inp_token_1_str a INP_TOKEN_1_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_1_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_A 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_5_END
lblsq tmp CONST_-1 JZ_5_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_1_TERM
label JZ_5_REVERT_A
relsq tmp CONST_1 1
label JZ_5_END
rem End jeq_const

rem inc inp_token_1_len 1
relsq inp_token_1_len CONST_-1 1
rem incaddr inp_token_1_str 8
subaddr inp_token_1_str CONST_-8
rem lbljmp INP_TOKEN_1_LOOP
lblsq ZERO ZERO INP_TOKEN_1_LOOP
label INP_TOKEN_1_TERM
rem decleq inp_token_1_len 0 INP_TOKEN_1_LOOP
lblsq inp_token_1_len CONST_0 INP_TOKEN_1_LOOP
rem incaddr refArrNext 8
subaddr refArrNext CONST_-8

rem Start mov refArrNext inp_token_1_len tmp
relsq tmp tmp 1
relsq tmp inp_token_1_len 1
relsq refArrNext refArrNext 1
relsq refArrNext tmp 1
rem End mov

rem decaddr refArrNext 8
subaddr refArrNext CONST_8
rem End inp_token

subaddr refArrNext CONST_-18

rem Start mov refArrNext codeLen tmp
rem movneg tmp codeLen
relsq tmp tmp 1
relsq tmp codeLen 1
rem movneg refArrNext tmp
relsq refArrNext refArrNext 1
relsq refArrNext tmp 1
rem End mov

subaddr refArrNext CONST_-8
lblsq ZERO ZERO WRITE_QWORD


rem WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
label WRITE
var cur 0

rem Start mul_16 cur tmp
relsq tmp tmp 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq tmp cur 1
relsq cur tmp 1
relsq cur tmp 1
relsq cur tmp 1
rem End mul_16

relsq cur val 1

rem i will turn positive every 16 iterations
var i -f
lblsq i CONST_-1 MAIN
relsq i CONST_10 1

label WRITE_QWORD
addr dstEnd 0
var bufStart 100000
addr bufEnd 100000
rem Copy to the buffer and increase its address
rem The buffer is also intentionally kept negative to ease copying
rem movneg bufEnd cur
relsq bufEnd bufEnd 1
relsq bufEnd cur 1
relsq cur cur 1
subaddr dstEnd CONST_-8
subaddr bufEnd CONST_-8
relsq codeLen CONST_-8 1
lblsq ZERO ZERO MAIN


rem A label/reference is made of two components, adding to a total of 0x20 bytes:
rem 0x0 A string containing its name
rem 0x18 The offset on which it occured

rem RESOLVE_REF resolves references by setting their value to the label's address
label RESOLVE_REF
var refsToResolve 0

rem Start mov refsToResolve refCount tmp
rem movneg tmp refCount
relsq tmp tmp 1
relsq tmp refCount 1
rem movneg refsToResolve tmp
relsq refsToResolve refsToResolve 1
relsq refsToResolve tmp 1
rem End mov

addr curRef 400000

label RESOLVE_REF_LOOP
lblsq refsToResolve CONST_0 COPY
relsq refsToResolve CONST_1 1

addr curFindLabel 0
rem setaddr curFindLabel lblArrStart tmp
zeroaddr curFindLabel

rem Start addaddr curFindLabel lblArrStart tmp
relsq tmp tmp 1
relsq tmp lblArrStart 1
subaddr curFindLabel tmp
rem End addaddr


label RESOLVE_REF_FIND_LABEL

rem Start strcmp_const curRef curFindLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
addr strcmp_const_0_a 0
rem copyaddr strcmp_const_0_a curRef tmp
sym curRef_addrRef_0
rem setaddr strcmp_const_0_a curRef_addrRef_0 tmp
zeroaddr strcmp_const_0_a
relsq tmp tmp 1
relsq tmp curRef_addrRef_0 1
subaddr strcmp_const_0_a tmp
rem incaddr strcmp_const_0_a 8
subaddr strcmp_const_0_a CONST_-8
rem incaddr curFindLabel 8
subaddr curFindLabel CONST_-8

rem Start jne strcmp_const_0_a curFindLabel STRCMP_CONST_0_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_0_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp curFindLabel
relsq tmp curFindLabel 1

rem Start jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_0_END
label JNZ_0_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
label JNZ_0_END
rem End jnz

rem End jne

var strcmp_const_0_len 0

rem Start mov strcmp_const_0_len strcmp_const_0_a tmp
rem movneg tmp strcmp_const_0_a
relsq tmp tmp 1
relsq tmp strcmp_const_0_a 1
rem movneg strcmp_const_0_len tmp
relsq strcmp_const_0_len strcmp_const_0_len 1
relsq strcmp_const_0_len tmp 1
rem End mov

rem decaddr strcmp_const_0_a 8
subaddr strcmp_const_0_a CONST_8
rem decaddr curFindLabel 8
subaddr curFindLabel CONST_8
addr strcmp_const_0_aStr 0
addr strcmp_const_0_bStr 0
rem setaddr strcmp_const_0_aStr strcmp_const_0_a tmp
zeroaddr strcmp_const_0_aStr

rem Start addaddr strcmp_const_0_aStr strcmp_const_0_a tmp
relsq tmp tmp 1
relsq tmp strcmp_const_0_a 1
subaddr strcmp_const_0_aStr tmp
rem End addaddr

rem setaddr strcmp_const_0_bStr curFindLabel tmp
zeroaddr strcmp_const_0_bStr

rem Start addaddr strcmp_const_0_bStr curFindLabel tmp
relsq tmp tmp 1
relsq tmp curFindLabel 1
subaddr strcmp_const_0_bStr tmp
rem End addaddr

label STRCMP_CONST_0_LOOP
rem decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
rem dec strcmp_const_0_len 1
relsq strcmp_const_0_len CONST_1 1

rem Start jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2

rem Start mov tmp strcmp_const_0_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_0_bStr
relsq tmp strcmp_const_0_bStr 1

rem Start jnz tmp STRCMP_CONST_0_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_1_END
label JNZ_1_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_0_END
label JNZ_1_END
rem End jnz

rem End jne

rem incaddr strcmp_const_0_aStr 8
subaddr strcmp_const_0_aStr CONST_-8
rem incaddr strcmp_const_0_bStr 8
subaddr strcmp_const_0_bStr CONST_-8
rem lbljmp STRCMP_CONST_0_LOOP
lblsq ZERO ZERO STRCMP_CONST_0_LOOP
label STRCMP_CONST_0_REVERT_ADDR
rem decaddr curFindLabel 8
subaddr curFindLabel CONST_8
label STRCMP_CONST_0_END
rem End strcmp_const


rem This is the wrong label. Try the next one
subaddr curFindLabel CONST_-20
lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL

label RESOLVE_REF_FOUND_LABEL
addr curLabel 0
rem copyaddr curLabel curFindLabel tmp
sym curFindLabel_addrRef_0
rem setaddr curLabel curFindLabel_addrRef_0 tmp
zeroaddr curLabel
relsq tmp tmp 1
relsq tmp curFindLabel_addrRef_0 1
subaddr curLabel tmp
subaddr curLabel CONST_-18

rem Fetch the reference address and point curRef to the next reference
subaddr curRef CONST_-18

rem Start add curRef bufStart tmp
rem movneg tmp bufStart
relsq tmp tmp 1
relsq tmp bufStart 1
rem sub curRef tmp
relsq curRef tmp 1
rem End add

addr refAt 0
rem setaddr refAt curRef tmp
zeroaddr refAt

rem Start addaddr refAt curRef tmp
relsq tmp tmp 1
relsq tmp curRef 1
subaddr refAt tmp
rem End addaddr

subaddr curRef CONST_-8

rem The buffer is kept negative
rem movneg refAt curLabel
relsq refAt refAt 1
relsq refAt curLabel 1
lblsq ZERO ZERO RESOLVE_REF_LOOP


rem COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
label COPY
addr loaderDst 200000
addr loaderStart 200000
var loaderLen b0

rem Start mov loaderDst LOADER tmp
rem movneg tmp LOADER
relsq tmp tmp 1
relsq tmp LOADER 1
rem movneg loaderDst tmp
relsq loaderDst loaderDst 1
relsq loaderDst tmp 1
rem End mov

subaddr LOADER CONST_-8
subaddr loaderDst CONST_-8
rem Jump to loaderDst once loaderLen is <= 0
lblsq loaderLen CONST_8 loaderStart
lblsq ZERO ZERO COPY


rem LOADER copies the buffer to the highest memory (0~...) and jumps to 0
rem No external variables are used within LOADER, as those would be overridden by the new program
rem The addresses are also hardcoded based on loaderStart
label LOADER
abssq dstEnd dstEnd 200018
abssq dstEnd bufEnd 200030
rem Decrease bufEnd by 8
raw 0000000000200020 00000000002000a8 0000000000200048
rem Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
raw 0000000000200000 00000000002000a8 0000000000200060
raw 0000000000200008 00000000002000a8 0000000000200078
raw 0000000000200018 00000000002000a8 0000000000000000
rem Rerun the loop
raw 0000000000000000 0000000000000000 0000000000200000
rem CONST_8
raw 0000000000000008

rem def_string resMsg1 Resolving reference to 
rem def_string resMsg2 Found label 

var CONST_-1 -1
var CONST_22 22
var CONST_1 1
var CONST_2 2
var CONST_9 9
var CONST_A a
var CONST_3 3
var CONST_6 6
var CONST_1A 1a
var CONST_17 17
var CONST_2C 2c
var CONST_2F 2f
var CONST_7 7
var CONST_0 0
var CONST_26 26
var CONST_1000 1000
var CONST_-8 -8
var CONST_10 10
var CONST_20 20
var CONST_D d
var CONST_8 8
var CONST_-18 -18
var CONST_-20 -20

end
