0rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Standard program start
addr ZERO 0
var tmp 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
lblsq ZERO ZERO EP

label EP
rem MAIN is the main routine for handling inputs
label MAIN
rem val is intentionally kept negative to make it easier to add to cur
var val 0
var c 0
rem MSQ_START 0 getchar c tmp
rem MSQ_START 1 set tmp 1
rem MSQ_START 2 zero tmp
relsq tmp tmp 1
rem MSQ_END 2 zero
rem MSQ_START 2 inc tmp 1
relsq tmp CONST_-1 1
rem MSQ_END 2 inc
rem MSQ_END 1 set
relsq tmp SERIAL_IN 2
rem MSQ_START 1 reljmp -1
relsq ZERO ZERO -1
rem MSQ_END 1 reljmp
rem MSQ_START 1 zero SERIAL_IN
rem MSQ_START 2 sub SERIAL_IN SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 movneg c tmp
rem MSQ_START 2 zero c
relsq c c 1
rem MSQ_END 2 zero
rem MSQ_START 2 sub c tmp
relsq c tmp 1
rem MSQ_END 2 sub
rem MSQ_END 1 movneg
rem MSQ_END 0 getchar
rem putchar c tmp

rem Handle NUL ~ "
rem MSQ_START 0 decleq c 22 MAIN
lblsq c CONST_22 MAIN
rem MSQ_END 0 decleq

rem Handle #
rem MSQ_START 0 decleq c 1 COMMENT
lblsq c CONST_1 COMMENT
rem MSQ_END 0 decleq

rem Handle $ ~ /
rem MSQ_START 0 decleq c c MAIN
lblsq c CONST_C MAIN
rem MSQ_END 0 decleq

rem Handle 0 ~ 9
rem MSQ_START 0 movneg val c
rem MSQ_START 1 zero val
rem MSQ_START 2 sub val val
relsq val val 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 sub val c
relsq val c 1
rem MSQ_END 1 sub
rem MSQ_END 0 movneg
rem MSQ_START 0 inc val 1
rem MSQ_START 1 dec val -1
relsq val CONST_-1 1
rem MSQ_END 1 dec
rem MSQ_END 0 inc
rem MSQ_START 0 decleq c a WRITE
lblsq c CONST_A WRITE
rem MSQ_END 0 decleq

rem Handle :
rem MSQ_START 0 decleq c 1 MAIN
lblsq c CONST_1 MAIN
rem MSQ_END 0 decleq

rem Handle ;
rem MSQ_START 0 decleq c 1 COMMENT
lblsq c CONST_1 COMMENT
rem MSQ_END 0 decleq

rem Handle < ~ @
rem MSQ_START 0 decleq c 5 MAIN
lblsq c CONST_5 MAIN
rem MSQ_END 0 decleq

rem Handle A ~ F
rem MSQ_START 0 movneg val c
rem MSQ_START 1 zero val
rem MSQ_START 2 sub val val
relsq val val 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 sub val c
relsq val c 1
rem MSQ_END 1 sub
rem MSQ_END 0 movneg
rem MSQ_START 0 dec val 9
relsq val CONST_9 1
rem MSQ_END 0 dec
rem MSQ_START 0 decleq c 6 WRITE
lblsq c CONST_6 WRITE
rem MSQ_END 0 decleq

rem Handle G ~ `
rem MSQ_START 0 decleq c 1a MAIN
lblsq c CONST_1A MAIN
rem MSQ_END 0 decleq

rem Handle a ~ f
rem MSQ_START 0 movneg val c
rem MSQ_START 1 zero val
rem MSQ_START 2 sub val val
relsq val val 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 sub val c
relsq val c 1
rem MSQ_END 1 sub
rem MSQ_END 0 movneg
rem MSQ_START 0 dec val 9
relsq val CONST_9 1
rem MSQ_END 0 dec
rem MSQ_START 0 decleq c 6 WRITE
lblsq c CONST_6 WRITE
rem MSQ_END 0 decleq

rem Handle g ~ }
rem MSQ_START 0 decleq c 17 MAIN
lblsq c CONST_17 MAIN
rem MSQ_END 0 decleq

rem Handle ~ and DEL (0x7f)
rem MSQ_START 0 lbljmp COPY
lblsq ZERO ZERO COPY
rem MSQ_END 0 lbljmp


rem COMMENT ignores characters until \r or \n is fed
label COMMENT
rem MSQ_START 0 getchar c tmp
rem MSQ_START 1 set tmp 1
rem MSQ_START 2 zero tmp
relsq tmp tmp 1
rem MSQ_END 2 zero
rem MSQ_START 2 inc tmp 1
relsq tmp CONST_-1 1
rem MSQ_END 2 inc
rem MSQ_END 1 set
relsq tmp SERIAL_IN 2
rem MSQ_START 1 reljmp -1
relsq ZERO ZERO -1
rem MSQ_END 1 reljmp
rem MSQ_START 1 zero SERIAL_IN
rem MSQ_START 2 sub SERIAL_IN SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 movneg c tmp
rem MSQ_START 2 zero c
relsq c c 1
rem MSQ_END 2 zero
rem MSQ_START 2 sub c tmp
relsq c tmp 1
rem MSQ_END 2 sub
rem MSQ_END 1 movneg
rem MSQ_END 0 getchar
rem putchar c tmp
rem MSQ_START 0 decleq c 9 COMMENT
lblsq c CONST_9 COMMENT
rem MSQ_END 0 decleq
rem Handle LF
rem MSQ_START 0 decleq c 1 MAIN
lblsq c CONST_1 MAIN
rem MSQ_END 0 decleq
rem MSQ_START 0 decleq c 2 COMMENT
lblsq c CONST_2 COMMENT
rem MSQ_END 0 decleq
rem Handle CR
rem MSQ_START 0 decleq c 1 MAIN
lblsq c CONST_1 MAIN
rem MSQ_END 0 decleq
rem MSQ_START 0 lbljmp COMMENT
lblsq ZERO ZERO COMMENT
rem MSQ_END 0 lbljmp


rem WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
label WRITE
var cur 0
rem MSQ_START 0 mul_16 cur tmp
rem MSQ_START 1 zero tmp
rem MSQ_START 2 sub tmp tmp
relsq tmp tmp 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 sub tmp cur
relsq tmp cur 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub tmp cur
relsq tmp cur 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub tmp cur
relsq tmp cur 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub tmp cur
relsq tmp cur 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub tmp cur
relsq tmp cur 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub cur tmp
relsq cur tmp 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub cur tmp
relsq cur tmp 1
rem MSQ_END 1 sub
rem MSQ_START 1 sub cur tmp
relsq cur tmp 1
rem MSQ_END 1 sub
rem MSQ_END 0 mul_16
rem MSQ_START 0 sub cur val
relsq cur val 1
rem MSQ_END 0 sub

rem i will turn positive every 16 iterations
var i -f
rem MSQ_START 0 incleq i 1 MAIN
rem MSQ_START 1 decleq i -1 MAIN
lblsq i CONST_-1 MAIN
rem MSQ_END 1 decleq
rem MSQ_END 0 incleq

rem Copy to the buffer and increase its address
addr dstEnd 0
addr bufEnd 100000
rem The buffer is also intentionally kept negative to ease copying
rem MSQ_START 0 movneg bufEnd cur
rem MSQ_START 1 zero bufEnd
rem MSQ_START 2 sub bufEnd bufEnd
relsq bufEnd bufEnd 1
rem MSQ_END 2 sub
rem MSQ_END 1 zero
rem MSQ_START 1 sub bufEnd cur
relsq bufEnd cur 1
rem MSQ_END 1 sub
rem MSQ_END 0 movneg
rem MSQ_START 0 zero cur
rem MSQ_START 1 sub cur cur
relsq cur cur 1
rem MSQ_END 1 sub
rem MSQ_END 0 zero
rem MSQ_START 0 decaddr dstEnd -8
subaddr dstEnd CONST_-8
rem MSQ_END 0 decaddr
rem MSQ_START 0 decaddr bufEnd -8
subaddr bufEnd CONST_-8
rem MSQ_END 0 decaddr
rem MSQ_START 0 decleq i 10 MAIN
lblsq i CONST_10 MAIN
rem MSQ_END 0 decleq


rem COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
label COPY
addr loaderDst 200000
addr loaderStart 200000
var loaderLen b0
rem MSQ_START 0 mov loaderDst LOADER tmp
rem MSQ_START 1 movneg tmp LOADER
rem MSQ_START 2 zero tmp
relsq tmp tmp 1
rem MSQ_END 2 zero
rem MSQ_START 2 sub tmp LOADER
relsq tmp LOADER 1
rem MSQ_END 2 sub
rem MSQ_END 1 movneg
rem MSQ_START 1 movneg loaderDst tmp
rem MSQ_START 2 zero loaderDst
relsq loaderDst loaderDst 1
rem MSQ_END 2 zero
rem MSQ_START 2 sub loaderDst tmp
relsq loaderDst tmp 1
rem MSQ_END 2 sub
rem MSQ_END 1 movneg
rem MSQ_END 0 mov
rem MSQ_START 0 decaddr LOADER -8
subaddr LOADER CONST_-8
rem MSQ_END 0 decaddr
rem MSQ_START 0 decaddr loaderDst -8
subaddr loaderDst CONST_-8
rem MSQ_END 0 decaddr
rem Jump to loaderDst once loaderLen is <= 0
rem MSQ_START 0 decleq loaderLen 8 loaderStart
lblsq loaderLen CONST_8 loaderStart
rem MSQ_END 0 decleq
rem MSQ_START 0 lbljmp COPY
lblsq ZERO ZERO COPY
rem MSQ_END 0 lbljmp


rem LOADER copies the buffer to the highest memory (0~...) and jumps to 0
rem No external variables are used within LOADER, as those would be overridden by the new program
rem The addresses are also hardcoded based on loaderStart
label LOADER
abssq dstEnd dstEnd 200018
abssq dstEnd bufEnd 200030
rem Decrease bufEnd by 8
raw 0000000000200020 00000000002000a8 0000000000200048
rem Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
raw 0000000000200000 00000000002000a8 0000000000200060
raw 0000000000200008 00000000002000a8 0000000000200078
raw 0000000000200018 00000000002000a8 0000000000000000
rem Rerun the loop
raw 0000000000000000 0000000000000000 0000000000200000
rem CONST_8
raw 0000000000000008

var CONST_-1 -1
var CONST_22 22
var CONST_1 1
var CONST_C c
var CONST_A a
var CONST_5 5
var CONST_9 9
var CONST_6 6
var CONST_1A 1a
var CONST_17 17
var CONST_2 2
var CONST_-8 -8
var CONST_10 10
var CONST_8 8

end
