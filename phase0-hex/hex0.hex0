# hex0
# Step 0: Processed 636 lines
# Step 1: Found 50 symbols
# Step 2: Now with 50 symbols and 411 references
# Step 3: Now with 54 symbols and 638 lines
# Step 4: Current size is 4488 bytes
# Step 5: Size is now 4704 bytes
# Step 6: Found 1 symbols at address 0
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO EP

; label EP
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000001188 0000000000001188 0000000000000030 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000001188 00000000000011d8 0000000000000048 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000001188 0000000013ed27e8 0000000000000078 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000048 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000090 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
00000000000011a0 00000000000011a0 00000000000000a8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
00000000000011a0 0000000000001188 00000000000000c0 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp

# Handle NUL ~ "
# MSQ_START 0 decleq c 22 MAIN
00000000000011a0 00000000000011e0 0000000000000018 ; lblsq c CONST_22 MAIN
# MSQ_END 0 decleq

# Handle #
# MSQ_START 0 decleq c 1 COMMENT
00000000000011a0 00000000000011e8 00000000000002b8 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle $ ~ /
# MSQ_START 0 decleq c c MAIN
00000000000011a0 00000000000011f0 0000000000000018 ; lblsq c CONST_C MAIN
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000001198 0000000000001198 0000000000000120 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000001198 00000000000011a0 0000000000000138 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
0000000000001198 00000000000011d8 0000000000000150 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a WRITE
00000000000011a0 00000000000011f8 00000000000003d8 ; lblsq c CONST_A WRITE
# MSQ_END 0 decleq

# Handle :
# MSQ_START 0 decleq c 1 MAIN
00000000000011a0 00000000000011e8 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq

# Handle ;
# MSQ_START 0 decleq c 1 COMMENT
00000000000011a0 00000000000011e8 00000000000002b8 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle < ~ @
# MSQ_START 0 decleq c 5 MAIN
00000000000011a0 0000000000001200 0000000000000018 ; lblsq c CONST_5 MAIN
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000001198 0000000000001198 00000000000001c8 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000001198 00000000000011a0 00000000000001e0 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000001198 0000000000001208 00000000000001f8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
00000000000011a0 0000000000001210 00000000000003d8 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a MAIN
00000000000011a0 0000000000001218 0000000000000018 ; lblsq c CONST_1A MAIN
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000001198 0000000000001198 0000000000000240 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000001198 00000000000011a0 0000000000000258 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000001198 0000000000001208 0000000000000270 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
00000000000011a0 0000000000001210 00000000000003d8 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle g ~ }
# MSQ_START 0 decleq c 17 MAIN
00000000000011a0 0000000000001220 0000000000000018 ; lblsq c CONST_17 MAIN
# MSQ_END 0 decleq

# Handle ~ and DEL (0x7f)
# MSQ_START 0 lbljmp PRINT
0000000000000000 0000000000000000 00000000000005d0 ; lblsq ZERO ZERO PRINT
# MSQ_END 0 lbljmp


# COMMENT ignores characters until \r or \n is fed
; label COMMENT
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000001188 0000000000001188 00000000000002d0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000001188 00000000000011d8 00000000000002e8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000001188 0000000013ed27e8 0000000000000318 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000002e8 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000330 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
00000000000011a0 00000000000011a0 0000000000000348 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
00000000000011a0 0000000000001188 0000000000000360 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp
# MSQ_START 0 decleq c 9 COMMENT
00000000000011a0 0000000000001208 00000000000002b8 ; lblsq c CONST_9 COMMENT
# MSQ_END 0 decleq
# Handle LF
# MSQ_START 0 decleq c 1 MAIN
00000000000011a0 00000000000011e8 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 decleq c 2 COMMENT
00000000000011a0 0000000000001228 00000000000002b8 ; lblsq c CONST_2 COMMENT
# MSQ_END 0 decleq
# Handle CR
# MSQ_START 0 decleq c 1 MAIN
00000000000011a0 00000000000011e8 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COMMENT
0000000000000000 0000000000000000 00000000000002b8 ; lblsq ZERO ZERO COMMENT
# MSQ_END 0 lbljmp


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000001188 0000000000001188 00000000000003f0 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
0000000000001188 00000000000011a8 0000000000000408 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000001188 00000000000011a8 0000000000000420 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000001188 00000000000011a8 0000000000000438 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000001188 00000000000011a8 0000000000000450 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000001188 00000000000011a8 0000000000000468 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
00000000000011a8 0000000000001188 0000000000000480 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
00000000000011a8 0000000000001188 0000000000000498 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
00000000000011a8 0000000000001188 00000000000004b0 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
00000000000011a8 0000000000001198 00000000000004c8 ; relsq cur val 1
# MSQ_END 0 sub

# i will turn positive every 16 iterations
; var i -f
# MSQ_START 0 incleq i 1 MAIN
# MSQ_START 1 decleq i -1 MAIN
00000000000011b0 00000000000011d8 0000000000000018 ; lblsq i CONST_-1 MAIN
# MSQ_END 1 decleq
# MSQ_END 0 incleq

# Copy to the buffer and increase its address
; addr bufEnd 100000
; var codeLen 0
# MSQ_START 0 mov bufEnd cur tmp
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
0000000000001188 0000000000001188 00000000000004f8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
0000000000001188 00000000000011a8 0000000000000510 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg bufEnd tmp
# MSQ_START 2 zero bufEnd
0000000000100000 0000000000100000 0000000000000528 ; relsq bufEnd bufEnd 1
# MSQ_END 2 zero
# MSQ_START 2 sub bufEnd tmp
0000000000100000 0000000000001188 0000000000000540 ; relsq bufEnd tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 zero cur
# MSQ_START 1 sub cur cur
00000000000011a8 00000000000011a8 0000000000000558 ; relsq cur cur 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr bufEnd -8
0000000000000510 0000000000001230 0000000000000570 ; relsq bufEnd_addrRef_0 CONST_-8 1
0000000000000518 0000000000001230 0000000000000588 ; relsq bufEnd_addrRef_1 CONST_-8 1
0000000000000528 0000000000001230 00000000000005a0 ; relsq bufEnd_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc codeLen 8
# MSQ_START 1 dec codeLen -8
00000000000011b8 0000000000001230 00000000000005b8 ; relsq codeLen CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq i 10 MAIN
00000000000011b0 0000000000001238 0000000000000018 ; lblsq i CONST_10 MAIN
# MSQ_END 0 decleq


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# MSQ_START 0 set i 8
# MSQ_START 1 zero i
# MSQ_START 2 sub i i
00000000000011b0 00000000000011b0 00000000000005e8 ; relsq i i 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc i 8
# MSQ_START 2 dec i -8
00000000000011b0 0000000000001230 0000000000000600 ; relsq i CONST_-8 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 decaddr charToPrint 8
0000000000000650 0000000000001240 0000000000000618 ; relsq charToPrint_addrRef_0 CONST_8 1
# MSQ_END 0 decaddr

; label PRINT_CHAR_START
# MSQ_START 0 decaddr charToPrint -1
0000000000000650 00000000000011d8 0000000000000630 ; relsq charToPrint_addrRef_0 CONST_-1 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov c charToPrint tmp
# MSQ_START 1 movneg tmp charToPrint
# MSQ_START 2 zero tmp
0000000000001188 0000000000001188 0000000000000648 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp charToPrint
0000000000001188 0000000000100000 0000000000000660 ; relsq tmp charToPrint 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
00000000000011a0 00000000000011a0 0000000000000678 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
00000000000011a0 0000000000001188 0000000000000690 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# MSQ_START 1 zero mod_256_0_isNeg
# MSQ_START 2 sub mod_256_0_isNeg mod_256_0_isNeg
00000000000011c0 00000000000011c0 00000000000006a8 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn c MOD_256_0_IS_NEG tmp tmp2
# MSQ_START 2 jl c ZERO MOD_256_0_IS_NEG tmp tmp2
0000000000001190 0000000000001190 00000000000006c0 ; relsq tmp2 tmp2 1
0000000000001190 00000000000011a0 00000000000006d8 ; relsq tmp2 c 1
0000000000001188 0000000000001188 00000000000006f0 ; relsq tmp tmp 1
0000000000001188 0000000000001190 0000000000000708 ; relsq tmp tmp2 1
0000000000001188 00000000000011d8 0000000000000720 ; relsq tmp CONST_-1 1
0000000000001188 0000000000000000 0000000000000750 ; lblsq tmp ZERO MOD_256_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000007f8 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_IS_NEG
# MSQ_START 1 inc mod_256_0_isNeg 1
# MSQ_START 2 dec mod_256_0_isNeg -1
00000000000011c0 00000000000011d8 0000000000000768 ; relsq mod_256_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg c tmp tmp2
# MSQ_START 2 movneg tmp c
0000000000001188 0000000000001188 0000000000000780 ; relsq tmp tmp 1
0000000000001188 00000000000011a0 0000000000000798 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 mov c tmp tmp2
0000000000001190 0000000000001190 00000000000007b0 ; relsq tmp2 tmp2 1
0000000000001190 0000000000001188 00000000000007c8 ; relsq tmp2 tmp 1
00000000000011a0 00000000000011a0 00000000000007e0 ; relsq c c 1
00000000000011a0 0000000000001190 00000000000007f8 ; relsq c tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label MOD_256_0_START
; var mod_256_0_subber 0
# MSQ_START 1 set mod_256_0_subber 100
# MSQ_START 2 zero mod_256_0_subber
00000000000011c8 00000000000011c8 0000000000000810 ; relsq mod_256_0_subber mod_256_0_subber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_subber 100
00000000000011c8 0000000000001248 0000000000000828 ; relsq mod_256_0_subber CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2
# MSQ_START 2 mov tmp c tmp2
0000000000001190 0000000000001190 0000000000000840 ; relsq tmp2 tmp2 1
0000000000001190 00000000000011a0 0000000000000858 ; relsq tmp2 c 1
0000000000001188 0000000000001188 0000000000000870 ; relsq tmp tmp 1
0000000000001188 0000000000001190 0000000000000888 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
0000000000001188 00000000000011d8 00000000000008a0 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
0000000000001188 00000000000011c8 0000000000000ee8 ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# MSQ_END 1 jl
; var mod_256_0_nextSubber 0
# MSQ_START 1 set mod_256_0_nextSubber 10000
# MSQ_START 2 zero mod_256_0_nextSubber
00000000000011d0 00000000000011d0 00000000000008d0 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_nextSubber 10000
00000000000011d0 0000000000001250 00000000000008e8 ; relsq mod_256_0_nextSubber CONST_-10000 1
# MSQ_END 2 inc
# MSQ_END 1 set
; label MOD_256_0_MULT_SUBBER_START
# MSQ_START 1 jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2
# MSQ_START 2 mov tmp c tmp2
0000000000001190 0000000000001190 0000000000000900 ; relsq tmp2 tmp2 1
0000000000001190 00000000000011a0 0000000000000918 ; relsq tmp2 c 1
0000000000001188 0000000000001188 0000000000000930 ; relsq tmp tmp 1
0000000000001188 0000000000001190 0000000000000948 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
0000000000001188 00000000000011d8 0000000000000960 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
0000000000001188 00000000000011d0 0000000000000d08 ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# MSQ_END 1 jl
# MSQ_START 1 mul_256 mod_256_0_subber tmp
# MSQ_START 2 mul_16 mod_256_0_subber tmp
0000000000001188 0000000000001188 0000000000000990 ; relsq tmp tmp 1
0000000000001188 00000000000011c8 00000000000009a8 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 00000000000009c0 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 00000000000009d8 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 00000000000009f0 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 0000000000000a08 ; relsq tmp mod_256_0_subber 1
00000000000011c8 0000000000001188 0000000000000a20 ; relsq mod_256_0_subber tmp 1
00000000000011c8 0000000000001188 0000000000000a38 ; relsq mod_256_0_subber tmp 1
00000000000011c8 0000000000001188 0000000000000a50 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_subber tmp
0000000000001188 0000000000001188 0000000000000a68 ; relsq tmp tmp 1
0000000000001188 00000000000011c8 0000000000000a80 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 0000000000000a98 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 0000000000000ab0 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 0000000000000ac8 ; relsq tmp mod_256_0_subber 1
0000000000001188 00000000000011c8 0000000000000ae0 ; relsq tmp mod_256_0_subber 1
00000000000011c8 0000000000001188 0000000000000af8 ; relsq mod_256_0_subber tmp 1
00000000000011c8 0000000000001188 0000000000000b10 ; relsq mod_256_0_subber tmp 1
00000000000011c8 0000000000001188 0000000000000b28 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 mul_256 mod_256_0_nextSubber tmp
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
0000000000001188 0000000000001188 0000000000000b40 ; relsq tmp tmp 1
0000000000001188 00000000000011d0 0000000000000b58 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000b70 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000b88 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000ba0 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000bb8 ; relsq tmp mod_256_0_nextSubber 1
00000000000011d0 0000000000001188 0000000000000bd0 ; relsq mod_256_0_nextSubber tmp 1
00000000000011d0 0000000000001188 0000000000000be8 ; relsq mod_256_0_nextSubber tmp 1
00000000000011d0 0000000000001188 0000000000000c00 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
0000000000001188 0000000000001188 0000000000000c18 ; relsq tmp tmp 1
0000000000001188 00000000000011d0 0000000000000c30 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000c48 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000c60 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000c78 ; relsq tmp mod_256_0_nextSubber 1
0000000000001188 00000000000011d0 0000000000000c90 ; relsq tmp mod_256_0_nextSubber 1
00000000000011d0 0000000000001188 0000000000000ca8 ; relsq mod_256_0_nextSubber tmp 1
00000000000011d0 0000000000001188 0000000000000cc0 ; relsq mod_256_0_nextSubber tmp 1
00000000000011d0 0000000000001188 0000000000000cd8 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
00000000000011d0 0000000000001258 0000000000000d08 ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp MOD_256_0_MULT_SUBBER_START
0000000000000000 0000000000000000 00000000000008e8 ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
# MSQ_END 1 lbljmp
; label MOD_256_0_SUBTRACT_A
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
00000000000011a0 00000000000011c8 0000000000000de0 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# MSQ_START 1 lbljmp MOD_256_0_SUBTRACT_A
0000000000000000 0000000000000000 0000000000000d08 ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label MOD_256_0_REVERT_SUB
# MSQ_START 1 jz c MOD_256_0_START tmp
# MSQ_START 2 movneg tmp c
0000000000001188 0000000000001188 0000000000000df8 ; relsq tmp tmp 1
0000000000001188 00000000000011a0 0000000000000e10 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp 1 JZ_0_END
0000000000001188 00000000000011d8 0000000000000e88 ; lblsq tmp CONST_-1 JZ_0_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq c 1 JZ_0_REVERT_A
00000000000011a0 00000000000011d8 0000000000000e70 ; lblsq c CONST_-1 JZ_0_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec c 1
00000000000011a0 00000000000011e8 0000000000000e58 ; relsq c CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000007f8 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 2 lbljmp
; label JZ_0_REVERT_A
# MSQ_START 2 dec c 1
00000000000011a0 00000000000011e8 0000000000000e88 ; relsq c CONST_1 1
# MSQ_END 2 dec
; label JZ_0_END
# MSQ_END 1 jz
# MSQ_START 1 add c mod_256_0_subber tmp
# MSQ_START 2 movneg tmp mod_256_0_subber
0000000000001188 0000000000001188 0000000000000ea0 ; relsq tmp tmp 1
0000000000001188 00000000000011c8 0000000000000eb8 ; relsq tmp mod_256_0_subber 1
# MSQ_END 2 movneg
# MSQ_START 2 sub c tmp
00000000000011a0 0000000000001188 0000000000000ed0 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 00000000000007f8 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_CHECK_NEG
# MSQ_START 1 decleq mod_256_0_isNeg 0 MOD_256_0_END
00000000000011c0 0000000000001258 0000000000000fc0 ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 decleq c 0 MOD_256_0_END
00000000000011a0 0000000000001258 0000000000000fc0 ; lblsq c CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp c tmp2
# MSQ_START 2 movneg tmp2 c
0000000000001190 0000000000001190 0000000000000f30 ; relsq tmp2 tmp2 1
0000000000001190 00000000000011a0 0000000000000f48 ; relsq tmp2 c 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000001188 0000000000001188 0000000000000f60 ; relsq tmp tmp 1
0000000000001188 0000000000001190 0000000000000f78 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set c 100
# MSQ_START 2 zero c
00000000000011a0 00000000000011a0 0000000000000f90 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 inc c 100
00000000000011a0 0000000000001248 0000000000000fa8 ; relsq c CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub c tmp
00000000000011a0 0000000000001188 0000000000000fc0 ; relsq c tmp 1
# MSQ_END 1 sub
; label MOD_256_0_END
# MSQ_END 0 mod_256
# MSQ_START 0 putchar c tmp
0000000013ed27f0 0000000000000000 0000000000000ff0 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000fc0 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
0000000000001188 0000000000001188 0000000000001008 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
0000000000001188 00000000000011a0 0000000000001020 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
0000000000001188 00000000000011e8 0000000000001038 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 0000000000001050 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 0000000000001188 0000000000001068 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 decleq i 1 PRINT_CHAR_END
00000000000011b0 00000000000011e8 0000000000001098 ; lblsq i CONST_1 PRINT_CHAR_END
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT_CHAR_START
0000000000000000 0000000000000000 0000000000000618 ; lblsq ZERO ZERO PRINT_CHAR_START
# MSQ_END 0 lbljmp

; label PRINT_CHAR_END
# Go to the next qword
# MSQ_START 0 decaddr charToPrint -8
0000000000000650 0000000000001230 00000000000010b0 ; relsq charToPrint_addrRef_0 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decleq codeLen 8 HALT
00000000000011b8 0000000000001240 00000000000010e0 ; lblsq codeLen CONST_8 HALT
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT
0000000000000000 0000000000000000 00000000000005d0 ; lblsq ZERO ZERO PRINT
# MSQ_END 0 lbljmp

; label HALT
# MSQ_START 0 halt tmp tmp2
# MSQ_START 1 set_safe CPU_CONTROL_START 2 tmp tmp2
# MSQ_START 2 mov tmp CPU_CONTROL_START tmp2
0000000000001190 0000000000001190 00000000000010f8 ; relsq tmp2 tmp2 1
0000000000001190 0000000013ee0000 0000000000001110 ; relsq tmp2 CPU_CONTROL_START 1
0000000000001188 0000000000001188 0000000000001128 ; relsq tmp tmp 1
0000000000001188 0000000000001190 0000000000001140 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 dec tmp 2
0000000000001188 0000000000001228 0000000000001158 ; relsq tmp CONST_2 1
# MSQ_END 2 dec
# MSQ_START 2 sub CPU_CONTROL_START tmp
0000000013ee0000 0000000000001188 0000000000001170 ; relsq CPU_CONTROL_START tmp 1
# MSQ_END 2 sub
# MSQ_END 1 set_safe
0000000000000000 0000000000000000 0000000000001170 ; relsq ZERO ZERO 0
# MSQ_END 0 halt

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_C c
; var CONST_A a
; var CONST_5 5
; var CONST_9 9
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2 2
; var CONST_-8 -8
; var CONST_10 10
; var CONST_8 8
; var CONST_-100 -100
; var CONST_-10000 -10000
; var CONST_0 0

; end
0000000000000000 ; raw 0000000000000000 # tmp
0000000000000000 ; raw 0000000000000000 # tmp2
0000000000000000 ; raw 0000000000000000 # val
0000000000000000 ; raw 0000000000000000 # c
0000000000000000 ; raw 0000000000000000 # cur
fffffffffffffff1 ; raw fffffffffffffff1 # i
0000000000000000 ; raw 0000000000000000 # codeLen
0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
0000000000000022 ; raw 0000000000000022 # CONST_22
0000000000000001 ; raw 0000000000000001 # CONST_1
000000000000000c ; raw 000000000000000c # CONST_C
000000000000000a ; raw 000000000000000a # CONST_A
0000000000000005 ; raw 0000000000000005 # CONST_5
0000000000000009 ; raw 0000000000000009 # CONST_9
0000000000000006 ; raw 0000000000000006 # CONST_6
000000000000001a ; raw 000000000000001a # CONST_1A
0000000000000017 ; raw 0000000000000017 # CONST_17
0000000000000002 ; raw 0000000000000002 # CONST_2
fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
0000000000000010 ; raw 0000000000000010 # CONST_10
0000000000000008 ; raw 0000000000000008 # CONST_8
ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
0000000000000000 ; raw 0000000000000000 # CONST_0
~
