# hex0
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000030 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 0000000000000048 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 0000000000000078 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000048 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000090 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000002420 0000000000002420 00000000000000a8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 00000000000000c0 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Keep a backup of c for INPUT_LABEL
; var c2 0
# MSQ_START 0 mov c2 c tmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000000d8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
0000000000002400 0000000000002420 00000000000000f0 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c2 tmp
# MSQ_START 2 zero c2
0000000000002428 0000000000002428 0000000000000108 ; relsq c2 c2 1
# MSQ_END 2 zero
# MSQ_START 2 sub c2 tmp
0000000000002428 0000000000002400 0000000000000120 ; relsq c2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Handle NUL ~ "
# MSQ_START 0 decleq c 22 MAIN
0000000000002420 0000000000002488 0000000000000018 ; lblsq c CONST_22 MAIN
# MSQ_END 0 decleq

# Handle #
# MSQ_START 0 decleq c 1 COMMENT
0000000000002420 0000000000002490 0000000000000378 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle $ and %
# MSQ_START 0 decleq c 2 MAIN
0000000000002420 0000000000002498 0000000000000018 ; lblsq c CONST_2 MAIN
# MSQ_END 0 decleq

# Handle &
# MSQ_START 0 decleq c 1 INPUT_LABEL
0000000000002420 0000000000002490 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ' ~ /
# MSQ_START 0 decleq c 9 MAIN
0000000000002420 00000000000024a0 0000000000000018 ; lblsq c CONST_9 MAIN
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 00000000000001b0 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 00000000000001c8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
0000000000002418 0000000000002480 00000000000001e0 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a WRITE
0000000000002420 00000000000024a8 0000000000001290 ; lblsq c CONST_A WRITE
# MSQ_END 0 decleq

# Handle :
# MSQ_START 0 decleq c 1 INPUT_LABEL
0000000000002420 0000000000002490 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ;
# MSQ_START 0 decleq c 1 COMMENT
0000000000002420 0000000000002490 0000000000000378 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle < ~ >
# MSQ_START 0 decleq c 3 MAIN
0000000000002420 00000000000024b0 0000000000000018 ; lblsq c CONST_3 MAIN
# MSQ_END 0 decleq

# Handle ?
# MSQ_START 0 decleq c 1 HANDLE_REL
0000000000002420 0000000000002490 0000000000000498 ; lblsq c CONST_1 HANDLE_REL
# MSQ_END 0 decleq

# Handle @
# MSQ_START 0 decleq c 1 MAIN
0000000000002420 0000000000002490 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 0000000000000288 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 00000000000002a0 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000002418 00000000000024a0 00000000000002b8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
0000000000002420 00000000000024b8 0000000000001290 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a MAIN
0000000000002420 00000000000024c0 0000000000000018 ; lblsq c CONST_1A MAIN
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 0000000000000300 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 0000000000000318 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000002418 00000000000024a0 0000000000000330 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
0000000000002420 00000000000024b8 0000000000001290 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle g ~ }
# MSQ_START 0 decleq c 17 MAIN
0000000000002420 00000000000024c8 0000000000000018 ; lblsq c CONST_17 MAIN
# MSQ_END 0 decleq

# Handle ~ and DEL (0x7f)
# MSQ_START 0 lbljmp RESOLVE_REF
0000000000000000 0000000000000000 00000000000014a0 ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# COMMENT ignores characters until \r or \n is fed
; label COMMENT
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000390 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 00000000000003a8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 00000000000003d8 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000003a8 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 00000000000003f0 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000002420 0000000000002420 0000000000000408 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 0000000000000420 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp
# MSQ_START 0 decleq c 9 COMMENT
0000000000002420 00000000000024a0 0000000000000378 ; lblsq c CONST_9 COMMENT
# MSQ_END 0 decleq
# Handle LF
# MSQ_START 0 decleq c 1 MAIN
0000000000002420 0000000000002490 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 decleq c 2 COMMENT
0000000000002420 0000000000002498 0000000000000378 ; lblsq c CONST_2 COMMENT
# MSQ_END 0 decleq
# Handle CR
# MSQ_START 0 decleq c 1 MAIN
0000000000002420 0000000000002490 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COMMENT
0000000000000000 0000000000000000 0000000000000378 ; lblsq ZERO ZERO COMMENT
# MSQ_END 0 lbljmp


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
0000000000002430 0000000000002430 00000000000004b0 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000004c8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 00000000000004e0 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 0000000000000510 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000004e0 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000528 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000002420 0000000000002420 0000000000000540 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 0000000000000558 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Handle NUL ~ ,
# MSQ_START 0 decleq c 2c REL_INP
0000000000002420 00000000000024d0 00000000000005b8 ; lblsq c CONST_2C REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 inc isNeg 1
# MSQ_START 1 dec isNeg -1
0000000000002430 0000000000002480 0000000000000588 ; relsq isNeg CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# Handle -
# MSQ_START 0 decleq c 1 REL_INP
0000000000002420 0000000000002490 00000000000005b8 ; lblsq c CONST_1 REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
0000000000002430 0000000000002430 00000000000005b8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label REL_INP
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000005d0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 00000000000005e8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 0000000000000618 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000005e8 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000630 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000002420 0000000000002420 0000000000000648 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 0000000000000660 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar

# Handle NUL ~ /
# MSQ_START 0 decleq c 2f REL_NEG
0000000000002420 00000000000024d8 00000000000008e8 ; lblsq c CONST_2F REL_NEG
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 0000000000000690 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 00000000000006a8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
0000000000002418 0000000000002480 00000000000006c0 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a REL_WRITE
0000000000002420 00000000000024a8 00000000000007e0 ; lblsq c CONST_A REL_WRITE
# MSQ_END 0 decleq

# Handle : ~ @
# MSQ_START 0 decleq c 7 REL_NEG
0000000000002420 00000000000024e0 00000000000008e8 ; lblsq c CONST_7 REL_NEG
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 0000000000000708 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 0000000000000720 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000002418 00000000000024a0 0000000000000738 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
0000000000002420 00000000000024b8 00000000000007e0 ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a REL_NEG
0000000000002420 00000000000024c0 00000000000008e8 ; lblsq c CONST_1A REL_NEG
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000002418 0000000000002418 0000000000000780 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000002418 0000000000002420 0000000000000798 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000002418 00000000000024a0 00000000000007b0 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
0000000000002420 00000000000024b8 00000000000007e0 ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle g ~ DEL
# MSQ_START 0 lbljmp REL_INP
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

; label REL_WRITE
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000002400 0000000000002400 00000000000007f8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000000810 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000000828 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000000840 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000000858 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000000870 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 0000000000000888 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 00000000000008a0 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 00000000000008b8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
0000000000002450 0000000000002418 00000000000008d0 ; relsq cur val 1
# MSQ_END 0 sub
# MSQ_START 0 lbljmp REL_INP
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

# Negate cur if the relative jump is negative
; label REL_NEG
# MSQ_START 0 decleq isNeg 0 REL_FIN
0000000000002430 00000000000024e8 0000000000000990 ; lblsq isNeg CONST_0 REL_FIN
# MSQ_END 0 decleq
# MSQ_START 0 neg cur tmp tmp2
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000918 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
0000000000002400 0000000000002450 0000000000000930 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 mov cur tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
0000000000002408 0000000000002408 0000000000000948 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002400 0000000000000960 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg cur tmp2
0000000000002450 0000000000002450 0000000000000978 ; relsq cur cur 1
0000000000002450 0000000000002408 0000000000000990 ; relsq cur tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_END 0 neg

; label REL_FIN
# MSQ_START 0 add cur codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000009a8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000002400 0000000000002410 00000000000009c0 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 00000000000009d8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 lbljmp WRITE_QWORD
0000000000000000 0000000000000000 00000000000013b0 ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


; var labelArrStart 300000

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# Transform label name to offset
; var labelOffset 0
# MSQ_START 0 getchar labelOffset tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000a08 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 0000000000000a20 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 0000000000000a50 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000a20 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000a68 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg labelOffset tmp
# MSQ_START 2 zero labelOffset
0000000000002440 0000000000002440 0000000000000a80 ; relsq labelOffset labelOffset 1
# MSQ_END 2 zero
# MSQ_START 2 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000a98 ; relsq labelOffset tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# MSQ_START 0 mul_16 labelOffset tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000002400 0000000000002400 0000000000000ab0 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000ac8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000ae0 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000af8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000b10 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000b28 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000b40 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000b58 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000b70 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 mul_16 labelOffset tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000002400 0000000000002400 0000000000000b88 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000ba0 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000bb8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000bd0 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000be8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000c00 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000c18 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000c30 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000c48 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 getchar tmp2 tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000c60 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 0000000000000c78 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000002400 0000000013ed27e8 0000000000000ca8 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000c78 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000cc0 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
0000000000002408 0000000000002408 0000000000000cd8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
0000000000002408 0000000000002400 0000000000000cf0 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# MSQ_START 0 add labelOffset tmp2 tmp
# MSQ_START 1 movneg tmp tmp2
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000d08 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp tmp2
0000000000002400 0000000000002408 0000000000000d20 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000d38 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 mul_8 labelOffset tmp
# MSQ_START 1 movneg tmp labelOffset
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000d50 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000d68 ; relsq tmp labelOffset 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000d80 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000d98 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000db0 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000dc8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000de0 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000df8 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000e10 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_8
# MSQ_START 0 add labelOffset labelArrStart tmp
# MSQ_START 1 movneg tmp labelArrStart
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000e28 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelArrStart
0000000000002400 0000000000002438 0000000000000e40 ; relsq tmp labelArrStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub labelOffset tmp
0000000000002440 0000000000002400 0000000000000e58 ; relsq labelOffset tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add

# MSQ_START 0 decleq c2 26 RECORD_REF
0000000000002428 00000000000024f0 0000000000000fa8 ; lblsq c2 CONST_26 RECORD_REF
# MSQ_END 0 decleq

# Handle label (:)
; addr curLabel 0
# MSQ_START 0 setaddr curLabel labelOffset tmp tmp2
# MSQ_START 1 mov tmp curLabel_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curLabel_addrRef_0
0000000000002408 0000000000002408 0000000000000e88 ; relsq tmp2 tmp2 1
0000000000002408 0000000000000f60 0000000000000ea0 ; relsq tmp2 curLabel_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000002400 0000000000002400 0000000000000eb8 ; relsq tmp tmp 1
0000000000002400 0000000000002408 0000000000000ed0 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000ee8 ; relsq tmp labelOffset 1
# MSQ_END 1 sub
0000000000000f60 0000000000002400 0000000000000f00 ; relsq curLabel_addrRef_0 tmp 1
0000000000000f68 0000000000002400 0000000000000f18 ; relsq curLabel_addrRef_1 tmp 1
0000000000000f78 0000000000002400 0000000000000f30 ; relsq curLabel_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 mov curLabel codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000f48 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000002400 0000000000002410 0000000000000f60 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg curLabel tmp
# MSQ_START 2 zero curLabel
0000000000000000 0000000000000000 0000000000000f78 ; relsq curLabel curLabel 1
# MSQ_END 2 zero
# MSQ_START 2 sub curLabel tmp
0000000000000000 0000000000002400 0000000000000f90 ; relsq curLabel tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 lbljmp MAIN
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp

# Handle reference (&)
; label RECORD_REF
; var refs 0
; addr nextRef 400000
# MSQ_START 0 mov nextRef labelOffset tmp
# MSQ_START 1 movneg tmp labelOffset
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000000fc0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp labelOffset
0000000000002400 0000000000002440 0000000000000fd8 ; relsq tmp labelOffset 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg nextRef tmp
# MSQ_START 2 zero nextRef
0000000000400000 0000000000400000 0000000000000ff0 ; relsq nextRef nextRef 1
# MSQ_END 2 zero
# MSQ_START 2 sub nextRef tmp
0000000000400000 0000000000002400 0000000000001008 ; relsq nextRef tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr nextRef -8
0000000000000fd8 00000000000024f8 0000000000001020 ; relsq nextRef_addrRef_0 CONST_-8 1
0000000000000fe0 00000000000024f8 0000000000001038 ; relsq nextRef_addrRef_1 CONST_-8 1
0000000000000ff0 00000000000024f8 0000000000001050 ; relsq nextRef_addrRef_2 CONST_-8 1
0000000000001110 00000000000024f8 0000000000001068 ; relsq nextRef_addrRef_3 CONST_-8 1
0000000000001118 00000000000024f8 0000000000001080 ; relsq nextRef_addrRef_4 CONST_-8 1
0000000000001128 00000000000024f8 0000000000001098 ; relsq nextRef_addrRef_5 CONST_-8 1
0000000000001170 00000000000024f8 00000000000010b0 ; relsq nextRef_addrRef_6 CONST_-8 1
0000000000001610 00000000000024f8 00000000000010c8 ; relsq nextRef_addrRef_7 CONST_-8 1
00000000000017a8 00000000000024f8 00000000000010e0 ; relsq nextRef_addrRef_8 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov nextRef codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000010f8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000002400 0000000000002410 0000000000001110 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg nextRef tmp
# MSQ_START 2 zero nextRef
0000000000400000 0000000000400000 0000000000001128 ; relsq nextRef nextRef 1
# MSQ_END 2 zero
# MSQ_START 2 sub nextRef tmp
0000000000400000 0000000000002400 0000000000001140 ; relsq nextRef tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 add nextRef bufStart tmp
# MSQ_START 1 movneg tmp bufStart
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000001158 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp bufStart
0000000000002400 0000000000002460 0000000000001170 ; relsq tmp bufStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub nextRef tmp
0000000000400000 0000000000002400 0000000000001188 ; relsq nextRef tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 decaddr nextRef -8
0000000000000fd8 00000000000024f8 00000000000011a0 ; relsq nextRef_addrRef_0 CONST_-8 1
0000000000000fe0 00000000000024f8 00000000000011b8 ; relsq nextRef_addrRef_1 CONST_-8 1
0000000000000ff0 00000000000024f8 00000000000011d0 ; relsq nextRef_addrRef_2 CONST_-8 1
0000000000001110 00000000000024f8 00000000000011e8 ; relsq nextRef_addrRef_3 CONST_-8 1
0000000000001118 00000000000024f8 0000000000001200 ; relsq nextRef_addrRef_4 CONST_-8 1
0000000000001128 00000000000024f8 0000000000001218 ; relsq nextRef_addrRef_5 CONST_-8 1
0000000000001170 00000000000024f8 0000000000001230 ; relsq nextRef_addrRef_6 CONST_-8 1
0000000000001610 00000000000024f8 0000000000001248 ; relsq nextRef_addrRef_7 CONST_-8 1
00000000000017a8 00000000000024f8 0000000000001260 ; relsq nextRef_addrRef_8 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc refs 1
# MSQ_START 1 dec refs -1
0000000000002448 0000000000002480 0000000000001278 ; relsq refs CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp WRITE_QWORD
0000000000000000 0000000000000000 00000000000013b0 ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000002400 0000000000002400 00000000000012a8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 00000000000012c0 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 00000000000012d8 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 00000000000012f0 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000001308 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000002400 0000000000002450 0000000000001320 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 0000000000001338 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 0000000000001350 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000002450 0000000000002400 0000000000001368 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
0000000000002450 0000000000002418 0000000000001380 ; relsq cur val 1
# MSQ_END 0 sub

# i will turn positive every 16 iterations
; var i -f
# MSQ_START 0 incleq i 1 MAIN
# MSQ_START 1 decleq i -1 MAIN
0000000000002458 0000000000002480 0000000000000018 ; lblsq i CONST_-1 MAIN
# MSQ_END 1 decleq
# MSQ_END 0 incleq
# MSQ_START 0 dec i 10
0000000000002458 0000000000002500 00000000000013b0 ; relsq i CONST_10 1
# MSQ_END 0 dec

; label WRITE_QWORD
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# MSQ_START 0 mov bufEnd cur tmp
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000013c8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
0000000000002400 0000000000002450 00000000000013e0 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg bufEnd tmp
# MSQ_START 2 zero bufEnd
0000000000100000 0000000000100000 00000000000013f8 ; relsq bufEnd bufEnd 1
# MSQ_END 2 zero
# MSQ_START 2 sub bufEnd tmp
0000000000100000 0000000000002400 0000000000001410 ; relsq bufEnd tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 zero cur
# MSQ_START 1 sub cur cur
0000000000002450 0000000000002450 0000000000001428 ; relsq cur cur 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr bufEnd -8
00000000000013e0 00000000000024f8 0000000000001440 ; relsq bufEnd_addrRef_0 CONST_-8 1
00000000000013e8 00000000000024f8 0000000000001458 ; relsq bufEnd_addrRef_1 CONST_-8 1
00000000000013f8 00000000000024f8 0000000000001470 ; relsq bufEnd_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc codeLen 8
# MSQ_START 1 dec codeLen -8
0000000000002410 00000000000024f8 0000000000001488 ; relsq codeLen CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp MAIN
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp


# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
# MSQ_START 0 decleq refs 0 PRINT
0000000000002448 00000000000024e8 0000000000001848 ; lblsq refs CONST_0 PRINT
# MSQ_END 0 decleq
# MSQ_START 0 dec refs 1
0000000000002448 0000000000002490 00000000000014d0 ; relsq refs CONST_1 1
# MSQ_END 0 dec
# MSQ_START 0 decaddr nextRef 8
0000000000000fd8 0000000000002508 00000000000014e8 ; relsq nextRef_addrRef_0 CONST_8 1
0000000000000fe0 0000000000002508 0000000000001500 ; relsq nextRef_addrRef_1 CONST_8 1
0000000000000ff0 0000000000002508 0000000000001518 ; relsq nextRef_addrRef_2 CONST_8 1
0000000000001110 0000000000002508 0000000000001530 ; relsq nextRef_addrRef_3 CONST_8 1
0000000000001118 0000000000002508 0000000000001548 ; relsq nextRef_addrRef_4 CONST_8 1
0000000000001128 0000000000002508 0000000000001560 ; relsq nextRef_addrRef_5 CONST_8 1
0000000000001170 0000000000002508 0000000000001578 ; relsq nextRef_addrRef_6 CONST_8 1
0000000000001610 0000000000002508 0000000000001590 ; relsq nextRef_addrRef_7 CONST_8 1
00000000000017a8 0000000000002508 00000000000015a8 ; relsq nextRef_addrRef_8 CONST_8 1
# MSQ_END 0 decaddr

; addr refAt 0
# MSQ_START 0 setaddr refAt nextRef tmp tmp2
# MSQ_START 1 mov tmp refAt_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refAt_addrRef_0
0000000000002408 0000000000002408 00000000000015c0 ; relsq tmp2 tmp2 1
0000000000002408 0000000000001800 00000000000015d8 ; relsq tmp2 refAt_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000002400 0000000000002400 00000000000015f0 ; relsq tmp tmp 1
0000000000002400 0000000000002408 0000000000001608 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp nextRef
0000000000002400 0000000000400000 0000000000001620 ; relsq tmp nextRef 1
# MSQ_END 1 sub
0000000000001800 0000000000002400 0000000000001638 ; relsq refAt_addrRef_0 tmp 1
0000000000001808 0000000000002400 0000000000001650 ; relsq refAt_addrRef_1 tmp 1
0000000000001818 0000000000002400 0000000000001668 ; relsq refAt_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 decaddr nextRef 8
0000000000000fd8 0000000000002508 0000000000001680 ; relsq nextRef_addrRef_0 CONST_8 1
0000000000000fe0 0000000000002508 0000000000001698 ; relsq nextRef_addrRef_1 CONST_8 1
0000000000000ff0 0000000000002508 00000000000016b0 ; relsq nextRef_addrRef_2 CONST_8 1
0000000000001110 0000000000002508 00000000000016c8 ; relsq nextRef_addrRef_3 CONST_8 1
0000000000001118 0000000000002508 00000000000016e0 ; relsq nextRef_addrRef_4 CONST_8 1
0000000000001128 0000000000002508 00000000000016f8 ; relsq nextRef_addrRef_5 CONST_8 1
0000000000001170 0000000000002508 0000000000001710 ; relsq nextRef_addrRef_6 CONST_8 1
0000000000001610 0000000000002508 0000000000001728 ; relsq nextRef_addrRef_7 CONST_8 1
00000000000017a8 0000000000002508 0000000000001740 ; relsq nextRef_addrRef_8 CONST_8 1
# MSQ_END 0 decaddr

; addr refVal 0
# MSQ_START 0 setaddr refVal nextRef tmp tmp2
# MSQ_START 1 mov tmp refVal_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refVal_addrRef_0
0000000000002408 0000000000002408 0000000000001758 ; relsq tmp2 tmp2 1
0000000000002408 00000000000017f0 0000000000001770 ; relsq tmp2 refVal_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000002400 0000000000002400 0000000000001788 ; relsq tmp tmp 1
0000000000002400 0000000000002408 00000000000017a0 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp nextRef
0000000000002400 0000000000400000 00000000000017b8 ; relsq tmp nextRef 1
# MSQ_END 1 sub
00000000000017f0 0000000000002400 00000000000017d0 ; relsq refVal_addrRef_0 tmp 1
# MSQ_END 0 setaddr

# MSQ_START 0 mov refAt refVal tmp
# MSQ_START 1 movneg tmp refVal
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000017e8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp refVal
0000000000002400 0000000000000000 0000000000001800 ; relsq tmp refVal 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refAt tmp
# MSQ_START 2 zero refAt
0000000000000000 0000000000000000 0000000000001818 ; relsq refAt refAt 1
# MSQ_END 2 zero
# MSQ_START 2 sub refAt tmp
0000000000000000 0000000000002400 0000000000001830 ; relsq refAt tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 lbljmp RESOLVE_REF
0000000000000000 0000000000000000 00000000000014a0 ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# PRINT prints the assembled binary file to the serial
; label PRINT

; addr charToPrint 100000

# Start from the most significant byte
# MSQ_START 0 set i 8
# MSQ_START 1 zero i
# MSQ_START 2 sub i i
0000000000002458 0000000000002458 0000000000001860 ; relsq i i 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc i 8
# MSQ_START 2 dec i -8
0000000000002458 00000000000024f8 0000000000001878 ; relsq i CONST_-8 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 decaddr charToPrint 8
00000000000018c8 0000000000002508 0000000000001890 ; relsq charToPrint_addrRef_0 CONST_8 1
# MSQ_END 0 decaddr

; label PRINT_CHAR_START
# MSQ_START 0 decaddr charToPrint -1
00000000000018c8 0000000000002480 00000000000018a8 ; relsq charToPrint_addrRef_0 CONST_-1 1
# MSQ_END 0 decaddr
# MSQ_START 0 mov c charToPrint tmp
# MSQ_START 1 movneg tmp charToPrint
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 00000000000018c0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp charToPrint
0000000000002400 0000000000100000 00000000000018d8 ; relsq tmp charToPrint 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000002420 0000000000002420 00000000000018f0 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 0000000000001908 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 mod_256 c tmp tmp2
; var mod_256_0_isNeg 0
# MSQ_START 1 zero mod_256_0_isNeg
# MSQ_START 2 sub mod_256_0_isNeg mod_256_0_isNeg
0000000000002468 0000000000002468 0000000000001920 ; relsq mod_256_0_isNeg mod_256_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn c MOD_256_0_IS_NEG tmp tmp2
# MSQ_START 2 jl c ZERO MOD_256_0_IS_NEG tmp tmp2
0000000000002408 0000000000002408 0000000000001938 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002420 0000000000001950 ; relsq tmp2 c 1
0000000000002400 0000000000002400 0000000000001968 ; relsq tmp tmp 1
0000000000002400 0000000000002408 0000000000001980 ; relsq tmp tmp2 1
0000000000002400 0000000000002480 0000000000001998 ; relsq tmp CONST_-1 1
0000000000002400 0000000000000000 00000000000019c8 ; lblsq tmp ZERO MOD_256_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 0000000000001a70 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_IS_NEG
# MSQ_START 1 inc mod_256_0_isNeg 1
# MSQ_START 2 dec mod_256_0_isNeg -1
0000000000002468 0000000000002480 00000000000019e0 ; relsq mod_256_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg c tmp tmp2
# MSQ_START 2 movneg tmp c
0000000000002400 0000000000002400 00000000000019f8 ; relsq tmp tmp 1
0000000000002400 0000000000002420 0000000000001a10 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 mov c tmp tmp2
0000000000002408 0000000000002408 0000000000001a28 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002400 0000000000001a40 ; relsq tmp2 tmp 1
0000000000002420 0000000000002420 0000000000001a58 ; relsq c c 1
0000000000002420 0000000000002408 0000000000001a70 ; relsq c tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label MOD_256_0_START
; var mod_256_0_subber 0
# MSQ_START 1 set mod_256_0_subber 100
# MSQ_START 2 zero mod_256_0_subber
0000000000002470 0000000000002470 0000000000001a88 ; relsq mod_256_0_subber mod_256_0_subber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_subber 100
0000000000002470 0000000000002510 0000000000001aa0 ; relsq mod_256_0_subber CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 jl c mod_256_0_subber MOD_256_0_CHECK_NEG tmp tmp2
# MSQ_START 2 mov tmp c tmp2
0000000000002408 0000000000002408 0000000000001ab8 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002420 0000000000001ad0 ; relsq tmp2 c 1
0000000000002400 0000000000002400 0000000000001ae8 ; relsq tmp tmp 1
0000000000002400 0000000000002408 0000000000001b00 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 0000000000001b18 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
0000000000002400 0000000000002470 0000000000002160 ; lblsq tmp mod_256_0_subber MOD_256_0_CHECK_NEG
# MSQ_END 1 jl
; var mod_256_0_nextSubber 0
# MSQ_START 1 set mod_256_0_nextSubber 10000
# MSQ_START 2 zero mod_256_0_nextSubber
0000000000002478 0000000000002478 0000000000001b48 ; relsq mod_256_0_nextSubber mod_256_0_nextSubber 1
# MSQ_END 2 zero
# MSQ_START 2 inc mod_256_0_nextSubber 10000
0000000000002478 0000000000002518 0000000000001b60 ; relsq mod_256_0_nextSubber CONST_-10000 1
# MSQ_END 2 inc
# MSQ_END 1 set
; label MOD_256_0_MULT_SUBBER_START
# MSQ_START 1 jl c mod_256_0_nextSubber MOD_256_0_SUBTRACT_A tmp tmp2
# MSQ_START 2 mov tmp c tmp2
0000000000002408 0000000000002408 0000000000001b78 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002420 0000000000001b90 ; relsq tmp2 c 1
0000000000002400 0000000000002400 0000000000001ba8 ; relsq tmp tmp 1
0000000000002400 0000000000002408 0000000000001bc0 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp 1
0000000000002400 0000000000002480 0000000000001bd8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
0000000000002400 0000000000002478 0000000000001f80 ; lblsq tmp mod_256_0_nextSubber MOD_256_0_SUBTRACT_A
# MSQ_END 1 jl
# MSQ_START 1 mul_256 mod_256_0_subber tmp
# MSQ_START 2 mul_16 mod_256_0_subber tmp
0000000000002400 0000000000002400 0000000000001c08 ; relsq tmp tmp 1
0000000000002400 0000000000002470 0000000000001c20 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001c38 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001c50 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001c68 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001c80 ; relsq tmp mod_256_0_subber 1
0000000000002470 0000000000002400 0000000000001c98 ; relsq mod_256_0_subber tmp 1
0000000000002470 0000000000002400 0000000000001cb0 ; relsq mod_256_0_subber tmp 1
0000000000002470 0000000000002400 0000000000001cc8 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_subber tmp
0000000000002400 0000000000002400 0000000000001ce0 ; relsq tmp tmp 1
0000000000002400 0000000000002470 0000000000001cf8 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001d10 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001d28 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001d40 ; relsq tmp mod_256_0_subber 1
0000000000002400 0000000000002470 0000000000001d58 ; relsq tmp mod_256_0_subber 1
0000000000002470 0000000000002400 0000000000001d70 ; relsq mod_256_0_subber tmp 1
0000000000002470 0000000000002400 0000000000001d88 ; relsq mod_256_0_subber tmp 1
0000000000002470 0000000000002400 0000000000001da0 ; relsq mod_256_0_subber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 mul_256 mod_256_0_nextSubber tmp
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
0000000000002400 0000000000002400 0000000000001db8 ; relsq tmp tmp 1
0000000000002400 0000000000002478 0000000000001dd0 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001de8 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001e00 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001e18 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001e30 ; relsq tmp mod_256_0_nextSubber 1
0000000000002478 0000000000002400 0000000000001e48 ; relsq mod_256_0_nextSubber tmp 1
0000000000002478 0000000000002400 0000000000001e60 ; relsq mod_256_0_nextSubber tmp 1
0000000000002478 0000000000002400 0000000000001e78 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_START 2 mul_16 mod_256_0_nextSubber tmp
0000000000002400 0000000000002400 0000000000001e90 ; relsq tmp tmp 1
0000000000002400 0000000000002478 0000000000001ea8 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001ec0 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001ed8 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001ef0 ; relsq tmp mod_256_0_nextSubber 1
0000000000002400 0000000000002478 0000000000001f08 ; relsq tmp mod_256_0_nextSubber 1
0000000000002478 0000000000002400 0000000000001f20 ; relsq mod_256_0_nextSubber tmp 1
0000000000002478 0000000000002400 0000000000001f38 ; relsq mod_256_0_nextSubber tmp 1
0000000000002478 0000000000002400 0000000000001f50 ; relsq mod_256_0_nextSubber tmp 1
# MSQ_END 2 mul_16
# MSQ_END 1 mul_256
# MSQ_START 1 decleq mod_256_0_nextSubber 0 MOD_256_0_SUBTRACT_A
0000000000002478 00000000000024e8 0000000000001f80 ; lblsq mod_256_0_nextSubber CONST_0 MOD_256_0_SUBTRACT_A
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp MOD_256_0_MULT_SUBBER_START
0000000000000000 0000000000000000 0000000000001b60 ; lblsq ZERO ZERO MOD_256_0_MULT_SUBBER_START
# MSQ_END 1 lbljmp
; label MOD_256_0_SUBTRACT_A
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
0000000000002420 0000000000002470 0000000000002058 ; lblsq c mod_256_0_subber MOD_256_0_REVERT_SUB
# MSQ_START 1 lbljmp MOD_256_0_SUBTRACT_A
0000000000000000 0000000000000000 0000000000001f80 ; lblsq ZERO ZERO MOD_256_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label MOD_256_0_REVERT_SUB
# MSQ_START 1 jz c MOD_256_0_START tmp
# MSQ_START 2 movneg tmp c
0000000000002400 0000000000002400 0000000000002070 ; relsq tmp tmp 1
0000000000002400 0000000000002420 0000000000002088 ; relsq tmp c 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp 1 JZ_0_END
0000000000002400 0000000000002480 0000000000002100 ; lblsq tmp CONST_-1 JZ_0_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq c 1 JZ_0_REVERT_A
0000000000002420 0000000000002480 00000000000020e8 ; lblsq c CONST_-1 JZ_0_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec c 1
0000000000002420 0000000000002490 00000000000020d0 ; relsq c CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 0000000000001a70 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 2 lbljmp
; label JZ_0_REVERT_A
# MSQ_START 2 dec c 1
0000000000002420 0000000000002490 0000000000002100 ; relsq c CONST_1 1
# MSQ_END 2 dec
; label JZ_0_END
# MSQ_END 1 jz
# MSQ_START 1 add c mod_256_0_subber tmp
# MSQ_START 2 movneg tmp mod_256_0_subber
0000000000002400 0000000000002400 0000000000002118 ; relsq tmp tmp 1
0000000000002400 0000000000002470 0000000000002130 ; relsq tmp mod_256_0_subber 1
# MSQ_END 2 movneg
# MSQ_START 2 sub c tmp
0000000000002420 0000000000002400 0000000000002148 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 lbljmp MOD_256_0_START
0000000000000000 0000000000000000 0000000000001a70 ; lblsq ZERO ZERO MOD_256_0_START
# MSQ_END 1 lbljmp
; label MOD_256_0_CHECK_NEG
# MSQ_START 1 decleq mod_256_0_isNeg 0 MOD_256_0_END
0000000000002468 00000000000024e8 0000000000002238 ; lblsq mod_256_0_isNeg CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 decleq c 0 MOD_256_0_END
0000000000002420 00000000000024e8 0000000000002238 ; lblsq c CONST_0 MOD_256_0_END
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp c tmp2
# MSQ_START 2 movneg tmp2 c
0000000000002408 0000000000002408 00000000000021a8 ; relsq tmp2 tmp2 1
0000000000002408 0000000000002420 00000000000021c0 ; relsq tmp2 c 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000002400 0000000000002400 00000000000021d8 ; relsq tmp tmp 1
0000000000002400 0000000000002408 00000000000021f0 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set c 100
# MSQ_START 2 zero c
0000000000002420 0000000000002420 0000000000002208 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 inc c 100
0000000000002420 0000000000002510 0000000000002220 ; relsq c CONST_-100 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub c tmp
0000000000002420 0000000000002400 0000000000002238 ; relsq c tmp 1
# MSQ_END 1 sub
; label MOD_256_0_END
# MSQ_END 0 mod_256
# MSQ_START 0 putchar c tmp
0000000013ed27f0 0000000000000000 0000000000002268 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000002238 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
0000000000002400 0000000000002400 0000000000002280 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
0000000000002400 0000000000002420 0000000000002298 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
0000000000002400 0000000000002490 00000000000022b0 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 00000000000022c8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 0000000000002400 00000000000022e0 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 decleq i 1 PRINT_CHAR_END
0000000000002458 0000000000002490 0000000000002310 ; lblsq i CONST_1 PRINT_CHAR_END
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT_CHAR_START
0000000000000000 0000000000000000 0000000000001890 ; lblsq ZERO ZERO PRINT_CHAR_START
# MSQ_END 0 lbljmp

; label PRINT_CHAR_END
# Go to the next qword
# MSQ_START 0 decaddr charToPrint -8
00000000000018c8 00000000000024f8 0000000000002328 ; relsq charToPrint_addrRef_0 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decleq codeLen 8 HALT
0000000000002410 0000000000002508 0000000000002358 ; lblsq codeLen CONST_8 HALT
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp PRINT
0000000000000000 0000000000000000 0000000000001848 ; lblsq ZERO ZERO PRINT
# MSQ_END 0 lbljmp

; label HALT
# MSQ_START 0 halt tmp tmp2
# MSQ_START 1 set_safe CPU_CONTROL_START 2 tmp tmp2
# MSQ_START 2 mov tmp CPU_CONTROL_START tmp2
0000000000002408 0000000000002408 0000000000002370 ; relsq tmp2 tmp2 1
0000000000002408 0000000013ee0000 0000000000002388 ; relsq tmp2 CPU_CONTROL_START 1
0000000000002400 0000000000002400 00000000000023a0 ; relsq tmp tmp 1
0000000000002400 0000000000002408 00000000000023b8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 dec tmp 2
0000000000002400 0000000000002498 00000000000023d0 ; relsq tmp CONST_2 1
# MSQ_END 2 dec
# MSQ_START 2 sub CPU_CONTROL_START tmp
0000000013ee0000 0000000000002400 00000000000023e8 ; relsq CPU_CONTROL_START tmp 1
# MSQ_END 2 sub
# MSQ_END 1 set_safe
0000000000000000 0000000000000000 00000000000023e8 ; relsq ZERO ZERO 0
# MSQ_END 0 halt

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_-8 -8
; var CONST_10 10
; var CONST_8 8
; var CONST_-100 -100
; var CONST_-10000 -10000

0000000000000000 ; raw 0000000000000000 # tmp
0000000000000000 ; raw 0000000000000000 # tmp2
0000000000000000 ; raw 0000000000000000 # codeLen
0000000000000000 ; raw 0000000000000000 # val
0000000000000000 ; raw 0000000000000000 # c
0000000000000000 ; raw 0000000000000000 # c2
0000000000000000 ; raw 0000000000000000 # isNeg
0000000000300000 ; raw 0000000000300000 # labelArrStart
0000000000000000 ; raw 0000000000000000 # labelOffset
0000000000000000 ; raw 0000000000000000 # refs
0000000000000000 ; raw 0000000000000000 # cur
fffffffffffffff1 ; raw fffffffffffffff1 # i
0000000000100000 ; raw 0000000000100000 # bufStart
0000000000000000 ; raw 0000000000000000 # mod_256_0_isNeg
0000000000000000 ; raw 0000000000000000 # mod_256_0_subber
0000000000000000 ; raw 0000000000000000 # mod_256_0_nextSubber
ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
0000000000000022 ; raw 0000000000000022 # CONST_22
0000000000000001 ; raw 0000000000000001 # CONST_1
0000000000000002 ; raw 0000000000000002 # CONST_2
0000000000000009 ; raw 0000000000000009 # CONST_9
000000000000000a ; raw 000000000000000a # CONST_A
0000000000000003 ; raw 0000000000000003 # CONST_3
0000000000000006 ; raw 0000000000000006 # CONST_6
000000000000001a ; raw 000000000000001a # CONST_1A
0000000000000017 ; raw 0000000000000017 # CONST_17
000000000000002c ; raw 000000000000002c # CONST_2C
000000000000002f ; raw 000000000000002f # CONST_2F
0000000000000007 ; raw 0000000000000007 # CONST_7
0000000000000000 ; raw 0000000000000000 # CONST_0
0000000000000026 ; raw 0000000000000026 # CONST_26
fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
0000000000000010 ; raw 0000000000000010 # CONST_10
0000000000000008 ; raw 0000000000000008 # CONST_8
ffffffffffffff00 ; raw ffffffffffffff00 # CONST_-100
ffffffffffff0000 ; raw ffffffffffff0000 # CONST_-10000
~
