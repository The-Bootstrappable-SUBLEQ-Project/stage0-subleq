# hex0
# Step 0: Processed 1364 lines
# Step 1: Found 102 symbols
# Step 2: Counted 827 references
# Step 3: Now with 1602 lines and 1104 references
# Step 4: Current size is 15320 bytes
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Standard program start
; addr ZERO 0
; var tmp 0
; var tmp2 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; var FREE_START 1000000
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO EP

; label EP
; var codeLen 0
# MAIN is the main routine for handling inputs
; label MAIN
# val is intentionally kept negative to make it easier to add to cur
; var val 0
; var c 0
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000000030 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000003bd8 0000000000003c78 0000000000000048 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000003bd8 0000000013ed27e8 0000000000000078 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 0000000000000048 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000090 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000003c00 0000000000003c00 00000000000000a8 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000003c00 0000000000003bd8 00000000000000c0 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Keep a backup of c for INPUT_LABEL
; var c2 0
# MSQ_START 0 mov c2 c tmp
# MSQ_START 1 movneg tmp c
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 00000000000000d8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp c
0000000000003bd8 0000000000003c00 00000000000000f0 ; relsq tmp c 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg c2 tmp
# MSQ_START 2 zero c2
0000000000003c08 0000000000003c08 0000000000000108 ; relsq c2 c2 1
# MSQ_END 2 zero
# MSQ_START 2 sub c2 tmp
0000000000003c08 0000000000003bd8 0000000000000120 ; relsq c2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Handle NUL ~ "
# MSQ_START 0 decleq c 22 MAIN
0000000000003c00 0000000000003c80 0000000000000018 ; lblsq c CONST_22 MAIN
# MSQ_END 0 decleq

# Handle #
# MSQ_START 0 decleq c 1 COMMENT
0000000000003c00 0000000000003c88 0000000000000378 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle $ and %
# MSQ_START 0 decleq c 2 MAIN
0000000000003c00 0000000000003c90 0000000000000018 ; lblsq c CONST_2 MAIN
# MSQ_END 0 decleq

# Handle &
# MSQ_START 0 decleq c 1 INPUT_LABEL
0000000000003c00 0000000000003c88 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ' ~ /
# MSQ_START 0 decleq c 9 MAIN
0000000000003c00 0000000000003c98 0000000000000018 ; lblsq c CONST_9 MAIN
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 00000000000001b0 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 00000000000001c8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
0000000000003bf8 0000000000003c78 00000000000001e0 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a WRITE
0000000000003c00 0000000000003ca0 0000000000002dd8 ; lblsq c CONST_A WRITE
# MSQ_END 0 decleq

# Handle :
# MSQ_START 0 decleq c 1 INPUT_LABEL
0000000000003c00 0000000000003c88 00000000000009f0 ; lblsq c CONST_1 INPUT_LABEL
# MSQ_END 0 decleq

# Handle ;
# MSQ_START 0 decleq c 1 COMMENT
0000000000003c00 0000000000003c88 0000000000000378 ; lblsq c CONST_1 COMMENT
# MSQ_END 0 decleq

# Handle < ~ >
# MSQ_START 0 decleq c 3 MAIN
0000000000003c00 0000000000003ca8 0000000000000018 ; lblsq c CONST_3 MAIN
# MSQ_END 0 decleq

# Handle ?
# MSQ_START 0 decleq c 1 HANDLE_REL
0000000000003c00 0000000000003c88 0000000000000498 ; lblsq c CONST_1 HANDLE_REL
# MSQ_END 0 decleq

# Handle @
# MSQ_START 0 decleq c 1 MAIN
0000000000003c00 0000000000003c88 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 0000000000000288 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 00000000000002a0 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000003bf8 0000000000003c98 00000000000002b8 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
0000000000003c00 0000000000003cb0 0000000000002dd8 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a MAIN
0000000000003c00 0000000000003cb8 0000000000000018 ; lblsq c CONST_1A MAIN
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 0000000000000300 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 0000000000000318 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000003bf8 0000000000003c98 0000000000000330 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 WRITE
0000000000003c00 0000000000003cb0 0000000000002dd8 ; lblsq c CONST_6 WRITE
# MSQ_END 0 decleq

# Handle g ~ }
# MSQ_START 0 decleq c 17 MAIN
0000000000003c00 0000000000003cc0 0000000000000018 ; lblsq c CONST_17 MAIN
# MSQ_END 0 decleq

# Handle ~ and DEL (0x7f)
# MSQ_START 0 lbljmp RESOLVE_REF
0000000000000000 0000000000000000 0000000000003018 ; lblsq ZERO ZERO RESOLVE_REF
# MSQ_END 0 lbljmp


# COMMENT ignores characters until \r or \n is fed
; label COMMENT
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000000390 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000003bd8 0000000000003c78 00000000000003a8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000003bd8 0000000013ed27e8 00000000000003d8 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000003a8 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 00000000000003f0 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000003c00 0000000000003c00 0000000000000408 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000003c00 0000000000003bd8 0000000000000420 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# putchar c tmp
# MSQ_START 0 decleq c 9 COMMENT
0000000000003c00 0000000000003c98 0000000000000378 ; lblsq c CONST_9 COMMENT
# MSQ_END 0 decleq
# Handle LF
# MSQ_START 0 decleq c 1 MAIN
0000000000003c00 0000000000003c88 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 decleq c 2 COMMENT
0000000000003c00 0000000000003c90 0000000000000378 ; lblsq c CONST_2 COMMENT
# MSQ_END 0 decleq
# Handle CR
# MSQ_START 0 decleq c 1 MAIN
0000000000003c00 0000000000003c88 0000000000000018 ; lblsq c CONST_1 MAIN
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COMMENT
0000000000000000 0000000000000000 0000000000000378 ; lblsq ZERO ZERO COMMENT
# MSQ_END 0 lbljmp


# HANDLE_REL handles relative labels
; label HANDLE_REL

# Handle sign (+-)
; var isNeg 0
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
0000000000003c10 0000000000003c10 00000000000004b0 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 00000000000004c8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000003bd8 0000000000003c78 00000000000004e0 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000003bd8 0000000013ed27e8 0000000000000510 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000004e0 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000528 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000003c00 0000000000003c00 0000000000000540 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000003c00 0000000000003bd8 0000000000000558 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# Handle NUL ~ ,
# MSQ_START 0 decleq c 2c REL_INP
0000000000003c00 0000000000003cc8 00000000000005b8 ; lblsq c CONST_2C REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 inc isNeg 1
# MSQ_START 1 dec isNeg -1
0000000000003c10 0000000000003c78 0000000000000588 ; relsq isNeg CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# Handle -
# MSQ_START 0 decleq c 1 REL_INP
0000000000003c00 0000000000003c88 00000000000005b8 ; lblsq c CONST_1 REL_INP
# MSQ_END 0 decleq
# MSQ_START 0 zero isNeg
# MSQ_START 1 sub isNeg isNeg
0000000000003c10 0000000000003c10 00000000000005b8 ; relsq isNeg isNeg 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label REL_INP
# MSQ_START 0 getchar c tmp
# MSQ_START 1 set tmp 1
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 00000000000005d0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp 1
0000000000003bd8 0000000000003c78 00000000000005e8 ; relsq tmp CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
0000000000003bd8 0000000013ed27e8 0000000000000618 ; relsq tmp SERIAL_IN 2
# MSQ_START 1 reljmp -1
0000000000000000 0000000000000000 00000000000005e8 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000000630 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg c tmp
# MSQ_START 2 zero c
0000000000003c00 0000000000003c00 0000000000000648 ; relsq c c 1
# MSQ_END 2 zero
# MSQ_START 2 sub c tmp
0000000000003c00 0000000000003bd8 0000000000000660 ; relsq c tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar

# Handle NUL ~ /
# MSQ_START 0 decleq c 2f REL_NEG
0000000000003c00 0000000000003cd0 00000000000008e8 ; lblsq c CONST_2F REL_NEG
# MSQ_END 0 decleq

# Handle 0 ~ 9
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 0000000000000690 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 00000000000006a8 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 inc val 1
# MSQ_START 1 dec val -1
0000000000003bf8 0000000000003c78 00000000000006c0 ; relsq val CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 decleq c a REL_WRITE
0000000000003c00 0000000000003ca0 00000000000007e0 ; lblsq c CONST_A REL_WRITE
# MSQ_END 0 decleq

# Handle : ~ @
# MSQ_START 0 decleq c 7 REL_NEG
0000000000003c00 0000000000003cd8 00000000000008e8 ; lblsq c CONST_7 REL_NEG
# MSQ_END 0 decleq

# Handle A ~ F
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 0000000000000708 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 0000000000000720 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000003bf8 0000000000003c98 0000000000000738 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
0000000000003c00 0000000000003cb0 00000000000007e0 ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle G ~ `
# MSQ_START 0 decleq c 1a REL_NEG
0000000000003c00 0000000000003cb8 00000000000008e8 ; lblsq c CONST_1A REL_NEG
# MSQ_END 0 decleq

# Handle a ~ f
# MSQ_START 0 movneg val c
# MSQ_START 1 zero val
# MSQ_START 2 sub val val
0000000000003bf8 0000000000003bf8 0000000000000780 ; relsq val val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub val c
0000000000003bf8 0000000000003c00 0000000000000798 ; relsq val c 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 dec val 9
0000000000003bf8 0000000000003c98 00000000000007b0 ; relsq val CONST_9 1
# MSQ_END 0 dec
# MSQ_START 0 decleq c 6 REL_WRITE
0000000000003c00 0000000000003cb0 00000000000007e0 ; lblsq c CONST_6 REL_WRITE
# MSQ_END 0 decleq

# Handle g ~ DEL
# MSQ_START 0 lbljmp REL_INP
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

; label REL_WRITE
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000003bd8 0000000000003bd8 00000000000007f8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000810 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000828 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000840 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000858 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000870 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 0000000000000888 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 00000000000008a0 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 00000000000008b8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
0000000000003c48 0000000000003bf8 00000000000008d0 ; relsq cur val 1
# MSQ_END 0 sub
# MSQ_START 0 lbljmp REL_INP
0000000000000000 0000000000000000 00000000000005b8 ; lblsq ZERO ZERO REL_INP
# MSQ_END 0 lbljmp

# Negate cur if the relative jump is negative
; label REL_NEG
# MSQ_START 0 decleq isNeg 0 REL_FIN
0000000000003c10 0000000000003ce0 0000000000000990 ; lblsq isNeg CONST_0 REL_FIN
# MSQ_END 0 decleq
# MSQ_START 0 neg cur tmp tmp2
# MSQ_START 1 movneg tmp cur
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000000918 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000000930 ; relsq tmp cur 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 mov cur tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
0000000000003be0 0000000000003be0 0000000000000948 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000000960 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg cur tmp2
0000000000003c48 0000000000003c48 0000000000000978 ; relsq cur cur 1
0000000000003c48 0000000000003be0 0000000000000990 ; relsq cur tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_END 0 neg

; label REL_FIN
# MSQ_START 0 add cur codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 00000000000009a8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000003bd8 0000000000003bf0 00000000000009c0 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 00000000000009d8 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
# MSQ_START 0 lbljmp WRITE_QWORD
0000000000000000 0000000000000000 0000000000002ef8 ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp

# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

; var lblArrStart 300000
; addr lblArrNext 300000
; var lblCount 0

; var refArrStart 400000
; addr refArrNext 400000
; var refCount 0

# INPUT_LABEL handles both labels (:) and references to them (&)
; label INPUT_LABEL
# MSQ_START 0 decleq c2 26 RECORD_REF
0000000000003c08 0000000000003ce8 0000000000001bf0 ; lblsq c2 CONST_26 RECORD_REF
# MSQ_END 0 decleq

# Handle label (:)
# MSQ_START 0 inc lblCount 1
# MSQ_START 1 dec lblCount -1
0000000000003c20 0000000000003c78 0000000000000a20 ; relsq lblCount CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 alloc_str_const lblArrNext 800 tmp
# MSQ_START 1 malloc_const lblArrNext 800 tmp
# MSQ_START 2 malloc lblArrNext CONST_800 tmp
0000000000003bd8 0000000000003bd8 0000000000000a38 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be8 0000000000000a50 ; relsq tmp FREE_START 1
0000000000300000 0000000000300000 0000000000000a68 ; relsq lblArrNext lblArrNext 1
0000000000300000 0000000000003bd8 0000000000000a80 ; relsq lblArrNext tmp 1
0000000000003bd8 0000000000003bd8 0000000000000a98 ; relsq tmp tmp 1
0000000000003bd8 0000000000003cf0 0000000000000ab0 ; relsq tmp CONST_800 1
0000000000003be8 0000000000003bd8 0000000000000ac8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr lblArrNext 8
0000000000000a50 0000000000003cf8 0000000000000ae0 ; relsq lblArrNext_addrRef_0 CONST_-8 1
0000000000000a58 0000000000003cf8 0000000000000af8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
0000000000000a68 0000000000003cf8 0000000000000b10 ; relsq lblArrNext_addrRef_2 CONST_-8 1
0000000000000c30 0000000000003cf8 0000000000000b28 ; relsq lblArrNext_addrRef_3 CONST_-8 1
0000000000000c38 0000000000003cf8 0000000000000b40 ; relsq lblArrNext_addrRef_4 CONST_-8 1
0000000000000de0 0000000000003cf8 0000000000000b58 ; relsq lblArrNext_addrRef_5 CONST_-8 1
0000000000000de8 0000000000003cf8 0000000000000b70 ; relsq lblArrNext_addrRef_6 CONST_-8 1
0000000000000df8 0000000000003cf8 0000000000000b88 ; relsq lblArrNext_addrRef_7 CONST_-8 1
0000000000000fe0 0000000000003cf8 0000000000000ba0 ; relsq lblArrNext_addrRef_8 CONST_-8 1
0000000000001710 0000000000003cf8 0000000000000bb8 ; relsq lblArrNext_addrRef_9 CONST_-8 1
0000000000001718 0000000000003cf8 0000000000000bd0 ; relsq lblArrNext_addrRef_10 CONST_-8 1
0000000000001728 0000000000003cf8 0000000000000be8 ; relsq lblArrNext_addrRef_11 CONST_-8 1
0000000000001a40 0000000000003cf8 0000000000000c00 ; relsq lblArrNext_addrRef_12 CONST_-8 1
0000000000001a48 0000000000003cf8 0000000000000c18 ; relsq lblArrNext_addrRef_13 CONST_-8 1
0000000000001a58 0000000000003cf8 0000000000000c30 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero lblArrNext
# MSQ_START 2 sub lblArrNext lblArrNext
0000000000300000 0000000000300000 0000000000000c48 ; relsq lblArrNext lblArrNext 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr lblArrNext 8
0000000000000a50 0000000000003cf8 0000000000000c60 ; relsq lblArrNext_addrRef_0 CONST_-8 1
0000000000000a58 0000000000003cf8 0000000000000c78 ; relsq lblArrNext_addrRef_1 CONST_-8 1
0000000000000a68 0000000000003cf8 0000000000000c90 ; relsq lblArrNext_addrRef_2 CONST_-8 1
0000000000000c30 0000000000003cf8 0000000000000ca8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
0000000000000c38 0000000000003cf8 0000000000000cc0 ; relsq lblArrNext_addrRef_4 CONST_-8 1
0000000000000de0 0000000000003cf8 0000000000000cd8 ; relsq lblArrNext_addrRef_5 CONST_-8 1
0000000000000de8 0000000000003cf8 0000000000000cf0 ; relsq lblArrNext_addrRef_6 CONST_-8 1
0000000000000df8 0000000000003cf8 0000000000000d08 ; relsq lblArrNext_addrRef_7 CONST_-8 1
0000000000000fe0 0000000000003cf8 0000000000000d20 ; relsq lblArrNext_addrRef_8 CONST_-8 1
0000000000001710 0000000000003cf8 0000000000000d38 ; relsq lblArrNext_addrRef_9 CONST_-8 1
0000000000001718 0000000000003cf8 0000000000000d50 ; relsq lblArrNext_addrRef_10 CONST_-8 1
0000000000001728 0000000000003cf8 0000000000000d68 ; relsq lblArrNext_addrRef_11 CONST_-8 1
0000000000001a40 0000000000003cf8 0000000000000d80 ; relsq lblArrNext_addrRef_12 CONST_-8 1
0000000000001a48 0000000000003cf8 0000000000000d98 ; relsq lblArrNext_addrRef_13 CONST_-8 1
0000000000001a58 0000000000003cf8 0000000000000db0 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov lblArrNext CONST_800 tmp
# MSQ_START 2 movneg tmp CONST_800
0000000000003bd8 0000000000003bd8 0000000000000dc8 ; relsq tmp tmp 1
0000000000003bd8 0000000000003cf0 0000000000000de0 ; relsq tmp CONST_800 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg lblArrNext tmp
0000000000300000 0000000000300000 0000000000000df8 ; relsq lblArrNext lblArrNext 1
0000000000300000 0000000000003bd8 0000000000000e10 ; relsq lblArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lblArrNext 10
0000000000000a50 0000000000003d00 0000000000000e28 ; relsq lblArrNext_addrRef_0 CONST_10 1
0000000000000a58 0000000000003d00 0000000000000e40 ; relsq lblArrNext_addrRef_1 CONST_10 1
0000000000000a68 0000000000003d00 0000000000000e58 ; relsq lblArrNext_addrRef_2 CONST_10 1
0000000000000c30 0000000000003d00 0000000000000e70 ; relsq lblArrNext_addrRef_3 CONST_10 1
0000000000000c38 0000000000003d00 0000000000000e88 ; relsq lblArrNext_addrRef_4 CONST_10 1
0000000000000de0 0000000000003d00 0000000000000ea0 ; relsq lblArrNext_addrRef_5 CONST_10 1
0000000000000de8 0000000000003d00 0000000000000eb8 ; relsq lblArrNext_addrRef_6 CONST_10 1
0000000000000df8 0000000000003d00 0000000000000ed0 ; relsq lblArrNext_addrRef_7 CONST_10 1
0000000000000fe0 0000000000003d00 0000000000000ee8 ; relsq lblArrNext_addrRef_8 CONST_10 1
0000000000001710 0000000000003d00 0000000000000f00 ; relsq lblArrNext_addrRef_9 CONST_10 1
0000000000001718 0000000000003d00 0000000000000f18 ; relsq lblArrNext_addrRef_10 CONST_10 1
0000000000001728 0000000000003d00 0000000000000f30 ; relsq lblArrNext_addrRef_11 CONST_10 1
0000000000001a40 0000000000003d00 0000000000000f48 ; relsq lblArrNext_addrRef_12 CONST_10 1
0000000000001a48 0000000000003d00 0000000000000f60 ; relsq lblArrNext_addrRef_13 CONST_10 1
0000000000001a58 0000000000003d00 0000000000000f78 ; relsq lblArrNext_addrRef_14 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_token lblArrNext tmp tmp2
; addr inp_token_0_str 0
# MSQ_START 1 setaddr inp_token_0_str lblArrNext tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str_addrRef_0 tmp2
0000000000003be0 0000000000003be0 0000000000000f90 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000001110 0000000000000fa8 ; relsq tmp2 inp_token_0_str_addrRef_0 1
0000000000003bd8 0000000000003bd8 0000000000000fc0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000000fd8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp lblArrNext
0000000000003bd8 0000000000300000 0000000000000ff0 ; relsq tmp lblArrNext 1
# MSQ_END 2 sub
0000000000001110 0000000000003bd8 0000000000001008 ; relsq inp_token_0_str_addrRef_0 tmp 1
0000000000001118 0000000000003bd8 0000000000001020 ; relsq inp_token_0_str_addrRef_1 tmp 1
0000000000001128 0000000000003bd8 0000000000001038 ; relsq inp_token_0_str_addrRef_2 tmp 1
0000000000001160 0000000000003bd8 0000000000001050 ; relsq inp_token_0_str_addrRef_3 tmp 1
0000000000001280 0000000000003bd8 0000000000001068 ; relsq inp_token_0_str_addrRef_4 tmp 1
00000000000013a0 0000000000003bd8 0000000000001080 ; relsq inp_token_0_str_addrRef_5 tmp 1
# MSQ_END 1 setaddr
; var inp_token_0_len 0
# MSQ_START 1 zero inp_token_0_len
# MSQ_START 2 sub inp_token_0_len inp_token_0_len
0000000000003c38 0000000000003c38 0000000000001098 ; relsq inp_token_0_len inp_token_0_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_TOKEN_0_LOOP
# MSQ_START 1 getchar inp_token_0_str tmp
# MSQ_START 2 set tmp 1
0000000000003bd8 0000000000003bd8 00000000000010b0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003c78 00000000000010c8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
0000000000003bd8 0000000013ed27e8 00000000000010f8 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
0000000000000000 0000000000000000 00000000000010c8 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 0000000000001110 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_token_0_str tmp
0000000000000000 0000000000000000 0000000000001128 ; relsq inp_token_0_str inp_token_0_str 1
0000000000000000 0000000000003bd8 0000000000001140 ; relsq inp_token_0_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_token_0_str 20 INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
0000000000003be0 0000000000003be0 0000000000001158 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000001170 ; relsq tmp2 inp_token_0_str 1
0000000000003bd8 0000000000003bd8 0000000000001188 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000011a0 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_20
0000000000003bd8 0000000000003d08 00000000000011b8 ; relsq tmp CONST_20 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
0000000000003be0 0000000000003be0 00000000000011d0 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 00000000000011e8 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000001260 ; lblsq tmp2 CONST_-1 JZ_0_END
0000000000003bd8 0000000000003c78 0000000000001248 ; lblsq tmp CONST_-1 JZ_0_REVERT_A
0000000000003bd8 0000000000003c88 0000000000001230 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000001560 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_0_REVERT_A
0000000000003bd8 0000000000003c88 0000000000001260 ; relsq tmp CONST_1 1
; label JZ_0_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_0_str d INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
0000000000003be0 0000000000003be0 0000000000001278 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000001290 ; relsq tmp2 inp_token_0_str 1
0000000000003bd8 0000000000003bd8 00000000000012a8 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000012c0 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
0000000000003bd8 0000000000003d10 00000000000012d8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
0000000000003be0 0000000000003be0 00000000000012f0 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000001308 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000001380 ; lblsq tmp2 CONST_-1 JZ_1_END
0000000000003bd8 0000000000003c78 0000000000001368 ; lblsq tmp CONST_-1 JZ_1_REVERT_A
0000000000003bd8 0000000000003c88 0000000000001350 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000001560 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_1_REVERT_A
0000000000003bd8 0000000000003c88 0000000000001380 ; relsq tmp CONST_1 1
; label JZ_1_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_0_str a INP_TOKEN_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_0_str tmp2
0000000000003be0 0000000000003be0 0000000000001398 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 00000000000013b0 ; relsq tmp2 inp_token_0_str 1
0000000000003bd8 0000000000003bd8 00000000000013c8 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000013e0 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
0000000000003bd8 0000000000003ca0 00000000000013f8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_0_TERM tmp2
0000000000003be0 0000000000003be0 0000000000001410 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000001428 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 00000000000014a0 ; lblsq tmp2 CONST_-1 JZ_2_END
0000000000003bd8 0000000000003c78 0000000000001488 ; lblsq tmp CONST_-1 JZ_2_REVERT_A
0000000000003bd8 0000000000003c88 0000000000001470 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000001560 ; lblsq ZERO ZERO INP_TOKEN_0_TERM
; label JZ_2_REVERT_A
0000000000003bd8 0000000000003c88 00000000000014a0 ; relsq tmp CONST_1 1
; label JZ_2_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_token_0_len 1
# MSQ_START 2 dec inp_token_0_len -1
0000000000003c38 0000000000003c78 00000000000014b8 ; relsq inp_token_0_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_token_0_str 8
0000000000001110 0000000000003cf8 00000000000014d0 ; relsq inp_token_0_str_addrRef_0 CONST_-8 1
0000000000001118 0000000000003cf8 00000000000014e8 ; relsq inp_token_0_str_addrRef_1 CONST_-8 1
0000000000001128 0000000000003cf8 0000000000001500 ; relsq inp_token_0_str_addrRef_2 CONST_-8 1
0000000000001160 0000000000003cf8 0000000000001518 ; relsq inp_token_0_str_addrRef_3 CONST_-8 1
0000000000001280 0000000000003cf8 0000000000001530 ; relsq inp_token_0_str_addrRef_4 CONST_-8 1
00000000000013a0 0000000000003cf8 0000000000001548 ; relsq inp_token_0_str_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_TOKEN_0_LOOP
0000000000000000 0000000000000000 0000000000001098 ; lblsq ZERO ZERO INP_TOKEN_0_LOOP
# MSQ_END 1 lbljmp
; label INP_TOKEN_0_TERM
# MSQ_START 1 decleq inp_token_0_len 0 INP_TOKEN_0_LOOP
0000000000003c38 0000000000003ce0 0000000000001098 ; lblsq inp_token_0_len CONST_0 INP_TOKEN_0_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 incaddr lblArrNext 8
0000000000000a50 0000000000003cf8 0000000000001590 ; relsq lblArrNext_addrRef_0 CONST_-8 1
0000000000000a58 0000000000003cf8 00000000000015a8 ; relsq lblArrNext_addrRef_1 CONST_-8 1
0000000000000a68 0000000000003cf8 00000000000015c0 ; relsq lblArrNext_addrRef_2 CONST_-8 1
0000000000000c30 0000000000003cf8 00000000000015d8 ; relsq lblArrNext_addrRef_3 CONST_-8 1
0000000000000c38 0000000000003cf8 00000000000015f0 ; relsq lblArrNext_addrRef_4 CONST_-8 1
0000000000000de0 0000000000003cf8 0000000000001608 ; relsq lblArrNext_addrRef_5 CONST_-8 1
0000000000000de8 0000000000003cf8 0000000000001620 ; relsq lblArrNext_addrRef_6 CONST_-8 1
0000000000000df8 0000000000003cf8 0000000000001638 ; relsq lblArrNext_addrRef_7 CONST_-8 1
0000000000000fe0 0000000000003cf8 0000000000001650 ; relsq lblArrNext_addrRef_8 CONST_-8 1
0000000000001710 0000000000003cf8 0000000000001668 ; relsq lblArrNext_addrRef_9 CONST_-8 1
0000000000001718 0000000000003cf8 0000000000001680 ; relsq lblArrNext_addrRef_10 CONST_-8 1
0000000000001728 0000000000003cf8 0000000000001698 ; relsq lblArrNext_addrRef_11 CONST_-8 1
0000000000001a40 0000000000003cf8 00000000000016b0 ; relsq lblArrNext_addrRef_12 CONST_-8 1
0000000000001a48 0000000000003cf8 00000000000016c8 ; relsq lblArrNext_addrRef_13 CONST_-8 1
0000000000001a58 0000000000003cf8 00000000000016e0 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov lblArrNext inp_token_0_len tmp
# MSQ_START 2 movneg tmp inp_token_0_len
0000000000003bd8 0000000000003bd8 00000000000016f8 ; relsq tmp tmp 1
0000000000003bd8 0000000000003c38 0000000000001710 ; relsq tmp inp_token_0_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg lblArrNext tmp
0000000000300000 0000000000300000 0000000000001728 ; relsq lblArrNext lblArrNext 1
0000000000300000 0000000000003bd8 0000000000001740 ; relsq lblArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lblArrNext 8
0000000000000a50 0000000000003d18 0000000000001758 ; relsq lblArrNext_addrRef_0 CONST_8 1
0000000000000a58 0000000000003d18 0000000000001770 ; relsq lblArrNext_addrRef_1 CONST_8 1
0000000000000a68 0000000000003d18 0000000000001788 ; relsq lblArrNext_addrRef_2 CONST_8 1
0000000000000c30 0000000000003d18 00000000000017a0 ; relsq lblArrNext_addrRef_3 CONST_8 1
0000000000000c38 0000000000003d18 00000000000017b8 ; relsq lblArrNext_addrRef_4 CONST_8 1
0000000000000de0 0000000000003d18 00000000000017d0 ; relsq lblArrNext_addrRef_5 CONST_8 1
0000000000000de8 0000000000003d18 00000000000017e8 ; relsq lblArrNext_addrRef_6 CONST_8 1
0000000000000df8 0000000000003d18 0000000000001800 ; relsq lblArrNext_addrRef_7 CONST_8 1
0000000000000fe0 0000000000003d18 0000000000001818 ; relsq lblArrNext_addrRef_8 CONST_8 1
0000000000001710 0000000000003d18 0000000000001830 ; relsq lblArrNext_addrRef_9 CONST_8 1
0000000000001718 0000000000003d18 0000000000001848 ; relsq lblArrNext_addrRef_10 CONST_8 1
0000000000001728 0000000000003d18 0000000000001860 ; relsq lblArrNext_addrRef_11 CONST_8 1
0000000000001a40 0000000000003d18 0000000000001878 ; relsq lblArrNext_addrRef_12 CONST_8 1
0000000000001a48 0000000000003d18 0000000000001890 ; relsq lblArrNext_addrRef_13 CONST_8 1
0000000000001a58 0000000000003d18 00000000000018a8 ; relsq lblArrNext_addrRef_14 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_token
# MSQ_START 0 incaddr lblArrNext 18
0000000000000a50 0000000000003d20 00000000000018c0 ; relsq lblArrNext_addrRef_0 CONST_-18 1
0000000000000a58 0000000000003d20 00000000000018d8 ; relsq lblArrNext_addrRef_1 CONST_-18 1
0000000000000a68 0000000000003d20 00000000000018f0 ; relsq lblArrNext_addrRef_2 CONST_-18 1
0000000000000c30 0000000000003d20 0000000000001908 ; relsq lblArrNext_addrRef_3 CONST_-18 1
0000000000000c38 0000000000003d20 0000000000001920 ; relsq lblArrNext_addrRef_4 CONST_-18 1
0000000000000de0 0000000000003d20 0000000000001938 ; relsq lblArrNext_addrRef_5 CONST_-18 1
0000000000000de8 0000000000003d20 0000000000001950 ; relsq lblArrNext_addrRef_6 CONST_-18 1
0000000000000df8 0000000000003d20 0000000000001968 ; relsq lblArrNext_addrRef_7 CONST_-18 1
0000000000000fe0 0000000000003d20 0000000000001980 ; relsq lblArrNext_addrRef_8 CONST_-18 1
0000000000001710 0000000000003d20 0000000000001998 ; relsq lblArrNext_addrRef_9 CONST_-18 1
0000000000001718 0000000000003d20 00000000000019b0 ; relsq lblArrNext_addrRef_10 CONST_-18 1
0000000000001728 0000000000003d20 00000000000019c8 ; relsq lblArrNext_addrRef_11 CONST_-18 1
0000000000001a40 0000000000003d20 00000000000019e0 ; relsq lblArrNext_addrRef_12 CONST_-18 1
0000000000001a48 0000000000003d20 00000000000019f8 ; relsq lblArrNext_addrRef_13 CONST_-18 1
0000000000001a58 0000000000003d20 0000000000001a10 ; relsq lblArrNext_addrRef_14 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov lblArrNext codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000001a28 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000003bd8 0000000000003bf0 0000000000001a40 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg lblArrNext tmp
# MSQ_START 2 zero lblArrNext
0000000000300000 0000000000300000 0000000000001a58 ; relsq lblArrNext lblArrNext 1
# MSQ_END 2 zero
# MSQ_START 2 sub lblArrNext tmp
0000000000300000 0000000000003bd8 0000000000001a70 ; relsq lblArrNext tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 incaddr lblArrNext 8
0000000000000a50 0000000000003cf8 0000000000001a88 ; relsq lblArrNext_addrRef_0 CONST_-8 1
0000000000000a58 0000000000003cf8 0000000000001aa0 ; relsq lblArrNext_addrRef_1 CONST_-8 1
0000000000000a68 0000000000003cf8 0000000000001ab8 ; relsq lblArrNext_addrRef_2 CONST_-8 1
0000000000000c30 0000000000003cf8 0000000000001ad0 ; relsq lblArrNext_addrRef_3 CONST_-8 1
0000000000000c38 0000000000003cf8 0000000000001ae8 ; relsq lblArrNext_addrRef_4 CONST_-8 1
0000000000000de0 0000000000003cf8 0000000000001b00 ; relsq lblArrNext_addrRef_5 CONST_-8 1
0000000000000de8 0000000000003cf8 0000000000001b18 ; relsq lblArrNext_addrRef_6 CONST_-8 1
0000000000000df8 0000000000003cf8 0000000000001b30 ; relsq lblArrNext_addrRef_7 CONST_-8 1
0000000000000fe0 0000000000003cf8 0000000000001b48 ; relsq lblArrNext_addrRef_8 CONST_-8 1
0000000000001710 0000000000003cf8 0000000000001b60 ; relsq lblArrNext_addrRef_9 CONST_-8 1
0000000000001718 0000000000003cf8 0000000000001b78 ; relsq lblArrNext_addrRef_10 CONST_-8 1
0000000000001728 0000000000003cf8 0000000000001b90 ; relsq lblArrNext_addrRef_11 CONST_-8 1
0000000000001a40 0000000000003cf8 0000000000001ba8 ; relsq lblArrNext_addrRef_12 CONST_-8 1
0000000000001a48 0000000000003cf8 0000000000001bc0 ; relsq lblArrNext_addrRef_13 CONST_-8 1
0000000000001a58 0000000000003cf8 0000000000001bd8 ; relsq lblArrNext_addrRef_14 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp MAIN
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp

# Handle reference (&)
; label RECORD_REF
# MSQ_START 0 inc refCount 1
# MSQ_START 1 dec refCount -1
0000000000003c30 0000000000003c78 0000000000001c08 ; relsq refCount CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 alloc_str_const refArrNext 800 tmp
# MSQ_START 1 malloc_const refArrNext 800 tmp
# MSQ_START 2 malloc refArrNext CONST_800 tmp
0000000000003bd8 0000000000003bd8 0000000000001c20 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be8 0000000000001c38 ; relsq tmp FREE_START 1
0000000000400000 0000000000400000 0000000000001c50 ; relsq refArrNext refArrNext 1
0000000000400000 0000000000003bd8 0000000000001c68 ; relsq refArrNext tmp 1
0000000000003bd8 0000000000003bd8 0000000000001c80 ; relsq tmp tmp 1
0000000000003bd8 0000000000003cf0 0000000000001c98 ; relsq tmp CONST_800 1
0000000000003be8 0000000000003bd8 0000000000001cb0 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr refArrNext 8
0000000000001c38 0000000000003cf8 0000000000001cc8 ; relsq refArrNext_addrRef_0 CONST_-8 1
0000000000001c40 0000000000003cf8 0000000000001ce0 ; relsq refArrNext_addrRef_1 CONST_-8 1
0000000000001c50 0000000000003cf8 0000000000001cf8 ; relsq refArrNext_addrRef_2 CONST_-8 1
0000000000001e18 0000000000003cf8 0000000000001d10 ; relsq refArrNext_addrRef_3 CONST_-8 1
0000000000001e20 0000000000003cf8 0000000000001d28 ; relsq refArrNext_addrRef_4 CONST_-8 1
0000000000001fc8 0000000000003cf8 0000000000001d40 ; relsq refArrNext_addrRef_5 CONST_-8 1
0000000000001fd0 0000000000003cf8 0000000000001d58 ; relsq refArrNext_addrRef_6 CONST_-8 1
0000000000001fe0 0000000000003cf8 0000000000001d70 ; relsq refArrNext_addrRef_7 CONST_-8 1
00000000000021c8 0000000000003cf8 0000000000001d88 ; relsq refArrNext_addrRef_8 CONST_-8 1
00000000000028f8 0000000000003cf8 0000000000001da0 ; relsq refArrNext_addrRef_9 CONST_-8 1
0000000000002900 0000000000003cf8 0000000000001db8 ; relsq refArrNext_addrRef_10 CONST_-8 1
0000000000002910 0000000000003cf8 0000000000001dd0 ; relsq refArrNext_addrRef_11 CONST_-8 1
0000000000002c28 0000000000003cf8 0000000000001de8 ; relsq refArrNext_addrRef_12 CONST_-8 1
0000000000002c30 0000000000003cf8 0000000000001e00 ; relsq refArrNext_addrRef_13 CONST_-8 1
0000000000002c40 0000000000003cf8 0000000000001e18 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero refArrNext
# MSQ_START 2 sub refArrNext refArrNext
0000000000400000 0000000000400000 0000000000001e30 ; relsq refArrNext refArrNext 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr refArrNext 8
0000000000001c38 0000000000003cf8 0000000000001e48 ; relsq refArrNext_addrRef_0 CONST_-8 1
0000000000001c40 0000000000003cf8 0000000000001e60 ; relsq refArrNext_addrRef_1 CONST_-8 1
0000000000001c50 0000000000003cf8 0000000000001e78 ; relsq refArrNext_addrRef_2 CONST_-8 1
0000000000001e18 0000000000003cf8 0000000000001e90 ; relsq refArrNext_addrRef_3 CONST_-8 1
0000000000001e20 0000000000003cf8 0000000000001ea8 ; relsq refArrNext_addrRef_4 CONST_-8 1
0000000000001fc8 0000000000003cf8 0000000000001ec0 ; relsq refArrNext_addrRef_5 CONST_-8 1
0000000000001fd0 0000000000003cf8 0000000000001ed8 ; relsq refArrNext_addrRef_6 CONST_-8 1
0000000000001fe0 0000000000003cf8 0000000000001ef0 ; relsq refArrNext_addrRef_7 CONST_-8 1
00000000000021c8 0000000000003cf8 0000000000001f08 ; relsq refArrNext_addrRef_8 CONST_-8 1
00000000000028f8 0000000000003cf8 0000000000001f20 ; relsq refArrNext_addrRef_9 CONST_-8 1
0000000000002900 0000000000003cf8 0000000000001f38 ; relsq refArrNext_addrRef_10 CONST_-8 1
0000000000002910 0000000000003cf8 0000000000001f50 ; relsq refArrNext_addrRef_11 CONST_-8 1
0000000000002c28 0000000000003cf8 0000000000001f68 ; relsq refArrNext_addrRef_12 CONST_-8 1
0000000000002c30 0000000000003cf8 0000000000001f80 ; relsq refArrNext_addrRef_13 CONST_-8 1
0000000000002c40 0000000000003cf8 0000000000001f98 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov refArrNext CONST_800 tmp
# MSQ_START 2 movneg tmp CONST_800
0000000000003bd8 0000000000003bd8 0000000000001fb0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003cf0 0000000000001fc8 ; relsq tmp CONST_800 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg refArrNext tmp
0000000000400000 0000000000400000 0000000000001fe0 ; relsq refArrNext refArrNext 1
0000000000400000 0000000000003bd8 0000000000001ff8 ; relsq refArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr refArrNext 10
0000000000001c38 0000000000003d00 0000000000002010 ; relsq refArrNext_addrRef_0 CONST_10 1
0000000000001c40 0000000000003d00 0000000000002028 ; relsq refArrNext_addrRef_1 CONST_10 1
0000000000001c50 0000000000003d00 0000000000002040 ; relsq refArrNext_addrRef_2 CONST_10 1
0000000000001e18 0000000000003d00 0000000000002058 ; relsq refArrNext_addrRef_3 CONST_10 1
0000000000001e20 0000000000003d00 0000000000002070 ; relsq refArrNext_addrRef_4 CONST_10 1
0000000000001fc8 0000000000003d00 0000000000002088 ; relsq refArrNext_addrRef_5 CONST_10 1
0000000000001fd0 0000000000003d00 00000000000020a0 ; relsq refArrNext_addrRef_6 CONST_10 1
0000000000001fe0 0000000000003d00 00000000000020b8 ; relsq refArrNext_addrRef_7 CONST_10 1
00000000000021c8 0000000000003d00 00000000000020d0 ; relsq refArrNext_addrRef_8 CONST_10 1
00000000000028f8 0000000000003d00 00000000000020e8 ; relsq refArrNext_addrRef_9 CONST_10 1
0000000000002900 0000000000003d00 0000000000002100 ; relsq refArrNext_addrRef_10 CONST_10 1
0000000000002910 0000000000003d00 0000000000002118 ; relsq refArrNext_addrRef_11 CONST_10 1
0000000000002c28 0000000000003d00 0000000000002130 ; relsq refArrNext_addrRef_12 CONST_10 1
0000000000002c30 0000000000003d00 0000000000002148 ; relsq refArrNext_addrRef_13 CONST_10 1
0000000000002c40 0000000000003d00 0000000000002160 ; relsq refArrNext_addrRef_14 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_token refArrNext tmp tmp2
; addr inp_token_1_str 0
# MSQ_START 1 setaddr inp_token_1_str refArrNext tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str_addrRef_0 tmp2
0000000000003be0 0000000000003be0 0000000000002178 ; relsq tmp2 tmp2 1
0000000000003be0 00000000000022f8 0000000000002190 ; relsq tmp2 inp_token_1_str_addrRef_0 1
0000000000003bd8 0000000000003bd8 00000000000021a8 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000021c0 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp refArrNext
0000000000003bd8 0000000000400000 00000000000021d8 ; relsq tmp refArrNext 1
# MSQ_END 2 sub
00000000000022f8 0000000000003bd8 00000000000021f0 ; relsq inp_token_1_str_addrRef_0 tmp 1
0000000000002300 0000000000003bd8 0000000000002208 ; relsq inp_token_1_str_addrRef_1 tmp 1
0000000000002310 0000000000003bd8 0000000000002220 ; relsq inp_token_1_str_addrRef_2 tmp 1
0000000000002348 0000000000003bd8 0000000000002238 ; relsq inp_token_1_str_addrRef_3 tmp 1
0000000000002468 0000000000003bd8 0000000000002250 ; relsq inp_token_1_str_addrRef_4 tmp 1
0000000000002588 0000000000003bd8 0000000000002268 ; relsq inp_token_1_str_addrRef_5 tmp 1
# MSQ_END 1 setaddr
; var inp_token_1_len 0
# MSQ_START 1 zero inp_token_1_len
# MSQ_START 2 sub inp_token_1_len inp_token_1_len
0000000000003c40 0000000000003c40 0000000000002280 ; relsq inp_token_1_len inp_token_1_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_TOKEN_1_LOOP
# MSQ_START 1 getchar inp_token_1_str tmp
# MSQ_START 2 set tmp 1
0000000000003bd8 0000000000003bd8 0000000000002298 ; relsq tmp tmp 1
0000000000003bd8 0000000000003c78 00000000000022b0 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
0000000000003bd8 0000000013ed27e8 00000000000022e0 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
0000000000000000 0000000000000000 00000000000022b0 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 00000000000022f8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_token_1_str tmp
0000000000000000 0000000000000000 0000000000002310 ; relsq inp_token_1_str inp_token_1_str 1
0000000000000000 0000000000003bd8 0000000000002328 ; relsq inp_token_1_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_token_1_str 20 INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
0000000000003be0 0000000000003be0 0000000000002340 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000002358 ; relsq tmp2 inp_token_1_str 1
0000000000003bd8 0000000000003bd8 0000000000002370 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000002388 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_20
0000000000003bd8 0000000000003d08 00000000000023a0 ; relsq tmp CONST_20 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
0000000000003be0 0000000000003be0 00000000000023b8 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 00000000000023d0 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000002448 ; lblsq tmp2 CONST_-1 JZ_3_END
0000000000003bd8 0000000000003c78 0000000000002430 ; lblsq tmp CONST_-1 JZ_3_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002418 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000002748 ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_3_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002448 ; relsq tmp CONST_1 1
; label JZ_3_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_1_str d INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
0000000000003be0 0000000000003be0 0000000000002460 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000002478 ; relsq tmp2 inp_token_1_str 1
0000000000003bd8 0000000000003bd8 0000000000002490 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000024a8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
0000000000003bd8 0000000000003d10 00000000000024c0 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
0000000000003be0 0000000000003be0 00000000000024d8 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 00000000000024f0 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000002568 ; lblsq tmp2 CONST_-1 JZ_4_END
0000000000003bd8 0000000000003c78 0000000000002550 ; lblsq tmp CONST_-1 JZ_4_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002538 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000002748 ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_4_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002568 ; relsq tmp CONST_1 1
; label JZ_4_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_1_str a INP_TOKEN_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_1_str tmp2
0000000000003be0 0000000000003be0 0000000000002580 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000002598 ; relsq tmp2 inp_token_1_str 1
0000000000003bd8 0000000000003bd8 00000000000025b0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000025c8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
0000000000003bd8 0000000000003ca0 00000000000025e0 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_1_TERM tmp2
0000000000003be0 0000000000003be0 00000000000025f8 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000002610 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000002688 ; lblsq tmp2 CONST_-1 JZ_5_END
0000000000003bd8 0000000000003c78 0000000000002670 ; lblsq tmp CONST_-1 JZ_5_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002658 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000002748 ; lblsq ZERO ZERO INP_TOKEN_1_TERM
; label JZ_5_REVERT_A
0000000000003bd8 0000000000003c88 0000000000002688 ; relsq tmp CONST_1 1
; label JZ_5_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_token_1_len 1
# MSQ_START 2 dec inp_token_1_len -1
0000000000003c40 0000000000003c78 00000000000026a0 ; relsq inp_token_1_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_token_1_str 8
00000000000022f8 0000000000003cf8 00000000000026b8 ; relsq inp_token_1_str_addrRef_0 CONST_-8 1
0000000000002300 0000000000003cf8 00000000000026d0 ; relsq inp_token_1_str_addrRef_1 CONST_-8 1
0000000000002310 0000000000003cf8 00000000000026e8 ; relsq inp_token_1_str_addrRef_2 CONST_-8 1
0000000000002348 0000000000003cf8 0000000000002700 ; relsq inp_token_1_str_addrRef_3 CONST_-8 1
0000000000002468 0000000000003cf8 0000000000002718 ; relsq inp_token_1_str_addrRef_4 CONST_-8 1
0000000000002588 0000000000003cf8 0000000000002730 ; relsq inp_token_1_str_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_TOKEN_1_LOOP
0000000000000000 0000000000000000 0000000000002280 ; lblsq ZERO ZERO INP_TOKEN_1_LOOP
# MSQ_END 1 lbljmp
; label INP_TOKEN_1_TERM
# MSQ_START 1 decleq inp_token_1_len 0 INP_TOKEN_1_LOOP
0000000000003c40 0000000000003ce0 0000000000002280 ; lblsq inp_token_1_len CONST_0 INP_TOKEN_1_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 incaddr refArrNext 8
0000000000001c38 0000000000003cf8 0000000000002778 ; relsq refArrNext_addrRef_0 CONST_-8 1
0000000000001c40 0000000000003cf8 0000000000002790 ; relsq refArrNext_addrRef_1 CONST_-8 1
0000000000001c50 0000000000003cf8 00000000000027a8 ; relsq refArrNext_addrRef_2 CONST_-8 1
0000000000001e18 0000000000003cf8 00000000000027c0 ; relsq refArrNext_addrRef_3 CONST_-8 1
0000000000001e20 0000000000003cf8 00000000000027d8 ; relsq refArrNext_addrRef_4 CONST_-8 1
0000000000001fc8 0000000000003cf8 00000000000027f0 ; relsq refArrNext_addrRef_5 CONST_-8 1
0000000000001fd0 0000000000003cf8 0000000000002808 ; relsq refArrNext_addrRef_6 CONST_-8 1
0000000000001fe0 0000000000003cf8 0000000000002820 ; relsq refArrNext_addrRef_7 CONST_-8 1
00000000000021c8 0000000000003cf8 0000000000002838 ; relsq refArrNext_addrRef_8 CONST_-8 1
00000000000028f8 0000000000003cf8 0000000000002850 ; relsq refArrNext_addrRef_9 CONST_-8 1
0000000000002900 0000000000003cf8 0000000000002868 ; relsq refArrNext_addrRef_10 CONST_-8 1
0000000000002910 0000000000003cf8 0000000000002880 ; relsq refArrNext_addrRef_11 CONST_-8 1
0000000000002c28 0000000000003cf8 0000000000002898 ; relsq refArrNext_addrRef_12 CONST_-8 1
0000000000002c30 0000000000003cf8 00000000000028b0 ; relsq refArrNext_addrRef_13 CONST_-8 1
0000000000002c40 0000000000003cf8 00000000000028c8 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov refArrNext inp_token_1_len tmp
# MSQ_START 2 movneg tmp inp_token_1_len
0000000000003bd8 0000000000003bd8 00000000000028e0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003c40 00000000000028f8 ; relsq tmp inp_token_1_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg refArrNext tmp
0000000000400000 0000000000400000 0000000000002910 ; relsq refArrNext refArrNext 1
0000000000400000 0000000000003bd8 0000000000002928 ; relsq refArrNext tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr refArrNext 8
0000000000001c38 0000000000003d18 0000000000002940 ; relsq refArrNext_addrRef_0 CONST_8 1
0000000000001c40 0000000000003d18 0000000000002958 ; relsq refArrNext_addrRef_1 CONST_8 1
0000000000001c50 0000000000003d18 0000000000002970 ; relsq refArrNext_addrRef_2 CONST_8 1
0000000000001e18 0000000000003d18 0000000000002988 ; relsq refArrNext_addrRef_3 CONST_8 1
0000000000001e20 0000000000003d18 00000000000029a0 ; relsq refArrNext_addrRef_4 CONST_8 1
0000000000001fc8 0000000000003d18 00000000000029b8 ; relsq refArrNext_addrRef_5 CONST_8 1
0000000000001fd0 0000000000003d18 00000000000029d0 ; relsq refArrNext_addrRef_6 CONST_8 1
0000000000001fe0 0000000000003d18 00000000000029e8 ; relsq refArrNext_addrRef_7 CONST_8 1
00000000000021c8 0000000000003d18 0000000000002a00 ; relsq refArrNext_addrRef_8 CONST_8 1
00000000000028f8 0000000000003d18 0000000000002a18 ; relsq refArrNext_addrRef_9 CONST_8 1
0000000000002900 0000000000003d18 0000000000002a30 ; relsq refArrNext_addrRef_10 CONST_8 1
0000000000002910 0000000000003d18 0000000000002a48 ; relsq refArrNext_addrRef_11 CONST_8 1
0000000000002c28 0000000000003d18 0000000000002a60 ; relsq refArrNext_addrRef_12 CONST_8 1
0000000000002c30 0000000000003d18 0000000000002a78 ; relsq refArrNext_addrRef_13 CONST_8 1
0000000000002c40 0000000000003d18 0000000000002a90 ; relsq refArrNext_addrRef_14 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_token
# MSQ_START 0 incaddr refArrNext 18
0000000000001c38 0000000000003d20 0000000000002aa8 ; relsq refArrNext_addrRef_0 CONST_-18 1
0000000000001c40 0000000000003d20 0000000000002ac0 ; relsq refArrNext_addrRef_1 CONST_-18 1
0000000000001c50 0000000000003d20 0000000000002ad8 ; relsq refArrNext_addrRef_2 CONST_-18 1
0000000000001e18 0000000000003d20 0000000000002af0 ; relsq refArrNext_addrRef_3 CONST_-18 1
0000000000001e20 0000000000003d20 0000000000002b08 ; relsq refArrNext_addrRef_4 CONST_-18 1
0000000000001fc8 0000000000003d20 0000000000002b20 ; relsq refArrNext_addrRef_5 CONST_-18 1
0000000000001fd0 0000000000003d20 0000000000002b38 ; relsq refArrNext_addrRef_6 CONST_-18 1
0000000000001fe0 0000000000003d20 0000000000002b50 ; relsq refArrNext_addrRef_7 CONST_-18 1
00000000000021c8 0000000000003d20 0000000000002b68 ; relsq refArrNext_addrRef_8 CONST_-18 1
00000000000028f8 0000000000003d20 0000000000002b80 ; relsq refArrNext_addrRef_9 CONST_-18 1
0000000000002900 0000000000003d20 0000000000002b98 ; relsq refArrNext_addrRef_10 CONST_-18 1
0000000000002910 0000000000003d20 0000000000002bb0 ; relsq refArrNext_addrRef_11 CONST_-18 1
0000000000002c28 0000000000003d20 0000000000002bc8 ; relsq refArrNext_addrRef_12 CONST_-18 1
0000000000002c30 0000000000003d20 0000000000002be0 ; relsq refArrNext_addrRef_13 CONST_-18 1
0000000000002c40 0000000000003d20 0000000000002bf8 ; relsq refArrNext_addrRef_14 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov refArrNext codeLen tmp
# MSQ_START 1 movneg tmp codeLen
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000002c10 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp codeLen
0000000000003bd8 0000000000003bf0 0000000000002c28 ; relsq tmp codeLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refArrNext tmp
# MSQ_START 2 zero refArrNext
0000000000400000 0000000000400000 0000000000002c40 ; relsq refArrNext refArrNext 1
# MSQ_END 2 zero
# MSQ_START 2 sub refArrNext tmp
0000000000400000 0000000000003bd8 0000000000002c58 ; relsq refArrNext tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 incaddr refArrNext 8
0000000000001c38 0000000000003cf8 0000000000002c70 ; relsq refArrNext_addrRef_0 CONST_-8 1
0000000000001c40 0000000000003cf8 0000000000002c88 ; relsq refArrNext_addrRef_1 CONST_-8 1
0000000000001c50 0000000000003cf8 0000000000002ca0 ; relsq refArrNext_addrRef_2 CONST_-8 1
0000000000001e18 0000000000003cf8 0000000000002cb8 ; relsq refArrNext_addrRef_3 CONST_-8 1
0000000000001e20 0000000000003cf8 0000000000002cd0 ; relsq refArrNext_addrRef_4 CONST_-8 1
0000000000001fc8 0000000000003cf8 0000000000002ce8 ; relsq refArrNext_addrRef_5 CONST_-8 1
0000000000001fd0 0000000000003cf8 0000000000002d00 ; relsq refArrNext_addrRef_6 CONST_-8 1
0000000000001fe0 0000000000003cf8 0000000000002d18 ; relsq refArrNext_addrRef_7 CONST_-8 1
00000000000021c8 0000000000003cf8 0000000000002d30 ; relsq refArrNext_addrRef_8 CONST_-8 1
00000000000028f8 0000000000003cf8 0000000000002d48 ; relsq refArrNext_addrRef_9 CONST_-8 1
0000000000002900 0000000000003cf8 0000000000002d60 ; relsq refArrNext_addrRef_10 CONST_-8 1
0000000000002910 0000000000003cf8 0000000000002d78 ; relsq refArrNext_addrRef_11 CONST_-8 1
0000000000002c28 0000000000003cf8 0000000000002d90 ; relsq refArrNext_addrRef_12 CONST_-8 1
0000000000002c30 0000000000003cf8 0000000000002da8 ; relsq refArrNext_addrRef_13 CONST_-8 1
0000000000002c40 0000000000003cf8 0000000000002dc0 ; relsq refArrNext_addrRef_14 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp WRITE_QWORD
0000000000000000 0000000000000000 0000000000002ef8 ; lblsq ZERO ZERO WRITE_QWORD
# MSQ_END 0 lbljmp


# WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
; label WRITE
; var cur 0
# MSQ_START 0 mul_16 cur tmp
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
0000000000003bd8 0000000000003bd8 0000000000002df0 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000002e08 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000002e20 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000002e38 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000002e50 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp cur
0000000000003bd8 0000000000003c48 0000000000002e68 ; relsq tmp cur 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 0000000000002e80 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 0000000000002e98 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_START 1 sub cur tmp
0000000000003c48 0000000000003bd8 0000000000002eb0 ; relsq cur tmp 1
# MSQ_END 1 sub
# MSQ_END 0 mul_16
# MSQ_START 0 sub cur val
0000000000003c48 0000000000003bf8 0000000000002ec8 ; relsq cur val 1
# MSQ_END 0 sub

# i will turn positive every 16 iterations
; var i -f
# MSQ_START 0 incleq i 1 MAIN
# MSQ_START 1 decleq i -1 MAIN
0000000000003c50 0000000000003c78 0000000000000018 ; lblsq i CONST_-1 MAIN
# MSQ_END 1 decleq
# MSQ_END 0 incleq
# MSQ_START 0 dec i 10
0000000000003c50 0000000000003d00 0000000000002ef8 ; relsq i CONST_10 1
# MSQ_END 0 dec

; label WRITE_QWORD
; addr dstEnd 0
; var bufStart 100000
; addr bufEnd 100000
# Copy to the buffer and increase its address
# The buffer is also intentionally kept negative to ease copying
# MSQ_START 0 movneg bufEnd cur
# MSQ_START 1 zero bufEnd
# MSQ_START 2 sub bufEnd bufEnd
0000000000100000 0000000000100000 0000000000002f10 ; relsq bufEnd bufEnd 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub bufEnd cur
0000000000100000 0000000000003c48 0000000000002f28 ; relsq bufEnd cur 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 zero cur
# MSQ_START 1 sub cur cur
0000000000003c48 0000000000003c48 0000000000002f40 ; relsq cur cur 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr dstEnd -8
0000000000003b28 0000000000003cf8 0000000000002f58 ; relsq dstEnd_addrRef_0 CONST_-8 1
0000000000003b30 0000000000003cf8 0000000000002f70 ; relsq dstEnd_addrRef_1 CONST_-8 1
0000000000003b40 0000000000003cf8 0000000000002f88 ; relsq dstEnd_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decaddr bufEnd -8
0000000000002ef8 0000000000003cf8 0000000000002fa0 ; relsq bufEnd_addrRef_0 CONST_-8 1
0000000000002f00 0000000000003cf8 0000000000002fb8 ; relsq bufEnd_addrRef_1 CONST_-8 1
0000000000002f10 0000000000003cf8 0000000000002fd0 ; relsq bufEnd_addrRef_2 CONST_-8 1
0000000000003b48 0000000000003cf8 0000000000002fe8 ; relsq bufEnd_addrRef_3 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc codeLen 8
# MSQ_START 1 dec codeLen -8
0000000000003bf0 0000000000003cf8 0000000000003000 ; relsq codeLen CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp MAIN
0000000000000000 0000000000000000 0000000000000018 ; lblsq ZERO ZERO MAIN
# MSQ_END 0 lbljmp


# A label/reference is made of two components, adding to a total of 0x20 bytes:
# 0x0 A string containing its name
# 0x18 The offset on which it occured

# RESOLVE_REF resolves references by setting their value to the label's address
; label RESOLVE_REF
; var refsToResolve 0
# MSQ_START 0 mov refsToResolve refCount tmp
# MSQ_START 1 movneg tmp refCount
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000003030 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp refCount
0000000000003bd8 0000000000003c30 0000000000003048 ; relsq tmp refCount 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refsToResolve tmp
# MSQ_START 2 zero refsToResolve
0000000000003c60 0000000000003c60 0000000000003060 ; relsq refsToResolve refsToResolve 1
# MSQ_END 2 zero
# MSQ_START 2 sub refsToResolve tmp
0000000000003c60 0000000000003bd8 0000000000003078 ; relsq refsToResolve tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
; addr curRef 400000

; label RESOLVE_REF_LOOP
# MSQ_START 0 decleq refsToResolve 0 COPY
0000000000003c60 0000000000003ce0 0000000000003a38 ; lblsq refsToResolve CONST_0 COPY
# MSQ_END 0 decleq
# MSQ_START 0 dec refsToResolve 1
0000000000003c60 0000000000003c88 00000000000030a8 ; relsq refsToResolve CONST_1 1
# MSQ_END 0 dec

; addr curFindLabel 0
# MSQ_START 0 setaddr curFindLabel lblArrStart tmp tmp2
# MSQ_START 1 mov tmp curFindLabel_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curFindLabel_addrRef_0
0000000000003be0 0000000000003be0 00000000000030c0 ; relsq tmp2 tmp2 1
0000000000003be0 00000000000032f0 00000000000030d8 ; relsq tmp2 curFindLabel_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000003bd8 0000000000003bd8 00000000000030f0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000003108 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp lblArrStart
0000000000003bd8 0000000000003c18 0000000000003120 ; relsq tmp lblArrStart 1
# MSQ_END 1 sub
00000000000032f0 0000000000003bd8 0000000000003138 ; relsq curFindLabel_addrRef_0 tmp 1
0000000000003590 0000000000003bd8 0000000000003150 ; relsq curFindLabel_addrRef_1 tmp 1
# MSQ_END 0 setaddr

; label RESOLVE_REF_FIND_LABEL
# MSQ_START 0 strcmp_const curRef curFindLabel RESOLVE_REF_FOUND_LABEL tmp tmp2
; addr strcmp_const_0_a 0
# MSQ_START 1 copyaddr strcmp_const_0_a curRef tmp tmp2
# MSQ_START 2 setaddr strcmp_const_0_a curRef_addrRef_0 tmp tmp2
0000000000003be0 0000000000003be0 0000000000003168 ; relsq tmp2 tmp2 1
0000000000003be0 00000000000032a8 0000000000003180 ; relsq tmp2 strcmp_const_0_a_addrRef_0 1
0000000000003bd8 0000000000003bd8 0000000000003198 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000031b0 ; relsq tmp tmp2 1
0000000000003bd8 00000000000038e8 00000000000031c8 ; relsq tmp curRef_addrRef_0 1
00000000000032a8 0000000000003bd8 00000000000031e0 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
00000000000033e0 0000000000003bd8 00000000000031f8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
0000000000003500 0000000000003bd8 0000000000003210 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_0_a 8
00000000000032a8 0000000000003cf8 0000000000003228 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
00000000000033e0 0000000000003cf8 0000000000003240 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
0000000000003500 0000000000003cf8 0000000000003258 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr curFindLabel 8
00000000000032f0 0000000000003cf8 0000000000003270 ; relsq curFindLabel_addrRef_0 CONST_-8 1
0000000000003590 0000000000003cf8 0000000000003288 ; relsq curFindLabel_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_0_a curFindLabel STRCMP_CONST_0_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_a tmp2
0000000000003be0 0000000000003be0 00000000000032a0 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 00000000000032b8 ; relsq tmp2 strcmp_const_0_a 1
0000000000003bd8 0000000000003bd8 00000000000032d0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000032e8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel
0000000000003bd8 0000000000000000 0000000000003300 ; relsq tmp curFindLabel 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
0000000000003be0 0000000000003be0 0000000000003318 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000003330 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000003768 ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
0000000000003bd8 0000000000003c78 0000000000003390 ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
0000000000003bd8 0000000000003c88 0000000000003378 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 00000000000033c0 ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
0000000000003bd8 0000000000003c88 00000000000033a8 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003768 ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_0_len 0
# MSQ_START 1 mov strcmp_const_0_len strcmp_const_0_a tmp
# MSQ_START 2 movneg tmp strcmp_const_0_a
0000000000003bd8 0000000000003bd8 00000000000033d8 ; relsq tmp tmp 1
0000000000003bd8 0000000000000000 00000000000033f0 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_0_len tmp
0000000000003c68 0000000000003c68 0000000000003408 ; relsq strcmp_const_0_len strcmp_const_0_len 1
0000000000003c68 0000000000003bd8 0000000000003420 ; relsq strcmp_const_0_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_0_a 8
00000000000032a8 0000000000003d18 0000000000003438 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
00000000000033e0 0000000000003d18 0000000000003450 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
0000000000003500 0000000000003d18 0000000000003468 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr curFindLabel 8
00000000000032f0 0000000000003d18 0000000000003480 ; relsq curFindLabel_addrRef_0 CONST_8 1
0000000000003590 0000000000003d18 0000000000003498 ; relsq curFindLabel_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0
# MSQ_START 1 setaddr strcmp_const_0_aStr strcmp_const_0_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr_addrRef_0 tmp2
0000000000003be0 0000000000003be0 00000000000034b0 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003608 00000000000034c8 ; relsq tmp2 strcmp_const_0_aStr_addrRef_0 1
0000000000003bd8 0000000000003bd8 00000000000034e0 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 00000000000034f8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_a
0000000000003bd8 0000000000000000 0000000000003510 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 sub
0000000000003608 0000000000003bd8 0000000000003528 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_0_bStr curFindLabel tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_bStr_addrRef_0 tmp2
0000000000003be0 0000000000003be0 0000000000003540 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003650 0000000000003558 ; relsq tmp2 strcmp_const_0_bStr_addrRef_0 1
0000000000003bd8 0000000000003bd8 0000000000003570 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000003588 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel
0000000000003bd8 0000000000000000 00000000000035a0 ; relsq tmp curFindLabel 1
# MSQ_END 2 sub
0000000000003650 0000000000003bd8 00000000000035b8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_0_LOOP
# MSQ_START 1 decleq strcmp_const_0_len 0 RESOLVE_REF_FOUND_LABEL
0000000000003c68 0000000000003ce0 00000000000037e0 ; lblsq strcmp_const_0_len CONST_0 RESOLVE_REF_FOUND_LABEL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_0_len 1
0000000000003c68 0000000000003c88 00000000000035e8 ; relsq strcmp_const_0_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr tmp2
0000000000003be0 0000000000003be0 0000000000003600 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000000000 0000000000003618 ; relsq tmp2 strcmp_const_0_aStr 1
0000000000003bd8 0000000000003bd8 0000000000003630 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000003648 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_bStr
0000000000003bd8 0000000000000000 0000000000003660 ; relsq tmp strcmp_const_0_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_END tmp2
0000000000003be0 0000000000003be0 0000000000003678 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003bd8 0000000000003690 ; relsq tmp2 tmp 1
0000000000003be0 0000000000003c78 0000000000003798 ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
0000000000003bd8 0000000000003c78 00000000000036f0 ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
0000000000003bd8 0000000000003c88 00000000000036d8 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003720 ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
0000000000003bd8 0000000000003c88 0000000000003708 ; relsq tmp CONST_1 1
0000000000000000 0000000000000000 0000000000003798 ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_0_aStr 8
0000000000003608 0000000000003cf8 0000000000003738 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_0_bStr 8
0000000000003650 0000000000003cf8 0000000000003750 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_0_LOOP
0000000000000000 0000000000000000 00000000000035b8 ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_0_REVERT_ADDR
# MSQ_START 1 decaddr curFindLabel 8
00000000000032f0 0000000000003d18 0000000000003780 ; relsq curFindLabel_addrRef_0 CONST_8 1
0000000000003590 0000000000003d18 0000000000003798 ; relsq curFindLabel_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_0_END
# MSQ_END 0 strcmp_const

# This is the wrong label. Try the next one
# MSQ_START 0 incaddr curFindLabel 20
00000000000032f0 0000000000003d28 00000000000037b0 ; relsq curFindLabel_addrRef_0 CONST_-20 1
0000000000003590 0000000000003d28 00000000000037c8 ; relsq curFindLabel_addrRef_1 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp RESOLVE_REF_FIND_LABEL
0000000000000000 0000000000000000 0000000000003150 ; lblsq ZERO ZERO RESOLVE_REF_FIND_LABEL
# MSQ_END 0 lbljmp

; label RESOLVE_REF_FOUND_LABEL
; addr curLabel 0
# MSQ_START 0 copyaddr curLabel curFindLabel tmp tmp2
# MSQ_START 1 setaddr curLabel curFindLabel_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLabel_addrRef_0 tmp2
0000000000003be0 0000000000003be0 00000000000037f8 ; relsq tmp2 tmp2 1
0000000000003be0 0000000000003a10 0000000000003810 ; relsq tmp2 curLabel_addrRef_0 1
0000000000003bd8 0000000000003bd8 0000000000003828 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000003840 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curFindLabel_addrRef_0
0000000000003bd8 00000000000032f0 0000000000003858 ; relsq tmp curFindLabel_addrRef_0 1
# MSQ_END 2 sub
0000000000003a10 0000000000003bd8 0000000000003870 ; relsq curLabel_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 incaddr curLabel 18
0000000000003a10 0000000000003d20 0000000000003888 ; relsq curLabel_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr

# Fetch the reference address and point curRef to the next reference
# MSQ_START 0 incaddr curRef 18
00000000000038e8 0000000000003d20 00000000000038a0 ; relsq curRef_addrRef_0 CONST_-18 1
0000000000003968 0000000000003d20 00000000000038b8 ; relsq curRef_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 add curRef bufStart tmp
# MSQ_START 1 movneg tmp bufStart
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 00000000000038d0 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp bufStart
0000000000003bd8 0000000000003c58 00000000000038e8 ; relsq tmp bufStart 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub curRef tmp
0000000000400000 0000000000003bd8 0000000000003900 ; relsq curRef tmp 1
# MSQ_END 1 sub
# MSQ_END 0 add
; addr refAt 0
# MSQ_START 0 setaddr refAt curRef tmp tmp2
# MSQ_START 1 mov tmp refAt_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 refAt_addrRef_0
0000000000003be0 0000000000003be0 0000000000003918 ; relsq tmp2 tmp2 1
0000000000003be0 00000000000039f0 0000000000003930 ; relsq tmp2 refAt_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
0000000000003bd8 0000000000003bd8 0000000000003948 ; relsq tmp tmp 1
0000000000003bd8 0000000000003be0 0000000000003960 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curRef
0000000000003bd8 0000000000400000 0000000000003978 ; relsq tmp curRef 1
# MSQ_END 1 sub
00000000000039f0 0000000000003bd8 0000000000003990 ; relsq refAt_addrRef_0 tmp 1
00000000000039f8 0000000000003bd8 00000000000039a8 ; relsq refAt_addrRef_1 tmp 1
0000000000003a08 0000000000003bd8 00000000000039c0 ; relsq refAt_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 incaddr curRef 8
00000000000038e8 0000000000003cf8 00000000000039d8 ; relsq curRef_addrRef_0 CONST_-8 1
0000000000003968 0000000000003cf8 00000000000039f0 ; relsq curRef_addrRef_1 CONST_-8 1
# MSQ_END 0 incaddr

# The buffer is kept negative
# MSQ_START 0 movneg refAt curLabel
# MSQ_START 1 zero refAt
# MSQ_START 2 sub refAt refAt
0000000000000000 0000000000000000 0000000000003a08 ; relsq refAt refAt 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 sub refAt curLabel
0000000000000000 0000000000000000 0000000000003a20 ; relsq refAt curLabel 1
# MSQ_END 1 sub
# MSQ_END 0 movneg
# MSQ_START 0 lbljmp RESOLVE_REF_LOOP
0000000000000000 0000000000000000 0000000000003078 ; lblsq ZERO ZERO RESOLVE_REF_LOOP
# MSQ_END 0 lbljmp


# COPY copies the loader to a lower memory (To avoid overwriting) and jumps to the loader
; label COPY
; addr loaderDst 200000
; addr loaderStart 200000
; var loaderLen b0
# MSQ_START 0 mov loaderDst LOADER tmp
# MSQ_START 1 movneg tmp LOADER
# MSQ_START 2 zero tmp
0000000000003bd8 0000000000003bd8 0000000000003a50 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LOADER
0000000000003bd8 0000000000003b28 0000000000003a68 ; relsq tmp LOADER 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg loaderDst tmp
# MSQ_START 2 zero loaderDst
0000000000200000 0000000000200000 0000000000003a80 ; relsq loaderDst loaderDst 1
# MSQ_END 2 zero
# MSQ_START 2 sub loaderDst tmp
0000000000200000 0000000000003bd8 0000000000003a98 ; relsq loaderDst tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr LOADER -8
0000000000003a58 0000000000003cf8 0000000000003ab0 ; relsq LOADER_addrRef_0 CONST_-8 1
# MSQ_END 0 decaddr
# MSQ_START 0 decaddr loaderDst -8
0000000000003a68 0000000000003cf8 0000000000003ac8 ; relsq loaderDst_addrRef_0 CONST_-8 1
0000000000003a70 0000000000003cf8 0000000000003ae0 ; relsq loaderDst_addrRef_1 CONST_-8 1
0000000000003a80 0000000000003cf8 0000000000003af8 ; relsq loaderDst_addrRef_2 CONST_-8 1
# MSQ_END 0 decaddr
# Jump to loaderDst once loaderLen is <= 0
# MSQ_START 0 decleq loaderLen 8 loaderStart
0000000000003c70 0000000000003d18 0000000000200000 ; lblsq loaderLen CONST_8 loaderStart
# MSQ_END 0 decleq
# MSQ_START 0 lbljmp COPY
0000000000000000 0000000000000000 0000000000003a38 ; lblsq ZERO ZERO COPY
# MSQ_END 0 lbljmp


# LOADER copies the buffer to the highest memory (0~...) and jumps to 0
# No external variables are used within LOADER, as those would be overridden by the new program
# The addresses are also hardcoded based on loaderStart
; label LOADER
0000000000000000 0000000000000000 0000000000200018 ; abssq dstEnd dstEnd 200018
0000000000000000 0000000000100000 0000000000200030 ; abssq dstEnd bufEnd 200030
# Decrease bufEnd by 8
0000000000200020 00000000002000a8 0000000000200048 ; raw 0000000000200020 00000000002000a8 0000000000200048
# Decrease dstEnd by 8, and jump to 0 if dstEnd <= 0
0000000000200000 00000000002000a8 0000000000200060 ; raw 0000000000200000 00000000002000a8 0000000000200060
0000000000200008 00000000002000a8 0000000000200078 ; raw 0000000000200008 00000000002000a8 0000000000200078
0000000000200018 00000000002000a8 0000000000000000 ; raw 0000000000200018 00000000002000a8 0000000000000000
# Rerun the loop
0000000000000000 0000000000000000 0000000000200000 ; raw 0000000000000000 0000000000000000 0000000000200000
# CONST_8
0000000000000008 ; raw 0000000000000008

# def_string resMsg1 Resolving reference to 
# def_string resMsg2 Found label 

; var CONST_-1 -1
; var CONST_22 22
; var CONST_1 1
; var CONST_2 2
; var CONST_9 9
; var CONST_A a
; var CONST_3 3
; var CONST_6 6
; var CONST_1A 1a
; var CONST_17 17
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_0 0
; var CONST_26 26
; var CONST_800 800
; var CONST_-8 -8
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_8 8
; var CONST_-18 -18
; var CONST_-20 -20

0000000000000000 ; raw 0000000000000000 # tmp
0000000000000000 ; raw 0000000000000000 # tmp2
0000000001000000 ; raw 0000000001000000 # FREE_START
0000000000000000 ; raw 0000000000000000 # codeLen
0000000000000000 ; raw 0000000000000000 # val
0000000000000000 ; raw 0000000000000000 # c
0000000000000000 ; raw 0000000000000000 # c2
0000000000000000 ; raw 0000000000000000 # isNeg
0000000000300000 ; raw 0000000000300000 # lblArrStart
0000000000000000 ; raw 0000000000000000 # lblCount
0000000000400000 ; raw 0000000000400000 # refArrStart
0000000000000000 ; raw 0000000000000000 # refCount
0000000000000000 ; raw 0000000000000000 # inp_token_0_len
0000000000000000 ; raw 0000000000000000 # inp_token_1_len
0000000000000000 ; raw 0000000000000000 # cur
fffffffffffffff1 ; raw fffffffffffffff1 # i
0000000000100000 ; raw 0000000000100000 # bufStart
0000000000000000 ; raw 0000000000000000 # refsToResolve
0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
00000000000000b0 ; raw 00000000000000b0 # loaderLen
ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
0000000000000022 ; raw 0000000000000022 # CONST_22
0000000000000001 ; raw 0000000000000001 # CONST_1
0000000000000002 ; raw 0000000000000002 # CONST_2
0000000000000009 ; raw 0000000000000009 # CONST_9
000000000000000a ; raw 000000000000000a # CONST_A
0000000000000003 ; raw 0000000000000003 # CONST_3
0000000000000006 ; raw 0000000000000006 # CONST_6
000000000000001a ; raw 000000000000001a # CONST_1A
0000000000000017 ; raw 0000000000000017 # CONST_17
000000000000002c ; raw 000000000000002c # CONST_2C
000000000000002f ; raw 000000000000002f # CONST_2F
0000000000000007 ; raw 0000000000000007 # CONST_7
0000000000000000 ; raw 0000000000000000 # CONST_0
0000000000000026 ; raw 0000000000000026 # CONST_26
0000000000000800 ; raw 0000000000000800 # CONST_800
fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
0000000000000010 ; raw 0000000000000010 # CONST_10
0000000000000020 ; raw 0000000000000020 # CONST_20
000000000000000d ; raw 000000000000000d # CONST_D
0000000000000008 ; raw 0000000000000008 # CONST_8
ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
~
