rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Standard program start
addr ZERO 0
var tmp 0
var tmp2 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
addr CPU_CONTROL_START 13EE0000
lblsq ZERO ZERO EP

label EP
rem MAIN is the main routine for handling inputs
label MAIN
rem val is intentionally kept negative to make it easier to add to cur
var val 0
var c 0
getchar c tmp
rem putchar c tmp

rem Handle NUL ~ "
decleq c 22 MAIN

rem Handle #
decleq c 1 COMMENT

rem Handle $ ~ /
decleq c c MAIN

rem Handle 0 ~ 9
movneg val c
inc val 1
decleq c a WRITE

rem Handle :
decleq c 1 MAIN

rem Handle ;
decleq c 1 COMMENT

rem Handle < ~ @
decleq c 5 MAIN

rem Handle A ~ F
movneg val c
dec val 9
decleq c 6 WRITE

rem Handle G ~ `
decleq c 1a MAIN

rem Handle a ~ f
movneg val c
dec val 9
decleq c 6 WRITE

rem Handle g ~ }
decleq c 17 MAIN

rem Handle ~ and DEL (0x7f)
lbljmp PRINT


rem COMMENT ignores characters until \r or \n is fed
label COMMENT
getchar c tmp
rem putchar c tmp
decleq c 9 COMMENT
rem Handle LF
decleq c 1 MAIN
decleq c 2 COMMENT
rem Handle CR
decleq c 1 MAIN
lbljmp COMMENT


rem WRITE adds the hex character to cur, and copies cur to the buffer + increases its address by 8 every 16 characters
label WRITE
var cur 0
mul_16 cur tmp
sub cur val

rem i will turn positive every 16 iterations
var i -f
incleq i 1 MAIN

rem Copy to the buffer and increase its address
addr bufEnd 100000
var codeLen 0
mov bufEnd cur tmp
zero cur
decaddr bufEnd -8
inc codeLen 8
decleq i 10 MAIN


rem PRINT prints the assembled binary file to the serial
label PRINT

addr charToPrint 100000

rem Start from the most significant byte
set i 8
decaddr charToPrint 8

label PRINT_CHAR_START
decaddr charToPrint -1
mov c charToPrint tmp
mod_256 c tmp tmp2
putchar c tmp
decleq i 1 PRINT_CHAR_END
lbljmp PRINT_CHAR_START

label PRINT_CHAR_END
rem Go to the next qword
decaddr charToPrint -8
decleq codeLen 8 HALT
lbljmp PRINT

label HALT
halt tmp tmp2