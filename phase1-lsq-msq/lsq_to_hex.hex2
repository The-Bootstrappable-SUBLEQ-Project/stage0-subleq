# hex2
# Step 0: Processed 16364 lines
# Step 1: Found 1185 symbols
# Step 2: Now with 1420 symbols and 12056 references
# Step 3: Now with 2240 symbols and 21504 lines
# Step 4: Current size is 275712 bytes
# Copyright (C) 2022 NyanCatTW1
# This file is part of stage0-subleq.

# stage0-subleq is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# stage0-subleq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

# Constants
; addr ZERO 0
; var tmp 0
; var tmp2 0
; var tmp3 0
; addr SERIAL_IN 13ED27E8
; addr SERIAL_OUT 13ED27F0
; addr CPU_CONTROL_START 13EE0000
; var FREE_START 1000000
; var LINE_FEED a
; var SPACE 20

:ZERO :puts_0_str :inp_token_allow_empty_0_str :strcmp_const_0_a :strcmp_const_0_aStr :strcmp_const_0_bStr :strcmp_const_1_a :strcmp_const_1_aStr :strcmp_const_1_bStr :strcmp_const_2_a :strcmp_const_2_aStr :strcmp_const_2_bStr :curLine_step0_other :tmpStr :inp_line_0_str :str_split_0_aBuf :str_split_0_strBuf :str_split_0_partBuf :curLine_step0_newline :strcpy_0_strA :strcpy_0_strB :curLine_step0_rem :inp_line_1_str :puts_1_str :lineCountPrint_step0 :itoa_0_retBuf :itoa_0_retLength :puts_2_str :puts_3_str :curLine_step1 :strcmp_const_3_a :strcmp_const_3_aStr :strcmp_const_3_bStr :strcmp_const_4_a :strcmp_const_4_aStr :strcmp_const_4_bStr :strcmp_const_5_a :strcmp_const_5_aStr :strcmp_const_5_bStr :curTokens_step1 :strcpy_1_strA :strcpy_1_strB :strcmp_const_6_a :strcmp_const_6_aStr :strcmp_const_6_bStr :from_hex_0_a :from_hex_0_strBuf :strcmp_const_7_a :strcmp_const_7_aStr :strcmp_const_7_bStr :from_hex_1_a :from_hex_1_strBuf :puts_4_str :symbolCountPrint_step1 :itoa_1_retBuf :itoa_1_retLength :puts_5_str :puts_6_str :incRefCount_key :incRefCount_it :strcmp_const_8_a :strcmp_const_8_aStr :strcmp_const_8_bStr :memcpy_0_dst :memcpy_0_src :curLine_step2 :strcmp_const_9_a :strcmp_const_9_aStr :strcmp_const_9_bStr :strcmp_const_10_a :strcmp_const_10_aStr :strcmp_const_10_bStr :strcmp_const_11_a :strcmp_const_11_aStr :strcmp_const_11_bStr :strcmp_const_12_a :strcmp_const_12_aStr :strcmp_const_12_bStr :strcmp_const_13_a :strcmp_const_13_aStr :strcmp_const_13_bStr :strcmp_const_14_a :strcmp_const_14_aStr :strcmp_const_14_bStr :puts_7_str :symbolCountPrint_step2 :itoa_2_retBuf :itoa_2_retLength :puts_8_str :puts_9_str :totalRefCountStr_step2 :itoa_3_retBuf :itoa_3_retLength :puts_10_str :puts_11_str :inst_step3 :strcmp_const_15_a :strcmp_const_15_aStr :strcmp_const_15_bStr :strcmp_const_16_a :strcmp_const_16_aStr :strcmp_const_16_bStr :memcpy_1_dst :memcpy_1_src :sym0_step3 :sym1_step3 :addrSymbols_it_step3 :strcmp_const_17_a :strcmp_const_17_aStr :strcmp_const_17_bStr :memcpy_2_dst :memcpy_2_src :stubPrefix_step3 :strcpy_2_strA :strcpy_2_strB :strcpy_3_strA :strcpy_3_strB :symbols_it_step3 :strcmp_const_18_a :strcmp_const_18_aStr :strcmp_const_18_bStr :puts_12_str :puts_13_str :nextId_str_step3 :itoa_4_retBuf :itoa_4_retLength :stubSym_step3 :strcpy_4_strA :strcpy_4_strB :strcpy_5_strA :strcpy_5_strB :memcpy_3_dst :memcpy_3_src :curTokens_step3 :memcpy_4_dst :memcpy_4_src :strcmp_const_19_a :strcmp_const_19_aStr :strcmp_const_19_bStr :memcpy_5_dst :memcpy_5_src :memcpy_6_dst :memcpy_6_src :memcpy_7_dst :memcpy_7_src :puts_14_str :symbolCountPrint_step3 :itoa_5_retBuf :itoa_5_retLength :puts_15_str :puts_16_str :lineCountPrint_step3 :itoa_6_retBuf :itoa_6_retLength :puts_17_str :puts_18_str :curLine_step4 :strcmp_const_20_a :strcmp_const_20_aStr :strcmp_const_20_bStr :strcmp_const_21_a :strcmp_const_21_aStr :strcmp_const_21_bStr :strcmp_const_22_a :strcmp_const_22_aStr :strcmp_const_22_bStr :strcmp_const_23_a :strcmp_const_23_aStr :strcmp_const_23_bStr :strcmp_const_24_a :strcmp_const_24_aStr :strcmp_const_24_bStr :strcmp_const_25_a :strcmp_const_25_aStr :strcmp_const_25_bStr :curSym_step4 :strcmp_const_26_a :strcmp_const_26_aStr :strcmp_const_26_bStr :addrSymbols_it_step4 :strcmp_const_27_a :strcmp_const_27_aStr :strcmp_const_27_bStr :stubPrefix_step4 :strcpy_6_strA :strcpy_6_strB :strcpy_7_strA :strcpy_7_strB :nextId_str_step4 :itoa_7_retBuf :itoa_7_retLength :stubSym_step4 :strcpy_8_strA :strcpy_8_strB :strcpy_9_strA :strcpy_9_strB :symbols_it_step4 :strcmp_const_28_a :strcmp_const_28_aStr :strcmp_const_28_bStr :puts_19_str :puts_20_str :sym0_step4 :symbols_it2_step4 :strcmp_const_29_a :strcmp_const_29_aStr :strcmp_const_29_bStr :puts_21_str :puts_22_str :puts_23_str :sizeStr_step4 :itoa_8_retBuf :itoa_8_retLength :puts_24_str :puts_25_str :symbolsCur_dbg :puts_26_str :puts_27_str :puts_28_str :puts_29_str :puts_30_str :linesPass2Cur_dbg :puts_31_str :puts_32_str :puts_33_str :tokensBuf :puts_34_str :puts_35_str :puts_36_str :puts_37_str &ZERO &ZERO &EP ; lblsq ZERO ZERO EP

; label EP

# Generated from https://www.random.org/colors/hex
# F to whoever is unlucky enough to use this number in their lsq
; var SYM_VAL_PLACEHOLDER 130b197121c2627d
# Dirty, hopefully temporary hack to ensure it can build itself
# MSQ_START 0 inc SYM_VAL_PLACEHOLDER 1
# MSQ_START 1 dec SYM_VAL_PLACEHOLDER -1
:EP &SYM_VAL_PLACEHOLDER &CONST_-1 ?+8 ; relsq SYM_VAL_PLACEHOLDER CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

; var LF a

; var hex_version 0
# MSQ_START 0 getchar tmp tmp2
# MSQ_START 1 set tmp2 1
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
&tmp2 0000000013ed27e8 ?+20 ; relsq tmp2 SERIAL_IN 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 zero SERIAL_IN
# MSQ_START 2 sub SERIAL_IN SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 movneg tmp tmp2
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 getchar
# MSQ_START 0 dec tmp 30
&tmp &CONST_30 ?+8 ; relsq tmp CONST_30 1
# MSQ_END 0 dec
# MSQ_START 0 mov hex_version tmp tmp2
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg hex_version tmp2
# MSQ_START 2 zero hex_version
&hex_version &hex_version ?+8 ; relsq hex_version hex_version 1
# MSQ_END 2 zero
# MSQ_START 2 sub hex_version tmp2
&hex_version &tmp2 ?+8 ; relsq hex_version tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Print the header
# MSQ_START 0 puts HEX_HEADER tmp tmp2
; addr puts_0_str 0
# MSQ_START 1 setaddr puts_0_str HEX_HEADER tmp tmp2
# MSQ_START 2 mov tmp puts_0_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_0_str_addrRef_0 ?+8 ; relsq tmp2 puts_0_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp HEX_HEADER
&tmp :HEX_HEADER_addrRef_0 &HEX_HEADER ?+8 ; relsq tmp HEX_HEADER 1
# MSQ_END 2 sub
&puts_0_str_addrRef_0 &tmp ?+8 ; relsq puts_0_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_0_len 0
# MSQ_START 1 incaddr HEX_HEADER 8
&HEX_HEADER_addrRef_0 &CONST_-8 ?+8 ; relsq HEX_HEADER_addrRef_0 CONST_-8 1
&HEX_HEADER_addrRef_1 &CONST_-8 ?+8 ; relsq HEX_HEADER_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_0_len HEX_HEADER tmp
# MSQ_START 2 movneg tmp HEX_HEADER
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :HEX_HEADER_addrRef_1 &HEX_HEADER ?+8 ; relsq tmp HEX_HEADER 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_0_len tmp
&puts_0_len &puts_0_len ?+8 ; relsq puts_0_len puts_0_len 1
&puts_0_len &tmp ?+8 ; relsq puts_0_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr HEX_HEADER 8
&HEX_HEADER_addrRef_0 &CONST_8 ?+8 ; relsq HEX_HEADER_addrRef_0 CONST_8 1
&HEX_HEADER_addrRef_1 &CONST_8 ?+8 ; relsq HEX_HEADER_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_0_LOOP
# MSQ_START 1 decleq puts_0_len 0 PUTS_0_END
:PUTS_0_LOOP &puts_0_len &CONST_0 &PUTS_0_END ; lblsq puts_0_len CONST_0 PUTS_0_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_0_len 1
&puts_0_len &CONST_1 ?+8 ; relsq puts_0_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_0_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_0_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_0_str_addrRef_0 &puts_0_str ?+8 ; relsq tmp puts_0_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_0_str 8
&puts_0_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_0_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_0_LOOP
&ZERO &ZERO &PUTS_0_LOOP ; lblsq ZERO ZERO PUTS_0_LOOP
# MSQ_END 1 lbljmp
; label PUTS_0_END
# MSQ_END 0 puts
# MSQ_START 0 inc hex_version 30
# MSQ_START 1 dec hex_version -30
:PUTS_0_END &hex_version &CONST_-30 ?+8 ; relsq hex_version CONST_-30 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 putchar hex_version tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp hex_version
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp hex_version
&tmp &hex_version ?+8 ; relsq tmp hex_version 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 dec hex_version 30
&hex_version &CONST_30 ?+8 ; relsq hex_version CONST_30 1
# MSQ_END 0 dec
# MSQ_START 0 putchar LF tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LF
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LF
&tmp &LF ?+8 ; relsq tmp LF 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar


# 0. Parse file into lines
# A Line is made of four components, adding to a total of 0x58 bytes:
# 0x0 String containing the instruction
# 0x18 Array containing the tokens
# 0x38 String containing the comment
# 0x50 The offset of the line in the assembled program
; var linesPass1Begin 100000
; var linesPass1Len 0
; addr curLine_step0 100000

; label STEP0_INPUT_INST
# MSQ_START 0 alloc_str_const curLine_step0 50 tmp
# MSQ_START 1 malloc_const curLine_step0 50 tmp
# MSQ_START 2 malloc curLine_step0 CONST_50 tmp
:STEP0_INPUT_INST &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_addrRef_0 0000000000100000 :curLine_step0_addrRef_1 0000000000100000 ?+8 ; relsq curLine_step0 curLine_step0 1
:curLine_step0_addrRef_2 0000000000100000 &tmp ?+8 ; relsq curLine_step0 tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_50 ?+8 ; relsq tmp CONST_50 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0 8
&curLine_step0_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_0 CONST_-8 1
&curLine_step0_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_1 CONST_-8 1
&curLine_step0_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_2 CONST_-8 1
&curLine_step0_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_3 CONST_-8 1
&curLine_step0_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_4 CONST_-8 1
&curLine_step0_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_5 CONST_-8 1
&curLine_step0_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_6 CONST_-8 1
&curLine_step0_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_7 CONST_-8 1
&curLine_step0_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_8 CONST_-8 1
&curLine_step0_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_9 CONST_-8 1
&curLine_step0_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_10 CONST_-8 1
&curLine_step0_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_11 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0
# MSQ_START 2 sub curLine_step0 curLine_step0
:curLine_step0_addrRef_3 0000000000100000 :curLine_step0_addrRef_4 0000000000100000 ?+8 ; relsq curLine_step0 curLine_step0 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0 8
&curLine_step0_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_0 CONST_-8 1
&curLine_step0_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_1 CONST_-8 1
&curLine_step0_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_2 CONST_-8 1
&curLine_step0_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_3 CONST_-8 1
&curLine_step0_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_4 CONST_-8 1
&curLine_step0_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_5 CONST_-8 1
&curLine_step0_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_6 CONST_-8 1
&curLine_step0_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_7 CONST_-8 1
&curLine_step0_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_8 CONST_-8 1
&curLine_step0_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_9 CONST_-8 1
&curLine_step0_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_10 CONST_-8 1
&curLine_step0_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_11 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0 CONST_50 tmp
# MSQ_START 2 movneg tmp CONST_50
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_50 ?+8 ; relsq tmp CONST_50 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0 tmp
:curLine_step0_addrRef_5 0000000000100000 :curLine_step0_addrRef_6 0000000000100000 ?+8 ; relsq curLine_step0 curLine_step0 1
:curLine_step0_addrRef_7 0000000000100000 &tmp ?+8 ; relsq curLine_step0 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0 10
&curLine_step0_addrRef_0 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_0 CONST_10 1
&curLine_step0_addrRef_1 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_1 CONST_10 1
&curLine_step0_addrRef_2 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_2 CONST_10 1
&curLine_step0_addrRef_3 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_3 CONST_10 1
&curLine_step0_addrRef_4 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_4 CONST_10 1
&curLine_step0_addrRef_5 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_5 CONST_10 1
&curLine_step0_addrRef_6 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_6 CONST_10 1
&curLine_step0_addrRef_7 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_7 CONST_10 1
&curLine_step0_addrRef_8 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_8 CONST_10 1
&curLine_step0_addrRef_9 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_9 CONST_10 1
&curLine_step0_addrRef_10 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_10 CONST_10 1
&curLine_step0_addrRef_11 &CONST_10 ?+8 ; relsq curLine_step0_addrRef_11 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_token_allow_empty curLine_step0 tmp tmp2
; addr inp_token_allow_empty_0_str 0
# MSQ_START 1 setaddr inp_token_allow_empty_0_str curLine_step0 tmp tmp2
# MSQ_START 2 mov tmp inp_token_allow_empty_0_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inp_token_allow_empty_0_str_addrRef_0 ?+8 ; relsq tmp2 inp_token_allow_empty_0_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0
&tmp :curLine_step0_addrRef_8 0000000000100000 ?+8 ; relsq tmp curLine_step0 1
# MSQ_END 2 sub
&inp_token_allow_empty_0_str_addrRef_0 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_0 tmp 1
&inp_token_allow_empty_0_str_addrRef_1 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_1 tmp 1
&inp_token_allow_empty_0_str_addrRef_2 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_2 tmp 1
&inp_token_allow_empty_0_str_addrRef_3 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_3 tmp 1
&inp_token_allow_empty_0_str_addrRef_4 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_4 tmp 1
&inp_token_allow_empty_0_str_addrRef_5 &tmp ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_5 tmp 1
# MSQ_END 1 setaddr
; var inp_token_allow_empty_0_len 0
# MSQ_START 1 zero inp_token_allow_empty_0_len
# MSQ_START 2 sub inp_token_allow_empty_0_len inp_token_allow_empty_0_len
&inp_token_allow_empty_0_len &inp_token_allow_empty_0_len ?+8 ; relsq inp_token_allow_empty_0_len inp_token_allow_empty_0_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_TOKEN_ALLOW_EMPTY_0_LOOP
# MSQ_START 1 getchar inp_token_allow_empty_0_str tmp
# MSQ_START 2 set tmp 1
:INP_TOKEN_ALLOW_EMPTY_0_LOOP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_token_allow_empty_0_str tmp
:inp_token_allow_empty_0_str_addrRef_0 &inp_token_allow_empty_0_str :inp_token_allow_empty_0_str_addrRef_1 &inp_token_allow_empty_0_str ?+8 ; relsq inp_token_allow_empty_0_str inp_token_allow_empty_0_str 1
:inp_token_allow_empty_0_str_addrRef_2 &inp_token_allow_empty_0_str &tmp ?+8 ; relsq inp_token_allow_empty_0_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_token_allow_empty_0_str 20 INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_allow_empty_0_str tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_allow_empty_0_str_addrRef_3 &inp_token_allow_empty_0_str ?+8 ; relsq tmp2 inp_token_allow_empty_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_20
&tmp &CONST_20 ?+8 ; relsq tmp CONST_20 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_ALLOW_EMPTY_0_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_0_END ; lblsq tmp2 CONST_-1 JZ_0_END
&tmp &CONST_-1 &JZ_0_REVERT_A ; lblsq tmp CONST_-1 JZ_0_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_ALLOW_EMPTY_0_TERM ; lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
; label JZ_0_REVERT_A
:JZ_0_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_0_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_allow_empty_0_str d INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_allow_empty_0_str tmp2
:JZ_0_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_allow_empty_0_str_addrRef_4 &inp_token_allow_empty_0_str ?+8 ; relsq tmp2 inp_token_allow_empty_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
&tmp &CONST_D ?+8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_ALLOW_EMPTY_0_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_1_END ; lblsq tmp2 CONST_-1 JZ_1_END
&tmp &CONST_-1 &JZ_1_REVERT_A ; lblsq tmp CONST_-1 JZ_1_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_ALLOW_EMPTY_0_TERM ; lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
; label JZ_1_REVERT_A
:JZ_1_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_1_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_token_allow_empty_0_str a INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_token_allow_empty_0_str tmp2
:JZ_1_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_token_allow_empty_0_str_addrRef_5 &inp_token_allow_empty_0_str ?+8 ; relsq tmp2 inp_token_allow_empty_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
&tmp &CONST_A ?+8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_TOKEN_ALLOW_EMPTY_0_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_2_END ; lblsq tmp2 CONST_-1 JZ_2_END
&tmp &CONST_-1 &JZ_2_REVERT_A ; lblsq tmp CONST_-1 JZ_2_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_TOKEN_ALLOW_EMPTY_0_TERM ; lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
; label JZ_2_REVERT_A
:JZ_2_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_2_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_token_allow_empty_0_len 1
# MSQ_START 2 dec inp_token_allow_empty_0_len -1
:JZ_2_END &inp_token_allow_empty_0_len &CONST_-1 ?+8 ; relsq inp_token_allow_empty_0_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_token_allow_empty_0_str 8
&inp_token_allow_empty_0_str_addrRef_0 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_0 CONST_-8 1
&inp_token_allow_empty_0_str_addrRef_1 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_1 CONST_-8 1
&inp_token_allow_empty_0_str_addrRef_2 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_2 CONST_-8 1
&inp_token_allow_empty_0_str_addrRef_3 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_3 CONST_-8 1
&inp_token_allow_empty_0_str_addrRef_4 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_4 CONST_-8 1
&inp_token_allow_empty_0_str_addrRef_5 &CONST_-8 ?+8 ; relsq inp_token_allow_empty_0_str_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_TOKEN_ALLOW_EMPTY_0_LOOP
&ZERO &ZERO &INP_TOKEN_ALLOW_EMPTY_0_LOOP ; lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_LOOP
# MSQ_END 1 lbljmp
; label INP_TOKEN_ALLOW_EMPTY_0_TERM
# MSQ_START 1 incaddr curLine_step0 8
:INP_TOKEN_ALLOW_EMPTY_0_TERM &curLine_step0_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_0 CONST_-8 1
&curLine_step0_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_1 CONST_-8 1
&curLine_step0_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_2 CONST_-8 1
&curLine_step0_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_3 CONST_-8 1
&curLine_step0_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_4 CONST_-8 1
&curLine_step0_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_5 CONST_-8 1
&curLine_step0_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_6 CONST_-8 1
&curLine_step0_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_7 CONST_-8 1
&curLine_step0_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_8 CONST_-8 1
&curLine_step0_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_9 CONST_-8 1
&curLine_step0_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_10 CONST_-8 1
&curLine_step0_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_addrRef_11 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0 inp_token_allow_empty_0_len tmp
# MSQ_START 2 movneg tmp inp_token_allow_empty_0_len
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &inp_token_allow_empty_0_len ?+8 ; relsq tmp inp_token_allow_empty_0_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0 tmp
:curLine_step0_addrRef_9 0000000000100000 :curLine_step0_addrRef_10 0000000000100000 ?+8 ; relsq curLine_step0 curLine_step0 1
:curLine_step0_addrRef_11 0000000000100000 &tmp ?+8 ; relsq curLine_step0 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0 8
&curLine_step0_addrRef_0 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_0 CONST_8 1
&curLine_step0_addrRef_1 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_1 CONST_8 1
&curLine_step0_addrRef_2 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_2 CONST_8 1
&curLine_step0_addrRef_3 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_3 CONST_8 1
&curLine_step0_addrRef_4 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_4 CONST_8 1
&curLine_step0_addrRef_5 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_5 CONST_8 1
&curLine_step0_addrRef_6 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_6 CONST_8 1
&curLine_step0_addrRef_7 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_7 CONST_8 1
&curLine_step0_addrRef_8 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_8 CONST_8 1
&curLine_step0_addrRef_9 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_9 CONST_8 1
&curLine_step0_addrRef_10 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_10 CONST_8 1
&curLine_step0_addrRef_11 &CONST_8 ?+8 ; relsq curLine_step0_addrRef_11 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_token_allow_empty
# MSQ_START 0 inc linesPass1Len 1
# MSQ_START 1 dec linesPass1Len -1
&linesPass1Len &CONST_-1 ?+8 ; relsq linesPass1Len CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

# MSQ_START 0 strcmp_const curLine_step0 EMPTY_STRING STEP0_HANDLE_NEWLINE tmp tmp2
; addr strcmp_const_0_a 0
# MSQ_START 1 copyaddr strcmp_const_0_a curLine_step0 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_0_a curLine_step0_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
&strcmp_const_0_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_0 tmp 1
&strcmp_const_0_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_1 tmp 1
&strcmp_const_0_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_0_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_0_a 8
&strcmp_const_0_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_-8 1
&strcmp_const_0_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_-8 1
&strcmp_const_0_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr EMPTY_STRING 8
&EMPTY_STRING_addrRef_0 &CONST_-8 ?+8 ; relsq EMPTY_STRING_addrRef_0 CONST_-8 1
&EMPTY_STRING_addrRef_1 &CONST_-8 ?+8 ; relsq EMPTY_STRING_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_0_a EMPTY_STRING STRCMP_CONST_0_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_0_a_addrRef_0 &strcmp_const_0_a ?+8 ; relsq tmp2 strcmp_const_0_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp EMPTY_STRING
&tmp :EMPTY_STRING_addrRef_0 &EMPTY_STRING ?+8 ; relsq tmp EMPTY_STRING 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_0_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
&tmp &CONST_-1 &JNZ_0_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_0_END ; lblsq ZERO ZERO JNZ_0_END
; label JNZ_0_REVERT_AND_JUMP
:JNZ_0_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_0_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
; label JNZ_0_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_0_len 0
# MSQ_START 1 mov strcmp_const_0_len strcmp_const_0_a tmp
# MSQ_START 2 movneg tmp strcmp_const_0_a
:JNZ_0_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_0_a_addrRef_1 &strcmp_const_0_a ?+8 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_0_len tmp
&strcmp_const_0_len &strcmp_const_0_len ?+8 ; relsq strcmp_const_0_len strcmp_const_0_len 1
&strcmp_const_0_len &tmp ?+8 ; relsq strcmp_const_0_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_0_a 8
&strcmp_const_0_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_0 CONST_8 1
&strcmp_const_0_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_1 CONST_8 1
&strcmp_const_0_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_0_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr EMPTY_STRING 8
&EMPTY_STRING_addrRef_0 &CONST_8 ?+8 ; relsq EMPTY_STRING_addrRef_0 CONST_8 1
&EMPTY_STRING_addrRef_1 &CONST_8 ?+8 ; relsq EMPTY_STRING_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_0_aStr 0
; addr strcmp_const_0_bStr 0
# MSQ_START 1 setaddr strcmp_const_0_aStr strcmp_const_0_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_a
&tmp :strcmp_const_0_a_addrRef_2 &strcmp_const_0_a ?+8 ; relsq tmp strcmp_const_0_a 1
# MSQ_END 2 sub
&strcmp_const_0_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_0_bStr EMPTY_STRING tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_0_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_0_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp EMPTY_STRING
&tmp :EMPTY_STRING_addrRef_1 &EMPTY_STRING ?+8 ; relsq tmp EMPTY_STRING 1
# MSQ_END 2 sub
&strcmp_const_0_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_0_LOOP
# MSQ_START 1 decleq strcmp_const_0_len 0 STEP0_HANDLE_NEWLINE
:STRCMP_CONST_0_LOOP &strcmp_const_0_len &CONST_0 &STEP0_HANDLE_NEWLINE ; lblsq strcmp_const_0_len CONST_0 STEP0_HANDLE_NEWLINE
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_0_len 1
&strcmp_const_0_len &CONST_1 ?+8 ; relsq strcmp_const_0_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_0_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_0_aStr_addrRef_0 &strcmp_const_0_aStr ?+8 ; relsq tmp2 strcmp_const_0_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_0_bStr
&tmp :strcmp_const_0_bStr_addrRef_0 &strcmp_const_0_bStr ?+8 ; relsq tmp strcmp_const_0_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_0_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_0_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
&tmp &CONST_-1 &JNZ_1_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_1_END ; lblsq ZERO ZERO JNZ_1_END
; label JNZ_1_REVERT_AND_JUMP
:JNZ_1_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_0_END ; lblsq ZERO ZERO STRCMP_CONST_0_END
; label JNZ_1_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_0_aStr 8
:JNZ_1_END &strcmp_const_0_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_0_bStr 8
&strcmp_const_0_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_0_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_0_LOOP
&ZERO &ZERO &STRCMP_CONST_0_LOOP ; lblsq ZERO ZERO STRCMP_CONST_0_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_0_REVERT_ADDR
# MSQ_START 1 decaddr EMPTY_STRING 8
:STRCMP_CONST_0_REVERT_ADDR &EMPTY_STRING_addrRef_0 &CONST_8 ?+8 ; relsq EMPTY_STRING_addrRef_0 CONST_8 1
&EMPTY_STRING_addrRef_1 &CONST_8 ?+8 ; relsq EMPTY_STRING_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_0_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step0 REM STEP0_HANDLE_REM tmp tmp2
; addr strcmp_const_1_a 0
# MSQ_START 1 copyaddr strcmp_const_1_a curLine_step0 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_1_a curLine_step0_addrRef_0 tmp tmp2
:STRCMP_CONST_0_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_1_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_1_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
&strcmp_const_1_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_1_a_addrRef_0 tmp 1
&strcmp_const_1_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_1_a_addrRef_1 tmp 1
&strcmp_const_1_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_1_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_1_a 8
&strcmp_const_1_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_1_a_addrRef_0 CONST_-8 1
&strcmp_const_1_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_1_a_addrRef_1 CONST_-8 1
&strcmp_const_1_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_1_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr REM 8
&REM_addrRef_0 &CONST_-8 ?+8 ; relsq REM_addrRef_0 CONST_-8 1
&REM_addrRef_1 &CONST_-8 ?+8 ; relsq REM_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_1_a REM STRCMP_CONST_1_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_1_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_1_a_addrRef_0 &strcmp_const_1_a ?+8 ; relsq tmp2 strcmp_const_1_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp REM
&tmp :REM_addrRef_0 &REM ?+8 ; relsq tmp REM 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_1_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_1_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_1_REVERT_ADDR
&tmp &CONST_-1 &JNZ_2_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_2_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_2_END ; lblsq ZERO ZERO JNZ_2_END
; label JNZ_2_REVERT_AND_JUMP
:JNZ_2_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_1_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_1_REVERT_ADDR
; label JNZ_2_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_1_len 0
# MSQ_START 1 mov strcmp_const_1_len strcmp_const_1_a tmp
# MSQ_START 2 movneg tmp strcmp_const_1_a
:JNZ_2_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_1_a_addrRef_1 &strcmp_const_1_a ?+8 ; relsq tmp strcmp_const_1_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_1_len tmp
&strcmp_const_1_len &strcmp_const_1_len ?+8 ; relsq strcmp_const_1_len strcmp_const_1_len 1
&strcmp_const_1_len &tmp ?+8 ; relsq strcmp_const_1_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_1_a 8
&strcmp_const_1_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_1_a_addrRef_0 CONST_8 1
&strcmp_const_1_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_1_a_addrRef_1 CONST_8 1
&strcmp_const_1_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_1_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr REM 8
&REM_addrRef_0 &CONST_8 ?+8 ; relsq REM_addrRef_0 CONST_8 1
&REM_addrRef_1 &CONST_8 ?+8 ; relsq REM_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_1_aStr 0
; addr strcmp_const_1_bStr 0
# MSQ_START 1 setaddr strcmp_const_1_aStr strcmp_const_1_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_1_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_1_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_1_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_1_a
&tmp :strcmp_const_1_a_addrRef_2 &strcmp_const_1_a ?+8 ; relsq tmp strcmp_const_1_a 1
# MSQ_END 2 sub
&strcmp_const_1_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_1_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_1_bStr REM tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_1_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_1_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_1_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp REM
&tmp :REM_addrRef_1 &REM ?+8 ; relsq tmp REM 1
# MSQ_END 2 sub
&strcmp_const_1_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_1_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_1_LOOP
# MSQ_START 1 decleq strcmp_const_1_len 0 STEP0_HANDLE_REM
:STRCMP_CONST_1_LOOP &strcmp_const_1_len &CONST_0 &STEP0_HANDLE_REM ; lblsq strcmp_const_1_len CONST_0 STEP0_HANDLE_REM
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_1_len 1
&strcmp_const_1_len &CONST_1 ?+8 ; relsq strcmp_const_1_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_1_aStr strcmp_const_1_bStr STRCMP_CONST_1_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_1_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_1_aStr_addrRef_0 &strcmp_const_1_aStr ?+8 ; relsq tmp2 strcmp_const_1_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_1_bStr
&tmp :strcmp_const_1_bStr_addrRef_0 &strcmp_const_1_bStr ?+8 ; relsq tmp strcmp_const_1_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_1_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_1_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_1_END
&tmp &CONST_-1 &JNZ_3_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_3_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_3_END ; lblsq ZERO ZERO JNZ_3_END
; label JNZ_3_REVERT_AND_JUMP
:JNZ_3_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_1_END ; lblsq ZERO ZERO STRCMP_CONST_1_END
; label JNZ_3_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_1_aStr 8
:JNZ_3_END &strcmp_const_1_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_1_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_1_bStr 8
&strcmp_const_1_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_1_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_1_LOOP
&ZERO &ZERO &STRCMP_CONST_1_LOOP ; lblsq ZERO ZERO STRCMP_CONST_1_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_1_REVERT_ADDR
# MSQ_START 1 decaddr REM 8
:STRCMP_CONST_1_REVERT_ADDR &REM_addrRef_0 &CONST_8 ?+8 ; relsq REM_addrRef_0 CONST_8 1
&REM_addrRef_1 &CONST_8 ?+8 ; relsq REM_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_1_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step0 END STEP0_END tmp tmp2
; addr strcmp_const_2_a 0
# MSQ_START 1 copyaddr strcmp_const_2_a curLine_step0 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_2_a curLine_step0_addrRef_0 tmp tmp2
:STRCMP_CONST_1_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_2_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_2_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
&strcmp_const_2_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_2_a_addrRef_0 tmp 1
&strcmp_const_2_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_2_a_addrRef_1 tmp 1
&strcmp_const_2_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_2_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_2_a 8
&strcmp_const_2_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_2_a_addrRef_0 CONST_-8 1
&strcmp_const_2_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_2_a_addrRef_1 CONST_-8 1
&strcmp_const_2_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_2_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr END 8
&END_addrRef_0 &CONST_-8 ?+8 ; relsq END_addrRef_0 CONST_-8 1
&END_addrRef_1 &CONST_-8 ?+8 ; relsq END_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_2_a END STRCMP_CONST_2_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_2_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_2_a_addrRef_0 &strcmp_const_2_a ?+8 ; relsq tmp2 strcmp_const_2_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp END
&tmp :END_addrRef_0 &END ?+8 ; relsq tmp END 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_2_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_2_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_2_REVERT_ADDR
&tmp &CONST_-1 &JNZ_4_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_4_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_4_END ; lblsq ZERO ZERO JNZ_4_END
; label JNZ_4_REVERT_AND_JUMP
:JNZ_4_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_2_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_2_REVERT_ADDR
; label JNZ_4_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_2_len 0
# MSQ_START 1 mov strcmp_const_2_len strcmp_const_2_a tmp
# MSQ_START 2 movneg tmp strcmp_const_2_a
:JNZ_4_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_2_a_addrRef_1 &strcmp_const_2_a ?+8 ; relsq tmp strcmp_const_2_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_2_len tmp
&strcmp_const_2_len &strcmp_const_2_len ?+8 ; relsq strcmp_const_2_len strcmp_const_2_len 1
&strcmp_const_2_len &tmp ?+8 ; relsq strcmp_const_2_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_2_a 8
&strcmp_const_2_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_2_a_addrRef_0 CONST_8 1
&strcmp_const_2_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_2_a_addrRef_1 CONST_8 1
&strcmp_const_2_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_2_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr END 8
&END_addrRef_0 &CONST_8 ?+8 ; relsq END_addrRef_0 CONST_8 1
&END_addrRef_1 &CONST_8 ?+8 ; relsq END_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_2_aStr 0
; addr strcmp_const_2_bStr 0
# MSQ_START 1 setaddr strcmp_const_2_aStr strcmp_const_2_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_2_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_2_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_2_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_2_a
&tmp :strcmp_const_2_a_addrRef_2 &strcmp_const_2_a ?+8 ; relsq tmp strcmp_const_2_a 1
# MSQ_END 2 sub
&strcmp_const_2_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_2_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_2_bStr END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_2_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_2_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_2_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp END
&tmp :END_addrRef_1 &END ?+8 ; relsq tmp END 1
# MSQ_END 2 sub
&strcmp_const_2_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_2_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_2_LOOP
# MSQ_START 1 decleq strcmp_const_2_len 0 STEP0_END
:STRCMP_CONST_2_LOOP &strcmp_const_2_len &CONST_0 &STEP0_END ; lblsq strcmp_const_2_len CONST_0 STEP0_END
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_2_len 1
&strcmp_const_2_len &CONST_1 ?+8 ; relsq strcmp_const_2_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_2_aStr strcmp_const_2_bStr STRCMP_CONST_2_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_2_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_2_aStr_addrRef_0 &strcmp_const_2_aStr ?+8 ; relsq tmp2 strcmp_const_2_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_2_bStr
&tmp :strcmp_const_2_bStr_addrRef_0 &strcmp_const_2_bStr ?+8 ; relsq tmp strcmp_const_2_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_2_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_2_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_2_END
&tmp &CONST_-1 &JNZ_5_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_5_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_5_END ; lblsq ZERO ZERO JNZ_5_END
; label JNZ_5_REVERT_AND_JUMP
:JNZ_5_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_2_END ; lblsq ZERO ZERO STRCMP_CONST_2_END
; label JNZ_5_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_2_aStr 8
:JNZ_5_END &strcmp_const_2_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_2_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_2_bStr 8
&strcmp_const_2_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_2_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_2_LOOP
&ZERO &ZERO &STRCMP_CONST_2_LOOP ; lblsq ZERO ZERO STRCMP_CONST_2_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_2_REVERT_ADDR
# MSQ_START 1 decaddr END 8
:STRCMP_CONST_2_REVERT_ADDR &END_addrRef_0 &CONST_8 ?+8 ; relsq END_addrRef_0 CONST_8 1
&END_addrRef_1 &CONST_8 ?+8 ; relsq END_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_2_END
# MSQ_END 0 strcmp_const


# Handle other instructions
; addr curLine_step0_other 0
# MSQ_START 0 copyaddr curLine_step0_other curLine_step0 tmp tmp2
# MSQ_START 1 setaddr curLine_step0_other curLine_step0_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_other_addrRef_0 tmp2
:STRCMP_CONST_2_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_other_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_other_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_addrRef_0
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_other_addrRef_0 &tmp ?+8 ; relsq curLine_step0_other_addrRef_0 tmp 1
&curLine_step0_other_addrRef_1 &tmp ?+8 ; relsq curLine_step0_other_addrRef_1 tmp 1
&curLine_step0_other_addrRef_2 &tmp ?+8 ; relsq curLine_step0_other_addrRef_2 tmp 1
&curLine_step0_other_addrRef_3 &tmp ?+8 ; relsq curLine_step0_other_addrRef_3 tmp 1
&curLine_step0_other_addrRef_4 &tmp ?+8 ; relsq curLine_step0_other_addrRef_4 tmp 1
&curLine_step0_other_addrRef_5 &tmp ?+8 ; relsq curLine_step0_other_addrRef_5 tmp 1
&curLine_step0_other_addrRef_6 &tmp ?+8 ; relsq curLine_step0_other_addrRef_6 tmp 1
&curLine_step0_other_addrRef_7 &tmp ?+8 ; relsq curLine_step0_other_addrRef_7 tmp 1
&curLine_step0_other_addrRef_8 &tmp ?+8 ; relsq curLine_step0_other_addrRef_8 tmp 1
&curLine_step0_other_addrRef_9 &tmp ?+8 ; relsq curLine_step0_other_addrRef_9 tmp 1
&curLine_step0_other_addrRef_10 &tmp ?+8 ; relsq curLine_step0_other_addrRef_10 tmp 1
&curLine_step0_other_addrRef_11 &tmp ?+8 ; relsq curLine_step0_other_addrRef_11 tmp 1
&curLine_step0_other_addrRef_12 &tmp ?+8 ; relsq curLine_step0_other_addrRef_12 tmp 1
&curLine_step0_other_addrRef_13 &tmp ?+8 ; relsq curLine_step0_other_addrRef_13 tmp 1
&curLine_step0_other_addrRef_14 &tmp ?+8 ; relsq curLine_step0_other_addrRef_14 tmp 1
&curLine_step0_other_addrRef_15 &tmp ?+8 ; relsq curLine_step0_other_addrRef_15 tmp 1
&curLine_step0_other_addrRef_16 &tmp ?+8 ; relsq curLine_step0_other_addrRef_16 tmp 1
&curLine_step0_other_addrRef_17 &tmp ?+8 ; relsq curLine_step0_other_addrRef_17 tmp 1
&curLine_step0_other_addrRef_18 &tmp ?+8 ; relsq curLine_step0_other_addrRef_18 tmp 1
&curLine_step0_other_addrRef_19 &tmp ?+8 ; relsq curLine_step0_other_addrRef_19 tmp 1
&curLine_step0_other_addrRef_20 &tmp ?+8 ; relsq curLine_step0_other_addrRef_20 tmp 1
&curLine_step0_other_addrRef_21 &tmp ?+8 ; relsq curLine_step0_other_addrRef_21 tmp 1
&curLine_step0_other_addrRef_22 &tmp ?+8 ; relsq curLine_step0_other_addrRef_22 tmp 1
&curLine_step0_other_addrRef_23 &tmp ?+8 ; relsq curLine_step0_other_addrRef_23 tmp 1
&curLine_step0_other_addrRef_24 &tmp ?+8 ; relsq curLine_step0_other_addrRef_24 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 incaddr curLine_step0_other 18
&curLine_step0_other_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-18 1
&curLine_step0_other_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-18 1
&curLine_step0_other_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-18 1
&curLine_step0_other_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-18 1
&curLine_step0_other_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-18 1
&curLine_step0_other_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-18 1
&curLine_step0_other_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-18 1
&curLine_step0_other_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-18 1
&curLine_step0_other_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-18 1
&curLine_step0_other_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-18 1
&curLine_step0_other_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-18 1
&curLine_step0_other_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-18 1
&curLine_step0_other_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-18 1
&curLine_step0_other_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-18 1
&curLine_step0_other_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-18 1
&curLine_step0_other_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-18 1
&curLine_step0_other_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-18 1
&curLine_step0_other_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-18 1
&curLine_step0_other_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-18 1
&curLine_step0_other_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-18 1
&curLine_step0_other_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-18 1
&curLine_step0_other_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-18 1
&curLine_step0_other_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-18 1
&curLine_step0_other_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-18 1
&curLine_step0_other_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_array curLine_step0_other 18 20 tmp
# MSQ_START 1 malloc_const curLine_step0_other 300 tmp
# MSQ_START 2 malloc curLine_step0_other CONST_300 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_other_addrRef_0 &curLine_step0_other :curLine_step0_other_addrRef_1 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_2 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_300 ?+8 ; relsq tmp CONST_300 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_other
# MSQ_START 2 sub curLine_step0_other curLine_step0_other
:curLine_step0_other_addrRef_3 &curLine_step0_other :curLine_step0_other_addrRef_4 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_other CONST_18 tmp
# MSQ_START 2 movneg tmp CONST_18
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_other tmp
:curLine_step0_other_addrRef_5 &curLine_step0_other :curLine_step0_other_addrRef_6 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_7 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_other CONST_300 tmp
# MSQ_START 2 movneg tmp CONST_300
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_300 ?+8 ; relsq tmp CONST_300 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_other tmp
:curLine_step0_other_addrRef_8 &curLine_step0_other :curLine_step0_other_addrRef_9 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_10 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_other 18
&curLine_step0_other_addrRef_0 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_18 1
&curLine_step0_other_addrRef_1 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_18 1
&curLine_step0_other_addrRef_2 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_18 1
&curLine_step0_other_addrRef_3 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_18 1
&curLine_step0_other_addrRef_4 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_18 1
&curLine_step0_other_addrRef_5 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_18 1
&curLine_step0_other_addrRef_6 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_18 1
&curLine_step0_other_addrRef_7 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_18 1
&curLine_step0_other_addrRef_8 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_18 1
&curLine_step0_other_addrRef_9 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_18 1
&curLine_step0_other_addrRef_10 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_18 1
&curLine_step0_other_addrRef_11 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_18 1
&curLine_step0_other_addrRef_12 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_18 1
&curLine_step0_other_addrRef_13 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_18 1
&curLine_step0_other_addrRef_14 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_18 1
&curLine_step0_other_addrRef_15 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_18 1
&curLine_step0_other_addrRef_16 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_18 1
&curLine_step0_other_addrRef_17 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_18 1
&curLine_step0_other_addrRef_18 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_18 1
&curLine_step0_other_addrRef_19 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_18 1
&curLine_step0_other_addrRef_20 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_18 1
&curLine_step0_other_addrRef_21 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_18 1
&curLine_step0_other_addrRef_22 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_18 1
&curLine_step0_other_addrRef_23 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_18 1
&curLine_step0_other_addrRef_24 &CONST_18 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_18 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_array

# MSQ_START 0 malloc_const tmp 18 tmp2
# MSQ_START 1 malloc tmp CONST_18 tmp2
# MSQ_START 2 mov tmp FREE_START tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 add FREE_START CONST_18 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &CONST_18 ?+8 ; relsq tmp2 CONST_18 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 add
# MSQ_END 1 malloc
# MSQ_END 0 malloc_const
; addr tmpStr 0
# MSQ_START 0 setaddr tmpStr tmp tmp2 tmp3
# MSQ_START 1 mov tmp2 tmpStr_addrRef_0 tmp3
# MSQ_START 2 movneg tmp3 tmpStr_addrRef_0
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmpStr_addrRef_0 ?+8 ; relsq tmp3 tmpStr_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 1 sub
&tmpStr_addrRef_0 &tmp2 ?+8 ; relsq tmpStr_addrRef_0 tmp2 1
&tmpStr_addrRef_1 &tmp2 ?+8 ; relsq tmpStr_addrRef_1 tmp2 1
&tmpStr_addrRef_2 &tmp2 ?+8 ; relsq tmpStr_addrRef_2 tmp2 1
&tmpStr_addrRef_3 &tmp2 ?+8 ; relsq tmpStr_addrRef_3 tmp2 1
&tmpStr_addrRef_4 &tmp2 ?+8 ; relsq tmpStr_addrRef_4 tmp2 1
&tmpStr_addrRef_5 &tmp2 ?+8 ; relsq tmpStr_addrRef_5 tmp2 1
&tmpStr_addrRef_6 &tmp2 ?+8 ; relsq tmpStr_addrRef_6 tmp2 1
&tmpStr_addrRef_7 &tmp2 ?+8 ; relsq tmpStr_addrRef_7 tmp2 1
&tmpStr_addrRef_8 &tmp2 ?+8 ; relsq tmpStr_addrRef_8 tmp2 1
&tmpStr_addrRef_9 &tmp2 ?+8 ; relsq tmpStr_addrRef_9 tmp2 1
&tmpStr_addrRef_10 &tmp2 ?+8 ; relsq tmpStr_addrRef_10 tmp2 1
&tmpStr_addrRef_11 &tmp2 ?+8 ; relsq tmpStr_addrRef_11 tmp2 1
&tmpStr_addrRef_12 &tmp2 ?+8 ; relsq tmpStr_addrRef_12 tmp2 1
&tmpStr_addrRef_13 &tmp2 ?+8 ; relsq tmpStr_addrRef_13 tmp2 1
# MSQ_END 0 setaddr
# MSQ_START 0 alloc_str_const tmpStr 1000 tmp
# MSQ_START 1 malloc_const tmpStr 1000 tmp
# MSQ_START 2 malloc tmpStr CONST_1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:tmpStr_addrRef_0 &tmpStr :tmpStr_addrRef_1 &tmpStr ?+8 ; relsq tmpStr tmpStr 1
:tmpStr_addrRef_2 &tmpStr &tmp ?+8 ; relsq tmpStr tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr tmpStr 8
&tmpStr_addrRef_0 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_0 CONST_-8 1
&tmpStr_addrRef_1 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_1 CONST_-8 1
&tmpStr_addrRef_2 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_2 CONST_-8 1
&tmpStr_addrRef_3 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_3 CONST_-8 1
&tmpStr_addrRef_4 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_4 CONST_-8 1
&tmpStr_addrRef_5 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_5 CONST_-8 1
&tmpStr_addrRef_6 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_6 CONST_-8 1
&tmpStr_addrRef_7 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_7 CONST_-8 1
&tmpStr_addrRef_8 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_8 CONST_-8 1
&tmpStr_addrRef_9 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_9 CONST_-8 1
&tmpStr_addrRef_10 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_10 CONST_-8 1
&tmpStr_addrRef_11 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_11 CONST_-8 1
&tmpStr_addrRef_12 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_12 CONST_-8 1
&tmpStr_addrRef_13 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_13 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero tmpStr
# MSQ_START 2 sub tmpStr tmpStr
:tmpStr_addrRef_3 &tmpStr :tmpStr_addrRef_4 &tmpStr ?+8 ; relsq tmpStr tmpStr 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr tmpStr 8
&tmpStr_addrRef_0 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_0 CONST_-8 1
&tmpStr_addrRef_1 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_1 CONST_-8 1
&tmpStr_addrRef_2 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_2 CONST_-8 1
&tmpStr_addrRef_3 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_3 CONST_-8 1
&tmpStr_addrRef_4 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_4 CONST_-8 1
&tmpStr_addrRef_5 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_5 CONST_-8 1
&tmpStr_addrRef_6 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_6 CONST_-8 1
&tmpStr_addrRef_7 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_7 CONST_-8 1
&tmpStr_addrRef_8 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_8 CONST_-8 1
&tmpStr_addrRef_9 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_9 CONST_-8 1
&tmpStr_addrRef_10 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_10 CONST_-8 1
&tmpStr_addrRef_11 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_11 CONST_-8 1
&tmpStr_addrRef_12 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_12 CONST_-8 1
&tmpStr_addrRef_13 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_13 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov tmpStr CONST_1000 tmp
# MSQ_START 2 movneg tmp CONST_1000
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmpStr tmp
:tmpStr_addrRef_5 &tmpStr :tmpStr_addrRef_6 &tmpStr ?+8 ; relsq tmpStr tmpStr 1
:tmpStr_addrRef_7 &tmpStr &tmp ?+8 ; relsq tmpStr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr tmpStr 10
&tmpStr_addrRef_0 &CONST_10 ?+8 ; relsq tmpStr_addrRef_0 CONST_10 1
&tmpStr_addrRef_1 &CONST_10 ?+8 ; relsq tmpStr_addrRef_1 CONST_10 1
&tmpStr_addrRef_2 &CONST_10 ?+8 ; relsq tmpStr_addrRef_2 CONST_10 1
&tmpStr_addrRef_3 &CONST_10 ?+8 ; relsq tmpStr_addrRef_3 CONST_10 1
&tmpStr_addrRef_4 &CONST_10 ?+8 ; relsq tmpStr_addrRef_4 CONST_10 1
&tmpStr_addrRef_5 &CONST_10 ?+8 ; relsq tmpStr_addrRef_5 CONST_10 1
&tmpStr_addrRef_6 &CONST_10 ?+8 ; relsq tmpStr_addrRef_6 CONST_10 1
&tmpStr_addrRef_7 &CONST_10 ?+8 ; relsq tmpStr_addrRef_7 CONST_10 1
&tmpStr_addrRef_8 &CONST_10 ?+8 ; relsq tmpStr_addrRef_8 CONST_10 1
&tmpStr_addrRef_9 &CONST_10 ?+8 ; relsq tmpStr_addrRef_9 CONST_10 1
&tmpStr_addrRef_10 &CONST_10 ?+8 ; relsq tmpStr_addrRef_10 CONST_10 1
&tmpStr_addrRef_11 &CONST_10 ?+8 ; relsq tmpStr_addrRef_11 CONST_10 1
&tmpStr_addrRef_12 &CONST_10 ?+8 ; relsq tmpStr_addrRef_12 CONST_10 1
&tmpStr_addrRef_13 &CONST_10 ?+8 ; relsq tmpStr_addrRef_13 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_line tmpStr tmp tmp2
; addr inp_line_0_str 0
# MSQ_START 1 setaddr inp_line_0_str tmpStr tmp tmp2
# MSQ_START 2 mov tmp inp_line_0_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inp_line_0_str_addrRef_0 ?+8 ; relsq tmp2 inp_line_0_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp tmpStr
&tmp :tmpStr_addrRef_8 &tmpStr ?+8 ; relsq tmp tmpStr 1
# MSQ_END 2 sub
&inp_line_0_str_addrRef_0 &tmp ?+8 ; relsq inp_line_0_str_addrRef_0 tmp 1
&inp_line_0_str_addrRef_1 &tmp ?+8 ; relsq inp_line_0_str_addrRef_1 tmp 1
&inp_line_0_str_addrRef_2 &tmp ?+8 ; relsq inp_line_0_str_addrRef_2 tmp 1
&inp_line_0_str_addrRef_3 &tmp ?+8 ; relsq inp_line_0_str_addrRef_3 tmp 1
&inp_line_0_str_addrRef_4 &tmp ?+8 ; relsq inp_line_0_str_addrRef_4 tmp 1
# MSQ_END 1 setaddr
; var inp_line_0_len 0
# MSQ_START 1 zero inp_line_0_len
# MSQ_START 2 sub inp_line_0_len inp_line_0_len
&inp_line_0_len &inp_line_0_len ?+8 ; relsq inp_line_0_len inp_line_0_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_LINE_0_LOOP
# MSQ_START 1 getchar inp_line_0_str tmp
# MSQ_START 2 set tmp 1
:INP_LINE_0_LOOP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_line_0_str tmp
:inp_line_0_str_addrRef_0 &inp_line_0_str :inp_line_0_str_addrRef_1 &inp_line_0_str ?+8 ; relsq inp_line_0_str inp_line_0_str 1
:inp_line_0_str_addrRef_2 &inp_line_0_str &tmp ?+8 ; relsq inp_line_0_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_line_0_str d INP_LINE_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_line_0_str tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_line_0_str_addrRef_3 &inp_line_0_str ?+8 ; relsq tmp2 inp_line_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
&tmp &CONST_D ?+8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_LINE_0_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_3_END ; lblsq tmp2 CONST_-1 JZ_3_END
&tmp &CONST_-1 &JZ_3_REVERT_A ; lblsq tmp CONST_-1 JZ_3_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_LINE_0_TERM ; lblsq ZERO ZERO INP_LINE_0_TERM
; label JZ_3_REVERT_A
:JZ_3_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_3_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_line_0_str a INP_LINE_0_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_line_0_str tmp2
:JZ_3_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_line_0_str_addrRef_4 &inp_line_0_str ?+8 ; relsq tmp2 inp_line_0_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
&tmp &CONST_A ?+8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_LINE_0_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_4_END ; lblsq tmp2 CONST_-1 JZ_4_END
&tmp &CONST_-1 &JZ_4_REVERT_A ; lblsq tmp CONST_-1 JZ_4_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_LINE_0_TERM ; lblsq ZERO ZERO INP_LINE_0_TERM
; label JZ_4_REVERT_A
:JZ_4_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_4_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_line_0_len 1
# MSQ_START 2 dec inp_line_0_len -1
:JZ_4_END &inp_line_0_len &CONST_-1 ?+8 ; relsq inp_line_0_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_line_0_str 8
&inp_line_0_str_addrRef_0 &CONST_-8 ?+8 ; relsq inp_line_0_str_addrRef_0 CONST_-8 1
&inp_line_0_str_addrRef_1 &CONST_-8 ?+8 ; relsq inp_line_0_str_addrRef_1 CONST_-8 1
&inp_line_0_str_addrRef_2 &CONST_-8 ?+8 ; relsq inp_line_0_str_addrRef_2 CONST_-8 1
&inp_line_0_str_addrRef_3 &CONST_-8 ?+8 ; relsq inp_line_0_str_addrRef_3 CONST_-8 1
&inp_line_0_str_addrRef_4 &CONST_-8 ?+8 ; relsq inp_line_0_str_addrRef_4 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_LINE_0_LOOP
&ZERO &ZERO &INP_LINE_0_LOOP ; lblsq ZERO ZERO INP_LINE_0_LOOP
# MSQ_END 1 lbljmp
; label INP_LINE_0_TERM
# MSQ_START 1 incaddr tmpStr 8
:INP_LINE_0_TERM &tmpStr_addrRef_0 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_0 CONST_-8 1
&tmpStr_addrRef_1 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_1 CONST_-8 1
&tmpStr_addrRef_2 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_2 CONST_-8 1
&tmpStr_addrRef_3 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_3 CONST_-8 1
&tmpStr_addrRef_4 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_4 CONST_-8 1
&tmpStr_addrRef_5 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_5 CONST_-8 1
&tmpStr_addrRef_6 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_6 CONST_-8 1
&tmpStr_addrRef_7 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_7 CONST_-8 1
&tmpStr_addrRef_8 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_8 CONST_-8 1
&tmpStr_addrRef_9 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_9 CONST_-8 1
&tmpStr_addrRef_10 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_10 CONST_-8 1
&tmpStr_addrRef_11 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_11 CONST_-8 1
&tmpStr_addrRef_12 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_12 CONST_-8 1
&tmpStr_addrRef_13 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_13 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov tmpStr inp_line_0_len tmp
# MSQ_START 2 movneg tmp inp_line_0_len
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &inp_line_0_len ?+8 ; relsq tmp inp_line_0_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmpStr tmp
:tmpStr_addrRef_9 &tmpStr :tmpStr_addrRef_10 &tmpStr ?+8 ; relsq tmpStr tmpStr 1
:tmpStr_addrRef_11 &tmpStr &tmp ?+8 ; relsq tmpStr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr tmpStr 8
&tmpStr_addrRef_0 &CONST_8 ?+8 ; relsq tmpStr_addrRef_0 CONST_8 1
&tmpStr_addrRef_1 &CONST_8 ?+8 ; relsq tmpStr_addrRef_1 CONST_8 1
&tmpStr_addrRef_2 &CONST_8 ?+8 ; relsq tmpStr_addrRef_2 CONST_8 1
&tmpStr_addrRef_3 &CONST_8 ?+8 ; relsq tmpStr_addrRef_3 CONST_8 1
&tmpStr_addrRef_4 &CONST_8 ?+8 ; relsq tmpStr_addrRef_4 CONST_8 1
&tmpStr_addrRef_5 &CONST_8 ?+8 ; relsq tmpStr_addrRef_5 CONST_8 1
&tmpStr_addrRef_6 &CONST_8 ?+8 ; relsq tmpStr_addrRef_6 CONST_8 1
&tmpStr_addrRef_7 &CONST_8 ?+8 ; relsq tmpStr_addrRef_7 CONST_8 1
&tmpStr_addrRef_8 &CONST_8 ?+8 ; relsq tmpStr_addrRef_8 CONST_8 1
&tmpStr_addrRef_9 &CONST_8 ?+8 ; relsq tmpStr_addrRef_9 CONST_8 1
&tmpStr_addrRef_10 &CONST_8 ?+8 ; relsq tmpStr_addrRef_10 CONST_8 1
&tmpStr_addrRef_11 &CONST_8 ?+8 ; relsq tmpStr_addrRef_11 CONST_8 1
&tmpStr_addrRef_12 &CONST_8 ?+8 ; relsq tmpStr_addrRef_12 CONST_8 1
&tmpStr_addrRef_13 &CONST_8 ?+8 ; relsq tmpStr_addrRef_13 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_line
# MSQ_START 0 str_split curLine_step0_other tmpStr SPACE 400 tmp tmp2
; addr str_split_0_aBuf 0
# MSQ_START 1 setaddr str_split_0_aBuf curLine_step0_other tmp tmp2
# MSQ_START 2 mov tmp str_split_0_aBuf_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &str_split_0_aBuf_addrRef_0 ?+8 ; relsq tmp2 str_split_0_aBuf_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_other
&tmp :curLine_step0_other_addrRef_11 &curLine_step0_other ?+8 ; relsq tmp curLine_step0_other 1
# MSQ_END 2 sub
&str_split_0_aBuf_addrRef_0 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_0 tmp 1
&str_split_0_aBuf_addrRef_1 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_1 tmp 1
&str_split_0_aBuf_addrRef_2 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_2 tmp 1
&str_split_0_aBuf_addrRef_3 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_3 tmp 1
&str_split_0_aBuf_addrRef_4 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_4 tmp 1
&str_split_0_aBuf_addrRef_5 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_5 tmp 1
&str_split_0_aBuf_addrRef_6 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_6 tmp 1
&str_split_0_aBuf_addrRef_7 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_7 tmp 1
&str_split_0_aBuf_addrRef_8 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_8 tmp 1
&str_split_0_aBuf_addrRef_9 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_9 tmp 1
&str_split_0_aBuf_addrRef_10 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_10 tmp 1
&str_split_0_aBuf_addrRef_11 &tmp ?+8 ; relsq str_split_0_aBuf_addrRef_11 tmp 1
# MSQ_END 1 setaddr
; addr str_split_0_strBuf 0
# MSQ_START 1 setaddr str_split_0_strBuf tmpStr tmp tmp2
# MSQ_START 2 mov tmp str_split_0_strBuf_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &str_split_0_strBuf_addrRef_0 ?+8 ; relsq tmp2 str_split_0_strBuf_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp tmpStr
&tmp :tmpStr_addrRef_12 &tmpStr ?+8 ; relsq tmp tmpStr 1
# MSQ_END 2 sub
&str_split_0_strBuf_addrRef_0 &tmp ?+8 ; relsq str_split_0_strBuf_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var str_split_0_charsLeft 0
# MSQ_START 1 incaddr tmpStr 8
&tmpStr_addrRef_0 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_0 CONST_-8 1
&tmpStr_addrRef_1 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_1 CONST_-8 1
&tmpStr_addrRef_2 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_2 CONST_-8 1
&tmpStr_addrRef_3 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_3 CONST_-8 1
&tmpStr_addrRef_4 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_4 CONST_-8 1
&tmpStr_addrRef_5 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_5 CONST_-8 1
&tmpStr_addrRef_6 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_6 CONST_-8 1
&tmpStr_addrRef_7 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_7 CONST_-8 1
&tmpStr_addrRef_8 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_8 CONST_-8 1
&tmpStr_addrRef_9 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_9 CONST_-8 1
&tmpStr_addrRef_10 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_10 CONST_-8 1
&tmpStr_addrRef_11 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_11 CONST_-8 1
&tmpStr_addrRef_12 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_12 CONST_-8 1
&tmpStr_addrRef_13 &CONST_-8 ?+8 ; relsq tmpStr_addrRef_13 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov str_split_0_charsLeft tmpStr tmp
# MSQ_START 2 movneg tmp tmpStr
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :tmpStr_addrRef_13 &tmpStr ?+8 ; relsq tmp tmpStr 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg str_split_0_charsLeft tmp
&str_split_0_charsLeft &str_split_0_charsLeft ?+8 ; relsq str_split_0_charsLeft str_split_0_charsLeft 1
&str_split_0_charsLeft &tmp ?+8 ; relsq str_split_0_charsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr tmpStr 8
&tmpStr_addrRef_0 &CONST_8 ?+8 ; relsq tmpStr_addrRef_0 CONST_8 1
&tmpStr_addrRef_1 &CONST_8 ?+8 ; relsq tmpStr_addrRef_1 CONST_8 1
&tmpStr_addrRef_2 &CONST_8 ?+8 ; relsq tmpStr_addrRef_2 CONST_8 1
&tmpStr_addrRef_3 &CONST_8 ?+8 ; relsq tmpStr_addrRef_3 CONST_8 1
&tmpStr_addrRef_4 &CONST_8 ?+8 ; relsq tmpStr_addrRef_4 CONST_8 1
&tmpStr_addrRef_5 &CONST_8 ?+8 ; relsq tmpStr_addrRef_5 CONST_8 1
&tmpStr_addrRef_6 &CONST_8 ?+8 ; relsq tmpStr_addrRef_6 CONST_8 1
&tmpStr_addrRef_7 &CONST_8 ?+8 ; relsq tmpStr_addrRef_7 CONST_8 1
&tmpStr_addrRef_8 &CONST_8 ?+8 ; relsq tmpStr_addrRef_8 CONST_8 1
&tmpStr_addrRef_9 &CONST_8 ?+8 ; relsq tmpStr_addrRef_9 CONST_8 1
&tmpStr_addrRef_10 &CONST_8 ?+8 ; relsq tmpStr_addrRef_10 CONST_8 1
&tmpStr_addrRef_11 &CONST_8 ?+8 ; relsq tmpStr_addrRef_11 CONST_8 1
&tmpStr_addrRef_12 &CONST_8 ?+8 ; relsq tmpStr_addrRef_12 CONST_8 1
&tmpStr_addrRef_13 &CONST_8 ?+8 ; relsq tmpStr_addrRef_13 CONST_8 1
# MSQ_END 1 decaddr
; var str_split_0_partCount 0
# MSQ_START 1 zero str_split_0_partCount
# MSQ_START 2 sub str_split_0_partCount str_split_0_partCount
&str_split_0_partCount &str_split_0_partCount ?+8 ; relsq str_split_0_partCount str_split_0_partCount 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label STR_SPLIT_0_PART_LOOP
# MSQ_START 1 decleq str_split_0_charsLeft 0 STR_SPLIT_0_END_SPLIT
:STR_SPLIT_0_PART_LOOP &str_split_0_charsLeft &CONST_0 &STR_SPLIT_0_END_SPLIT ; lblsq str_split_0_charsLeft CONST_0 STR_SPLIT_0_END_SPLIT
# MSQ_END 1 decleq
# MSQ_START 1 alloc_str_const str_split_0_aBuf 400 tmp
# MSQ_START 2 malloc_const str_split_0_aBuf 400 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:str_split_0_aBuf_addrRef_0 &str_split_0_aBuf :str_split_0_aBuf_addrRef_1 &str_split_0_aBuf ?+8 ; relsq str_split_0_aBuf str_split_0_aBuf 1
:str_split_0_aBuf_addrRef_2 &str_split_0_aBuf &tmp ?+8 ; relsq str_split_0_aBuf tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_400 ?+8 ; relsq tmp CONST_400 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr str_split_0_aBuf 8
&str_split_0_aBuf_addrRef_0 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_0 CONST_-8 1
&str_split_0_aBuf_addrRef_1 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_1 CONST_-8 1
&str_split_0_aBuf_addrRef_2 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_2 CONST_-8 1
&str_split_0_aBuf_addrRef_3 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_3 CONST_-8 1
&str_split_0_aBuf_addrRef_4 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_4 CONST_-8 1
&str_split_0_aBuf_addrRef_5 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_5 CONST_-8 1
&str_split_0_aBuf_addrRef_6 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_6 CONST_-8 1
&str_split_0_aBuf_addrRef_7 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_7 CONST_-8 1
&str_split_0_aBuf_addrRef_8 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_8 CONST_-8 1
&str_split_0_aBuf_addrRef_9 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_9 CONST_-8 1
&str_split_0_aBuf_addrRef_10 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_10 CONST_-8 1
&str_split_0_aBuf_addrRef_11 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_11 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero str_split_0_aBuf
:str_split_0_aBuf_addrRef_3 &str_split_0_aBuf :str_split_0_aBuf_addrRef_4 &str_split_0_aBuf ?+8 ; relsq str_split_0_aBuf str_split_0_aBuf 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr str_split_0_aBuf 8
&str_split_0_aBuf_addrRef_0 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_0 CONST_-8 1
&str_split_0_aBuf_addrRef_1 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_1 CONST_-8 1
&str_split_0_aBuf_addrRef_2 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_2 CONST_-8 1
&str_split_0_aBuf_addrRef_3 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_3 CONST_-8 1
&str_split_0_aBuf_addrRef_4 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_4 CONST_-8 1
&str_split_0_aBuf_addrRef_5 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_5 CONST_-8 1
&str_split_0_aBuf_addrRef_6 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_6 CONST_-8 1
&str_split_0_aBuf_addrRef_7 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_7 CONST_-8 1
&str_split_0_aBuf_addrRef_8 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_8 CONST_-8 1
&str_split_0_aBuf_addrRef_9 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_9 CONST_-8 1
&str_split_0_aBuf_addrRef_10 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_10 CONST_-8 1
&str_split_0_aBuf_addrRef_11 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_11 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov str_split_0_aBuf CONST_400 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_400 ?+8 ; relsq tmp CONST_400 1
:str_split_0_aBuf_addrRef_5 &str_split_0_aBuf :str_split_0_aBuf_addrRef_6 &str_split_0_aBuf ?+8 ; relsq str_split_0_aBuf str_split_0_aBuf 1
:str_split_0_aBuf_addrRef_7 &str_split_0_aBuf &tmp ?+8 ; relsq str_split_0_aBuf tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr str_split_0_aBuf 10
&str_split_0_aBuf_addrRef_0 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_0 CONST_10 1
&str_split_0_aBuf_addrRef_1 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_1 CONST_10 1
&str_split_0_aBuf_addrRef_2 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_2 CONST_10 1
&str_split_0_aBuf_addrRef_3 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_3 CONST_10 1
&str_split_0_aBuf_addrRef_4 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_4 CONST_10 1
&str_split_0_aBuf_addrRef_5 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_5 CONST_10 1
&str_split_0_aBuf_addrRef_6 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_6 CONST_10 1
&str_split_0_aBuf_addrRef_7 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_7 CONST_10 1
&str_split_0_aBuf_addrRef_8 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_8 CONST_10 1
&str_split_0_aBuf_addrRef_9 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_9 CONST_10 1
&str_split_0_aBuf_addrRef_10 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_10 CONST_10 1
&str_split_0_aBuf_addrRef_11 &CONST_10 ?+8 ; relsq str_split_0_aBuf_addrRef_11 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
# MSQ_START 1 inc str_split_0_partCount 1
# MSQ_START 2 dec str_split_0_partCount -1
&str_split_0_partCount &CONST_-1 ?+8 ; relsq str_split_0_partCount CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; var str_split_0_partLen 0
# MSQ_START 1 zero str_split_0_partLen
# MSQ_START 2 sub str_split_0_partLen str_split_0_partLen
&str_split_0_partLen &str_split_0_partLen ?+8 ; relsq str_split_0_partLen str_split_0_partLen 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; addr str_split_0_partBuf 0
# MSQ_START 1 setaddr str_split_0_partBuf str_split_0_aBuf tmp tmp2
# MSQ_START 2 mov tmp str_split_0_partBuf_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &str_split_0_partBuf_addrRef_0 ?+8 ; relsq tmp2 str_split_0_partBuf_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp str_split_0_aBuf
&tmp :str_split_0_aBuf_addrRef_8 &str_split_0_aBuf ?+8 ; relsq tmp str_split_0_aBuf 1
# MSQ_END 2 sub
&str_split_0_partBuf_addrRef_0 &tmp ?+8 ; relsq str_split_0_partBuf_addrRef_0 tmp 1
&str_split_0_partBuf_addrRef_1 &tmp ?+8 ; relsq str_split_0_partBuf_addrRef_1 tmp 1
&str_split_0_partBuf_addrRef_2 &tmp ?+8 ; relsq str_split_0_partBuf_addrRef_2 tmp 1
# MSQ_END 1 setaddr
; label STR_SPLIT_0_CHAR_LOOP
# MSQ_START 1 decleq str_split_0_charsLeft 0 STR_SPLIT_0_END_PART
:STR_SPLIT_0_CHAR_LOOP &str_split_0_charsLeft &CONST_0 &STR_SPLIT_0_END_PART ; lblsq str_split_0_charsLeft CONST_0 STR_SPLIT_0_END_PART
# MSQ_END 1 decleq
# MSQ_START 1 dec str_split_0_charsLeft 1
&str_split_0_charsLeft &CONST_1 ?+8 ; relsq str_split_0_charsLeft CONST_1 1
# MSQ_END 1 dec
; var str_split_0_curChar 0
# MSQ_START 1 mov str_split_0_curChar str_split_0_strBuf tmp
# MSQ_START 2 movneg tmp str_split_0_strBuf
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :str_split_0_strBuf_addrRef_0 &str_split_0_strBuf ?+8 ; relsq tmp str_split_0_strBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg str_split_0_curChar tmp
&str_split_0_curChar &str_split_0_curChar ?+8 ; relsq str_split_0_curChar str_split_0_curChar 1
&str_split_0_curChar &tmp ?+8 ; relsq str_split_0_curChar tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr str_split_0_strBuf 8
&str_split_0_strBuf_addrRef_0 &CONST_-8 ?+8 ; relsq str_split_0_strBuf_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jeq str_split_0_curChar SPACE STR_SPLIT_0_END_PART tmp tmp2
# MSQ_START 2 mov tmp str_split_0_curChar tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &str_split_0_curChar ?+8 ; relsq tmp2 str_split_0_curChar 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SPACE
&tmp &SPACE ?+8 ; relsq tmp SPACE 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp STR_SPLIT_0_END_PART tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_5_END ; lblsq tmp2 CONST_-1 JZ_5_END
&tmp &CONST_-1 &JZ_5_REVERT_A ; lblsq tmp CONST_-1 JZ_5_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STR_SPLIT_0_END_PART ; lblsq ZERO ZERO STR_SPLIT_0_END_PART
; label JZ_5_REVERT_A
:JZ_5_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_5_END
# MSQ_END 2 jz
# MSQ_END 1 jeq
# MSQ_START 1 mov str_split_0_partBuf str_split_0_curChar tmp
# MSQ_START 2 movneg tmp str_split_0_curChar
:JZ_5_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &str_split_0_curChar ?+8 ; relsq tmp str_split_0_curChar 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg str_split_0_partBuf tmp
:str_split_0_partBuf_addrRef_0 &str_split_0_partBuf :str_split_0_partBuf_addrRef_1 &str_split_0_partBuf ?+8 ; relsq str_split_0_partBuf str_split_0_partBuf 1
:str_split_0_partBuf_addrRef_2 &str_split_0_partBuf &tmp ?+8 ; relsq str_split_0_partBuf tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr str_split_0_partBuf 8
&str_split_0_partBuf_addrRef_0 &CONST_-8 ?+8 ; relsq str_split_0_partBuf_addrRef_0 CONST_-8 1
&str_split_0_partBuf_addrRef_1 &CONST_-8 ?+8 ; relsq str_split_0_partBuf_addrRef_1 CONST_-8 1
&str_split_0_partBuf_addrRef_2 &CONST_-8 ?+8 ; relsq str_split_0_partBuf_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc str_split_0_partLen 1
# MSQ_START 2 dec str_split_0_partLen -1
&str_split_0_partLen &CONST_-1 ?+8 ; relsq str_split_0_partLen CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp STR_SPLIT_0_CHAR_LOOP
&ZERO &ZERO &STR_SPLIT_0_CHAR_LOOP ; lblsq ZERO ZERO STR_SPLIT_0_CHAR_LOOP
# MSQ_END 1 lbljmp
; label STR_SPLIT_0_END_PART
# MSQ_START 1 incaddr str_split_0_aBuf 8
:STR_SPLIT_0_END_PART &str_split_0_aBuf_addrRef_0 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_0 CONST_-8 1
&str_split_0_aBuf_addrRef_1 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_1 CONST_-8 1
&str_split_0_aBuf_addrRef_2 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_2 CONST_-8 1
&str_split_0_aBuf_addrRef_3 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_3 CONST_-8 1
&str_split_0_aBuf_addrRef_4 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_4 CONST_-8 1
&str_split_0_aBuf_addrRef_5 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_5 CONST_-8 1
&str_split_0_aBuf_addrRef_6 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_6 CONST_-8 1
&str_split_0_aBuf_addrRef_7 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_7 CONST_-8 1
&str_split_0_aBuf_addrRef_8 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_8 CONST_-8 1
&str_split_0_aBuf_addrRef_9 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_9 CONST_-8 1
&str_split_0_aBuf_addrRef_10 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_10 CONST_-8 1
&str_split_0_aBuf_addrRef_11 &CONST_-8 ?+8 ; relsq str_split_0_aBuf_addrRef_11 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov str_split_0_aBuf str_split_0_partLen tmp
# MSQ_START 2 movneg tmp str_split_0_partLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &str_split_0_partLen ?+8 ; relsq tmp str_split_0_partLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg str_split_0_aBuf tmp
:str_split_0_aBuf_addrRef_9 &str_split_0_aBuf :str_split_0_aBuf_addrRef_10 &str_split_0_aBuf ?+8 ; relsq str_split_0_aBuf str_split_0_aBuf 1
:str_split_0_aBuf_addrRef_11 &str_split_0_aBuf &tmp ?+8 ; relsq str_split_0_aBuf tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr str_split_0_aBuf 10
&str_split_0_aBuf_addrRef_0 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_0 CONST_-10 1
&str_split_0_aBuf_addrRef_1 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_1 CONST_-10 1
&str_split_0_aBuf_addrRef_2 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_2 CONST_-10 1
&str_split_0_aBuf_addrRef_3 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_3 CONST_-10 1
&str_split_0_aBuf_addrRef_4 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_4 CONST_-10 1
&str_split_0_aBuf_addrRef_5 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_5 CONST_-10 1
&str_split_0_aBuf_addrRef_6 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_6 CONST_-10 1
&str_split_0_aBuf_addrRef_7 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_7 CONST_-10 1
&str_split_0_aBuf_addrRef_8 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_8 CONST_-10 1
&str_split_0_aBuf_addrRef_9 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_9 CONST_-10 1
&str_split_0_aBuf_addrRef_10 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_10 CONST_-10 1
&str_split_0_aBuf_addrRef_11 &CONST_-10 ?+8 ; relsq str_split_0_aBuf_addrRef_11 CONST_-10 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STR_SPLIT_0_PART_LOOP
&ZERO &ZERO &STR_SPLIT_0_PART_LOOP ; lblsq ZERO ZERO STR_SPLIT_0_PART_LOOP
# MSQ_END 1 lbljmp
; label STR_SPLIT_0_END_SPLIT
# MSQ_START 1 incaddr curLine_step0_other 8
:STR_SPLIT_0_END_SPLIT &curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_other str_split_0_partCount tmp
# MSQ_START 2 movneg tmp str_split_0_partCount
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &str_split_0_partCount ?+8 ; relsq tmp str_split_0_partCount 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_other tmp
:curLine_step0_other_addrRef_12 &curLine_step0_other :curLine_step0_other_addrRef_13 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_14 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_8 1
&curLine_step0_other_addrRef_1 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_8 1
&curLine_step0_other_addrRef_2 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_8 1
&curLine_step0_other_addrRef_3 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_8 1
&curLine_step0_other_addrRef_4 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_8 1
&curLine_step0_other_addrRef_5 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_8 1
&curLine_step0_other_addrRef_6 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_8 1
&curLine_step0_other_addrRef_7 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_8 1
&curLine_step0_other_addrRef_8 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_8 1
&curLine_step0_other_addrRef_9 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_8 1
&curLine_step0_other_addrRef_10 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_8 1
&curLine_step0_other_addrRef_11 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_8 1
&curLine_step0_other_addrRef_12 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_8 1
&curLine_step0_other_addrRef_13 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_8 1
&curLine_step0_other_addrRef_14 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_8 1
&curLine_step0_other_addrRef_15 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_8 1
&curLine_step0_other_addrRef_16 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_8 1
&curLine_step0_other_addrRef_17 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_8 1
&curLine_step0_other_addrRef_18 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_8 1
&curLine_step0_other_addrRef_19 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_8 1
&curLine_step0_other_addrRef_20 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_8 1
&curLine_step0_other_addrRef_21 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_8 1
&curLine_step0_other_addrRef_22 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_8 1
&curLine_step0_other_addrRef_23 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_8 1
&curLine_step0_other_addrRef_24 &CONST_8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 str_split

# MSQ_START 0 incaddr curLine_step0_other 20
&curLine_step0_other_addrRef_0 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-20 1
&curLine_step0_other_addrRef_1 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-20 1
&curLine_step0_other_addrRef_2 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-20 1
&curLine_step0_other_addrRef_3 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-20 1
&curLine_step0_other_addrRef_4 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-20 1
&curLine_step0_other_addrRef_5 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-20 1
&curLine_step0_other_addrRef_6 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-20 1
&curLine_step0_other_addrRef_7 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-20 1
&curLine_step0_other_addrRef_8 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-20 1
&curLine_step0_other_addrRef_9 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-20 1
&curLine_step0_other_addrRef_10 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-20 1
&curLine_step0_other_addrRef_11 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-20 1
&curLine_step0_other_addrRef_12 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-20 1
&curLine_step0_other_addrRef_13 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-20 1
&curLine_step0_other_addrRef_14 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-20 1
&curLine_step0_other_addrRef_15 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-20 1
&curLine_step0_other_addrRef_16 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-20 1
&curLine_step0_other_addrRef_17 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-20 1
&curLine_step0_other_addrRef_18 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-20 1
&curLine_step0_other_addrRef_19 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-20 1
&curLine_step0_other_addrRef_20 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-20 1
&curLine_step0_other_addrRef_21 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-20 1
&curLine_step0_other_addrRef_22 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-20 1
&curLine_step0_other_addrRef_23 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-20 1
&curLine_step0_other_addrRef_24 &CONST_-20 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_str_const curLine_step0_other 0 tmp
# MSQ_START 1 malloc_const curLine_step0_other 0 tmp
# MSQ_START 2 malloc curLine_step0_other CONST_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_other_addrRef_15 &curLine_step0_other :curLine_step0_other_addrRef_16 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_17 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_other
# MSQ_START 2 sub curLine_step0_other curLine_step0_other
:curLine_step0_other_addrRef_18 &curLine_step0_other :curLine_step0_other_addrRef_19 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_other CONST_0 tmp
# MSQ_START 2 movneg tmp CONST_0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_other tmp
:curLine_step0_other_addrRef_20 &curLine_step0_other :curLine_step0_other_addrRef_21 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
:curLine_step0_other_addrRef_22 &curLine_step0_other &tmp ?+8 ; relsq curLine_step0_other tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_other 10
&curLine_step0_other_addrRef_0 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_10 1
&curLine_step0_other_addrRef_1 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_10 1
&curLine_step0_other_addrRef_2 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_10 1
&curLine_step0_other_addrRef_3 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_10 1
&curLine_step0_other_addrRef_4 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_10 1
&curLine_step0_other_addrRef_5 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_10 1
&curLine_step0_other_addrRef_6 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_10 1
&curLine_step0_other_addrRef_7 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_10 1
&curLine_step0_other_addrRef_8 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_10 1
&curLine_step0_other_addrRef_9 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_10 1
&curLine_step0_other_addrRef_10 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_10 1
&curLine_step0_other_addrRef_11 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_10 1
&curLine_step0_other_addrRef_12 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_10 1
&curLine_step0_other_addrRef_13 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_10 1
&curLine_step0_other_addrRef_14 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_10 1
&curLine_step0_other_addrRef_15 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_10 1
&curLine_step0_other_addrRef_16 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_10 1
&curLine_step0_other_addrRef_17 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_10 1
&curLine_step0_other_addrRef_18 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_10 1
&curLine_step0_other_addrRef_19 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_10 1
&curLine_step0_other_addrRef_20 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_10 1
&curLine_step0_other_addrRef_21 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_10 1
&curLine_step0_other_addrRef_22 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_10 1
&curLine_step0_other_addrRef_23 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_10 1
&curLine_step0_other_addrRef_24 &CONST_10 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const

# MSQ_START 0 incaddr curLine_step0_other 18
&curLine_step0_other_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-18 1
&curLine_step0_other_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-18 1
&curLine_step0_other_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-18 1
&curLine_step0_other_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-18 1
&curLine_step0_other_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-18 1
&curLine_step0_other_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-18 1
&curLine_step0_other_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-18 1
&curLine_step0_other_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-18 1
&curLine_step0_other_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-18 1
&curLine_step0_other_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-18 1
&curLine_step0_other_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-18 1
&curLine_step0_other_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-18 1
&curLine_step0_other_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-18 1
&curLine_step0_other_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-18 1
&curLine_step0_other_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-18 1
&curLine_step0_other_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-18 1
&curLine_step0_other_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-18 1
&curLine_step0_other_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-18 1
&curLine_step0_other_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-18 1
&curLine_step0_other_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-18 1
&curLine_step0_other_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-18 1
&curLine_step0_other_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-18 1
&curLine_step0_other_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-18 1
&curLine_step0_other_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-18 1
&curLine_step0_other_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero curLine_step0_other
# MSQ_START 1 sub curLine_step0_other curLine_step0_other
:curLine_step0_other_addrRef_23 &curLine_step0_other :curLine_step0_other_addrRef_24 &curLine_step0_other ?+8 ; relsq curLine_step0_other curLine_step0_other 1
# MSQ_END 1 sub
# MSQ_END 0 zero

# MSQ_START 0 incaddr curLine_step0_other 8
&curLine_step0_other_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_0 CONST_-8 1
&curLine_step0_other_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_1 CONST_-8 1
&curLine_step0_other_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_2 CONST_-8 1
&curLine_step0_other_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_3 CONST_-8 1
&curLine_step0_other_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_4 CONST_-8 1
&curLine_step0_other_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_5 CONST_-8 1
&curLine_step0_other_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_6 CONST_-8 1
&curLine_step0_other_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_7 CONST_-8 1
&curLine_step0_other_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_8 CONST_-8 1
&curLine_step0_other_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_9 CONST_-8 1
&curLine_step0_other_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_10 CONST_-8 1
&curLine_step0_other_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_11 CONST_-8 1
&curLine_step0_other_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_12 CONST_-8 1
&curLine_step0_other_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_13 CONST_-8 1
&curLine_step0_other_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_14 CONST_-8 1
&curLine_step0_other_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_15 CONST_-8 1
&curLine_step0_other_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_16 CONST_-8 1
&curLine_step0_other_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_17 CONST_-8 1
&curLine_step0_other_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_18 CONST_-8 1
&curLine_step0_other_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_19 CONST_-8 1
&curLine_step0_other_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_20 CONST_-8 1
&curLine_step0_other_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_21 CONST_-8 1
&curLine_step0_other_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_22 CONST_-8 1
&curLine_step0_other_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_23 CONST_-8 1
&curLine_step0_other_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_other_addrRef_24 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 copyaddr curLine_step0 curLine_step0_other tmp tmp2
# MSQ_START 1 setaddr curLine_step0 curLine_step0_other_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_other_addrRef_0
&tmp &curLine_step0_other_addrRef_0 ?+8 ; relsq tmp curLine_step0_other_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_addrRef_0 &tmp ?+8 ; relsq curLine_step0_addrRef_0 tmp 1
&curLine_step0_addrRef_1 &tmp ?+8 ; relsq curLine_step0_addrRef_1 tmp 1
&curLine_step0_addrRef_2 &tmp ?+8 ; relsq curLine_step0_addrRef_2 tmp 1
&curLine_step0_addrRef_3 &tmp ?+8 ; relsq curLine_step0_addrRef_3 tmp 1
&curLine_step0_addrRef_4 &tmp ?+8 ; relsq curLine_step0_addrRef_4 tmp 1
&curLine_step0_addrRef_5 &tmp ?+8 ; relsq curLine_step0_addrRef_5 tmp 1
&curLine_step0_addrRef_6 &tmp ?+8 ; relsq curLine_step0_addrRef_6 tmp 1
&curLine_step0_addrRef_7 &tmp ?+8 ; relsq curLine_step0_addrRef_7 tmp 1
&curLine_step0_addrRef_8 &tmp ?+8 ; relsq curLine_step0_addrRef_8 tmp 1
&curLine_step0_addrRef_9 &tmp ?+8 ; relsq curLine_step0_addrRef_9 tmp 1
&curLine_step0_addrRef_10 &tmp ?+8 ; relsq curLine_step0_addrRef_10 tmp 1
&curLine_step0_addrRef_11 &tmp ?+8 ; relsq curLine_step0_addrRef_11 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 lbljmp STEP0_INPUT_INST
&ZERO &ZERO &STEP0_INPUT_INST ; lblsq ZERO ZERO STEP0_INPUT_INST
# MSQ_END 0 lbljmp


; label STEP0_HANDLE_NEWLINE
; addr curLine_step0_newline 0
# MSQ_START 0 copyaddr curLine_step0_newline curLine_step0 tmp tmp2
# MSQ_START 1 setaddr curLine_step0_newline curLine_step0_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_newline_addrRef_0 tmp2
:STEP0_HANDLE_NEWLINE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_newline_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_newline_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_addrRef_0
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_newline_addrRef_0 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_0 tmp 1
&curLine_step0_newline_addrRef_1 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_1 tmp 1
&curLine_step0_newline_addrRef_2 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_2 tmp 1
&curLine_step0_newline_addrRef_3 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_3 tmp 1
&curLine_step0_newline_addrRef_4 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_4 tmp 1
&curLine_step0_newline_addrRef_5 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_5 tmp 1
&curLine_step0_newline_addrRef_6 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_6 tmp 1
&curLine_step0_newline_addrRef_7 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_7 tmp 1
&curLine_step0_newline_addrRef_8 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_8 tmp 1
&curLine_step0_newline_addrRef_9 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_9 tmp 1
&curLine_step0_newline_addrRef_10 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_10 tmp 1
&curLine_step0_newline_addrRef_11 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_11 tmp 1
&curLine_step0_newline_addrRef_12 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_12 tmp 1
&curLine_step0_newline_addrRef_13 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_13 tmp 1
&curLine_step0_newline_addrRef_14 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_14 tmp 1
&curLine_step0_newline_addrRef_15 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_15 tmp 1
&curLine_step0_newline_addrRef_16 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_16 tmp 1
&curLine_step0_newline_addrRef_17 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_17 tmp 1
&curLine_step0_newline_addrRef_18 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_18 tmp 1
&curLine_step0_newline_addrRef_19 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_19 tmp 1
&curLine_step0_newline_addrRef_20 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_20 tmp 1
&curLine_step0_newline_addrRef_21 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_21 tmp 1
&curLine_step0_newline_addrRef_22 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_22 tmp 1
&curLine_step0_newline_addrRef_23 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_23 tmp 1
&curLine_step0_newline_addrRef_24 &tmp ?+8 ; relsq curLine_step0_newline_addrRef_24 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 strcpy curLine_step0_newline NEWLINE tmp tmp2
; addr strcpy_0_strA 0
# MSQ_START 1 setaddr strcpy_0_strA curLine_step0_newline tmp tmp2
# MSQ_START 2 mov tmp strcpy_0_strA_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_0_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_0_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_newline
&tmp :curLine_step0_newline_addrRef_0 &curLine_step0_newline ?+8 ; relsq tmp curLine_step0_newline 1
# MSQ_END 2 sub
&strcpy_0_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_0_strA_addrRef_0 tmp 1
&strcpy_0_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_0_strA_addrRef_1 tmp 1
&strcpy_0_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_0_strA_addrRef_2 tmp 1
# MSQ_END 1 setaddr
; addr strcpy_0_strB 0
# MSQ_START 1 setaddr strcpy_0_strB NEWLINE tmp tmp2
# MSQ_START 2 mov tmp strcpy_0_strB_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_0_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_0_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp NEWLINE
&tmp :NEWLINE_addrRef_0 &NEWLINE ?+8 ; relsq tmp NEWLINE 1
# MSQ_END 2 sub
&strcpy_0_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_0_strB_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr NEWLINE 8
&NEWLINE_addrRef_0 &CONST_-8 ?+8 ; relsq NEWLINE_addrRef_0 CONST_-8 1
&NEWLINE_addrRef_1 &CONST_-8 ?+8 ; relsq NEWLINE_addrRef_1 CONST_-8 1
&NEWLINE_addrRef_2 &CONST_-8 ?+8 ; relsq NEWLINE_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_newline NEWLINE tmp
# MSQ_START 2 movneg tmp NEWLINE
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :NEWLINE_addrRef_1 &NEWLINE ?+8 ; relsq tmp NEWLINE 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_newline tmp
:curLine_step0_newline_addrRef_1 &curLine_step0_newline :curLine_step0_newline_addrRef_2 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_3 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var strcpy_0_strLen 0
# MSQ_START 1 mov strcpy_0_strLen NEWLINE tmp
# MSQ_START 2 movneg tmp NEWLINE
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :NEWLINE_addrRef_2 &NEWLINE ?+8 ; relsq tmp NEWLINE 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcpy_0_strLen tmp
&strcpy_0_strLen &strcpy_0_strLen ?+8 ; relsq strcpy_0_strLen strcpy_0_strLen 1
&strcpy_0_strLen &tmp ?+8 ; relsq strcpy_0_strLen tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_8 1
&curLine_step0_newline_addrRef_1 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_8 1
&curLine_step0_newline_addrRef_2 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_8 1
&curLine_step0_newline_addrRef_3 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_8 1
&curLine_step0_newline_addrRef_4 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_8 1
&curLine_step0_newline_addrRef_5 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_8 1
&curLine_step0_newline_addrRef_6 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_8 1
&curLine_step0_newline_addrRef_7 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_8 1
&curLine_step0_newline_addrRef_8 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_8 1
&curLine_step0_newline_addrRef_9 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_8 1
&curLine_step0_newline_addrRef_10 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_8 1
&curLine_step0_newline_addrRef_11 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_8 1
&curLine_step0_newline_addrRef_12 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_8 1
&curLine_step0_newline_addrRef_13 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_8 1
&curLine_step0_newline_addrRef_14 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_8 1
&curLine_step0_newline_addrRef_15 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_8 1
&curLine_step0_newline_addrRef_16 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_8 1
&curLine_step0_newline_addrRef_17 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_8 1
&curLine_step0_newline_addrRef_18 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_8 1
&curLine_step0_newline_addrRef_19 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_8 1
&curLine_step0_newline_addrRef_20 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_8 1
&curLine_step0_newline_addrRef_21 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_8 1
&curLine_step0_newline_addrRef_22 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_8 1
&curLine_step0_newline_addrRef_23 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_8 1
&curLine_step0_newline_addrRef_24 &CONST_8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr NEWLINE 8
&NEWLINE_addrRef_0 &CONST_8 ?+8 ; relsq NEWLINE_addrRef_0 CONST_8 1
&NEWLINE_addrRef_1 &CONST_8 ?+8 ; relsq NEWLINE_addrRef_1 CONST_8 1
&NEWLINE_addrRef_2 &CONST_8 ?+8 ; relsq NEWLINE_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
; label STRCPY_0_LOOP
# MSQ_START 1 decleq strcpy_0_strLen 0 STRCPY_0_END
:STRCPY_0_LOOP &strcpy_0_strLen &CONST_0 &STRCPY_0_END ; lblsq strcpy_0_strLen CONST_0 STRCPY_0_END
# MSQ_END 1 decleq
# MSQ_START 1 dec strcpy_0_strLen 1
&strcpy_0_strLen &CONST_1 ?+8 ; relsq strcpy_0_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 mov strcpy_0_strA strcpy_0_strB tmp
# MSQ_START 2 movneg tmp strcpy_0_strB
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_0_strB_addrRef_0 &strcpy_0_strB ?+8 ; relsq tmp strcpy_0_strB 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcpy_0_strA tmp
:strcpy_0_strA_addrRef_0 &strcpy_0_strA :strcpy_0_strA_addrRef_1 &strcpy_0_strA ?+8 ; relsq strcpy_0_strA strcpy_0_strA 1
:strcpy_0_strA_addrRef_2 &strcpy_0_strA &tmp ?+8 ; relsq strcpy_0_strA tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr strcpy_0_strA 8
&strcpy_0_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_0_strA_addrRef_0 CONST_-8 1
&strcpy_0_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_0_strA_addrRef_1 CONST_-8 1
&strcpy_0_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_0_strA_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcpy_0_strB 8
&strcpy_0_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_0_strB_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCPY_0_LOOP
&ZERO &ZERO &STRCPY_0_LOOP ; lblsq ZERO ZERO STRCPY_0_LOOP
# MSQ_END 1 lbljmp
; label STRCPY_0_END
# MSQ_END 0 strcpy

# MSQ_START 0 incaddr curLine_step0_newline 18
:STRCPY_0_END &curLine_step0_newline_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-18 1
&curLine_step0_newline_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-18 1
&curLine_step0_newline_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-18 1
&curLine_step0_newline_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-18 1
&curLine_step0_newline_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-18 1
&curLine_step0_newline_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-18 1
&curLine_step0_newline_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-18 1
&curLine_step0_newline_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-18 1
&curLine_step0_newline_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-18 1
&curLine_step0_newline_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-18 1
&curLine_step0_newline_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-18 1
&curLine_step0_newline_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-18 1
&curLine_step0_newline_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-18 1
&curLine_step0_newline_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-18 1
&curLine_step0_newline_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-18 1
&curLine_step0_newline_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-18 1
&curLine_step0_newline_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-18 1
&curLine_step0_newline_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-18 1
&curLine_step0_newline_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-18 1
&curLine_step0_newline_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-18 1
&curLine_step0_newline_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-18 1
&curLine_step0_newline_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-18 1
&curLine_step0_newline_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-18 1
&curLine_step0_newline_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-18 1
&curLine_step0_newline_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_array curLine_step0_newline 18 0 tmp
# MSQ_START 1 malloc_const curLine_step0_newline 0 tmp
# MSQ_START 2 malloc curLine_step0_newline CONST_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_newline_addrRef_4 &curLine_step0_newline :curLine_step0_newline_addrRef_5 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_6 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_newline
# MSQ_START 2 sub curLine_step0_newline curLine_step0_newline
:curLine_step0_newline_addrRef_7 &curLine_step0_newline :curLine_step0_newline_addrRef_8 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_newline CONST_18 tmp
# MSQ_START 2 movneg tmp CONST_18
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_newline tmp
:curLine_step0_newline_addrRef_9 &curLine_step0_newline :curLine_step0_newline_addrRef_10 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_11 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_newline CONST_0 tmp
# MSQ_START 2 movneg tmp CONST_0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_newline tmp
:curLine_step0_newline_addrRef_12 &curLine_step0_newline :curLine_step0_newline_addrRef_13 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_14 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_newline 18
&curLine_step0_newline_addrRef_0 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_18 1
&curLine_step0_newline_addrRef_1 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_18 1
&curLine_step0_newline_addrRef_2 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_18 1
&curLine_step0_newline_addrRef_3 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_18 1
&curLine_step0_newline_addrRef_4 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_18 1
&curLine_step0_newline_addrRef_5 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_18 1
&curLine_step0_newline_addrRef_6 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_18 1
&curLine_step0_newline_addrRef_7 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_18 1
&curLine_step0_newline_addrRef_8 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_18 1
&curLine_step0_newline_addrRef_9 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_18 1
&curLine_step0_newline_addrRef_10 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_18 1
&curLine_step0_newline_addrRef_11 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_18 1
&curLine_step0_newline_addrRef_12 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_18 1
&curLine_step0_newline_addrRef_13 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_18 1
&curLine_step0_newline_addrRef_14 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_18 1
&curLine_step0_newline_addrRef_15 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_18 1
&curLine_step0_newline_addrRef_16 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_18 1
&curLine_step0_newline_addrRef_17 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_18 1
&curLine_step0_newline_addrRef_18 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_18 1
&curLine_step0_newline_addrRef_19 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_18 1
&curLine_step0_newline_addrRef_20 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_18 1
&curLine_step0_newline_addrRef_21 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_18 1
&curLine_step0_newline_addrRef_22 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_18 1
&curLine_step0_newline_addrRef_23 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_18 1
&curLine_step0_newline_addrRef_24 &CONST_18 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_18 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_array

# MSQ_START 0 incaddr curLine_step0_newline 20
&curLine_step0_newline_addrRef_0 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-20 1
&curLine_step0_newline_addrRef_1 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-20 1
&curLine_step0_newline_addrRef_2 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-20 1
&curLine_step0_newline_addrRef_3 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-20 1
&curLine_step0_newline_addrRef_4 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-20 1
&curLine_step0_newline_addrRef_5 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-20 1
&curLine_step0_newline_addrRef_6 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-20 1
&curLine_step0_newline_addrRef_7 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-20 1
&curLine_step0_newline_addrRef_8 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-20 1
&curLine_step0_newline_addrRef_9 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-20 1
&curLine_step0_newline_addrRef_10 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-20 1
&curLine_step0_newline_addrRef_11 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-20 1
&curLine_step0_newline_addrRef_12 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-20 1
&curLine_step0_newline_addrRef_13 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-20 1
&curLine_step0_newline_addrRef_14 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-20 1
&curLine_step0_newline_addrRef_15 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-20 1
&curLine_step0_newline_addrRef_16 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-20 1
&curLine_step0_newline_addrRef_17 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-20 1
&curLine_step0_newline_addrRef_18 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-20 1
&curLine_step0_newline_addrRef_19 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-20 1
&curLine_step0_newline_addrRef_20 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-20 1
&curLine_step0_newline_addrRef_21 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-20 1
&curLine_step0_newline_addrRef_22 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-20 1
&curLine_step0_newline_addrRef_23 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-20 1
&curLine_step0_newline_addrRef_24 &CONST_-20 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_str_const curLine_step0_newline 0 tmp
# MSQ_START 1 malloc_const curLine_step0_newline 0 tmp
# MSQ_START 2 malloc curLine_step0_newline CONST_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_newline_addrRef_15 &curLine_step0_newline :curLine_step0_newline_addrRef_16 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_17 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_newline
# MSQ_START 2 sub curLine_step0_newline curLine_step0_newline
:curLine_step0_newline_addrRef_18 &curLine_step0_newline :curLine_step0_newline_addrRef_19 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_newline CONST_0 tmp
# MSQ_START 2 movneg tmp CONST_0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_newline tmp
:curLine_step0_newline_addrRef_20 &curLine_step0_newline :curLine_step0_newline_addrRef_21 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
:curLine_step0_newline_addrRef_22 &curLine_step0_newline &tmp ?+8 ; relsq curLine_step0_newline tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_newline 10
&curLine_step0_newline_addrRef_0 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_10 1
&curLine_step0_newline_addrRef_1 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_10 1
&curLine_step0_newline_addrRef_2 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_10 1
&curLine_step0_newline_addrRef_3 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_10 1
&curLine_step0_newline_addrRef_4 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_10 1
&curLine_step0_newline_addrRef_5 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_10 1
&curLine_step0_newline_addrRef_6 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_10 1
&curLine_step0_newline_addrRef_7 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_10 1
&curLine_step0_newline_addrRef_8 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_10 1
&curLine_step0_newline_addrRef_9 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_10 1
&curLine_step0_newline_addrRef_10 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_10 1
&curLine_step0_newline_addrRef_11 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_10 1
&curLine_step0_newline_addrRef_12 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_10 1
&curLine_step0_newline_addrRef_13 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_10 1
&curLine_step0_newline_addrRef_14 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_10 1
&curLine_step0_newline_addrRef_15 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_10 1
&curLine_step0_newline_addrRef_16 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_10 1
&curLine_step0_newline_addrRef_17 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_10 1
&curLine_step0_newline_addrRef_18 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_10 1
&curLine_step0_newline_addrRef_19 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_10 1
&curLine_step0_newline_addrRef_20 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_10 1
&curLine_step0_newline_addrRef_21 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_10 1
&curLine_step0_newline_addrRef_22 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_10 1
&curLine_step0_newline_addrRef_23 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_10 1
&curLine_step0_newline_addrRef_24 &CONST_10 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const

# MSQ_START 0 incaddr curLine_step0_newline 18
&curLine_step0_newline_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-18 1
&curLine_step0_newline_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-18 1
&curLine_step0_newline_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-18 1
&curLine_step0_newline_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-18 1
&curLine_step0_newline_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-18 1
&curLine_step0_newline_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-18 1
&curLine_step0_newline_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-18 1
&curLine_step0_newline_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-18 1
&curLine_step0_newline_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-18 1
&curLine_step0_newline_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-18 1
&curLine_step0_newline_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-18 1
&curLine_step0_newline_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-18 1
&curLine_step0_newline_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-18 1
&curLine_step0_newline_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-18 1
&curLine_step0_newline_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-18 1
&curLine_step0_newline_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-18 1
&curLine_step0_newline_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-18 1
&curLine_step0_newline_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-18 1
&curLine_step0_newline_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-18 1
&curLine_step0_newline_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-18 1
&curLine_step0_newline_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-18 1
&curLine_step0_newline_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-18 1
&curLine_step0_newline_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-18 1
&curLine_step0_newline_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-18 1
&curLine_step0_newline_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero curLine_step0_newline
# MSQ_START 1 sub curLine_step0_newline curLine_step0_newline
:curLine_step0_newline_addrRef_23 &curLine_step0_newline :curLine_step0_newline_addrRef_24 &curLine_step0_newline ?+8 ; relsq curLine_step0_newline curLine_step0_newline 1
# MSQ_END 1 sub
# MSQ_END 0 zero

# MSQ_START 0 incaddr curLine_step0_newline 8
&curLine_step0_newline_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_0 CONST_-8 1
&curLine_step0_newline_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_1 CONST_-8 1
&curLine_step0_newline_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_2 CONST_-8 1
&curLine_step0_newline_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_3 CONST_-8 1
&curLine_step0_newline_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_4 CONST_-8 1
&curLine_step0_newline_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_5 CONST_-8 1
&curLine_step0_newline_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_6 CONST_-8 1
&curLine_step0_newline_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_7 CONST_-8 1
&curLine_step0_newline_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_8 CONST_-8 1
&curLine_step0_newline_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_9 CONST_-8 1
&curLine_step0_newline_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_10 CONST_-8 1
&curLine_step0_newline_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_11 CONST_-8 1
&curLine_step0_newline_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_12 CONST_-8 1
&curLine_step0_newline_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_13 CONST_-8 1
&curLine_step0_newline_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_14 CONST_-8 1
&curLine_step0_newline_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_15 CONST_-8 1
&curLine_step0_newline_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_16 CONST_-8 1
&curLine_step0_newline_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_17 CONST_-8 1
&curLine_step0_newline_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_18 CONST_-8 1
&curLine_step0_newline_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_19 CONST_-8 1
&curLine_step0_newline_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_20 CONST_-8 1
&curLine_step0_newline_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_21 CONST_-8 1
&curLine_step0_newline_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_22 CONST_-8 1
&curLine_step0_newline_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_23 CONST_-8 1
&curLine_step0_newline_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_newline_addrRef_24 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 copyaddr curLine_step0 curLine_step0_newline tmp tmp2
# MSQ_START 1 setaddr curLine_step0 curLine_step0_newline_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_newline_addrRef_0
&tmp &curLine_step0_newline_addrRef_0 ?+8 ; relsq tmp curLine_step0_newline_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_addrRef_0 &tmp ?+8 ; relsq curLine_step0_addrRef_0 tmp 1
&curLine_step0_addrRef_1 &tmp ?+8 ; relsq curLine_step0_addrRef_1 tmp 1
&curLine_step0_addrRef_2 &tmp ?+8 ; relsq curLine_step0_addrRef_2 tmp 1
&curLine_step0_addrRef_3 &tmp ?+8 ; relsq curLine_step0_addrRef_3 tmp 1
&curLine_step0_addrRef_4 &tmp ?+8 ; relsq curLine_step0_addrRef_4 tmp 1
&curLine_step0_addrRef_5 &tmp ?+8 ; relsq curLine_step0_addrRef_5 tmp 1
&curLine_step0_addrRef_6 &tmp ?+8 ; relsq curLine_step0_addrRef_6 tmp 1
&curLine_step0_addrRef_7 &tmp ?+8 ; relsq curLine_step0_addrRef_7 tmp 1
&curLine_step0_addrRef_8 &tmp ?+8 ; relsq curLine_step0_addrRef_8 tmp 1
&curLine_step0_addrRef_9 &tmp ?+8 ; relsq curLine_step0_addrRef_9 tmp 1
&curLine_step0_addrRef_10 &tmp ?+8 ; relsq curLine_step0_addrRef_10 tmp 1
&curLine_step0_addrRef_11 &tmp ?+8 ; relsq curLine_step0_addrRef_11 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 lbljmp STEP0_INPUT_INST
&ZERO &ZERO &STEP0_INPUT_INST ; lblsq ZERO ZERO STEP0_INPUT_INST
# MSQ_END 0 lbljmp


; label STEP0_HANDLE_REM
; addr curLine_step0_rem 0
# MSQ_START 0 copyaddr curLine_step0_rem curLine_step0 tmp tmp2
# MSQ_START 1 setaddr curLine_step0_rem curLine_step0_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_rem_addrRef_0 tmp2
:STEP0_HANDLE_REM &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_rem_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_rem_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_addrRef_0
&tmp &curLine_step0_addrRef_0 ?+8 ; relsq tmp curLine_step0_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_rem_addrRef_0 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_0 tmp 1
&curLine_step0_rem_addrRef_1 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_1 tmp 1
&curLine_step0_rem_addrRef_2 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_2 tmp 1
&curLine_step0_rem_addrRef_3 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_3 tmp 1
&curLine_step0_rem_addrRef_4 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_4 tmp 1
&curLine_step0_rem_addrRef_5 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_5 tmp 1
&curLine_step0_rem_addrRef_6 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_6 tmp 1
&curLine_step0_rem_addrRef_7 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_7 tmp 1
&curLine_step0_rem_addrRef_8 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_8 tmp 1
&curLine_step0_rem_addrRef_9 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_9 tmp 1
&curLine_step0_rem_addrRef_10 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_10 tmp 1
&curLine_step0_rem_addrRef_11 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_11 tmp 1
&curLine_step0_rem_addrRef_12 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_12 tmp 1
&curLine_step0_rem_addrRef_13 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_13 tmp 1
&curLine_step0_rem_addrRef_14 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_14 tmp 1
&curLine_step0_rem_addrRef_15 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_15 tmp 1
&curLine_step0_rem_addrRef_16 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_16 tmp 1
&curLine_step0_rem_addrRef_17 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_17 tmp 1
&curLine_step0_rem_addrRef_18 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_18 tmp 1
&curLine_step0_rem_addrRef_19 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_19 tmp 1
&curLine_step0_rem_addrRef_20 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_20 tmp 1
&curLine_step0_rem_addrRef_21 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_21 tmp 1
&curLine_step0_rem_addrRef_22 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_22 tmp 1
&curLine_step0_rem_addrRef_23 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_23 tmp 1
&curLine_step0_rem_addrRef_24 &tmp ?+8 ; relsq curLine_step0_rem_addrRef_24 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 incaddr curLine_step0_rem 18
&curLine_step0_rem_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-18 1
&curLine_step0_rem_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-18 1
&curLine_step0_rem_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-18 1
&curLine_step0_rem_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-18 1
&curLine_step0_rem_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-18 1
&curLine_step0_rem_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-18 1
&curLine_step0_rem_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-18 1
&curLine_step0_rem_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-18 1
&curLine_step0_rem_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-18 1
&curLine_step0_rem_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-18 1
&curLine_step0_rem_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-18 1
&curLine_step0_rem_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-18 1
&curLine_step0_rem_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-18 1
&curLine_step0_rem_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-18 1
&curLine_step0_rem_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-18 1
&curLine_step0_rem_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-18 1
&curLine_step0_rem_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-18 1
&curLine_step0_rem_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-18 1
&curLine_step0_rem_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-18 1
&curLine_step0_rem_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-18 1
&curLine_step0_rem_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-18 1
&curLine_step0_rem_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-18 1
&curLine_step0_rem_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-18 1
&curLine_step0_rem_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-18 1
&curLine_step0_rem_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_array curLine_step0_rem 18 0 tmp
# MSQ_START 1 malloc_const curLine_step0_rem 0 tmp
# MSQ_START 2 malloc curLine_step0_rem CONST_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_rem_addrRef_0 &curLine_step0_rem :curLine_step0_rem_addrRef_1 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_2 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_rem
# MSQ_START 2 sub curLine_step0_rem curLine_step0_rem
:curLine_step0_rem_addrRef_3 &curLine_step0_rem :curLine_step0_rem_addrRef_4 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_rem CONST_18 tmp
# MSQ_START 2 movneg tmp CONST_18
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_rem tmp
:curLine_step0_rem_addrRef_5 &curLine_step0_rem :curLine_step0_rem_addrRef_6 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_7 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_rem CONST_0 tmp
# MSQ_START 2 movneg tmp CONST_0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_rem tmp
:curLine_step0_rem_addrRef_8 &curLine_step0_rem :curLine_step0_rem_addrRef_9 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_10 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_rem 18
&curLine_step0_rem_addrRef_0 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_18 1
&curLine_step0_rem_addrRef_1 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_18 1
&curLine_step0_rem_addrRef_2 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_18 1
&curLine_step0_rem_addrRef_3 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_18 1
&curLine_step0_rem_addrRef_4 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_18 1
&curLine_step0_rem_addrRef_5 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_18 1
&curLine_step0_rem_addrRef_6 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_18 1
&curLine_step0_rem_addrRef_7 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_18 1
&curLine_step0_rem_addrRef_8 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_18 1
&curLine_step0_rem_addrRef_9 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_18 1
&curLine_step0_rem_addrRef_10 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_18 1
&curLine_step0_rem_addrRef_11 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_18 1
&curLine_step0_rem_addrRef_12 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_18 1
&curLine_step0_rem_addrRef_13 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_18 1
&curLine_step0_rem_addrRef_14 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_18 1
&curLine_step0_rem_addrRef_15 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_18 1
&curLine_step0_rem_addrRef_16 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_18 1
&curLine_step0_rem_addrRef_17 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_18 1
&curLine_step0_rem_addrRef_18 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_18 1
&curLine_step0_rem_addrRef_19 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_18 1
&curLine_step0_rem_addrRef_20 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_18 1
&curLine_step0_rem_addrRef_21 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_18 1
&curLine_step0_rem_addrRef_22 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_18 1
&curLine_step0_rem_addrRef_23 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_18 1
&curLine_step0_rem_addrRef_24 &CONST_18 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_18 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_array

# MSQ_START 0 incaddr curLine_step0_rem 20
&curLine_step0_rem_addrRef_0 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-20 1
&curLine_step0_rem_addrRef_1 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-20 1
&curLine_step0_rem_addrRef_2 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-20 1
&curLine_step0_rem_addrRef_3 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-20 1
&curLine_step0_rem_addrRef_4 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-20 1
&curLine_step0_rem_addrRef_5 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-20 1
&curLine_step0_rem_addrRef_6 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-20 1
&curLine_step0_rem_addrRef_7 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-20 1
&curLine_step0_rem_addrRef_8 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-20 1
&curLine_step0_rem_addrRef_9 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-20 1
&curLine_step0_rem_addrRef_10 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-20 1
&curLine_step0_rem_addrRef_11 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-20 1
&curLine_step0_rem_addrRef_12 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-20 1
&curLine_step0_rem_addrRef_13 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-20 1
&curLine_step0_rem_addrRef_14 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-20 1
&curLine_step0_rem_addrRef_15 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-20 1
&curLine_step0_rem_addrRef_16 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-20 1
&curLine_step0_rem_addrRef_17 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-20 1
&curLine_step0_rem_addrRef_18 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-20 1
&curLine_step0_rem_addrRef_19 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-20 1
&curLine_step0_rem_addrRef_20 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-20 1
&curLine_step0_rem_addrRef_21 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-20 1
&curLine_step0_rem_addrRef_22 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-20 1
&curLine_step0_rem_addrRef_23 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-20 1
&curLine_step0_rem_addrRef_24 &CONST_-20 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_str_const curLine_step0_rem 1000 tmp
# MSQ_START 1 malloc_const curLine_step0_rem 1000 tmp
# MSQ_START 2 malloc curLine_step0_rem CONST_1000 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLine_step0_rem_addrRef_11 &curLine_step0_rem :curLine_step0_rem_addrRef_12 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_13 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLine_step0_rem
# MSQ_START 2 sub curLine_step0_rem curLine_step0_rem
:curLine_step0_rem_addrRef_14 &curLine_step0_rem :curLine_step0_rem_addrRef_15 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_rem CONST_1000 tmp
# MSQ_START 2 movneg tmp CONST_1000
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_1000 ?+8 ; relsq tmp CONST_1000 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_rem tmp
:curLine_step0_rem_addrRef_16 &curLine_step0_rem :curLine_step0_rem_addrRef_17 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_18 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_rem 10
&curLine_step0_rem_addrRef_0 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_10 1
&curLine_step0_rem_addrRef_1 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_10 1
&curLine_step0_rem_addrRef_2 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_10 1
&curLine_step0_rem_addrRef_3 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_10 1
&curLine_step0_rem_addrRef_4 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_10 1
&curLine_step0_rem_addrRef_5 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_10 1
&curLine_step0_rem_addrRef_6 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_10 1
&curLine_step0_rem_addrRef_7 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_10 1
&curLine_step0_rem_addrRef_8 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_10 1
&curLine_step0_rem_addrRef_9 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_10 1
&curLine_step0_rem_addrRef_10 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_10 1
&curLine_step0_rem_addrRef_11 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_10 1
&curLine_step0_rem_addrRef_12 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_10 1
&curLine_step0_rem_addrRef_13 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_10 1
&curLine_step0_rem_addrRef_14 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_10 1
&curLine_step0_rem_addrRef_15 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_10 1
&curLine_step0_rem_addrRef_16 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_10 1
&curLine_step0_rem_addrRef_17 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_10 1
&curLine_step0_rem_addrRef_18 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_10 1
&curLine_step0_rem_addrRef_19 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_10 1
&curLine_step0_rem_addrRef_20 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_10 1
&curLine_step0_rem_addrRef_21 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_10 1
&curLine_step0_rem_addrRef_22 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_10 1
&curLine_step0_rem_addrRef_23 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_10 1
&curLine_step0_rem_addrRef_24 &CONST_10 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 inp_line curLine_step0_rem tmp tmp2
; addr inp_line_1_str 0
# MSQ_START 1 setaddr inp_line_1_str curLine_step0_rem tmp tmp2
# MSQ_START 2 mov tmp inp_line_1_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inp_line_1_str_addrRef_0 ?+8 ; relsq tmp2 inp_line_1_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_rem
&tmp :curLine_step0_rem_addrRef_19 &curLine_step0_rem ?+8 ; relsq tmp curLine_step0_rem 1
# MSQ_END 2 sub
&inp_line_1_str_addrRef_0 &tmp ?+8 ; relsq inp_line_1_str_addrRef_0 tmp 1
&inp_line_1_str_addrRef_1 &tmp ?+8 ; relsq inp_line_1_str_addrRef_1 tmp 1
&inp_line_1_str_addrRef_2 &tmp ?+8 ; relsq inp_line_1_str_addrRef_2 tmp 1
&inp_line_1_str_addrRef_3 &tmp ?+8 ; relsq inp_line_1_str_addrRef_3 tmp 1
&inp_line_1_str_addrRef_4 &tmp ?+8 ; relsq inp_line_1_str_addrRef_4 tmp 1
# MSQ_END 1 setaddr
; var inp_line_1_len 0
# MSQ_START 1 zero inp_line_1_len
# MSQ_START 2 sub inp_line_1_len inp_line_1_len
&inp_line_1_len &inp_line_1_len ?+8 ; relsq inp_line_1_len inp_line_1_len 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label INP_LINE_1_LOOP
# MSQ_START 1 getchar inp_line_1_str tmp
# MSQ_START 2 set tmp 1
:INP_LINE_1_LOOP &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_-1 ?+8 ; relsq tmp CONST_-1 1
# MSQ_END 2 set
&tmp 0000000013ed27e8 ?+20 ; relsq tmp SERIAL_IN 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 zero SERIAL_IN
0000000013ed27e8 0000000013ed27e8 ?+8 ; relsq SERIAL_IN SERIAL_IN 1
# MSQ_END 2 zero
# MSQ_START 2 movneg inp_line_1_str tmp
:inp_line_1_str_addrRef_0 &inp_line_1_str :inp_line_1_str_addrRef_1 &inp_line_1_str ?+8 ; relsq inp_line_1_str inp_line_1_str 1
:inp_line_1_str_addrRef_2 &inp_line_1_str &tmp ?+8 ; relsq inp_line_1_str tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 getchar
# MSQ_START 1 jeq_const inp_line_1_str d INP_LINE_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_line_1_str tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_line_1_str_addrRef_3 &inp_line_1_str ?+8 ; relsq tmp2 inp_line_1_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_D
&tmp &CONST_D ?+8 ; relsq tmp CONST_D 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_LINE_1_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_6_END ; lblsq tmp2 CONST_-1 JZ_6_END
&tmp &CONST_-1 &JZ_6_REVERT_A ; lblsq tmp CONST_-1 JZ_6_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_LINE_1_TERM ; lblsq ZERO ZERO INP_LINE_1_TERM
; label JZ_6_REVERT_A
:JZ_6_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_6_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 jeq_const inp_line_1_str a INP_LINE_1_TERM tmp tmp2
# MSQ_START 2 mov tmp inp_line_1_str tmp2
:JZ_6_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :inp_line_1_str_addrRef_4 &inp_line_1_str ?+8 ; relsq tmp2 inp_line_1_str 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp CONST_A
&tmp &CONST_A ?+8 ; relsq tmp CONST_A 1
# MSQ_END 2 sub
# MSQ_START 2 jz tmp INP_LINE_1_TERM tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &JZ_7_END ; lblsq tmp2 CONST_-1 JZ_7_END
&tmp &CONST_-1 &JZ_7_REVERT_A ; lblsq tmp CONST_-1 JZ_7_REVERT_A
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &INP_LINE_1_TERM ; lblsq ZERO ZERO INP_LINE_1_TERM
; label JZ_7_REVERT_A
:JZ_7_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
; label JZ_7_END
# MSQ_END 2 jz
# MSQ_END 1 jeq_const
# MSQ_START 1 inc inp_line_1_len 1
# MSQ_START 2 dec inp_line_1_len -1
:JZ_7_END &inp_line_1_len &CONST_-1 ?+8 ; relsq inp_line_1_len CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 incaddr inp_line_1_str 8
&inp_line_1_str_addrRef_0 &CONST_-8 ?+8 ; relsq inp_line_1_str_addrRef_0 CONST_-8 1
&inp_line_1_str_addrRef_1 &CONST_-8 ?+8 ; relsq inp_line_1_str_addrRef_1 CONST_-8 1
&inp_line_1_str_addrRef_2 &CONST_-8 ?+8 ; relsq inp_line_1_str_addrRef_2 CONST_-8 1
&inp_line_1_str_addrRef_3 &CONST_-8 ?+8 ; relsq inp_line_1_str_addrRef_3 CONST_-8 1
&inp_line_1_str_addrRef_4 &CONST_-8 ?+8 ; relsq inp_line_1_str_addrRef_4 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp INP_LINE_1_LOOP
&ZERO &ZERO &INP_LINE_1_LOOP ; lblsq ZERO ZERO INP_LINE_1_LOOP
# MSQ_END 1 lbljmp
; label INP_LINE_1_TERM
# MSQ_START 1 incaddr curLine_step0_rem 8
:INP_LINE_1_TERM &curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLine_step0_rem inp_line_1_len tmp
# MSQ_START 2 movneg tmp inp_line_1_len
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &inp_line_1_len ?+8 ; relsq tmp inp_line_1_len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLine_step0_rem tmp
:curLine_step0_rem_addrRef_20 &curLine_step0_rem :curLine_step0_rem_addrRef_21 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
:curLine_step0_rem_addrRef_22 &curLine_step0_rem &tmp ?+8 ; relsq curLine_step0_rem tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_8 1
&curLine_step0_rem_addrRef_1 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_8 1
&curLine_step0_rem_addrRef_2 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_8 1
&curLine_step0_rem_addrRef_3 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_8 1
&curLine_step0_rem_addrRef_4 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_8 1
&curLine_step0_rem_addrRef_5 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_8 1
&curLine_step0_rem_addrRef_6 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_8 1
&curLine_step0_rem_addrRef_7 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_8 1
&curLine_step0_rem_addrRef_8 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_8 1
&curLine_step0_rem_addrRef_9 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_8 1
&curLine_step0_rem_addrRef_10 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_8 1
&curLine_step0_rem_addrRef_11 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_8 1
&curLine_step0_rem_addrRef_12 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_8 1
&curLine_step0_rem_addrRef_13 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_8 1
&curLine_step0_rem_addrRef_14 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_8 1
&curLine_step0_rem_addrRef_15 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_8 1
&curLine_step0_rem_addrRef_16 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_8 1
&curLine_step0_rem_addrRef_17 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_8 1
&curLine_step0_rem_addrRef_18 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_8 1
&curLine_step0_rem_addrRef_19 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_8 1
&curLine_step0_rem_addrRef_20 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_8 1
&curLine_step0_rem_addrRef_21 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_8 1
&curLine_step0_rem_addrRef_22 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_8 1
&curLine_step0_rem_addrRef_23 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_8 1
&curLine_step0_rem_addrRef_24 &CONST_8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 inp_line

# MSQ_START 0 incaddr curLine_step0_rem 18
&curLine_step0_rem_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-18 1
&curLine_step0_rem_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-18 1
&curLine_step0_rem_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-18 1
&curLine_step0_rem_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-18 1
&curLine_step0_rem_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-18 1
&curLine_step0_rem_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-18 1
&curLine_step0_rem_addrRef_6 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-18 1
&curLine_step0_rem_addrRef_7 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-18 1
&curLine_step0_rem_addrRef_8 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-18 1
&curLine_step0_rem_addrRef_9 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-18 1
&curLine_step0_rem_addrRef_10 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-18 1
&curLine_step0_rem_addrRef_11 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-18 1
&curLine_step0_rem_addrRef_12 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-18 1
&curLine_step0_rem_addrRef_13 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-18 1
&curLine_step0_rem_addrRef_14 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-18 1
&curLine_step0_rem_addrRef_15 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-18 1
&curLine_step0_rem_addrRef_16 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-18 1
&curLine_step0_rem_addrRef_17 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-18 1
&curLine_step0_rem_addrRef_18 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-18 1
&curLine_step0_rem_addrRef_19 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-18 1
&curLine_step0_rem_addrRef_20 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-18 1
&curLine_step0_rem_addrRef_21 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-18 1
&curLine_step0_rem_addrRef_22 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-18 1
&curLine_step0_rem_addrRef_23 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-18 1
&curLine_step0_rem_addrRef_24 &CONST_-18 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero curLine_step0_rem
# MSQ_START 1 sub curLine_step0_rem curLine_step0_rem
:curLine_step0_rem_addrRef_23 &curLine_step0_rem :curLine_step0_rem_addrRef_24 &curLine_step0_rem ?+8 ; relsq curLine_step0_rem curLine_step0_rem 1
# MSQ_END 1 sub
# MSQ_END 0 zero

# MSQ_START 0 incaddr curLine_step0_rem 8
&curLine_step0_rem_addrRef_0 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_0 CONST_-8 1
&curLine_step0_rem_addrRef_1 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_1 CONST_-8 1
&curLine_step0_rem_addrRef_2 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_2 CONST_-8 1
&curLine_step0_rem_addrRef_3 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_3 CONST_-8 1
&curLine_step0_rem_addrRef_4 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_4 CONST_-8 1
&curLine_step0_rem_addrRef_5 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_5 CONST_-8 1
&curLine_step0_rem_addrRef_6 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_6 CONST_-8 1
&curLine_step0_rem_addrRef_7 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_7 CONST_-8 1
&curLine_step0_rem_addrRef_8 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_8 CONST_-8 1
&curLine_step0_rem_addrRef_9 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_9 CONST_-8 1
&curLine_step0_rem_addrRef_10 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_10 CONST_-8 1
&curLine_step0_rem_addrRef_11 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_11 CONST_-8 1
&curLine_step0_rem_addrRef_12 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_12 CONST_-8 1
&curLine_step0_rem_addrRef_13 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_13 CONST_-8 1
&curLine_step0_rem_addrRef_14 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_14 CONST_-8 1
&curLine_step0_rem_addrRef_15 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_15 CONST_-8 1
&curLine_step0_rem_addrRef_16 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_16 CONST_-8 1
&curLine_step0_rem_addrRef_17 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_17 CONST_-8 1
&curLine_step0_rem_addrRef_18 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_18 CONST_-8 1
&curLine_step0_rem_addrRef_19 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_19 CONST_-8 1
&curLine_step0_rem_addrRef_20 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_20 CONST_-8 1
&curLine_step0_rem_addrRef_21 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_21 CONST_-8 1
&curLine_step0_rem_addrRef_22 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_22 CONST_-8 1
&curLine_step0_rem_addrRef_23 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_23 CONST_-8 1
&curLine_step0_rem_addrRef_24 &CONST_-8 ?+8 ; relsq curLine_step0_rem_addrRef_24 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 copyaddr curLine_step0 curLine_step0_rem tmp tmp2
# MSQ_START 1 setaddr curLine_step0 curLine_step0_rem_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp curLine_step0_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step0_addrRef_0 ?+8 ; relsq tmp2 curLine_step0_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLine_step0_rem_addrRef_0
&tmp &curLine_step0_rem_addrRef_0 ?+8 ; relsq tmp curLine_step0_rem_addrRef_0 1
# MSQ_END 2 sub
&curLine_step0_addrRef_0 &tmp ?+8 ; relsq curLine_step0_addrRef_0 tmp 1
&curLine_step0_addrRef_1 &tmp ?+8 ; relsq curLine_step0_addrRef_1 tmp 1
&curLine_step0_addrRef_2 &tmp ?+8 ; relsq curLine_step0_addrRef_2 tmp 1
&curLine_step0_addrRef_3 &tmp ?+8 ; relsq curLine_step0_addrRef_3 tmp 1
&curLine_step0_addrRef_4 &tmp ?+8 ; relsq curLine_step0_addrRef_4 tmp 1
&curLine_step0_addrRef_5 &tmp ?+8 ; relsq curLine_step0_addrRef_5 tmp 1
&curLine_step0_addrRef_6 &tmp ?+8 ; relsq curLine_step0_addrRef_6 tmp 1
&curLine_step0_addrRef_7 &tmp ?+8 ; relsq curLine_step0_addrRef_7 tmp 1
&curLine_step0_addrRef_8 &tmp ?+8 ; relsq curLine_step0_addrRef_8 tmp 1
&curLine_step0_addrRef_9 &tmp ?+8 ; relsq curLine_step0_addrRef_9 tmp 1
&curLine_step0_addrRef_10 &tmp ?+8 ; relsq curLine_step0_addrRef_10 tmp 1
&curLine_step0_addrRef_11 &tmp ?+8 ; relsq curLine_step0_addrRef_11 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 lbljmp STEP0_INPUT_INST
&ZERO &ZERO &STEP0_INPUT_INST ; lblsq ZERO ZERO STEP0_INPUT_INST
# MSQ_END 0 lbljmp

; label STEP0_END
# MSQ_START 0 puts STEP0_PRINT_PREFIX tmp tmp2
; addr puts_1_str 0
# MSQ_START 1 setaddr puts_1_str STEP0_PRINT_PREFIX tmp tmp2
# MSQ_START 2 mov tmp puts_1_str_addrRef_0 tmp2
:STEP0_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_1_str_addrRef_0 ?+8 ; relsq tmp2 puts_1_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP0_PRINT_PREFIX
&tmp :STEP0_PRINT_PREFIX_addrRef_0 &STEP0_PRINT_PREFIX ?+8 ; relsq tmp STEP0_PRINT_PREFIX 1
# MSQ_END 2 sub
&puts_1_str_addrRef_0 &tmp ?+8 ; relsq puts_1_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_1_len 0
# MSQ_START 1 incaddr STEP0_PRINT_PREFIX 8
&STEP0_PRINT_PREFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP0_PRINT_PREFIX_addrRef_0 CONST_-8 1
&STEP0_PRINT_PREFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP0_PRINT_PREFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_1_len STEP0_PRINT_PREFIX tmp
# MSQ_START 2 movneg tmp STEP0_PRINT_PREFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP0_PRINT_PREFIX_addrRef_1 &STEP0_PRINT_PREFIX ?+8 ; relsq tmp STEP0_PRINT_PREFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_1_len tmp
&puts_1_len &puts_1_len ?+8 ; relsq puts_1_len puts_1_len 1
&puts_1_len &tmp ?+8 ; relsq puts_1_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP0_PRINT_PREFIX 8
&STEP0_PRINT_PREFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP0_PRINT_PREFIX_addrRef_0 CONST_8 1
&STEP0_PRINT_PREFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP0_PRINT_PREFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_1_LOOP
# MSQ_START 1 decleq puts_1_len 0 PUTS_1_END
:PUTS_1_LOOP &puts_1_len &CONST_0 &PUTS_1_END ; lblsq puts_1_len CONST_0 PUTS_1_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_1_len 1
&puts_1_len &CONST_1 ?+8 ; relsq puts_1_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_1_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_1_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_1_str_addrRef_0 &puts_1_str ?+8 ; relsq tmp puts_1_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_1_str 8
&puts_1_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_1_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_1_LOOP
&ZERO &ZERO &PUTS_1_LOOP ; lblsq ZERO ZERO PUTS_1_LOOP
# MSQ_END 1 lbljmp
; label PUTS_1_END
# MSQ_END 0 puts
; addr lineCountPrint_step0 0
# MSQ_START 0 itoa lineCountPrint_step0 linesPass1Len tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_1_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr lineCountPrint_step0 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 lineCountPrint_step0_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &lineCountPrint_step0_addrRef_0 ?+8 ; relsq tmp lineCountPrint_step0_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&lineCountPrint_step0_addrRef_0 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_0 tmp3 1
&lineCountPrint_step0_addrRef_1 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_1 tmp3 1
&lineCountPrint_step0_addrRef_2 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_2 tmp3 1
&lineCountPrint_step0_addrRef_3 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_3 tmp3 1
&lineCountPrint_step0_addrRef_4 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_4 tmp3 1
&lineCountPrint_step0_addrRef_5 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_5 tmp3 1
&lineCountPrint_step0_addrRef_6 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_6 tmp3 1
&lineCountPrint_step0_addrRef_7 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_7 tmp3 1
&lineCountPrint_step0_addrRef_8 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_8 tmp3 1
&lineCountPrint_step0_addrRef_9 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_9 tmp3 1
&lineCountPrint_step0_addrRef_10 &tmp3 ?+8 ; relsq lineCountPrint_step0_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const lineCountPrint_step0 a0 tmp3
# MSQ_START 2 malloc_const lineCountPrint_step0 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:lineCountPrint_step0_addrRef_0 &lineCountPrint_step0 :lineCountPrint_step0_addrRef_1 &lineCountPrint_step0 ?+8 ; relsq lineCountPrint_step0 lineCountPrint_step0 1
:lineCountPrint_step0_addrRef_2 &lineCountPrint_step0 &tmp3 ?+8 ; relsq lineCountPrint_step0 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr lineCountPrint_step0 8
&lineCountPrint_step0_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_0 CONST_-8 1
&lineCountPrint_step0_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_1 CONST_-8 1
&lineCountPrint_step0_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_2 CONST_-8 1
&lineCountPrint_step0_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_3 CONST_-8 1
&lineCountPrint_step0_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_4 CONST_-8 1
&lineCountPrint_step0_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_5 CONST_-8 1
&lineCountPrint_step0_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_6 CONST_-8 1
&lineCountPrint_step0_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_7 CONST_-8 1
&lineCountPrint_step0_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_8 CONST_-8 1
&lineCountPrint_step0_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_9 CONST_-8 1
&lineCountPrint_step0_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero lineCountPrint_step0
:lineCountPrint_step0_addrRef_3 &lineCountPrint_step0 :lineCountPrint_step0_addrRef_4 &lineCountPrint_step0 ?+8 ; relsq lineCountPrint_step0 lineCountPrint_step0 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr lineCountPrint_step0 8
&lineCountPrint_step0_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_0 CONST_-8 1
&lineCountPrint_step0_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_1 CONST_-8 1
&lineCountPrint_step0_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_2 CONST_-8 1
&lineCountPrint_step0_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_3 CONST_-8 1
&lineCountPrint_step0_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_4 CONST_-8 1
&lineCountPrint_step0_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_5 CONST_-8 1
&lineCountPrint_step0_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_6 CONST_-8 1
&lineCountPrint_step0_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_7 CONST_-8 1
&lineCountPrint_step0_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_8 CONST_-8 1
&lineCountPrint_step0_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_9 CONST_-8 1
&lineCountPrint_step0_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov lineCountPrint_step0 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:lineCountPrint_step0_addrRef_5 &lineCountPrint_step0 :lineCountPrint_step0_addrRef_6 &lineCountPrint_step0 ?+8 ; relsq lineCountPrint_step0 lineCountPrint_step0 1
:lineCountPrint_step0_addrRef_7 &lineCountPrint_step0 &tmp3 ?+8 ; relsq lineCountPrint_step0 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr lineCountPrint_step0 10
&lineCountPrint_step0_addrRef_0 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_0 CONST_10 1
&lineCountPrint_step0_addrRef_1 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_1 CONST_10 1
&lineCountPrint_step0_addrRef_2 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_2 CONST_10 1
&lineCountPrint_step0_addrRef_3 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_3 CONST_10 1
&lineCountPrint_step0_addrRef_4 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_4 CONST_10 1
&lineCountPrint_step0_addrRef_5 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_5 CONST_10 1
&lineCountPrint_step0_addrRef_6 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_6 CONST_10 1
&lineCountPrint_step0_addrRef_7 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_7 CONST_10 1
&lineCountPrint_step0_addrRef_8 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_8 CONST_10 1
&lineCountPrint_step0_addrRef_9 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_9 CONST_10 1
&lineCountPrint_step0_addrRef_10 &CONST_10 ?+8 ; relsq lineCountPrint_step0_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_0_retBuf 0
# MSQ_START 1 setaddr itoa_0_retBuf lineCountPrint_step0 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_0_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_0_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_0_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 lineCountPrint_step0
&tmp2 :lineCountPrint_step0_addrRef_8 &lineCountPrint_step0 ?+8 ; relsq tmp2 lineCountPrint_step0 1
# MSQ_END 2 sub
&itoa_0_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_0 tmp2 1
&itoa_0_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_1 tmp2 1
&itoa_0_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_2 tmp2 1
&itoa_0_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_3 tmp2 1
&itoa_0_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_4 tmp2 1
&itoa_0_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_5 tmp2 1
&itoa_0_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_6 tmp2 1
&itoa_0_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_7 tmp2 1
&itoa_0_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_8 tmp2 1
&itoa_0_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_0_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_0_retLength 0
# MSQ_START 1 copyaddr itoa_0_retLength lineCountPrint_step0 tmp2 tmp3
# MSQ_START 2 setaddr itoa_0_retLength lineCountPrint_step0_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_0_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_0_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &lineCountPrint_step0_addrRef_0 ?+8 ; relsq tmp2 lineCountPrint_step0_addrRef_0 1
&itoa_0_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_0_retLength_addrRef_0 tmp2 1
&itoa_0_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_0_retLength_addrRef_1 tmp2 1
&itoa_0_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_0_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_0_retLength 8
&itoa_0_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_0_retLength_addrRef_0 CONST_-8 1
&itoa_0_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_0_retLength_addrRef_1 CONST_-8 1
&itoa_0_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_0_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_0_noDigits 0
# MSQ_START 1 set itoa_0_noDigits 1
# MSQ_START 2 zero itoa_0_noDigits
&itoa_0_noDigits &itoa_0_noDigits ?+8 ; relsq itoa_0_noDigits itoa_0_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_0_noDigits 1
&itoa_0_noDigits &CONST_-1 ?+8 ; relsq itoa_0_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp linesPass1Len tmp2
# MSQ_START 2 movneg tmp2 linesPass1Len
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &linesPass1Len ?+8 ; relsq tmp2 linesPass1Len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_0_isNeg 0
# MSQ_START 1 zero itoa_0_isNeg
# MSQ_START 2 sub itoa_0_isNeg itoa_0_isNeg
&itoa_0_isNeg &itoa_0_isNeg ?+8 ; relsq itoa_0_isNeg itoa_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_0_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_0_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_0_IS_NEG ; lblsq tmp2 ZERO ITOA_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_0_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_8_END
&tmp2 &CONST_-1 &JZ_8_END ; lblsq tmp2 CONST_-1 JZ_8_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_8_REVERT_A
&tmp &CONST_-1 &JZ_8_REVERT_A ; lblsq tmp CONST_-1 JZ_8_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_0_IS_ZERO
&ZERO &ZERO &ITOA_0_IS_ZERO ; lblsq ZERO ZERO ITOA_0_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_8_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_8_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_8_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_0_LOOP
:JZ_8_END &ZERO &ZERO &ITOA_0_LOOP ; lblsq ZERO ZERO ITOA_0_LOOP
# MSQ_END 1 lbljmp
; label ITOA_0_IS_ZERO
# MSQ_START 1 set itoa_0_retBuf 30
# MSQ_START 2 zero itoa_0_retBuf
:ITOA_0_IS_ZERO :itoa_0_retBuf_addrRef_0 &itoa_0_retBuf :itoa_0_retBuf_addrRef_1 &itoa_0_retBuf ?+8 ; relsq itoa_0_retBuf itoa_0_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_0_retBuf 30
:itoa_0_retBuf_addrRef_2 &itoa_0_retBuf &CONST_-30 ?+8 ; relsq itoa_0_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_0_retLength 1
# MSQ_START 2 dec itoa_0_retLength -1
:itoa_0_retLength_addrRef_0 &itoa_0_retLength &CONST_-1 ?+8 ; relsq itoa_0_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_0_END
&ZERO &ZERO &ITOA_0_END ; lblsq ZERO ZERO ITOA_0_END
# MSQ_END 1 lbljmp
; label ITOA_0_IS_NEG
# MSQ_START 1 inc itoa_0_isNeg 1
# MSQ_START 2 dec itoa_0_isNeg -1
:ITOA_0_IS_NEG &itoa_0_isNeg &CONST_-1 ?+8 ; relsq itoa_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_0_retBuf 2d
# MSQ_START 2 zero itoa_0_retBuf
:itoa_0_retBuf_addrRef_3 &itoa_0_retBuf :itoa_0_retBuf_addrRef_4 &itoa_0_retBuf ?+8 ; relsq itoa_0_retBuf itoa_0_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_0_retBuf 2d
:itoa_0_retBuf_addrRef_5 &itoa_0_retBuf &CONST_-2D ?+8 ; relsq itoa_0_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_0_retBuf 8
&itoa_0_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_0 CONST_-8 1
&itoa_0_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_1 CONST_-8 1
&itoa_0_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_2 CONST_-8 1
&itoa_0_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_3 CONST_-8 1
&itoa_0_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_4 CONST_-8 1
&itoa_0_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_5 CONST_-8 1
&itoa_0_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_6 CONST_-8 1
&itoa_0_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_7 CONST_-8 1
&itoa_0_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_8 CONST_-8 1
&itoa_0_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_0_retLength 1
# MSQ_START 2 dec itoa_0_retLength -1
:itoa_0_retLength_addrRef_1 &itoa_0_retLength &CONST_-1 ?+8 ; relsq itoa_0_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_0_LOOP
&ZERO &ZERO &ITOA_0_LOOP ; lblsq ZERO ZERO ITOA_0_LOOP
# MSQ_END 1 lbljmp
; label ITOA_0_SUBBERS
:ITOA_0_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_0_LOOP
# MSQ_START 1 jz ITOA_0_SUBBERS ITOA_0_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_0_SUBBERS
:ITOA_0_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_0_SUBBERS_addrRef_0 &ITOA_0_SUBBERS ?+8 ; relsq tmp2 ITOA_0_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_9_END
&tmp2 &CONST_-1 &JZ_9_END ; lblsq tmp2 CONST_-1 JZ_9_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_0_SUBBERS 1 JZ_9_REVERT_A
:ITOA_0_SUBBERS_addrRef_1 &ITOA_0_SUBBERS &CONST_-1 &JZ_9_REVERT_A ; lblsq ITOA_0_SUBBERS CONST_-1 JZ_9_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_0_SUBBERS 1
:ITOA_0_SUBBERS_addrRef_2 &ITOA_0_SUBBERS &CONST_1 ?+8 ; relsq ITOA_0_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_0_REVERT_SUBBERS
&ZERO &ZERO &ITOA_0_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_0_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_9_REVERT_A
# MSQ_START 2 dec ITOA_0_SUBBERS 1
:JZ_9_REVERT_A :ITOA_0_SUBBERS_addrRef_3 &ITOA_0_SUBBERS &CONST_1 ?+8 ; relsq ITOA_0_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_9_END
# MSQ_END 1 jz
; var itoa_0_digitVal 0
# MSQ_START 1 zero itoa_0_digitVal
# MSQ_START 2 sub itoa_0_digitVal itoa_0_digitVal
:JZ_9_END &itoa_0_digitVal &itoa_0_digitVal ?+8 ; relsq itoa_0_digitVal itoa_0_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_0_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_0_SUBBERS ITOA_0_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_0_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_0_SUBBERS_addrRef_4 &ITOA_0_SUBBERS &ITOA_0_HANDLE_DIGIT ; lblsq tmp2 ITOA_0_SUBBERS ITOA_0_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_0_digitVal 1
# MSQ_START 2 dec itoa_0_digitVal -1
&itoa_0_digitVal &CONST_-1 ?+8 ; relsq itoa_0_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_0_SUBBERS
&tmp :ITOA_0_SUBBERS_addrRef_5 &ITOA_0_SUBBERS ?+8 ; relsq tmp ITOA_0_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_0_SUBTRACT_A
&ZERO &ZERO &ITOA_0_SUBTRACT_A ; lblsq ZERO ZERO ITOA_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_0_HANDLE_DIGIT
# MSQ_START 1 jz itoa_0_noDigits ITOA_0_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_0_noDigits
:ITOA_0_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_0_noDigits ?+8 ; relsq tmp2 itoa_0_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_10_END
&tmp2 &CONST_-1 &JZ_10_END ; lblsq tmp2 CONST_-1 JZ_10_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_0_noDigits 1 JZ_10_REVERT_A
&itoa_0_noDigits &CONST_-1 &JZ_10_REVERT_A ; lblsq itoa_0_noDigits CONST_-1 JZ_10_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_0_noDigits 1
&itoa_0_noDigits &CONST_1 ?+8 ; relsq itoa_0_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_0_PRINT_DIGIT
&ZERO &ZERO &ITOA_0_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_0_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_10_REVERT_A
# MSQ_START 2 dec itoa_0_noDigits 1
:JZ_10_REVERT_A &itoa_0_noDigits &CONST_1 ?+8 ; relsq itoa_0_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_10_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_0_digitVal ITOA_0_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_0_digitVal
:JZ_10_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_0_digitVal ?+8 ; relsq tmp2 itoa_0_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_11_END
&tmp2 &CONST_-1 &JZ_11_END ; lblsq tmp2 CONST_-1 JZ_11_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_0_digitVal 1 JZ_11_REVERT_A
&itoa_0_digitVal &CONST_-1 &JZ_11_REVERT_A ; lblsq itoa_0_digitVal CONST_-1 JZ_11_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_0_digitVal 1
&itoa_0_digitVal &CONST_1 ?+8 ; relsq itoa_0_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_0_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_0_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_0_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_11_REVERT_A
# MSQ_START 2 dec itoa_0_digitVal 1
:JZ_11_REVERT_A &itoa_0_digitVal &CONST_1 ?+8 ; relsq itoa_0_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_11_END
# MSQ_END 1 jz
; label ITOA_0_PRINT_DIGIT
# MSQ_START 1 zero itoa_0_noDigits
# MSQ_START 2 sub itoa_0_noDigits itoa_0_noDigits
:JZ_11_END :ITOA_0_PRINT_DIGIT &itoa_0_noDigits &itoa_0_noDigits ?+8 ; relsq itoa_0_noDigits itoa_0_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_0_retBuf 30
# MSQ_START 2 zero itoa_0_retBuf
:itoa_0_retBuf_addrRef_6 &itoa_0_retBuf :itoa_0_retBuf_addrRef_7 &itoa_0_retBuf ?+8 ; relsq itoa_0_retBuf itoa_0_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_0_retBuf 30
:itoa_0_retBuf_addrRef_8 &itoa_0_retBuf &CONST_-30 ?+8 ; relsq itoa_0_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_0_retBuf itoa_0_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_0_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_0_digitVal ?+8 ; relsq tmp2 itoa_0_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_0_retBuf tmp2
:itoa_0_retBuf_addrRef_9 &itoa_0_retBuf &tmp2 ?+8 ; relsq itoa_0_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_0_retBuf 8
&itoa_0_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_0 CONST_-8 1
&itoa_0_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_1 CONST_-8 1
&itoa_0_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_2 CONST_-8 1
&itoa_0_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_3 CONST_-8 1
&itoa_0_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_4 CONST_-8 1
&itoa_0_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_5 CONST_-8 1
&itoa_0_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_6 CONST_-8 1
&itoa_0_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_7 CONST_-8 1
&itoa_0_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_8 CONST_-8 1
&itoa_0_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_0_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_0_retLength 1
# MSQ_START 2 dec itoa_0_retLength -1
:itoa_0_retLength_addrRef_2 &itoa_0_retLength &CONST_-1 ?+8 ; relsq itoa_0_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_0_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_0_SUBBERS 8
:ITOA_0_DONT_PRINT_DIGIT &ITOA_0_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_0_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_0_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_0_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_0_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_0_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_0_LOOP
&ZERO &ZERO &ITOA_0_LOOP ; lblsq ZERO ZERO ITOA_0_LOOP
# MSQ_END 1 lbljmp
; label ITOA_0_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_0_SUBBERS 98
:ITOA_0_REVERT_SUBBERS &ITOA_0_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_0 CONST_98 1
&ITOA_0_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_1 CONST_98 1
&ITOA_0_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_2 CONST_98 1
&ITOA_0_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_3 CONST_98 1
&ITOA_0_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_4 CONST_98 1
&ITOA_0_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_0_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_0_END
# MSQ_END 0 itoa
# MSQ_START 0 puts lineCountPrint_step0 tmp tmp2
; addr puts_2_str 0
# MSQ_START 1 setaddr puts_2_str lineCountPrint_step0 tmp tmp2
# MSQ_START 2 mov tmp puts_2_str_addrRef_0 tmp2
:ITOA_0_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_2_str_addrRef_0 ?+8 ; relsq tmp2 puts_2_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp lineCountPrint_step0
&tmp :lineCountPrint_step0_addrRef_9 &lineCountPrint_step0 ?+8 ; relsq tmp lineCountPrint_step0 1
# MSQ_END 2 sub
&puts_2_str_addrRef_0 &tmp ?+8 ; relsq puts_2_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_2_len 0
# MSQ_START 1 incaddr lineCountPrint_step0 8
&lineCountPrint_step0_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_0 CONST_-8 1
&lineCountPrint_step0_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_1 CONST_-8 1
&lineCountPrint_step0_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_2 CONST_-8 1
&lineCountPrint_step0_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_3 CONST_-8 1
&lineCountPrint_step0_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_4 CONST_-8 1
&lineCountPrint_step0_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_5 CONST_-8 1
&lineCountPrint_step0_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_6 CONST_-8 1
&lineCountPrint_step0_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_7 CONST_-8 1
&lineCountPrint_step0_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_8 CONST_-8 1
&lineCountPrint_step0_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_9 CONST_-8 1
&lineCountPrint_step0_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step0_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_2_len lineCountPrint_step0 tmp
# MSQ_START 2 movneg tmp lineCountPrint_step0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :lineCountPrint_step0_addrRef_10 &lineCountPrint_step0 ?+8 ; relsq tmp lineCountPrint_step0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_2_len tmp
&puts_2_len &puts_2_len ?+8 ; relsq puts_2_len puts_2_len 1
&puts_2_len &tmp ?+8 ; relsq puts_2_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lineCountPrint_step0 8
&lineCountPrint_step0_addrRef_0 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_0 CONST_8 1
&lineCountPrint_step0_addrRef_1 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_1 CONST_8 1
&lineCountPrint_step0_addrRef_2 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_2 CONST_8 1
&lineCountPrint_step0_addrRef_3 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_3 CONST_8 1
&lineCountPrint_step0_addrRef_4 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_4 CONST_8 1
&lineCountPrint_step0_addrRef_5 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_5 CONST_8 1
&lineCountPrint_step0_addrRef_6 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_6 CONST_8 1
&lineCountPrint_step0_addrRef_7 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_7 CONST_8 1
&lineCountPrint_step0_addrRef_8 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_8 CONST_8 1
&lineCountPrint_step0_addrRef_9 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_9 CONST_8 1
&lineCountPrint_step0_addrRef_10 &CONST_8 ?+8 ; relsq lineCountPrint_step0_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_2_LOOP
# MSQ_START 1 decleq puts_2_len 0 PUTS_2_END
:PUTS_2_LOOP &puts_2_len &CONST_0 &PUTS_2_END ; lblsq puts_2_len CONST_0 PUTS_2_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_2_len 1
&puts_2_len &CONST_1 ?+8 ; relsq puts_2_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_2_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_2_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_2_str_addrRef_0 &puts_2_str ?+8 ; relsq tmp puts_2_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_2_str 8
&puts_2_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_2_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_2_LOOP
&ZERO &ZERO &PUTS_2_LOOP ; lblsq ZERO ZERO PUTS_2_LOOP
# MSQ_END 1 lbljmp
; label PUTS_2_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP0_PRINT_SUFFIX tmp tmp2
; addr puts_3_str 0
# MSQ_START 1 setaddr puts_3_str STEP0_PRINT_SUFFIX tmp tmp2
# MSQ_START 2 mov tmp puts_3_str_addrRef_0 tmp2
:PUTS_2_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_3_str_addrRef_0 ?+8 ; relsq tmp2 puts_3_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP0_PRINT_SUFFIX
&tmp :STEP0_PRINT_SUFFIX_addrRef_0 &STEP0_PRINT_SUFFIX ?+8 ; relsq tmp STEP0_PRINT_SUFFIX 1
# MSQ_END 2 sub
&puts_3_str_addrRef_0 &tmp ?+8 ; relsq puts_3_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_3_len 0
# MSQ_START 1 incaddr STEP0_PRINT_SUFFIX 8
&STEP0_PRINT_SUFFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP0_PRINT_SUFFIX_addrRef_0 CONST_-8 1
&STEP0_PRINT_SUFFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP0_PRINT_SUFFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_3_len STEP0_PRINT_SUFFIX tmp
# MSQ_START 2 movneg tmp STEP0_PRINT_SUFFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP0_PRINT_SUFFIX_addrRef_1 &STEP0_PRINT_SUFFIX ?+8 ; relsq tmp STEP0_PRINT_SUFFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_3_len tmp
&puts_3_len &puts_3_len ?+8 ; relsq puts_3_len puts_3_len 1
&puts_3_len &tmp ?+8 ; relsq puts_3_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP0_PRINT_SUFFIX 8
&STEP0_PRINT_SUFFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP0_PRINT_SUFFIX_addrRef_0 CONST_8 1
&STEP0_PRINT_SUFFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP0_PRINT_SUFFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_3_LOOP
# MSQ_START 1 decleq puts_3_len 0 PUTS_3_END
:PUTS_3_LOOP &puts_3_len &CONST_0 &PUTS_3_END ; lblsq puts_3_len CONST_0 PUTS_3_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_3_len 1
&puts_3_len &CONST_1 ?+8 ; relsq puts_3_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_3_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_3_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_3_str_addrRef_0 &puts_3_str ?+8 ; relsq tmp puts_3_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_3_str 8
&puts_3_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_3_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_3_LOOP
&ZERO &ZERO &PUTS_3_LOOP ; lblsq ZERO ZERO PUTS_3_LOOP
# MSQ_END 1 lbljmp
; label PUTS_3_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_3_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# 1. Find symbols
; label STEP1_START
# A Symbol is made of four components, adding to a total of 0x30 bytes:
# 0x0 String containing the name of the symbol
# 0x18 The address of the symbol (ffffffffffffffff if None)
# 0x20 The reference count of the symbol
# 0x28 The default value of the symbol (SYM_VAL_PLACEHOLDER if None)
; var symbolsBegin 400000
; var symbolsLen 0

; addr curLine_step1 0
# MSQ_START 0 setaddr curLine_step1 linesPass1Begin tmp tmp2
# MSQ_START 1 mov tmp curLine_step1_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curLine_step1_addrRef_0
:STEP1_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step1_addrRef_0 ?+8 ; relsq tmp2 curLine_step1_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp linesPass1Begin
&tmp &linesPass1Begin ?+8 ; relsq tmp linesPass1Begin 1
# MSQ_END 1 sub
&curLine_step1_addrRef_0 &tmp ?+8 ; relsq curLine_step1_addrRef_0 tmp 1
# MSQ_END 0 setaddr
; var linesLeft 0
# MSQ_START 0 mov linesLeft linesPass1Len tmp
# MSQ_START 1 movneg tmp linesPass1Len
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp linesPass1Len
&tmp &linesPass1Len ?+8 ; relsq tmp linesPass1Len 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg linesLeft tmp
# MSQ_START 2 zero linesLeft
&linesLeft &linesLeft ?+8 ; relsq linesLeft linesLeft 1
# MSQ_END 2 zero
# MSQ_START 2 sub linesLeft tmp
&linesLeft &tmp ?+8 ; relsq linesLeft tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label STEP1_LOOP
# MSQ_START 0 decleq linesLeft 0 STEP1_END
:STEP1_LOOP &linesLeft &CONST_0 &STEP1_END ; lblsq linesLeft CONST_0 STEP1_END
# MSQ_END 0 decleq
# MSQ_START 0 dec linesLeft 1
&linesLeft &CONST_1 ?+8 ; relsq linesLeft CONST_1 1
# MSQ_END 0 dec

# MSQ_START 0 strcmp_const curLine_step1 VAR STEP1_CREATE_SYMBOL tmp tmp2
; addr strcmp_const_3_a 0
# MSQ_START 1 copyaddr strcmp_const_3_a curLine_step1 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_3_a curLine_step1_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_3_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_3_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step1_addrRef_0 ?+8 ; relsq tmp curLine_step1_addrRef_0 1
&strcmp_const_3_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_3_a_addrRef_0 tmp 1
&strcmp_const_3_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_3_a_addrRef_1 tmp 1
&strcmp_const_3_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_3_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_3_a 8
&strcmp_const_3_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_3_a_addrRef_0 CONST_-8 1
&strcmp_const_3_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_3_a_addrRef_1 CONST_-8 1
&strcmp_const_3_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_3_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr VAR 8
&VAR_addrRef_0 &CONST_-8 ?+8 ; relsq VAR_addrRef_0 CONST_-8 1
&VAR_addrRef_1 &CONST_-8 ?+8 ; relsq VAR_addrRef_1 CONST_-8 1
&VAR_addrRef_2 &CONST_-8 ?+8 ; relsq VAR_addrRef_2 CONST_-8 1
&VAR_addrRef_3 &CONST_-8 ?+8 ; relsq VAR_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_3_a VAR STRCMP_CONST_3_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_3_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_3_a_addrRef_0 &strcmp_const_3_a ?+8 ; relsq tmp2 strcmp_const_3_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp VAR
&tmp :VAR_addrRef_0 &VAR ?+8 ; relsq tmp VAR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_3_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_3_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_3_REVERT_ADDR
&tmp &CONST_-1 &JNZ_6_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_6_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_6_END ; lblsq ZERO ZERO JNZ_6_END
; label JNZ_6_REVERT_AND_JUMP
:JNZ_6_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_3_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_3_REVERT_ADDR
; label JNZ_6_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_3_len 0
# MSQ_START 1 mov strcmp_const_3_len strcmp_const_3_a tmp
# MSQ_START 2 movneg tmp strcmp_const_3_a
:JNZ_6_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_3_a_addrRef_1 &strcmp_const_3_a ?+8 ; relsq tmp strcmp_const_3_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_3_len tmp
&strcmp_const_3_len &strcmp_const_3_len ?+8 ; relsq strcmp_const_3_len strcmp_const_3_len 1
&strcmp_const_3_len &tmp ?+8 ; relsq strcmp_const_3_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_3_a 8
&strcmp_const_3_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_3_a_addrRef_0 CONST_8 1
&strcmp_const_3_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_3_a_addrRef_1 CONST_8 1
&strcmp_const_3_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_3_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr VAR 8
&VAR_addrRef_0 &CONST_8 ?+8 ; relsq VAR_addrRef_0 CONST_8 1
&VAR_addrRef_1 &CONST_8 ?+8 ; relsq VAR_addrRef_1 CONST_8 1
&VAR_addrRef_2 &CONST_8 ?+8 ; relsq VAR_addrRef_2 CONST_8 1
&VAR_addrRef_3 &CONST_8 ?+8 ; relsq VAR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_3_aStr 0
; addr strcmp_const_3_bStr 0
# MSQ_START 1 setaddr strcmp_const_3_aStr strcmp_const_3_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_3_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_3_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_3_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_3_a
&tmp :strcmp_const_3_a_addrRef_2 &strcmp_const_3_a ?+8 ; relsq tmp strcmp_const_3_a 1
# MSQ_END 2 sub
&strcmp_const_3_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_3_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_3_bStr VAR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_3_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_3_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_3_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp VAR
&tmp :VAR_addrRef_1 &VAR ?+8 ; relsq tmp VAR 1
# MSQ_END 2 sub
&strcmp_const_3_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_3_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_3_LOOP
# MSQ_START 1 decleq strcmp_const_3_len 0 STEP1_CREATE_SYMBOL
:STRCMP_CONST_3_LOOP &strcmp_const_3_len &CONST_0 &STEP1_CREATE_SYMBOL ; lblsq strcmp_const_3_len CONST_0 STEP1_CREATE_SYMBOL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_3_len 1
&strcmp_const_3_len &CONST_1 ?+8 ; relsq strcmp_const_3_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_3_aStr strcmp_const_3_bStr STRCMP_CONST_3_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_3_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_3_aStr_addrRef_0 &strcmp_const_3_aStr ?+8 ; relsq tmp2 strcmp_const_3_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_3_bStr
&tmp :strcmp_const_3_bStr_addrRef_0 &strcmp_const_3_bStr ?+8 ; relsq tmp strcmp_const_3_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_3_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_3_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_3_END
&tmp &CONST_-1 &JNZ_7_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_7_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_7_END ; lblsq ZERO ZERO JNZ_7_END
; label JNZ_7_REVERT_AND_JUMP
:JNZ_7_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_3_END ; lblsq ZERO ZERO STRCMP_CONST_3_END
; label JNZ_7_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_3_aStr 8
:JNZ_7_END &strcmp_const_3_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_3_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_3_bStr 8
&strcmp_const_3_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_3_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_3_LOOP
&ZERO &ZERO &STRCMP_CONST_3_LOOP ; lblsq ZERO ZERO STRCMP_CONST_3_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_3_REVERT_ADDR
# MSQ_START 1 decaddr VAR 8
:STRCMP_CONST_3_REVERT_ADDR &VAR_addrRef_0 &CONST_8 ?+8 ; relsq VAR_addrRef_0 CONST_8 1
&VAR_addrRef_1 &CONST_8 ?+8 ; relsq VAR_addrRef_1 CONST_8 1
&VAR_addrRef_2 &CONST_8 ?+8 ; relsq VAR_addrRef_2 CONST_8 1
&VAR_addrRef_3 &CONST_8 ?+8 ; relsq VAR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_3_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step1 LABEL STEP1_CREATE_SYMBOL tmp tmp2
; addr strcmp_const_4_a 0
# MSQ_START 1 copyaddr strcmp_const_4_a curLine_step1 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_4_a curLine_step1_addrRef_0 tmp tmp2
:STRCMP_CONST_3_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_4_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_4_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step1_addrRef_0 ?+8 ; relsq tmp curLine_step1_addrRef_0 1
&strcmp_const_4_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_4_a_addrRef_0 tmp 1
&strcmp_const_4_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_4_a_addrRef_1 tmp 1
&strcmp_const_4_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_4_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_4_a 8
&strcmp_const_4_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_4_a_addrRef_0 CONST_-8 1
&strcmp_const_4_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_4_a_addrRef_1 CONST_-8 1
&strcmp_const_4_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_4_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LABEL 8
&LABEL_addrRef_0 &CONST_-8 ?+8 ; relsq LABEL_addrRef_0 CONST_-8 1
&LABEL_addrRef_1 &CONST_-8 ?+8 ; relsq LABEL_addrRef_1 CONST_-8 1
&LABEL_addrRef_2 &CONST_-8 ?+8 ; relsq LABEL_addrRef_2 CONST_-8 1
&LABEL_addrRef_3 &CONST_-8 ?+8 ; relsq LABEL_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_4_a LABEL STRCMP_CONST_4_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_4_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_4_a_addrRef_0 &strcmp_const_4_a ?+8 ; relsq tmp2 strcmp_const_4_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LABEL
&tmp :LABEL_addrRef_0 &LABEL ?+8 ; relsq tmp LABEL 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_4_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_4_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_4_REVERT_ADDR
&tmp &CONST_-1 &JNZ_8_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_8_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_8_END ; lblsq ZERO ZERO JNZ_8_END
; label JNZ_8_REVERT_AND_JUMP
:JNZ_8_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_4_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_4_REVERT_ADDR
; label JNZ_8_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_4_len 0
# MSQ_START 1 mov strcmp_const_4_len strcmp_const_4_a tmp
# MSQ_START 2 movneg tmp strcmp_const_4_a
:JNZ_8_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_4_a_addrRef_1 &strcmp_const_4_a ?+8 ; relsq tmp strcmp_const_4_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_4_len tmp
&strcmp_const_4_len &strcmp_const_4_len ?+8 ; relsq strcmp_const_4_len strcmp_const_4_len 1
&strcmp_const_4_len &tmp ?+8 ; relsq strcmp_const_4_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_4_a 8
&strcmp_const_4_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_4_a_addrRef_0 CONST_8 1
&strcmp_const_4_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_4_a_addrRef_1 CONST_8 1
&strcmp_const_4_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_4_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LABEL 8
&LABEL_addrRef_0 &CONST_8 ?+8 ; relsq LABEL_addrRef_0 CONST_8 1
&LABEL_addrRef_1 &CONST_8 ?+8 ; relsq LABEL_addrRef_1 CONST_8 1
&LABEL_addrRef_2 &CONST_8 ?+8 ; relsq LABEL_addrRef_2 CONST_8 1
&LABEL_addrRef_3 &CONST_8 ?+8 ; relsq LABEL_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_4_aStr 0
; addr strcmp_const_4_bStr 0
# MSQ_START 1 setaddr strcmp_const_4_aStr strcmp_const_4_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_4_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_4_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_4_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_4_a
&tmp :strcmp_const_4_a_addrRef_2 &strcmp_const_4_a ?+8 ; relsq tmp strcmp_const_4_a 1
# MSQ_END 2 sub
&strcmp_const_4_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_4_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_4_bStr LABEL tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_4_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_4_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_4_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LABEL
&tmp :LABEL_addrRef_1 &LABEL ?+8 ; relsq tmp LABEL 1
# MSQ_END 2 sub
&strcmp_const_4_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_4_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_4_LOOP
# MSQ_START 1 decleq strcmp_const_4_len 0 STEP1_CREATE_SYMBOL
:STRCMP_CONST_4_LOOP &strcmp_const_4_len &CONST_0 &STEP1_CREATE_SYMBOL ; lblsq strcmp_const_4_len CONST_0 STEP1_CREATE_SYMBOL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_4_len 1
&strcmp_const_4_len &CONST_1 ?+8 ; relsq strcmp_const_4_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_4_aStr strcmp_const_4_bStr STRCMP_CONST_4_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_4_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_4_aStr_addrRef_0 &strcmp_const_4_aStr ?+8 ; relsq tmp2 strcmp_const_4_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_4_bStr
&tmp :strcmp_const_4_bStr_addrRef_0 &strcmp_const_4_bStr ?+8 ; relsq tmp strcmp_const_4_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_4_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_4_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_4_END
&tmp &CONST_-1 &JNZ_9_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_9_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_9_END ; lblsq ZERO ZERO JNZ_9_END
; label JNZ_9_REVERT_AND_JUMP
:JNZ_9_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_4_END ; lblsq ZERO ZERO STRCMP_CONST_4_END
; label JNZ_9_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_4_aStr 8
:JNZ_9_END &strcmp_const_4_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_4_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_4_bStr 8
&strcmp_const_4_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_4_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_4_LOOP
&ZERO &ZERO &STRCMP_CONST_4_LOOP ; lblsq ZERO ZERO STRCMP_CONST_4_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_4_REVERT_ADDR
# MSQ_START 1 decaddr LABEL 8
:STRCMP_CONST_4_REVERT_ADDR &LABEL_addrRef_0 &CONST_8 ?+8 ; relsq LABEL_addrRef_0 CONST_8 1
&LABEL_addrRef_1 &CONST_8 ?+8 ; relsq LABEL_addrRef_1 CONST_8 1
&LABEL_addrRef_2 &CONST_8 ?+8 ; relsq LABEL_addrRef_2 CONST_8 1
&LABEL_addrRef_3 &CONST_8 ?+8 ; relsq LABEL_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_4_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step1 ADDR STEP1_CREATE_SYMBOL tmp tmp2
; addr strcmp_const_5_a 0
# MSQ_START 1 copyaddr strcmp_const_5_a curLine_step1 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_5_a curLine_step1_addrRef_0 tmp tmp2
:STRCMP_CONST_4_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_5_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_5_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step1_addrRef_0 ?+8 ; relsq tmp curLine_step1_addrRef_0 1
&strcmp_const_5_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_5_a_addrRef_0 tmp 1
&strcmp_const_5_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_5_a_addrRef_1 tmp 1
&strcmp_const_5_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_5_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_5_a 8
&strcmp_const_5_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_5_a_addrRef_0 CONST_-8 1
&strcmp_const_5_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_5_a_addrRef_1 CONST_-8 1
&strcmp_const_5_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_5_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr ADDR 8
&ADDR_addrRef_0 &CONST_-8 ?+8 ; relsq ADDR_addrRef_0 CONST_-8 1
&ADDR_addrRef_1 &CONST_-8 ?+8 ; relsq ADDR_addrRef_1 CONST_-8 1
&ADDR_addrRef_2 &CONST_-8 ?+8 ; relsq ADDR_addrRef_2 CONST_-8 1
&ADDR_addrRef_3 &CONST_-8 ?+8 ; relsq ADDR_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_5_a ADDR STRCMP_CONST_5_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_5_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_5_a_addrRef_0 &strcmp_const_5_a ?+8 ; relsq tmp2 strcmp_const_5_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ADDR
&tmp :ADDR_addrRef_0 &ADDR ?+8 ; relsq tmp ADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_5_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_5_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_5_REVERT_ADDR
&tmp &CONST_-1 &JNZ_10_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_10_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_10_END ; lblsq ZERO ZERO JNZ_10_END
; label JNZ_10_REVERT_AND_JUMP
:JNZ_10_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_5_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_5_REVERT_ADDR
; label JNZ_10_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_5_len 0
# MSQ_START 1 mov strcmp_const_5_len strcmp_const_5_a tmp
# MSQ_START 2 movneg tmp strcmp_const_5_a
:JNZ_10_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_5_a_addrRef_1 &strcmp_const_5_a ?+8 ; relsq tmp strcmp_const_5_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_5_len tmp
&strcmp_const_5_len &strcmp_const_5_len ?+8 ; relsq strcmp_const_5_len strcmp_const_5_len 1
&strcmp_const_5_len &tmp ?+8 ; relsq strcmp_const_5_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_5_a 8
&strcmp_const_5_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_5_a_addrRef_0 CONST_8 1
&strcmp_const_5_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_5_a_addrRef_1 CONST_8 1
&strcmp_const_5_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_5_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr ADDR 8
&ADDR_addrRef_0 &CONST_8 ?+8 ; relsq ADDR_addrRef_0 CONST_8 1
&ADDR_addrRef_1 &CONST_8 ?+8 ; relsq ADDR_addrRef_1 CONST_8 1
&ADDR_addrRef_2 &CONST_8 ?+8 ; relsq ADDR_addrRef_2 CONST_8 1
&ADDR_addrRef_3 &CONST_8 ?+8 ; relsq ADDR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_5_aStr 0
; addr strcmp_const_5_bStr 0
# MSQ_START 1 setaddr strcmp_const_5_aStr strcmp_const_5_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_5_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_5_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_5_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_5_a
&tmp :strcmp_const_5_a_addrRef_2 &strcmp_const_5_a ?+8 ; relsq tmp strcmp_const_5_a 1
# MSQ_END 2 sub
&strcmp_const_5_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_5_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_5_bStr ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_5_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_5_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_5_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ADDR
&tmp :ADDR_addrRef_1 &ADDR ?+8 ; relsq tmp ADDR 1
# MSQ_END 2 sub
&strcmp_const_5_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_5_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_5_LOOP
# MSQ_START 1 decleq strcmp_const_5_len 0 STEP1_CREATE_SYMBOL
:STRCMP_CONST_5_LOOP &strcmp_const_5_len &CONST_0 &STEP1_CREATE_SYMBOL ; lblsq strcmp_const_5_len CONST_0 STEP1_CREATE_SYMBOL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_5_len 1
&strcmp_const_5_len &CONST_1 ?+8 ; relsq strcmp_const_5_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_5_aStr strcmp_const_5_bStr STRCMP_CONST_5_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_5_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_5_aStr_addrRef_0 &strcmp_const_5_aStr ?+8 ; relsq tmp2 strcmp_const_5_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_5_bStr
&tmp :strcmp_const_5_bStr_addrRef_0 &strcmp_const_5_bStr ?+8 ; relsq tmp strcmp_const_5_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_5_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_5_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_5_END
&tmp &CONST_-1 &JNZ_11_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_11_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_11_END ; lblsq ZERO ZERO JNZ_11_END
; label JNZ_11_REVERT_AND_JUMP
:JNZ_11_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_5_END ; lblsq ZERO ZERO STRCMP_CONST_5_END
; label JNZ_11_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_5_aStr 8
:JNZ_11_END &strcmp_const_5_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_5_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_5_bStr 8
&strcmp_const_5_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_5_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_5_LOOP
&ZERO &ZERO &STRCMP_CONST_5_LOOP ; lblsq ZERO ZERO STRCMP_CONST_5_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_5_REVERT_ADDR
# MSQ_START 1 decaddr ADDR 8
:STRCMP_CONST_5_REVERT_ADDR &ADDR_addrRef_0 &CONST_8 ?+8 ; relsq ADDR_addrRef_0 CONST_8 1
&ADDR_addrRef_1 &CONST_8 ?+8 ; relsq ADDR_addrRef_1 CONST_8 1
&ADDR_addrRef_2 &CONST_8 ?+8 ; relsq ADDR_addrRef_2 CONST_8 1
&ADDR_addrRef_3 &CONST_8 ?+8 ; relsq ADDR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_5_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 incaddr curLine_step1 58
:STRCMP_CONST_5_END &curLine_step1_addrRef_0 &CONST_-58 ?+8 ; relsq curLine_step1_addrRef_0 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP1_LOOP
&ZERO &ZERO &STEP1_LOOP ; lblsq ZERO ZERO STEP1_LOOP
# MSQ_END 0 lbljmp

; label STEP1_CREATE_SYMBOL
# Set the symbol name
# MSQ_START 0 incaddr curLine_step1 18
:STEP1_CREATE_SYMBOL &curLine_step1_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step1_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr
; addr curTokens_step1 0
# MSQ_START 0 setaddr curTokens_step1 curLine_step1 tmp tmp2
# MSQ_START 1 mov tmp curTokens_step1_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curTokens_step1_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curTokens_step1_addrRef_0 ?+8 ; relsq tmp2 curTokens_step1_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLine_step1
&tmp :curLine_step1_addrRef_0 &curLine_step1 ?+8 ; relsq tmp curLine_step1 1
# MSQ_END 1 sub
&curTokens_step1_addrRef_0 &tmp ?+8 ; relsq curTokens_step1_addrRef_0 tmp 1
&curTokens_step1_addrRef_1 &tmp ?+8 ; relsq curTokens_step1_addrRef_1 tmp 1
&curTokens_step1_addrRef_2 &tmp ?+8 ; relsq curTokens_step1_addrRef_2 tmp 1
&curTokens_step1_addrRef_3 &tmp ?+8 ; relsq curTokens_step1_addrRef_3 tmp 1
&curTokens_step1_addrRef_4 &tmp ?+8 ; relsq curTokens_step1_addrRef_4 tmp 1
&curTokens_step1_addrRef_5 &tmp ?+8 ; relsq curTokens_step1_addrRef_5 tmp 1
&curTokens_step1_addrRef_6 &tmp ?+8 ; relsq curTokens_step1_addrRef_6 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 decaddr curLine_step1 18
&curLine_step1_addrRef_0 &CONST_18 ?+8 ; relsq curLine_step1_addrRef_0 CONST_18 1
# MSQ_END 0 decaddr

; addr symbolsCur_step1 400000
# MSQ_START 0 alloc_str_const symbolsCur_step1 400 tmp
# MSQ_START 1 malloc_const symbolsCur_step1 400 tmp
# MSQ_START 2 malloc symbolsCur_step1 CONST_400 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:symbolsCur_step1_addrRef_0 0000000000400000 :symbolsCur_step1_addrRef_1 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
:symbolsCur_step1_addrRef_2 0000000000400000 &tmp ?+8 ; relsq symbolsCur_step1 tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_400 ?+8 ; relsq tmp CONST_400 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr symbolsCur_step1 8
&symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero symbolsCur_step1
# MSQ_START 2 sub symbolsCur_step1 symbolsCur_step1
:symbolsCur_step1_addrRef_3 0000000000400000 :symbolsCur_step1_addrRef_4 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr symbolsCur_step1 8
&symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov symbolsCur_step1 CONST_400 tmp
# MSQ_START 2 movneg tmp CONST_400
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_400 ?+8 ; relsq tmp CONST_400 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg symbolsCur_step1 tmp
:symbolsCur_step1_addrRef_5 0000000000400000 :symbolsCur_step1_addrRef_6 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
:symbolsCur_step1_addrRef_7 0000000000400000 &tmp ?+8 ; relsq symbolsCur_step1 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolsCur_step1 10
&symbolsCur_step1_addrRef_0 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_10 1
&symbolsCur_step1_addrRef_1 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_10 1
&symbolsCur_step1_addrRef_2 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_10 1
&symbolsCur_step1_addrRef_3 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_10 1
&symbolsCur_step1_addrRef_4 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_10 1
&symbolsCur_step1_addrRef_5 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_10 1
&symbolsCur_step1_addrRef_6 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_10 1
&symbolsCur_step1_addrRef_7 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_10 1
&symbolsCur_step1_addrRef_8 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_10 1
&symbolsCur_step1_addrRef_9 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_10 1
&symbolsCur_step1_addrRef_10 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_10 1
&symbolsCur_step1_addrRef_11 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_10 1
&symbolsCur_step1_addrRef_12 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_10 1
&symbolsCur_step1_addrRef_13 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_10 1
&symbolsCur_step1_addrRef_14 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_10 1
&symbolsCur_step1_addrRef_15 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_10 1
&symbolsCur_step1_addrRef_16 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_10 1
&symbolsCur_step1_addrRef_17 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_10 1
&symbolsCur_step1_addrRef_18 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_10 1
&symbolsCur_step1_addrRef_19 &CONST_10 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 strcpy symbolsCur_step1 curTokens_step1 tmp tmp2
; addr strcpy_1_strA 0
# MSQ_START 1 setaddr strcpy_1_strA symbolsCur_step1 tmp tmp2
# MSQ_START 2 mov tmp strcpy_1_strA_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_1_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_1_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp symbolsCur_step1
&tmp :symbolsCur_step1_addrRef_8 0000000000400000 ?+8 ; relsq tmp symbolsCur_step1 1
# MSQ_END 2 sub
&strcpy_1_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_1_strA_addrRef_0 tmp 1
&strcpy_1_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_1_strA_addrRef_1 tmp 1
&strcpy_1_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_1_strA_addrRef_2 tmp 1
# MSQ_END 1 setaddr
; addr strcpy_1_strB 0
# MSQ_START 1 setaddr strcpy_1_strB curTokens_step1 tmp tmp2
# MSQ_START 2 mov tmp strcpy_1_strB_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_1_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_1_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curTokens_step1
&tmp :curTokens_step1_addrRef_0 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 sub
&strcpy_1_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_1_strB_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 incaddr symbolsCur_step1 8
&symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_-8 1
&curTokens_step1_addrRef_1 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_-8 1
&curTokens_step1_addrRef_2 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_-8 1
&curTokens_step1_addrRef_3 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_-8 1
&curTokens_step1_addrRef_4 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_-8 1
&curTokens_step1_addrRef_5 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_-8 1
&curTokens_step1_addrRef_6 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov symbolsCur_step1 curTokens_step1 tmp
# MSQ_START 2 movneg tmp curTokens_step1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curTokens_step1_addrRef_1 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg symbolsCur_step1 tmp
:symbolsCur_step1_addrRef_9 0000000000400000 :symbolsCur_step1_addrRef_10 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
:symbolsCur_step1_addrRef_11 0000000000400000 &tmp ?+8 ; relsq symbolsCur_step1 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var strcpy_1_strLen 0
# MSQ_START 1 mov strcpy_1_strLen curTokens_step1 tmp
# MSQ_START 2 movneg tmp curTokens_step1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curTokens_step1_addrRef_2 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcpy_1_strLen tmp
&strcpy_1_strLen &strcpy_1_strLen ?+8 ; relsq strcpy_1_strLen strcpy_1_strLen 1
&strcpy_1_strLen &tmp ?+8 ; relsq strcpy_1_strLen tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolsCur_step1 8
&symbolsCur_step1_addrRef_0 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_8 1
&symbolsCur_step1_addrRef_1 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_8 1
&symbolsCur_step1_addrRef_2 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_8 1
&symbolsCur_step1_addrRef_3 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_8 1
&symbolsCur_step1_addrRef_4 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_8 1
&symbolsCur_step1_addrRef_5 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_8 1
&symbolsCur_step1_addrRef_6 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_8 1
&symbolsCur_step1_addrRef_7 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_8 1
&symbolsCur_step1_addrRef_8 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_8 1
&symbolsCur_step1_addrRef_9 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_8 1
&symbolsCur_step1_addrRef_10 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_8 1
&symbolsCur_step1_addrRef_11 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_8 1
&symbolsCur_step1_addrRef_12 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_8 1
&symbolsCur_step1_addrRef_13 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_8 1
&symbolsCur_step1_addrRef_14 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_8 1
&symbolsCur_step1_addrRef_15 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_8 1
&symbolsCur_step1_addrRef_16 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_8 1
&symbolsCur_step1_addrRef_17 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_8 1
&symbolsCur_step1_addrRef_18 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_8 1
&symbolsCur_step1_addrRef_19 &CONST_8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_8 1
&curTokens_step1_addrRef_1 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_8 1
&curTokens_step1_addrRef_2 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_8 1
&curTokens_step1_addrRef_3 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_8 1
&curTokens_step1_addrRef_4 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_8 1
&curTokens_step1_addrRef_5 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_8 1
&curTokens_step1_addrRef_6 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_8 1
# MSQ_END 1 decaddr
; label STRCPY_1_LOOP
# MSQ_START 1 decleq strcpy_1_strLen 0 STRCPY_1_END
:STRCPY_1_LOOP &strcpy_1_strLen &CONST_0 &STRCPY_1_END ; lblsq strcpy_1_strLen CONST_0 STRCPY_1_END
# MSQ_END 1 decleq
# MSQ_START 1 dec strcpy_1_strLen 1
&strcpy_1_strLen &CONST_1 ?+8 ; relsq strcpy_1_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 mov strcpy_1_strA strcpy_1_strB tmp
# MSQ_START 2 movneg tmp strcpy_1_strB
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_1_strB_addrRef_0 &strcpy_1_strB ?+8 ; relsq tmp strcpy_1_strB 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcpy_1_strA tmp
:strcpy_1_strA_addrRef_0 &strcpy_1_strA :strcpy_1_strA_addrRef_1 &strcpy_1_strA ?+8 ; relsq strcpy_1_strA strcpy_1_strA 1
:strcpy_1_strA_addrRef_2 &strcpy_1_strA &tmp ?+8 ; relsq strcpy_1_strA tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr strcpy_1_strA 8
&strcpy_1_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_1_strA_addrRef_0 CONST_-8 1
&strcpy_1_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_1_strA_addrRef_1 CONST_-8 1
&strcpy_1_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_1_strA_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcpy_1_strB 8
&strcpy_1_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_1_strB_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCPY_1_LOOP
&ZERO &ZERO &STRCPY_1_LOOP ; lblsq ZERO ZERO STRCPY_1_LOOP
# MSQ_END 1 lbljmp
; label STRCPY_1_END
# MSQ_END 0 strcpy
# MSQ_START 0 incaddr curTokens_step1 18
:STRCPY_1_END &curTokens_step1_addrRef_0 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_-18 1
&curTokens_step1_addrRef_1 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_-18 1
&curTokens_step1_addrRef_2 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_-18 1
&curTokens_step1_addrRef_3 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_-18 1
&curTokens_step1_addrRef_4 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_-18 1
&curTokens_step1_addrRef_5 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_-18 1
&curTokens_step1_addrRef_6 &CONST_-18 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_-18 1
# MSQ_END 0 incaddr

# Handle the symbol address
# MSQ_START 0 incaddr symbolsCur_step1 18
&symbolsCur_step1_addrRef_0 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-18 1
&symbolsCur_step1_addrRef_1 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-18 1
&symbolsCur_step1_addrRef_2 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-18 1
&symbolsCur_step1_addrRef_3 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-18 1
&symbolsCur_step1_addrRef_4 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-18 1
&symbolsCur_step1_addrRef_5 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-18 1
&symbolsCur_step1_addrRef_6 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-18 1
&symbolsCur_step1_addrRef_7 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-18 1
&symbolsCur_step1_addrRef_8 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-18 1
&symbolsCur_step1_addrRef_9 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-18 1
&symbolsCur_step1_addrRef_10 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-18 1
&symbolsCur_step1_addrRef_11 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-18 1
&symbolsCur_step1_addrRef_12 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-18 1
&symbolsCur_step1_addrRef_13 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-18 1
&symbolsCur_step1_addrRef_14 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-18 1
&symbolsCur_step1_addrRef_15 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-18 1
&symbolsCur_step1_addrRef_16 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-18 1
&symbolsCur_step1_addrRef_17 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-18 1
&symbolsCur_step1_addrRef_18 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-18 1
&symbolsCur_step1_addrRef_19 &CONST_-18 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 set symbolsCur_step1 -1
# MSQ_START 1 zero symbolsCur_step1
# MSQ_START 2 sub symbolsCur_step1 symbolsCur_step1
:symbolsCur_step1_addrRef_12 0000000000400000 :symbolsCur_step1_addrRef_13 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc symbolsCur_step1 -1
# MSQ_START 2 dec symbolsCur_step1 1
:symbolsCur_step1_addrRef_14 0000000000400000 &CONST_1 ?+8 ; relsq symbolsCur_step1 CONST_1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 strcmp_const curLine_step1 ADDR STEP1_SET_ADDRESS tmp tmp2
; addr strcmp_const_6_a 0
# MSQ_START 1 copyaddr strcmp_const_6_a curLine_step1 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_6_a curLine_step1_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_6_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_6_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step1_addrRef_0 ?+8 ; relsq tmp curLine_step1_addrRef_0 1
&strcmp_const_6_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_6_a_addrRef_0 tmp 1
&strcmp_const_6_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_6_a_addrRef_1 tmp 1
&strcmp_const_6_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_6_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_6_a 8
&strcmp_const_6_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_6_a_addrRef_0 CONST_-8 1
&strcmp_const_6_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_6_a_addrRef_1 CONST_-8 1
&strcmp_const_6_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_6_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr ADDR 8
&ADDR_addrRef_0 &CONST_-8 ?+8 ; relsq ADDR_addrRef_0 CONST_-8 1
&ADDR_addrRef_1 &CONST_-8 ?+8 ; relsq ADDR_addrRef_1 CONST_-8 1
&ADDR_addrRef_2 &CONST_-8 ?+8 ; relsq ADDR_addrRef_2 CONST_-8 1
&ADDR_addrRef_3 &CONST_-8 ?+8 ; relsq ADDR_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_6_a ADDR STRCMP_CONST_6_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_6_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_6_a_addrRef_0 &strcmp_const_6_a ?+8 ; relsq tmp2 strcmp_const_6_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ADDR
&tmp :ADDR_addrRef_2 &ADDR ?+8 ; relsq tmp ADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_6_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_6_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_6_REVERT_ADDR
&tmp &CONST_-1 &JNZ_12_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_12_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_12_END ; lblsq ZERO ZERO JNZ_12_END
; label JNZ_12_REVERT_AND_JUMP
:JNZ_12_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_6_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_6_REVERT_ADDR
; label JNZ_12_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_6_len 0
# MSQ_START 1 mov strcmp_const_6_len strcmp_const_6_a tmp
# MSQ_START 2 movneg tmp strcmp_const_6_a
:JNZ_12_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_6_a_addrRef_1 &strcmp_const_6_a ?+8 ; relsq tmp strcmp_const_6_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_6_len tmp
&strcmp_const_6_len &strcmp_const_6_len ?+8 ; relsq strcmp_const_6_len strcmp_const_6_len 1
&strcmp_const_6_len &tmp ?+8 ; relsq strcmp_const_6_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_6_a 8
&strcmp_const_6_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_6_a_addrRef_0 CONST_8 1
&strcmp_const_6_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_6_a_addrRef_1 CONST_8 1
&strcmp_const_6_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_6_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr ADDR 8
&ADDR_addrRef_0 &CONST_8 ?+8 ; relsq ADDR_addrRef_0 CONST_8 1
&ADDR_addrRef_1 &CONST_8 ?+8 ; relsq ADDR_addrRef_1 CONST_8 1
&ADDR_addrRef_2 &CONST_8 ?+8 ; relsq ADDR_addrRef_2 CONST_8 1
&ADDR_addrRef_3 &CONST_8 ?+8 ; relsq ADDR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_6_aStr 0
; addr strcmp_const_6_bStr 0
# MSQ_START 1 setaddr strcmp_const_6_aStr strcmp_const_6_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_6_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_6_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_6_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_6_a
&tmp :strcmp_const_6_a_addrRef_2 &strcmp_const_6_a ?+8 ; relsq tmp strcmp_const_6_a 1
# MSQ_END 2 sub
&strcmp_const_6_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_6_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_6_bStr ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_6_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_6_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_6_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ADDR
&tmp :ADDR_addrRef_3 &ADDR ?+8 ; relsq tmp ADDR 1
# MSQ_END 2 sub
&strcmp_const_6_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_6_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_6_LOOP
# MSQ_START 1 decleq strcmp_const_6_len 0 STEP1_SET_ADDRESS
:STRCMP_CONST_6_LOOP &strcmp_const_6_len &CONST_0 &STEP1_SET_ADDRESS ; lblsq strcmp_const_6_len CONST_0 STEP1_SET_ADDRESS
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_6_len 1
&strcmp_const_6_len &CONST_1 ?+8 ; relsq strcmp_const_6_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_6_aStr strcmp_const_6_bStr STRCMP_CONST_6_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_6_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_6_aStr_addrRef_0 &strcmp_const_6_aStr ?+8 ; relsq tmp2 strcmp_const_6_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_6_bStr
&tmp :strcmp_const_6_bStr_addrRef_0 &strcmp_const_6_bStr ?+8 ; relsq tmp strcmp_const_6_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_6_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_6_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_6_END
&tmp &CONST_-1 &JNZ_13_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_13_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_13_END ; lblsq ZERO ZERO JNZ_13_END
; label JNZ_13_REVERT_AND_JUMP
:JNZ_13_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_6_END ; lblsq ZERO ZERO STRCMP_CONST_6_END
; label JNZ_13_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_6_aStr 8
:JNZ_13_END &strcmp_const_6_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_6_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_6_bStr 8
&strcmp_const_6_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_6_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_6_LOOP
&ZERO &ZERO &STRCMP_CONST_6_LOOP ; lblsq ZERO ZERO STRCMP_CONST_6_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_6_REVERT_ADDR
# MSQ_START 1 decaddr ADDR 8
:STRCMP_CONST_6_REVERT_ADDR &ADDR_addrRef_0 &CONST_8 ?+8 ; relsq ADDR_addrRef_0 CONST_8 1
&ADDR_addrRef_1 &CONST_8 ?+8 ; relsq ADDR_addrRef_1 CONST_8 1
&ADDR_addrRef_2 &CONST_8 ?+8 ; relsq ADDR_addrRef_2 CONST_8 1
&ADDR_addrRef_3 &CONST_8 ?+8 ; relsq ADDR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_6_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 lbljmp STEP1_HANDLE_REFCOUNT
:STRCMP_CONST_6_END &ZERO &ZERO &STEP1_HANDLE_REFCOUNT ; lblsq ZERO ZERO STEP1_HANDLE_REFCOUNT
# MSQ_END 0 lbljmp

; label STEP1_SET_ADDRESS
# MSQ_START 0 from_hex symbolsCur_step1 curTokens_step1 tmp tmp2
; addr from_hex_0_a 0
# MSQ_START 1 copyaddr from_hex_0_a symbolsCur_step1 tmp tmp2
# MSQ_START 2 setaddr from_hex_0_a symbolsCur_step1_addrRef_0 tmp tmp2
:STEP1_SET_ADDRESS &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &from_hex_0_a_addrRef_0 ?+8 ; relsq tmp2 from_hex_0_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &symbolsCur_step1_addrRef_0 ?+8 ; relsq tmp symbolsCur_step1_addrRef_0 1
&from_hex_0_a_addrRef_0 &tmp ?+8 ; relsq from_hex_0_a_addrRef_0 tmp 1
&from_hex_0_a_addrRef_1 &tmp ?+8 ; relsq from_hex_0_a_addrRef_1 tmp 1
&from_hex_0_a_addrRef_2 &tmp ?+8 ; relsq from_hex_0_a_addrRef_2 tmp 1
&from_hex_0_a_addrRef_3 &tmp ?+8 ; relsq from_hex_0_a_addrRef_3 tmp 1
&from_hex_0_a_addrRef_4 &tmp ?+8 ; relsq from_hex_0_a_addrRef_4 tmp 1
&from_hex_0_a_addrRef_5 &tmp ?+8 ; relsq from_hex_0_a_addrRef_5 tmp 1
&from_hex_0_a_addrRef_6 &tmp ?+8 ; relsq from_hex_0_a_addrRef_6 tmp 1
&from_hex_0_a_addrRef_7 &tmp ?+8 ; relsq from_hex_0_a_addrRef_7 tmp 1
&from_hex_0_a_addrRef_8 &tmp ?+8 ; relsq from_hex_0_a_addrRef_8 tmp 1
&from_hex_0_a_addrRef_9 &tmp ?+8 ; relsq from_hex_0_a_addrRef_9 tmp 1
&from_hex_0_a_addrRef_10 &tmp ?+8 ; relsq from_hex_0_a_addrRef_10 tmp 1
&from_hex_0_a_addrRef_11 &tmp ?+8 ; relsq from_hex_0_a_addrRef_11 tmp 1
&from_hex_0_a_addrRef_12 &tmp ?+8 ; relsq from_hex_0_a_addrRef_12 tmp 1
&from_hex_0_a_addrRef_13 &tmp ?+8 ; relsq from_hex_0_a_addrRef_13 tmp 1
&from_hex_0_a_addrRef_14 &tmp ?+8 ; relsq from_hex_0_a_addrRef_14 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 zero from_hex_0_a
# MSQ_START 2 sub from_hex_0_a from_hex_0_a
:from_hex_0_a_addrRef_0 &from_hex_0_a :from_hex_0_a_addrRef_1 &from_hex_0_a ?+8 ; relsq from_hex_0_a from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; addr from_hex_0_strBuf 0
# MSQ_START 1 setaddr from_hex_0_strBuf curTokens_step1 tmp tmp2
# MSQ_START 2 mov tmp from_hex_0_strBuf_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &from_hex_0_strBuf_addrRef_0 ?+8 ; relsq tmp2 from_hex_0_strBuf_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curTokens_step1
&tmp :curTokens_step1_addrRef_3 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 sub
&from_hex_0_strBuf_addrRef_0 &tmp ?+8 ; relsq from_hex_0_strBuf_addrRef_0 tmp 1
&from_hex_0_strBuf_addrRef_1 &tmp ?+8 ; relsq from_hex_0_strBuf_addrRef_1 tmp 1
# MSQ_END 1 setaddr
; var from_hex_0_strLen 0
# MSQ_START 1 incaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_-8 1
&curTokens_step1_addrRef_1 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_-8 1
&curTokens_step1_addrRef_2 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_-8 1
&curTokens_step1_addrRef_3 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_-8 1
&curTokens_step1_addrRef_4 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_-8 1
&curTokens_step1_addrRef_5 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_-8 1
&curTokens_step1_addrRef_6 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov from_hex_0_strLen curTokens_step1 tmp
# MSQ_START 2 movneg tmp curTokens_step1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curTokens_step1_addrRef_4 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg from_hex_0_strLen tmp
&from_hex_0_strLen &from_hex_0_strLen ?+8 ; relsq from_hex_0_strLen from_hex_0_strLen 1
&from_hex_0_strLen &tmp ?+8 ; relsq from_hex_0_strLen tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_8 1
&curTokens_step1_addrRef_1 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_8 1
&curTokens_step1_addrRef_2 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_8 1
&curTokens_step1_addrRef_3 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_8 1
&curTokens_step1_addrRef_4 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_8 1
&curTokens_step1_addrRef_5 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_8 1
&curTokens_step1_addrRef_6 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_8 1
# MSQ_END 1 decaddr
; var from_hex_0_isNeg 0
# MSQ_START 1 zero from_hex_0_isNeg
# MSQ_START 2 sub from_hex_0_isNeg from_hex_0_isNeg
&from_hex_0_isNeg &from_hex_0_isNeg ?+8 ; relsq from_hex_0_isNeg from_hex_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 mov tmp from_hex_0_strBuf tmp2
# MSQ_START 2 movneg tmp2 from_hex_0_strBuf
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :from_hex_0_strBuf_addrRef_0 &from_hex_0_strBuf ?+8 ; relsq tmp2 from_hex_0_strBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decleq tmp 2c FROM_HEX_0_LOOP
&tmp &CONST_2C &FROM_HEX_0_LOOP ; lblsq tmp CONST_2C FROM_HEX_0_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 decleq tmp 1 FROM_HEX_0_NEG_SIGN
&tmp &CONST_1 &FROM_HEX_0_NEG_SIGN ; lblsq tmp CONST_1 FROM_HEX_0_NEG_SIGN
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp FROM_HEX_0_LOOP
&ZERO &ZERO &FROM_HEX_0_LOOP ; lblsq ZERO ZERO FROM_HEX_0_LOOP
# MSQ_END 1 lbljmp
; label FROM_HEX_0_NEG_SIGN
# MSQ_START 1 inc from_hex_0_isNeg 1
# MSQ_START 2 dec from_hex_0_isNeg -1
:FROM_HEX_0_NEG_SIGN &from_hex_0_isNeg &CONST_-1 ?+8 ; relsq from_hex_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 dec from_hex_0_strLen 1
&from_hex_0_strLen &CONST_1 ?+8 ; relsq from_hex_0_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 incaddr from_hex_0_strBuf 8
&from_hex_0_strBuf_addrRef_0 &CONST_-8 ?+8 ; relsq from_hex_0_strBuf_addrRef_0 CONST_-8 1
&from_hex_0_strBuf_addrRef_1 &CONST_-8 ?+8 ; relsq from_hex_0_strBuf_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
; label FROM_HEX_0_LOOP
# MSQ_START 1 decleq from_hex_0_strLen 0 FROM_HEX_0_NEGATE
:FROM_HEX_0_LOOP &from_hex_0_strLen &CONST_0 &FROM_HEX_0_NEGATE ; lblsq from_hex_0_strLen CONST_0 FROM_HEX_0_NEGATE
# MSQ_END 1 decleq
# MSQ_START 1 dec from_hex_0_strLen 1
&from_hex_0_strLen &CONST_1 ?+8 ; relsq from_hex_0_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 mov tmp from_hex_0_strBuf tmp2
# MSQ_START 2 movneg tmp2 from_hex_0_strBuf
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :from_hex_0_strBuf_addrRef_1 &from_hex_0_strBuf ?+8 ; relsq tmp2 from_hex_0_strBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr from_hex_0_strBuf 8
&from_hex_0_strBuf_addrRef_0 &CONST_-8 ?+8 ; relsq from_hex_0_strBuf_addrRef_0 CONST_-8 1
&from_hex_0_strBuf_addrRef_1 &CONST_-8 ?+8 ; relsq from_hex_0_strBuf_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
; var from_hex_0_val 0
# MSQ_START 1 zero from_hex_0_val
# MSQ_START 2 sub from_hex_0_val from_hex_0_val
&from_hex_0_val &from_hex_0_val ?+8 ; relsq from_hex_0_val from_hex_0_val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 dec tmp 2f
&tmp &CONST_2F ?+8 ; relsq tmp CONST_2F 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_0_val tmp
# MSQ_START 2 zero from_hex_0_val
&from_hex_0_val &from_hex_0_val ?+8 ; relsq from_hex_0_val from_hex_0_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_0_val tmp
&from_hex_0_val &tmp ?+8 ; relsq from_hex_0_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 inc from_hex_0_val 1
# MSQ_START 2 dec from_hex_0_val -1
&from_hex_0_val &CONST_-1 ?+8 ; relsq from_hex_0_val CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 decleq tmp a FROM_HEX_0_WRITE
&tmp &CONST_A &FROM_HEX_0_WRITE ; lblsq tmp CONST_A FROM_HEX_0_WRITE
# MSQ_END 1 decleq
# MSQ_START 1 dec tmp 7
&tmp &CONST_7 ?+8 ; relsq tmp CONST_7 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_0_val tmp
# MSQ_START 2 zero from_hex_0_val
&from_hex_0_val &from_hex_0_val ?+8 ; relsq from_hex_0_val from_hex_0_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_0_val tmp
&from_hex_0_val &tmp ?+8 ; relsq from_hex_0_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec from_hex_0_val 9
&from_hex_0_val &CONST_9 ?+8 ; relsq from_hex_0_val CONST_9 1
# MSQ_END 1 dec
# MSQ_START 1 decleq tmp 6 FROM_HEX_0_WRITE
&tmp &CONST_6 &FROM_HEX_0_WRITE ; lblsq tmp CONST_6 FROM_HEX_0_WRITE
# MSQ_END 1 decleq
# MSQ_START 1 dec tmp 1a
&tmp &CONST_1A ?+8 ; relsq tmp CONST_1A 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_0_val tmp
# MSQ_START 2 zero from_hex_0_val
&from_hex_0_val &from_hex_0_val ?+8 ; relsq from_hex_0_val from_hex_0_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_0_val tmp
&from_hex_0_val &tmp ?+8 ; relsq from_hex_0_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec from_hex_0_val 9
&from_hex_0_val &CONST_9 ?+8 ; relsq from_hex_0_val CONST_9 1
# MSQ_END 1 dec
; label FROM_HEX_0_WRITE
# MSQ_START 1 mul_16 from_hex_0_a tmp
# MSQ_START 2 zero tmp
:FROM_HEX_0_WRITE &tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp from_hex_0_a
&tmp :from_hex_0_a_addrRef_2 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_0_a
&tmp :from_hex_0_a_addrRef_3 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_0_a
&tmp :from_hex_0_a_addrRef_4 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_0_a
&tmp :from_hex_0_a_addrRef_5 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_0_a
&tmp :from_hex_0_a_addrRef_6 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_0_a tmp
:from_hex_0_a_addrRef_7 &from_hex_0_a &tmp ?+8 ; relsq from_hex_0_a tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_0_a tmp
:from_hex_0_a_addrRef_8 &from_hex_0_a &tmp ?+8 ; relsq from_hex_0_a tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_0_a tmp
:from_hex_0_a_addrRef_9 &from_hex_0_a &tmp ?+8 ; relsq from_hex_0_a tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_16
# MSQ_START 1 sub from_hex_0_a from_hex_0_val
:from_hex_0_a_addrRef_10 &from_hex_0_a &from_hex_0_val ?+8 ; relsq from_hex_0_a from_hex_0_val 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp FROM_HEX_0_LOOP
&ZERO &ZERO &FROM_HEX_0_LOOP ; lblsq ZERO ZERO FROM_HEX_0_LOOP
# MSQ_END 1 lbljmp
; label FROM_HEX_0_NEGATE
# MSQ_START 1 decleq from_hex_0_isNeg 0 FROM_HEX_0_END
:FROM_HEX_0_NEGATE &from_hex_0_isNeg &CONST_0 &FROM_HEX_0_END ; lblsq from_hex_0_isNeg CONST_0 FROM_HEX_0_END
# MSQ_END 1 decleq
# MSQ_START 1 neg from_hex_0_a tmp tmp2
# MSQ_START 2 movneg tmp from_hex_0_a
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :from_hex_0_a_addrRef_11 &from_hex_0_a ?+8 ; relsq tmp from_hex_0_a 1
# MSQ_END 2 movneg
# MSQ_START 2 mov from_hex_0_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:from_hex_0_a_addrRef_12 &from_hex_0_a :from_hex_0_a_addrRef_13 &from_hex_0_a ?+8 ; relsq from_hex_0_a from_hex_0_a 1
:from_hex_0_a_addrRef_14 &from_hex_0_a &tmp2 ?+8 ; relsq from_hex_0_a tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label FROM_HEX_0_END
# MSQ_END 0 from_hex

; label STEP1_HANDLE_REFCOUNT
# MSQ_START 0 incaddr symbolsCur_step1 8
:FROM_HEX_0_END :STEP1_HANDLE_REFCOUNT &symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero symbolsCur_step1
# MSQ_START 1 sub symbolsCur_step1 symbolsCur_step1
:symbolsCur_step1_addrRef_15 0000000000400000 :symbolsCur_step1_addrRef_16 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label STEP1_HANDLE_VALUE
# MSQ_START 0 incaddr symbolsCur_step1 8
:STEP1_HANDLE_VALUE &symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov symbolsCur_step1 SYM_VAL_PLACEHOLDER tmp
# MSQ_START 1 movneg tmp SYM_VAL_PLACEHOLDER
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SYM_VAL_PLACEHOLDER
&tmp &SYM_VAL_PLACEHOLDER ?+8 ; relsq tmp SYM_VAL_PLACEHOLDER 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg symbolsCur_step1 tmp
# MSQ_START 2 zero symbolsCur_step1
:symbolsCur_step1_addrRef_17 0000000000400000 :symbolsCur_step1_addrRef_18 0000000000400000 ?+8 ; relsq symbolsCur_step1 symbolsCur_step1 1
# MSQ_END 2 zero
# MSQ_START 2 sub symbolsCur_step1 tmp
:symbolsCur_step1_addrRef_19 0000000000400000 &tmp ?+8 ; relsq symbolsCur_step1 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 strcmp_const curLine_step1 VAR STEP1_SET_VALUE tmp tmp2
; addr strcmp_const_7_a 0
# MSQ_START 1 copyaddr strcmp_const_7_a curLine_step1 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_7_a curLine_step1_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_7_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_7_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step1_addrRef_0 ?+8 ; relsq tmp curLine_step1_addrRef_0 1
&strcmp_const_7_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_7_a_addrRef_0 tmp 1
&strcmp_const_7_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_7_a_addrRef_1 tmp 1
&strcmp_const_7_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_7_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_7_a 8
&strcmp_const_7_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_7_a_addrRef_0 CONST_-8 1
&strcmp_const_7_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_7_a_addrRef_1 CONST_-8 1
&strcmp_const_7_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_7_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr VAR 8
&VAR_addrRef_0 &CONST_-8 ?+8 ; relsq VAR_addrRef_0 CONST_-8 1
&VAR_addrRef_1 &CONST_-8 ?+8 ; relsq VAR_addrRef_1 CONST_-8 1
&VAR_addrRef_2 &CONST_-8 ?+8 ; relsq VAR_addrRef_2 CONST_-8 1
&VAR_addrRef_3 &CONST_-8 ?+8 ; relsq VAR_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_7_a VAR STRCMP_CONST_7_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_7_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_7_a_addrRef_0 &strcmp_const_7_a ?+8 ; relsq tmp2 strcmp_const_7_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp VAR
&tmp :VAR_addrRef_2 &VAR ?+8 ; relsq tmp VAR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_7_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_7_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_7_REVERT_ADDR
&tmp &CONST_-1 &JNZ_14_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_14_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_14_END ; lblsq ZERO ZERO JNZ_14_END
; label JNZ_14_REVERT_AND_JUMP
:JNZ_14_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_7_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_7_REVERT_ADDR
; label JNZ_14_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_7_len 0
# MSQ_START 1 mov strcmp_const_7_len strcmp_const_7_a tmp
# MSQ_START 2 movneg tmp strcmp_const_7_a
:JNZ_14_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_7_a_addrRef_1 &strcmp_const_7_a ?+8 ; relsq tmp strcmp_const_7_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_7_len tmp
&strcmp_const_7_len &strcmp_const_7_len ?+8 ; relsq strcmp_const_7_len strcmp_const_7_len 1
&strcmp_const_7_len &tmp ?+8 ; relsq strcmp_const_7_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_7_a 8
&strcmp_const_7_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_7_a_addrRef_0 CONST_8 1
&strcmp_const_7_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_7_a_addrRef_1 CONST_8 1
&strcmp_const_7_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_7_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr VAR 8
&VAR_addrRef_0 &CONST_8 ?+8 ; relsq VAR_addrRef_0 CONST_8 1
&VAR_addrRef_1 &CONST_8 ?+8 ; relsq VAR_addrRef_1 CONST_8 1
&VAR_addrRef_2 &CONST_8 ?+8 ; relsq VAR_addrRef_2 CONST_8 1
&VAR_addrRef_3 &CONST_8 ?+8 ; relsq VAR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_7_aStr 0
; addr strcmp_const_7_bStr 0
# MSQ_START 1 setaddr strcmp_const_7_aStr strcmp_const_7_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_7_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_7_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_7_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_7_a
&tmp :strcmp_const_7_a_addrRef_2 &strcmp_const_7_a ?+8 ; relsq tmp strcmp_const_7_a 1
# MSQ_END 2 sub
&strcmp_const_7_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_7_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_7_bStr VAR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_7_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_7_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_7_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp VAR
&tmp :VAR_addrRef_3 &VAR ?+8 ; relsq tmp VAR 1
# MSQ_END 2 sub
&strcmp_const_7_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_7_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_7_LOOP
# MSQ_START 1 decleq strcmp_const_7_len 0 STEP1_SET_VALUE
:STRCMP_CONST_7_LOOP &strcmp_const_7_len &CONST_0 &STEP1_SET_VALUE ; lblsq strcmp_const_7_len CONST_0 STEP1_SET_VALUE
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_7_len 1
&strcmp_const_7_len &CONST_1 ?+8 ; relsq strcmp_const_7_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_7_aStr strcmp_const_7_bStr STRCMP_CONST_7_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_7_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_7_aStr_addrRef_0 &strcmp_const_7_aStr ?+8 ; relsq tmp2 strcmp_const_7_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_7_bStr
&tmp :strcmp_const_7_bStr_addrRef_0 &strcmp_const_7_bStr ?+8 ; relsq tmp strcmp_const_7_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_7_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_7_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_7_END
&tmp &CONST_-1 &JNZ_15_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_15_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_15_END ; lblsq ZERO ZERO JNZ_15_END
; label JNZ_15_REVERT_AND_JUMP
:JNZ_15_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_7_END ; lblsq ZERO ZERO STRCMP_CONST_7_END
; label JNZ_15_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_7_aStr 8
:JNZ_15_END &strcmp_const_7_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_7_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_7_bStr 8
&strcmp_const_7_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_7_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_7_LOOP
&ZERO &ZERO &STRCMP_CONST_7_LOOP ; lblsq ZERO ZERO STRCMP_CONST_7_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_7_REVERT_ADDR
# MSQ_START 1 decaddr VAR 8
:STRCMP_CONST_7_REVERT_ADDR &VAR_addrRef_0 &CONST_8 ?+8 ; relsq VAR_addrRef_0 CONST_8 1
&VAR_addrRef_1 &CONST_8 ?+8 ; relsq VAR_addrRef_1 CONST_8 1
&VAR_addrRef_2 &CONST_8 ?+8 ; relsq VAR_addrRef_2 CONST_8 1
&VAR_addrRef_3 &CONST_8 ?+8 ; relsq VAR_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_7_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 lbljmp STEP1_LOOP_END
:STRCMP_CONST_7_END &ZERO &ZERO &STEP1_LOOP_END ; lblsq ZERO ZERO STEP1_LOOP_END
# MSQ_END 0 lbljmp

; label STEP1_SET_VALUE
# MSQ_START 0 from_hex symbolsCur_step1 curTokens_step1 tmp tmp2
; addr from_hex_1_a 0
# MSQ_START 1 copyaddr from_hex_1_a symbolsCur_step1 tmp tmp2
# MSQ_START 2 setaddr from_hex_1_a symbolsCur_step1_addrRef_0 tmp tmp2
:STEP1_SET_VALUE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &from_hex_1_a_addrRef_0 ?+8 ; relsq tmp2 from_hex_1_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &symbolsCur_step1_addrRef_0 ?+8 ; relsq tmp symbolsCur_step1_addrRef_0 1
&from_hex_1_a_addrRef_0 &tmp ?+8 ; relsq from_hex_1_a_addrRef_0 tmp 1
&from_hex_1_a_addrRef_1 &tmp ?+8 ; relsq from_hex_1_a_addrRef_1 tmp 1
&from_hex_1_a_addrRef_2 &tmp ?+8 ; relsq from_hex_1_a_addrRef_2 tmp 1
&from_hex_1_a_addrRef_3 &tmp ?+8 ; relsq from_hex_1_a_addrRef_3 tmp 1
&from_hex_1_a_addrRef_4 &tmp ?+8 ; relsq from_hex_1_a_addrRef_4 tmp 1
&from_hex_1_a_addrRef_5 &tmp ?+8 ; relsq from_hex_1_a_addrRef_5 tmp 1
&from_hex_1_a_addrRef_6 &tmp ?+8 ; relsq from_hex_1_a_addrRef_6 tmp 1
&from_hex_1_a_addrRef_7 &tmp ?+8 ; relsq from_hex_1_a_addrRef_7 tmp 1
&from_hex_1_a_addrRef_8 &tmp ?+8 ; relsq from_hex_1_a_addrRef_8 tmp 1
&from_hex_1_a_addrRef_9 &tmp ?+8 ; relsq from_hex_1_a_addrRef_9 tmp 1
&from_hex_1_a_addrRef_10 &tmp ?+8 ; relsq from_hex_1_a_addrRef_10 tmp 1
&from_hex_1_a_addrRef_11 &tmp ?+8 ; relsq from_hex_1_a_addrRef_11 tmp 1
&from_hex_1_a_addrRef_12 &tmp ?+8 ; relsq from_hex_1_a_addrRef_12 tmp 1
&from_hex_1_a_addrRef_13 &tmp ?+8 ; relsq from_hex_1_a_addrRef_13 tmp 1
&from_hex_1_a_addrRef_14 &tmp ?+8 ; relsq from_hex_1_a_addrRef_14 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 zero from_hex_1_a
# MSQ_START 2 sub from_hex_1_a from_hex_1_a
:from_hex_1_a_addrRef_0 &from_hex_1_a :from_hex_1_a_addrRef_1 &from_hex_1_a ?+8 ; relsq from_hex_1_a from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; addr from_hex_1_strBuf 0
# MSQ_START 1 setaddr from_hex_1_strBuf curTokens_step1 tmp tmp2
# MSQ_START 2 mov tmp from_hex_1_strBuf_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &from_hex_1_strBuf_addrRef_0 ?+8 ; relsq tmp2 from_hex_1_strBuf_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curTokens_step1
&tmp :curTokens_step1_addrRef_5 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 sub
&from_hex_1_strBuf_addrRef_0 &tmp ?+8 ; relsq from_hex_1_strBuf_addrRef_0 tmp 1
&from_hex_1_strBuf_addrRef_1 &tmp ?+8 ; relsq from_hex_1_strBuf_addrRef_1 tmp 1
# MSQ_END 1 setaddr
; var from_hex_1_strLen 0
# MSQ_START 1 incaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_-8 1
&curTokens_step1_addrRef_1 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_-8 1
&curTokens_step1_addrRef_2 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_-8 1
&curTokens_step1_addrRef_3 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_-8 1
&curTokens_step1_addrRef_4 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_-8 1
&curTokens_step1_addrRef_5 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_-8 1
&curTokens_step1_addrRef_6 &CONST_-8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov from_hex_1_strLen curTokens_step1 tmp
# MSQ_START 2 movneg tmp curTokens_step1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curTokens_step1_addrRef_6 &curTokens_step1 ?+8 ; relsq tmp curTokens_step1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg from_hex_1_strLen tmp
&from_hex_1_strLen &from_hex_1_strLen ?+8 ; relsq from_hex_1_strLen from_hex_1_strLen 1
&from_hex_1_strLen &tmp ?+8 ; relsq from_hex_1_strLen tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curTokens_step1 8
&curTokens_step1_addrRef_0 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_0 CONST_8 1
&curTokens_step1_addrRef_1 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_1 CONST_8 1
&curTokens_step1_addrRef_2 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_2 CONST_8 1
&curTokens_step1_addrRef_3 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_3 CONST_8 1
&curTokens_step1_addrRef_4 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_4 CONST_8 1
&curTokens_step1_addrRef_5 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_5 CONST_8 1
&curTokens_step1_addrRef_6 &CONST_8 ?+8 ; relsq curTokens_step1_addrRef_6 CONST_8 1
# MSQ_END 1 decaddr
; var from_hex_1_isNeg 0
# MSQ_START 1 zero from_hex_1_isNeg
# MSQ_START 2 sub from_hex_1_isNeg from_hex_1_isNeg
&from_hex_1_isNeg &from_hex_1_isNeg ?+8 ; relsq from_hex_1_isNeg from_hex_1_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 mov tmp from_hex_1_strBuf tmp2
# MSQ_START 2 movneg tmp2 from_hex_1_strBuf
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :from_hex_1_strBuf_addrRef_0 &from_hex_1_strBuf ?+8 ; relsq tmp2 from_hex_1_strBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decleq tmp 2c FROM_HEX_1_LOOP
&tmp &CONST_2C &FROM_HEX_1_LOOP ; lblsq tmp CONST_2C FROM_HEX_1_LOOP
# MSQ_END 1 decleq
# MSQ_START 1 decleq tmp 1 FROM_HEX_1_NEG_SIGN
&tmp &CONST_1 &FROM_HEX_1_NEG_SIGN ; lblsq tmp CONST_1 FROM_HEX_1_NEG_SIGN
# MSQ_END 1 decleq
# MSQ_START 1 lbljmp FROM_HEX_1_LOOP
&ZERO &ZERO &FROM_HEX_1_LOOP ; lblsq ZERO ZERO FROM_HEX_1_LOOP
# MSQ_END 1 lbljmp
; label FROM_HEX_1_NEG_SIGN
# MSQ_START 1 inc from_hex_1_isNeg 1
# MSQ_START 2 dec from_hex_1_isNeg -1
:FROM_HEX_1_NEG_SIGN &from_hex_1_isNeg &CONST_-1 ?+8 ; relsq from_hex_1_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 dec from_hex_1_strLen 1
&from_hex_1_strLen &CONST_1 ?+8 ; relsq from_hex_1_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 incaddr from_hex_1_strBuf 8
&from_hex_1_strBuf_addrRef_0 &CONST_-8 ?+8 ; relsq from_hex_1_strBuf_addrRef_0 CONST_-8 1
&from_hex_1_strBuf_addrRef_1 &CONST_-8 ?+8 ; relsq from_hex_1_strBuf_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
; label FROM_HEX_1_LOOP
# MSQ_START 1 decleq from_hex_1_strLen 0 FROM_HEX_1_NEGATE
:FROM_HEX_1_LOOP &from_hex_1_strLen &CONST_0 &FROM_HEX_1_NEGATE ; lblsq from_hex_1_strLen CONST_0 FROM_HEX_1_NEGATE
# MSQ_END 1 decleq
# MSQ_START 1 dec from_hex_1_strLen 1
&from_hex_1_strLen &CONST_1 ?+8 ; relsq from_hex_1_strLen CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 mov tmp from_hex_1_strBuf tmp2
# MSQ_START 2 movneg tmp2 from_hex_1_strBuf
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :from_hex_1_strBuf_addrRef_1 &from_hex_1_strBuf ?+8 ; relsq tmp2 from_hex_1_strBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr from_hex_1_strBuf 8
&from_hex_1_strBuf_addrRef_0 &CONST_-8 ?+8 ; relsq from_hex_1_strBuf_addrRef_0 CONST_-8 1
&from_hex_1_strBuf_addrRef_1 &CONST_-8 ?+8 ; relsq from_hex_1_strBuf_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
; var from_hex_1_val 0
# MSQ_START 1 zero from_hex_1_val
# MSQ_START 2 sub from_hex_1_val from_hex_1_val
&from_hex_1_val &from_hex_1_val ?+8 ; relsq from_hex_1_val from_hex_1_val 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 dec tmp 2f
&tmp &CONST_2F ?+8 ; relsq tmp CONST_2F 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_1_val tmp
# MSQ_START 2 zero from_hex_1_val
&from_hex_1_val &from_hex_1_val ?+8 ; relsq from_hex_1_val from_hex_1_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_1_val tmp
&from_hex_1_val &tmp ?+8 ; relsq from_hex_1_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 inc from_hex_1_val 1
# MSQ_START 2 dec from_hex_1_val -1
&from_hex_1_val &CONST_-1 ?+8 ; relsq from_hex_1_val CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 decleq tmp a FROM_HEX_1_WRITE
&tmp &CONST_A &FROM_HEX_1_WRITE ; lblsq tmp CONST_A FROM_HEX_1_WRITE
# MSQ_END 1 decleq
# MSQ_START 1 dec tmp 7
&tmp &CONST_7 ?+8 ; relsq tmp CONST_7 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_1_val tmp
# MSQ_START 2 zero from_hex_1_val
&from_hex_1_val &from_hex_1_val ?+8 ; relsq from_hex_1_val from_hex_1_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_1_val tmp
&from_hex_1_val &tmp ?+8 ; relsq from_hex_1_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec from_hex_1_val 9
&from_hex_1_val &CONST_9 ?+8 ; relsq from_hex_1_val CONST_9 1
# MSQ_END 1 dec
# MSQ_START 1 decleq tmp 6 FROM_HEX_1_WRITE
&tmp &CONST_6 &FROM_HEX_1_WRITE ; lblsq tmp CONST_6 FROM_HEX_1_WRITE
# MSQ_END 1 decleq
# MSQ_START 1 dec tmp 1a
&tmp &CONST_1A ?+8 ; relsq tmp CONST_1A 1
# MSQ_END 1 dec
# MSQ_START 1 movneg from_hex_1_val tmp
# MSQ_START 2 zero from_hex_1_val
&from_hex_1_val &from_hex_1_val ?+8 ; relsq from_hex_1_val from_hex_1_val 1
# MSQ_END 2 zero
# MSQ_START 2 sub from_hex_1_val tmp
&from_hex_1_val &tmp ?+8 ; relsq from_hex_1_val tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec from_hex_1_val 9
&from_hex_1_val &CONST_9 ?+8 ; relsq from_hex_1_val CONST_9 1
# MSQ_END 1 dec
; label FROM_HEX_1_WRITE
# MSQ_START 1 mul_16 from_hex_1_a tmp
# MSQ_START 2 zero tmp
:FROM_HEX_1_WRITE &tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp from_hex_1_a
&tmp :from_hex_1_a_addrRef_2 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_1_a
&tmp :from_hex_1_a_addrRef_3 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_1_a
&tmp :from_hex_1_a_addrRef_4 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_1_a
&tmp :from_hex_1_a_addrRef_5 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp from_hex_1_a
&tmp :from_hex_1_a_addrRef_6 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_1_a tmp
:from_hex_1_a_addrRef_7 &from_hex_1_a &tmp ?+8 ; relsq from_hex_1_a tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_1_a tmp
:from_hex_1_a_addrRef_8 &from_hex_1_a &tmp ?+8 ; relsq from_hex_1_a tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub from_hex_1_a tmp
:from_hex_1_a_addrRef_9 &from_hex_1_a &tmp ?+8 ; relsq from_hex_1_a tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_16
# MSQ_START 1 sub from_hex_1_a from_hex_1_val
:from_hex_1_a_addrRef_10 &from_hex_1_a &from_hex_1_val ?+8 ; relsq from_hex_1_a from_hex_1_val 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp FROM_HEX_1_LOOP
&ZERO &ZERO &FROM_HEX_1_LOOP ; lblsq ZERO ZERO FROM_HEX_1_LOOP
# MSQ_END 1 lbljmp
; label FROM_HEX_1_NEGATE
# MSQ_START 1 decleq from_hex_1_isNeg 0 FROM_HEX_1_END
:FROM_HEX_1_NEGATE &from_hex_1_isNeg &CONST_0 &FROM_HEX_1_END ; lblsq from_hex_1_isNeg CONST_0 FROM_HEX_1_END
# MSQ_END 1 decleq
# MSQ_START 1 neg from_hex_1_a tmp tmp2
# MSQ_START 2 movneg tmp from_hex_1_a
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :from_hex_1_a_addrRef_11 &from_hex_1_a ?+8 ; relsq tmp from_hex_1_a 1
# MSQ_END 2 movneg
# MSQ_START 2 mov from_hex_1_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:from_hex_1_a_addrRef_12 &from_hex_1_a :from_hex_1_a_addrRef_13 &from_hex_1_a ?+8 ; relsq from_hex_1_a from_hex_1_a 1
:from_hex_1_a_addrRef_14 &from_hex_1_a &tmp2 ?+8 ; relsq from_hex_1_a tmp2 1
# MSQ_END 2 mov
# MSQ_END 1 neg
; label FROM_HEX_1_END
# MSQ_END 0 from_hex

; label STEP1_LOOP_END
# MSQ_START 0 incaddr curLine_step1 58
:FROM_HEX_1_END :STEP1_LOOP_END &curLine_step1_addrRef_0 &CONST_-58 ?+8 ; relsq curLine_step1_addrRef_0 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 incaddr symbolsCur_step1 8
&symbolsCur_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_0 CONST_-8 1
&symbolsCur_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_1 CONST_-8 1
&symbolsCur_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_2 CONST_-8 1
&symbolsCur_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_3 CONST_-8 1
&symbolsCur_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_4 CONST_-8 1
&symbolsCur_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_5 CONST_-8 1
&symbolsCur_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_6 CONST_-8 1
&symbolsCur_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_7 CONST_-8 1
&symbolsCur_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_8 CONST_-8 1
&symbolsCur_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_9 CONST_-8 1
&symbolsCur_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_10 CONST_-8 1
&symbolsCur_step1_addrRef_11 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_11 CONST_-8 1
&symbolsCur_step1_addrRef_12 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_12 CONST_-8 1
&symbolsCur_step1_addrRef_13 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_13 CONST_-8 1
&symbolsCur_step1_addrRef_14 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_14 CONST_-8 1
&symbolsCur_step1_addrRef_15 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_15 CONST_-8 1
&symbolsCur_step1_addrRef_16 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_16 CONST_-8 1
&symbolsCur_step1_addrRef_17 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_17 CONST_-8 1
&symbolsCur_step1_addrRef_18 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_18 CONST_-8 1
&symbolsCur_step1_addrRef_19 &CONST_-8 ?+8 ; relsq symbolsCur_step1_addrRef_19 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 inc symbolsLen 1
# MSQ_START 1 dec symbolsLen -1
&symbolsLen &CONST_-1 ?+8 ; relsq symbolsLen CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp STEP1_LOOP
&ZERO &ZERO &STEP1_LOOP ; lblsq ZERO ZERO STEP1_LOOP
# MSQ_END 0 lbljmp

; label STEP1_END
# MSQ_START 0 puts STEP1_PRINT_PREFIX tmp tmp2
; addr puts_4_str 0
# MSQ_START 1 setaddr puts_4_str STEP1_PRINT_PREFIX tmp tmp2
# MSQ_START 2 mov tmp puts_4_str_addrRef_0 tmp2
:STEP1_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_4_str_addrRef_0 ?+8 ; relsq tmp2 puts_4_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP1_PRINT_PREFIX
&tmp :STEP1_PRINT_PREFIX_addrRef_0 &STEP1_PRINT_PREFIX ?+8 ; relsq tmp STEP1_PRINT_PREFIX 1
# MSQ_END 2 sub
&puts_4_str_addrRef_0 &tmp ?+8 ; relsq puts_4_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_4_len 0
# MSQ_START 1 incaddr STEP1_PRINT_PREFIX 8
&STEP1_PRINT_PREFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP1_PRINT_PREFIX_addrRef_0 CONST_-8 1
&STEP1_PRINT_PREFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP1_PRINT_PREFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_4_len STEP1_PRINT_PREFIX tmp
# MSQ_START 2 movneg tmp STEP1_PRINT_PREFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP1_PRINT_PREFIX_addrRef_1 &STEP1_PRINT_PREFIX ?+8 ; relsq tmp STEP1_PRINT_PREFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_4_len tmp
&puts_4_len &puts_4_len ?+8 ; relsq puts_4_len puts_4_len 1
&puts_4_len &tmp ?+8 ; relsq puts_4_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP1_PRINT_PREFIX 8
&STEP1_PRINT_PREFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP1_PRINT_PREFIX_addrRef_0 CONST_8 1
&STEP1_PRINT_PREFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP1_PRINT_PREFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_4_LOOP
# MSQ_START 1 decleq puts_4_len 0 PUTS_4_END
:PUTS_4_LOOP &puts_4_len &CONST_0 &PUTS_4_END ; lblsq puts_4_len CONST_0 PUTS_4_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_4_len 1
&puts_4_len &CONST_1 ?+8 ; relsq puts_4_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_4_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_4_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_4_str_addrRef_0 &puts_4_str ?+8 ; relsq tmp puts_4_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_4_str 8
&puts_4_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_4_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_4_LOOP
&ZERO &ZERO &PUTS_4_LOOP ; lblsq ZERO ZERO PUTS_4_LOOP
# MSQ_END 1 lbljmp
; label PUTS_4_END
# MSQ_END 0 puts
; addr symbolCountPrint_step1 0
# MSQ_START 0 itoa symbolCountPrint_step1 symbolsLen tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_4_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr symbolCountPrint_step1 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 symbolCountPrint_step1_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolCountPrint_step1_addrRef_0 ?+8 ; relsq tmp symbolCountPrint_step1_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&symbolCountPrint_step1_addrRef_0 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 tmp3 1
&symbolCountPrint_step1_addrRef_1 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 tmp3 1
&symbolCountPrint_step1_addrRef_2 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 tmp3 1
&symbolCountPrint_step1_addrRef_3 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 tmp3 1
&symbolCountPrint_step1_addrRef_4 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 tmp3 1
&symbolCountPrint_step1_addrRef_5 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 tmp3 1
&symbolCountPrint_step1_addrRef_6 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 tmp3 1
&symbolCountPrint_step1_addrRef_7 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 tmp3 1
&symbolCountPrint_step1_addrRef_8 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 tmp3 1
&symbolCountPrint_step1_addrRef_9 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 tmp3 1
&symbolCountPrint_step1_addrRef_10 &tmp3 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const symbolCountPrint_step1 a0 tmp3
# MSQ_START 2 malloc_const symbolCountPrint_step1 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:symbolCountPrint_step1_addrRef_0 &symbolCountPrint_step1 :symbolCountPrint_step1_addrRef_1 &symbolCountPrint_step1 ?+8 ; relsq symbolCountPrint_step1 symbolCountPrint_step1 1
:symbolCountPrint_step1_addrRef_2 &symbolCountPrint_step1 &tmp3 ?+8 ; relsq symbolCountPrint_step1 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr symbolCountPrint_step1 8
&symbolCountPrint_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 CONST_-8 1
&symbolCountPrint_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 CONST_-8 1
&symbolCountPrint_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 CONST_-8 1
&symbolCountPrint_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 CONST_-8 1
&symbolCountPrint_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 CONST_-8 1
&symbolCountPrint_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 CONST_-8 1
&symbolCountPrint_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 CONST_-8 1
&symbolCountPrint_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 CONST_-8 1
&symbolCountPrint_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 CONST_-8 1
&symbolCountPrint_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 CONST_-8 1
&symbolCountPrint_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero symbolCountPrint_step1
:symbolCountPrint_step1_addrRef_3 &symbolCountPrint_step1 :symbolCountPrint_step1_addrRef_4 &symbolCountPrint_step1 ?+8 ; relsq symbolCountPrint_step1 symbolCountPrint_step1 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr symbolCountPrint_step1 8
&symbolCountPrint_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 CONST_-8 1
&symbolCountPrint_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 CONST_-8 1
&symbolCountPrint_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 CONST_-8 1
&symbolCountPrint_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 CONST_-8 1
&symbolCountPrint_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 CONST_-8 1
&symbolCountPrint_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 CONST_-8 1
&symbolCountPrint_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 CONST_-8 1
&symbolCountPrint_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 CONST_-8 1
&symbolCountPrint_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 CONST_-8 1
&symbolCountPrint_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 CONST_-8 1
&symbolCountPrint_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov symbolCountPrint_step1 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:symbolCountPrint_step1_addrRef_5 &symbolCountPrint_step1 :symbolCountPrint_step1_addrRef_6 &symbolCountPrint_step1 ?+8 ; relsq symbolCountPrint_step1 symbolCountPrint_step1 1
:symbolCountPrint_step1_addrRef_7 &symbolCountPrint_step1 &tmp3 ?+8 ; relsq symbolCountPrint_step1 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr symbolCountPrint_step1 10
&symbolCountPrint_step1_addrRef_0 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 CONST_10 1
&symbolCountPrint_step1_addrRef_1 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 CONST_10 1
&symbolCountPrint_step1_addrRef_2 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 CONST_10 1
&symbolCountPrint_step1_addrRef_3 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 CONST_10 1
&symbolCountPrint_step1_addrRef_4 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 CONST_10 1
&symbolCountPrint_step1_addrRef_5 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 CONST_10 1
&symbolCountPrint_step1_addrRef_6 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 CONST_10 1
&symbolCountPrint_step1_addrRef_7 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 CONST_10 1
&symbolCountPrint_step1_addrRef_8 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 CONST_10 1
&symbolCountPrint_step1_addrRef_9 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 CONST_10 1
&symbolCountPrint_step1_addrRef_10 &CONST_10 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_1_retBuf 0
# MSQ_START 1 setaddr itoa_1_retBuf symbolCountPrint_step1 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_1_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_1_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_1_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 symbolCountPrint_step1
&tmp2 :symbolCountPrint_step1_addrRef_8 &symbolCountPrint_step1 ?+8 ; relsq tmp2 symbolCountPrint_step1 1
# MSQ_END 2 sub
&itoa_1_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_0 tmp2 1
&itoa_1_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_1 tmp2 1
&itoa_1_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_2 tmp2 1
&itoa_1_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_3 tmp2 1
&itoa_1_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_4 tmp2 1
&itoa_1_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_5 tmp2 1
&itoa_1_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_6 tmp2 1
&itoa_1_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_7 tmp2 1
&itoa_1_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_8 tmp2 1
&itoa_1_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_1_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_1_retLength 0
# MSQ_START 1 copyaddr itoa_1_retLength symbolCountPrint_step1 tmp2 tmp3
# MSQ_START 2 setaddr itoa_1_retLength symbolCountPrint_step1_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_1_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_1_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &symbolCountPrint_step1_addrRef_0 ?+8 ; relsq tmp2 symbolCountPrint_step1_addrRef_0 1
&itoa_1_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_1_retLength_addrRef_0 tmp2 1
&itoa_1_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_1_retLength_addrRef_1 tmp2 1
&itoa_1_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_1_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_1_retLength 8
&itoa_1_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_1_retLength_addrRef_0 CONST_-8 1
&itoa_1_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_1_retLength_addrRef_1 CONST_-8 1
&itoa_1_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_1_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_1_noDigits 0
# MSQ_START 1 set itoa_1_noDigits 1
# MSQ_START 2 zero itoa_1_noDigits
&itoa_1_noDigits &itoa_1_noDigits ?+8 ; relsq itoa_1_noDigits itoa_1_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_1_noDigits 1
&itoa_1_noDigits &CONST_-1 ?+8 ; relsq itoa_1_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp symbolsLen tmp2
# MSQ_START 2 movneg tmp2 symbolsLen
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbolsLen ?+8 ; relsq tmp2 symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_1_isNeg 0
# MSQ_START 1 zero itoa_1_isNeg
# MSQ_START 2 sub itoa_1_isNeg itoa_1_isNeg
&itoa_1_isNeg &itoa_1_isNeg ?+8 ; relsq itoa_1_isNeg itoa_1_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_1_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_1_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_1_IS_NEG ; lblsq tmp2 ZERO ITOA_1_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_1_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_12_END
&tmp2 &CONST_-1 &JZ_12_END ; lblsq tmp2 CONST_-1 JZ_12_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_12_REVERT_A
&tmp &CONST_-1 &JZ_12_REVERT_A ; lblsq tmp CONST_-1 JZ_12_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_1_IS_ZERO
&ZERO &ZERO &ITOA_1_IS_ZERO ; lblsq ZERO ZERO ITOA_1_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_12_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_12_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_12_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_1_LOOP
:JZ_12_END &ZERO &ZERO &ITOA_1_LOOP ; lblsq ZERO ZERO ITOA_1_LOOP
# MSQ_END 1 lbljmp
; label ITOA_1_IS_ZERO
# MSQ_START 1 set itoa_1_retBuf 30
# MSQ_START 2 zero itoa_1_retBuf
:ITOA_1_IS_ZERO :itoa_1_retBuf_addrRef_0 &itoa_1_retBuf :itoa_1_retBuf_addrRef_1 &itoa_1_retBuf ?+8 ; relsq itoa_1_retBuf itoa_1_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_1_retBuf 30
:itoa_1_retBuf_addrRef_2 &itoa_1_retBuf &CONST_-30 ?+8 ; relsq itoa_1_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_1_retLength 1
# MSQ_START 2 dec itoa_1_retLength -1
:itoa_1_retLength_addrRef_0 &itoa_1_retLength &CONST_-1 ?+8 ; relsq itoa_1_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_1_END
&ZERO &ZERO &ITOA_1_END ; lblsq ZERO ZERO ITOA_1_END
# MSQ_END 1 lbljmp
; label ITOA_1_IS_NEG
# MSQ_START 1 inc itoa_1_isNeg 1
# MSQ_START 2 dec itoa_1_isNeg -1
:ITOA_1_IS_NEG &itoa_1_isNeg &CONST_-1 ?+8 ; relsq itoa_1_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_1_retBuf 2d
# MSQ_START 2 zero itoa_1_retBuf
:itoa_1_retBuf_addrRef_3 &itoa_1_retBuf :itoa_1_retBuf_addrRef_4 &itoa_1_retBuf ?+8 ; relsq itoa_1_retBuf itoa_1_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_1_retBuf 2d
:itoa_1_retBuf_addrRef_5 &itoa_1_retBuf &CONST_-2D ?+8 ; relsq itoa_1_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_1_retBuf 8
&itoa_1_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_0 CONST_-8 1
&itoa_1_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_1 CONST_-8 1
&itoa_1_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_2 CONST_-8 1
&itoa_1_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_3 CONST_-8 1
&itoa_1_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_4 CONST_-8 1
&itoa_1_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_5 CONST_-8 1
&itoa_1_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_6 CONST_-8 1
&itoa_1_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_7 CONST_-8 1
&itoa_1_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_8 CONST_-8 1
&itoa_1_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_1_retLength 1
# MSQ_START 2 dec itoa_1_retLength -1
:itoa_1_retLength_addrRef_1 &itoa_1_retLength &CONST_-1 ?+8 ; relsq itoa_1_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_1_LOOP
&ZERO &ZERO &ITOA_1_LOOP ; lblsq ZERO ZERO ITOA_1_LOOP
# MSQ_END 1 lbljmp
; label ITOA_1_SUBBERS
:ITOA_1_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_1_LOOP
# MSQ_START 1 jz ITOA_1_SUBBERS ITOA_1_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_1_SUBBERS
:ITOA_1_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_1_SUBBERS_addrRef_0 &ITOA_1_SUBBERS ?+8 ; relsq tmp2 ITOA_1_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_13_END
&tmp2 &CONST_-1 &JZ_13_END ; lblsq tmp2 CONST_-1 JZ_13_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_1_SUBBERS 1 JZ_13_REVERT_A
:ITOA_1_SUBBERS_addrRef_1 &ITOA_1_SUBBERS &CONST_-1 &JZ_13_REVERT_A ; lblsq ITOA_1_SUBBERS CONST_-1 JZ_13_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_1_SUBBERS 1
:ITOA_1_SUBBERS_addrRef_2 &ITOA_1_SUBBERS &CONST_1 ?+8 ; relsq ITOA_1_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_1_REVERT_SUBBERS
&ZERO &ZERO &ITOA_1_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_1_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_13_REVERT_A
# MSQ_START 2 dec ITOA_1_SUBBERS 1
:JZ_13_REVERT_A :ITOA_1_SUBBERS_addrRef_3 &ITOA_1_SUBBERS &CONST_1 ?+8 ; relsq ITOA_1_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_13_END
# MSQ_END 1 jz
; var itoa_1_digitVal 0
# MSQ_START 1 zero itoa_1_digitVal
# MSQ_START 2 sub itoa_1_digitVal itoa_1_digitVal
:JZ_13_END &itoa_1_digitVal &itoa_1_digitVal ?+8 ; relsq itoa_1_digitVal itoa_1_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_1_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_1_SUBBERS ITOA_1_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_1_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_1_SUBBERS_addrRef_4 &ITOA_1_SUBBERS &ITOA_1_HANDLE_DIGIT ; lblsq tmp2 ITOA_1_SUBBERS ITOA_1_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_1_digitVal 1
# MSQ_START 2 dec itoa_1_digitVal -1
&itoa_1_digitVal &CONST_-1 ?+8 ; relsq itoa_1_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_1_SUBBERS
&tmp :ITOA_1_SUBBERS_addrRef_5 &ITOA_1_SUBBERS ?+8 ; relsq tmp ITOA_1_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_1_SUBTRACT_A
&ZERO &ZERO &ITOA_1_SUBTRACT_A ; lblsq ZERO ZERO ITOA_1_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_1_HANDLE_DIGIT
# MSQ_START 1 jz itoa_1_noDigits ITOA_1_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_1_noDigits
:ITOA_1_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_1_noDigits ?+8 ; relsq tmp2 itoa_1_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_14_END
&tmp2 &CONST_-1 &JZ_14_END ; lblsq tmp2 CONST_-1 JZ_14_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_1_noDigits 1 JZ_14_REVERT_A
&itoa_1_noDigits &CONST_-1 &JZ_14_REVERT_A ; lblsq itoa_1_noDigits CONST_-1 JZ_14_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_1_noDigits 1
&itoa_1_noDigits &CONST_1 ?+8 ; relsq itoa_1_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_1_PRINT_DIGIT
&ZERO &ZERO &ITOA_1_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_1_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_14_REVERT_A
# MSQ_START 2 dec itoa_1_noDigits 1
:JZ_14_REVERT_A &itoa_1_noDigits &CONST_1 ?+8 ; relsq itoa_1_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_14_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_1_digitVal ITOA_1_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_1_digitVal
:JZ_14_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_1_digitVal ?+8 ; relsq tmp2 itoa_1_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_15_END
&tmp2 &CONST_-1 &JZ_15_END ; lblsq tmp2 CONST_-1 JZ_15_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_1_digitVal 1 JZ_15_REVERT_A
&itoa_1_digitVal &CONST_-1 &JZ_15_REVERT_A ; lblsq itoa_1_digitVal CONST_-1 JZ_15_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_1_digitVal 1
&itoa_1_digitVal &CONST_1 ?+8 ; relsq itoa_1_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_1_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_1_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_1_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_15_REVERT_A
# MSQ_START 2 dec itoa_1_digitVal 1
:JZ_15_REVERT_A &itoa_1_digitVal &CONST_1 ?+8 ; relsq itoa_1_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_15_END
# MSQ_END 1 jz
; label ITOA_1_PRINT_DIGIT
# MSQ_START 1 zero itoa_1_noDigits
# MSQ_START 2 sub itoa_1_noDigits itoa_1_noDigits
:JZ_15_END :ITOA_1_PRINT_DIGIT &itoa_1_noDigits &itoa_1_noDigits ?+8 ; relsq itoa_1_noDigits itoa_1_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_1_retBuf 30
# MSQ_START 2 zero itoa_1_retBuf
:itoa_1_retBuf_addrRef_6 &itoa_1_retBuf :itoa_1_retBuf_addrRef_7 &itoa_1_retBuf ?+8 ; relsq itoa_1_retBuf itoa_1_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_1_retBuf 30
:itoa_1_retBuf_addrRef_8 &itoa_1_retBuf &CONST_-30 ?+8 ; relsq itoa_1_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_1_retBuf itoa_1_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_1_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_1_digitVal ?+8 ; relsq tmp2 itoa_1_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_1_retBuf tmp2
:itoa_1_retBuf_addrRef_9 &itoa_1_retBuf &tmp2 ?+8 ; relsq itoa_1_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_1_retBuf 8
&itoa_1_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_0 CONST_-8 1
&itoa_1_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_1 CONST_-8 1
&itoa_1_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_2 CONST_-8 1
&itoa_1_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_3 CONST_-8 1
&itoa_1_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_4 CONST_-8 1
&itoa_1_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_5 CONST_-8 1
&itoa_1_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_6 CONST_-8 1
&itoa_1_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_7 CONST_-8 1
&itoa_1_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_8 CONST_-8 1
&itoa_1_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_1_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_1_retLength 1
# MSQ_START 2 dec itoa_1_retLength -1
:itoa_1_retLength_addrRef_2 &itoa_1_retLength &CONST_-1 ?+8 ; relsq itoa_1_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_1_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_1_SUBBERS 8
:ITOA_1_DONT_PRINT_DIGIT &ITOA_1_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_1_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_1_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_1_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_1_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_1_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_1_LOOP
&ZERO &ZERO &ITOA_1_LOOP ; lblsq ZERO ZERO ITOA_1_LOOP
# MSQ_END 1 lbljmp
; label ITOA_1_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_1_SUBBERS 98
:ITOA_1_REVERT_SUBBERS &ITOA_1_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_0 CONST_98 1
&ITOA_1_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_1 CONST_98 1
&ITOA_1_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_2 CONST_98 1
&ITOA_1_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_3 CONST_98 1
&ITOA_1_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_4 CONST_98 1
&ITOA_1_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_1_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_1_END
# MSQ_END 0 itoa
# MSQ_START 0 puts symbolCountPrint_step1 tmp tmp2
; addr puts_5_str 0
# MSQ_START 1 setaddr puts_5_str symbolCountPrint_step1 tmp tmp2
# MSQ_START 2 mov tmp puts_5_str_addrRef_0 tmp2
:ITOA_1_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_5_str_addrRef_0 ?+8 ; relsq tmp2 puts_5_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp symbolCountPrint_step1
&tmp :symbolCountPrint_step1_addrRef_9 &symbolCountPrint_step1 ?+8 ; relsq tmp symbolCountPrint_step1 1
# MSQ_END 2 sub
&puts_5_str_addrRef_0 &tmp ?+8 ; relsq puts_5_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_5_len 0
# MSQ_START 1 incaddr symbolCountPrint_step1 8
&symbolCountPrint_step1_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 CONST_-8 1
&symbolCountPrint_step1_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 CONST_-8 1
&symbolCountPrint_step1_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 CONST_-8 1
&symbolCountPrint_step1_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 CONST_-8 1
&symbolCountPrint_step1_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 CONST_-8 1
&symbolCountPrint_step1_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 CONST_-8 1
&symbolCountPrint_step1_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 CONST_-8 1
&symbolCountPrint_step1_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 CONST_-8 1
&symbolCountPrint_step1_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 CONST_-8 1
&symbolCountPrint_step1_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 CONST_-8 1
&symbolCountPrint_step1_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_5_len symbolCountPrint_step1 tmp
# MSQ_START 2 movneg tmp symbolCountPrint_step1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :symbolCountPrint_step1_addrRef_10 &symbolCountPrint_step1 ?+8 ; relsq tmp symbolCountPrint_step1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_5_len tmp
&puts_5_len &puts_5_len ?+8 ; relsq puts_5_len puts_5_len 1
&puts_5_len &tmp ?+8 ; relsq puts_5_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolCountPrint_step1 8
&symbolCountPrint_step1_addrRef_0 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_0 CONST_8 1
&symbolCountPrint_step1_addrRef_1 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_1 CONST_8 1
&symbolCountPrint_step1_addrRef_2 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_2 CONST_8 1
&symbolCountPrint_step1_addrRef_3 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_3 CONST_8 1
&symbolCountPrint_step1_addrRef_4 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_4 CONST_8 1
&symbolCountPrint_step1_addrRef_5 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_5 CONST_8 1
&symbolCountPrint_step1_addrRef_6 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_6 CONST_8 1
&symbolCountPrint_step1_addrRef_7 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_7 CONST_8 1
&symbolCountPrint_step1_addrRef_8 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_8 CONST_8 1
&symbolCountPrint_step1_addrRef_9 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_9 CONST_8 1
&symbolCountPrint_step1_addrRef_10 &CONST_8 ?+8 ; relsq symbolCountPrint_step1_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_5_LOOP
# MSQ_START 1 decleq puts_5_len 0 PUTS_5_END
:PUTS_5_LOOP &puts_5_len &CONST_0 &PUTS_5_END ; lblsq puts_5_len CONST_0 PUTS_5_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_5_len 1
&puts_5_len &CONST_1 ?+8 ; relsq puts_5_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_5_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_5_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_5_str_addrRef_0 &puts_5_str ?+8 ; relsq tmp puts_5_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_5_str 8
&puts_5_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_5_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_5_LOOP
&ZERO &ZERO &PUTS_5_LOOP ; lblsq ZERO ZERO PUTS_5_LOOP
# MSQ_END 1 lbljmp
; label PUTS_5_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP1_PRINT_SUFFIX tmp tmp2
; addr puts_6_str 0
# MSQ_START 1 setaddr puts_6_str STEP1_PRINT_SUFFIX tmp tmp2
# MSQ_START 2 mov tmp puts_6_str_addrRef_0 tmp2
:PUTS_5_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_6_str_addrRef_0 ?+8 ; relsq tmp2 puts_6_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP1_PRINT_SUFFIX
&tmp :STEP1_PRINT_SUFFIX_addrRef_0 &STEP1_PRINT_SUFFIX ?+8 ; relsq tmp STEP1_PRINT_SUFFIX 1
# MSQ_END 2 sub
&puts_6_str_addrRef_0 &tmp ?+8 ; relsq puts_6_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_6_len 0
# MSQ_START 1 incaddr STEP1_PRINT_SUFFIX 8
&STEP1_PRINT_SUFFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP1_PRINT_SUFFIX_addrRef_0 CONST_-8 1
&STEP1_PRINT_SUFFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP1_PRINT_SUFFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_6_len STEP1_PRINT_SUFFIX tmp
# MSQ_START 2 movneg tmp STEP1_PRINT_SUFFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP1_PRINT_SUFFIX_addrRef_1 &STEP1_PRINT_SUFFIX ?+8 ; relsq tmp STEP1_PRINT_SUFFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_6_len tmp
&puts_6_len &puts_6_len ?+8 ; relsq puts_6_len puts_6_len 1
&puts_6_len &tmp ?+8 ; relsq puts_6_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP1_PRINT_SUFFIX 8
&STEP1_PRINT_SUFFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP1_PRINT_SUFFIX_addrRef_0 CONST_8 1
&STEP1_PRINT_SUFFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP1_PRINT_SUFFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_6_LOOP
# MSQ_START 1 decleq puts_6_len 0 PUTS_6_END
:PUTS_6_LOOP &puts_6_len &CONST_0 &PUTS_6_END ; lblsq puts_6_len CONST_0 PUTS_6_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_6_len 1
&puts_6_len &CONST_1 ?+8 ; relsq puts_6_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_6_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_6_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_6_str_addrRef_0 &puts_6_str ?+8 ; relsq tmp puts_6_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_6_str 8
&puts_6_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_6_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_6_LOOP
&ZERO &ZERO &PUTS_6_LOOP ; lblsq ZERO ZERO PUTS_6_LOOP
# MSQ_END 1 lbljmp
; label PUTS_6_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_6_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 lbljmp STEP2_START
&ZERO &ZERO &STEP2_START ; lblsq ZERO ZERO STEP2_START
# MSQ_END 0 lbljmp


; label incRefCount
; var totalRefCount 0
; addr incRefCount_key 0
; addr incRefCount_it 0
# MSQ_START 0 setaddr incRefCount_it symbolsBegin tmp tmp2
# MSQ_START 1 mov tmp incRefCount_it_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 incRefCount_it_addrRef_0
:incRefCount &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &incRefCount_it_addrRef_0 ?+8 ; relsq tmp2 incRefCount_it_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp symbolsBegin
&tmp &symbolsBegin ?+8 ; relsq tmp symbolsBegin 1
# MSQ_END 1 sub
&incRefCount_it_addrRef_0 &tmp ?+8 ; relsq incRefCount_it_addrRef_0 tmp 1
&incRefCount_it_addrRef_1 &tmp ?+8 ; relsq incRefCount_it_addrRef_1 tmp 1
&incRefCount_it_addrRef_2 &tmp ?+8 ; relsq incRefCount_it_addrRef_2 tmp 1
&incRefCount_it_addrRef_3 &tmp ?+8 ; relsq incRefCount_it_addrRef_3 tmp 1
&incRefCount_it_addrRef_4 &tmp ?+8 ; relsq incRefCount_it_addrRef_4 tmp 1
&incRefCount_it_addrRef_5 &tmp ?+8 ; relsq incRefCount_it_addrRef_5 tmp 1
&incRefCount_it_addrRef_6 &tmp ?+8 ; relsq incRefCount_it_addrRef_6 tmp 1
&incRefCount_it_addrRef_7 &tmp ?+8 ; relsq incRefCount_it_addrRef_7 tmp 1
&incRefCount_it_addrRef_8 &tmp ?+8 ; relsq incRefCount_it_addrRef_8 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key incRefCount_it incRefCount_key 30 symbolsLen incRefCount_doInc tmp tmp2
; var find_item_in_buf_with_str_key_0_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_0_elmsLeft symbolsLen tmp
# MSQ_START 2 movneg tmp symbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolsLen ?+8 ; relsq tmp symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_0_elmsLeft tmp
&find_item_in_buf_with_str_key_0_elmsLeft &find_item_in_buf_with_str_key_0_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_0_elmsLeft find_item_in_buf_with_str_key_0_elmsLeft 1
&find_item_in_buf_with_str_key_0_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_0_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_0_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP &find_item_in_buf_with_str_key_0_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH ; lblsq find_item_in_buf_with_str_key_0_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_0_elmsLeft 1
&find_item_in_buf_with_str_key_0_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_0_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const incRefCount_it incRefCount_key incRefCount_doInc tmp tmp2
; addr strcmp_const_8_a 0
# MSQ_START 2 copyaddr strcmp_const_8_a incRefCount_it tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_8_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_8_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &incRefCount_it_addrRef_0 ?+8 ; relsq tmp incRefCount_it_addrRef_0 1
&strcmp_const_8_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_8_a_addrRef_0 tmp 1
&strcmp_const_8_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_8_a_addrRef_1 tmp 1
&strcmp_const_8_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_8_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_8_a 8
&strcmp_const_8_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_8_a_addrRef_0 CONST_-8 1
&strcmp_const_8_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_8_a_addrRef_1 CONST_-8 1
&strcmp_const_8_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_8_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr incRefCount_key 8
&incRefCount_key_addrRef_0 &CONST_-8 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_-8 1
&incRefCount_key_addrRef_1 &CONST_-8 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_8_a incRefCount_key STRCMP_CONST_8_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_8_a_addrRef_0 &strcmp_const_8_a ?+8 ; relsq tmp2 strcmp_const_8_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :incRefCount_key_addrRef_0 &incRefCount_key ?+8 ; relsq tmp incRefCount_key 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_8_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_8_REVERT_ADDR
&tmp &CONST_-1 &JNZ_16_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_16_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_16_END ; lblsq ZERO ZERO JNZ_16_END
; label JNZ_16_REVERT_AND_JUMP
:JNZ_16_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_8_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_8_REVERT_ADDR
; label JNZ_16_END
# MSQ_END 2 jne
; var strcmp_const_8_len 0
# MSQ_START 2 mov strcmp_const_8_len strcmp_const_8_a tmp
:JNZ_16_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_8_a_addrRef_1 &strcmp_const_8_a ?+8 ; relsq tmp strcmp_const_8_a 1
&strcmp_const_8_len &strcmp_const_8_len ?+8 ; relsq strcmp_const_8_len strcmp_const_8_len 1
&strcmp_const_8_len &tmp ?+8 ; relsq strcmp_const_8_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_8_a 8
&strcmp_const_8_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_8_a_addrRef_0 CONST_8 1
&strcmp_const_8_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_8_a_addrRef_1 CONST_8 1
&strcmp_const_8_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_8_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr incRefCount_key 8
&incRefCount_key_addrRef_0 &CONST_8 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_8 1
&incRefCount_key_addrRef_1 &CONST_8 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_8_aStr 0
; addr strcmp_const_8_bStr 0
# MSQ_START 2 setaddr strcmp_const_8_aStr strcmp_const_8_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_8_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_8_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_8_a_addrRef_2 &strcmp_const_8_a ?+8 ; relsq tmp strcmp_const_8_a 1
&strcmp_const_8_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_8_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_8_bStr incRefCount_key tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_8_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_8_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :incRefCount_key_addrRef_1 &incRefCount_key ?+8 ; relsq tmp incRefCount_key 1
&strcmp_const_8_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_8_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_8_LOOP
# MSQ_START 2 decleq strcmp_const_8_len 0 incRefCount_doInc
:STRCMP_CONST_8_LOOP &strcmp_const_8_len &CONST_0 &incRefCount_doInc ; lblsq strcmp_const_8_len CONST_0 incRefCount_doInc
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_8_len 1
&strcmp_const_8_len &CONST_1 ?+8 ; relsq strcmp_const_8_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_8_aStr strcmp_const_8_bStr STRCMP_CONST_8_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_8_aStr_addrRef_0 &strcmp_const_8_aStr ?+8 ; relsq tmp2 strcmp_const_8_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_8_bStr_addrRef_0 &strcmp_const_8_bStr ?+8 ; relsq tmp strcmp_const_8_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_8_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_8_END
&tmp &CONST_-1 &JNZ_17_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_17_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_17_END ; lblsq ZERO ZERO JNZ_17_END
; label JNZ_17_REVERT_AND_JUMP
:JNZ_17_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_8_END ; lblsq ZERO ZERO STRCMP_CONST_8_END
; label JNZ_17_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_8_aStr 8
:JNZ_17_END &strcmp_const_8_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_8_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_8_bStr 8
&strcmp_const_8_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_8_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_8_LOOP
&ZERO &ZERO &STRCMP_CONST_8_LOOP ; lblsq ZERO ZERO STRCMP_CONST_8_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_8_REVERT_ADDR
# MSQ_START 2 decaddr incRefCount_key 8
:STRCMP_CONST_8_REVERT_ADDR &incRefCount_key_addrRef_0 &CONST_8 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_8 1
&incRefCount_key_addrRef_1 &CONST_8 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_8_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr incRefCount_it 30
:STRCMP_CONST_8_END &incRefCount_it_addrRef_0 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_-30 1
&incRefCount_it_addrRef_1 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_-30 1
&incRefCount_it_addrRef_2 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_-30 1
&incRefCount_it_addrRef_3 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_-30 1
&incRefCount_it_addrRef_4 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_-30 1
&incRefCount_it_addrRef_5 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_-30 1
&incRefCount_it_addrRef_6 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_-30 1
&incRefCount_it_addrRef_7 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_-30 1
&incRefCount_it_addrRef_8 &CONST_-30 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_-30 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key

# No match. Create a new symbol instead
# MSQ_START 0 memcpy_const incRefCount_it incRefCount_key 18 tmp tmp2
# MSQ_START 1 memcpy incRefCount_it incRefCount_key CONST_18 tmp tmp2
; addr memcpy_0_dst 0
; addr memcpy_0_src 0
# MSQ_START 2 copyaddr memcpy_0_dst incRefCount_it tmp tmp2
:FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_0_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_0_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &incRefCount_it_addrRef_0 ?+8 ; relsq tmp incRefCount_it_addrRef_0 1
&memcpy_0_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_0_dst_addrRef_0 tmp 1
&memcpy_0_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_0_dst_addrRef_1 tmp 1
&memcpy_0_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_0_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_0_src incRefCount_key tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_0_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_0_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &incRefCount_key_addrRef_0 ?+8 ; relsq tmp incRefCount_key_addrRef_0 1
&memcpy_0_src_addrRef_0 &tmp ?+8 ; relsq memcpy_0_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_0_numLeft 0
# MSQ_START 2 mov memcpy_0_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_0_numLeft &memcpy_0_numLeft ?+8 ; relsq memcpy_0_numLeft memcpy_0_numLeft 1
&memcpy_0_numLeft &tmp ?+8 ; relsq memcpy_0_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_0_LOOP
# MSQ_START 2 decleq memcpy_0_numLeft 0 MEMCPY_0_END
:MEMCPY_0_LOOP &memcpy_0_numLeft &CONST_0 &MEMCPY_0_END ; lblsq memcpy_0_numLeft CONST_0 MEMCPY_0_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_0_numLeft 8
&memcpy_0_numLeft &CONST_8 ?+8 ; relsq memcpy_0_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_0_dst memcpy_0_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_0_src_addrRef_0 &memcpy_0_src ?+8 ; relsq tmp memcpy_0_src 1
:memcpy_0_dst_addrRef_0 &memcpy_0_dst :memcpy_0_dst_addrRef_1 &memcpy_0_dst ?+8 ; relsq memcpy_0_dst memcpy_0_dst 1
:memcpy_0_dst_addrRef_2 &memcpy_0_dst &tmp ?+8 ; relsq memcpy_0_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_0_dst 8
&memcpy_0_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_0_dst_addrRef_0 CONST_-8 1
&memcpy_0_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_0_dst_addrRef_1 CONST_-8 1
&memcpy_0_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_0_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_0_src 8
&memcpy_0_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_0_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_0_LOOP
&ZERO &ZERO &MEMCPY_0_LOOP ; lblsq ZERO ZERO MEMCPY_0_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_0_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 incaddr incRefCount_it 18
:MEMCPY_0_END &incRefCount_it_addrRef_0 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_-18 1
&incRefCount_it_addrRef_1 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_-18 1
&incRefCount_it_addrRef_2 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_-18 1
&incRefCount_it_addrRef_3 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_-18 1
&incRefCount_it_addrRef_4 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_-18 1
&incRefCount_it_addrRef_5 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_-18 1
&incRefCount_it_addrRef_6 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_-18 1
&incRefCount_it_addrRef_7 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_-18 1
&incRefCount_it_addrRef_8 &CONST_-18 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 set incRefCount_it -1
# MSQ_START 1 zero incRefCount_it
# MSQ_START 2 sub incRefCount_it incRefCount_it
:incRefCount_it_addrRef_0 &incRefCount_it :incRefCount_it_addrRef_1 &incRefCount_it ?+8 ; relsq incRefCount_it incRefCount_it 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc incRefCount_it -1
# MSQ_START 2 dec incRefCount_it 1
:incRefCount_it_addrRef_2 &incRefCount_it &CONST_1 ?+8 ; relsq incRefCount_it CONST_1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 incaddr incRefCount_it 8
&incRefCount_it_addrRef_0 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_-8 1
&incRefCount_it_addrRef_1 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_-8 1
&incRefCount_it_addrRef_2 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_-8 1
&incRefCount_it_addrRef_3 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_-8 1
&incRefCount_it_addrRef_4 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_-8 1
&incRefCount_it_addrRef_5 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_-8 1
&incRefCount_it_addrRef_6 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_-8 1
&incRefCount_it_addrRef_7 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_-8 1
&incRefCount_it_addrRef_8 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero incRefCount_it
# MSQ_START 1 sub incRefCount_it incRefCount_it
:incRefCount_it_addrRef_3 &incRefCount_it :incRefCount_it_addrRef_4 &incRefCount_it ?+8 ; relsq incRefCount_it incRefCount_it 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 incaddr incRefCount_it 8
&incRefCount_it_addrRef_0 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_-8 1
&incRefCount_it_addrRef_1 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_-8 1
&incRefCount_it_addrRef_2 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_-8 1
&incRefCount_it_addrRef_3 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_-8 1
&incRefCount_it_addrRef_4 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_-8 1
&incRefCount_it_addrRef_5 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_-8 1
&incRefCount_it_addrRef_6 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_-8 1
&incRefCount_it_addrRef_7 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_-8 1
&incRefCount_it_addrRef_8 &CONST_-8 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov incRefCount_it SYM_VAL_PLACEHOLDER tmp
# MSQ_START 1 movneg tmp SYM_VAL_PLACEHOLDER
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SYM_VAL_PLACEHOLDER
&tmp &SYM_VAL_PLACEHOLDER ?+8 ; relsq tmp SYM_VAL_PLACEHOLDER 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg incRefCount_it tmp
# MSQ_START 2 zero incRefCount_it
:incRefCount_it_addrRef_5 &incRefCount_it :incRefCount_it_addrRef_6 &incRefCount_it ?+8 ; relsq incRefCount_it incRefCount_it 1
# MSQ_END 2 zero
# MSQ_START 2 sub incRefCount_it tmp
:incRefCount_it_addrRef_7 &incRefCount_it &tmp ?+8 ; relsq incRefCount_it tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr incRefCount_it 28
&incRefCount_it_addrRef_0 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_28 1
&incRefCount_it_addrRef_1 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_28 1
&incRefCount_it_addrRef_2 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_28 1
&incRefCount_it_addrRef_3 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_28 1
&incRefCount_it_addrRef_4 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_28 1
&incRefCount_it_addrRef_5 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_28 1
&incRefCount_it_addrRef_6 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_28 1
&incRefCount_it_addrRef_7 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_28 1
&incRefCount_it_addrRef_8 &CONST_28 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_28 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc symbolsLen 1
# MSQ_START 1 dec symbolsLen -1
&symbolsLen &CONST_-1 ?+8 ; relsq symbolsLen CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

; label incRefCount_doInc
# MSQ_START 0 incaddr incRefCount_it 20
:incRefCount_doInc &incRefCount_it_addrRef_0 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_0 CONST_-20 1
&incRefCount_it_addrRef_1 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_1 CONST_-20 1
&incRefCount_it_addrRef_2 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_2 CONST_-20 1
&incRefCount_it_addrRef_3 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_3 CONST_-20 1
&incRefCount_it_addrRef_4 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_4 CONST_-20 1
&incRefCount_it_addrRef_5 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_5 CONST_-20 1
&incRefCount_it_addrRef_6 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_6 CONST_-20 1
&incRefCount_it_addrRef_7 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_7 CONST_-20 1
&incRefCount_it_addrRef_8 &CONST_-20 ?+8 ; relsq incRefCount_it_addrRef_8 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 inc incRefCount_it 1
# MSQ_START 1 dec incRefCount_it -1
:incRefCount_it_addrRef_8 &incRefCount_it &CONST_-1 ?+8 ; relsq incRefCount_it CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 inc totalRefCount 1
# MSQ_START 1 dec totalRefCount -1
&totalRefCount &CONST_-1 ?+8 ; relsq totalRefCount CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 ret incRefCount
0000000000000000 0000000000000000 ; raw 0000000000000000 0000000000000000
; label incRefCount_retAddr
:incRefCount_retAddr 0000000000000000 ; raw 0000000000000000
# MSQ_END 0 ret


# 2. Count symbol references (Pass 1)
; label STEP2_START
; addr curLine_step2 0
# MSQ_START 0 setaddr curLine_step2 linesPass1Begin tmp tmp2
# MSQ_START 1 mov tmp curLine_step2_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curLine_step2_addrRef_0
:STEP2_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step2_addrRef_0 ?+8 ; relsq tmp2 curLine_step2_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp linesPass1Begin
&tmp &linesPass1Begin ?+8 ; relsq tmp linesPass1Begin 1
# MSQ_END 1 sub
&curLine_step2_addrRef_0 &tmp ?+8 ; relsq curLine_step2_addrRef_0 tmp 1
&curLine_step2_addrRef_1 &tmp ?+8 ; relsq curLine_step2_addrRef_1 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 mov linesLeft linesPass1Len tmp
# MSQ_START 1 movneg tmp linesPass1Len
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp linesPass1Len
&tmp &linesPass1Len ?+8 ; relsq tmp linesPass1Len 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg linesLeft tmp
# MSQ_START 2 zero linesLeft
&linesLeft &linesLeft ?+8 ; relsq linesLeft linesLeft 1
# MSQ_END 2 zero
# MSQ_START 2 sub linesLeft tmp
&linesLeft &tmp ?+8 ; relsq linesLeft tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label STEP2_LOOP
# MSQ_START 0 decleq linesLeft 0 STEP2_END
:STEP2_LOOP &linesLeft &CONST_0 &STEP2_END ; lblsq linesLeft CONST_0 STEP2_END
# MSQ_END 0 decleq
# MSQ_START 0 dec linesLeft 1
&linesLeft &CONST_1 ?+8 ; relsq linesLeft CONST_1 1
# MSQ_END 0 dec

# MSQ_START 0 incaddr curLine_step2 18
&curLine_step2_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step2_addrRef_0 CONST_-18 1
&curLine_step2_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step2_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 setaddr incRefCount_key curLine_step2 tmp tmp2
# MSQ_START 1 mov tmp incRefCount_key_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 incRefCount_key_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &incRefCount_key_addrRef_0 ?+8 ; relsq tmp2 incRefCount_key_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLine_step2
&tmp :curLine_step2_addrRef_0 &curLine_step2 ?+8 ; relsq tmp curLine_step2 1
# MSQ_END 1 sub
&incRefCount_key_addrRef_0 &tmp ?+8 ; relsq incRefCount_key_addrRef_0 tmp 1
&incRefCount_key_addrRef_1 &tmp ?+8 ; relsq incRefCount_key_addrRef_1 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 decaddr curLine_step2 18
&curLine_step2_addrRef_0 &CONST_18 ?+8 ; relsq curLine_step2_addrRef_0 CONST_18 1
&curLine_step2_addrRef_1 &CONST_18 ?+8 ; relsq curLine_step2_addrRef_1 CONST_18 1
# MSQ_END 0 decaddr

# MSQ_START 0 strcmp_const curLine_step2 ABSSQ STEP2_HANDLE_SQ tmp tmp2
; addr strcmp_const_9_a 0
# MSQ_START 1 copyaddr strcmp_const_9_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_9_a curLine_step2_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_9_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_9_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_9_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_9_a_addrRef_0 tmp 1
&strcmp_const_9_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_9_a_addrRef_1 tmp 1
&strcmp_const_9_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_9_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_9_a 8
&strcmp_const_9_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_9_a_addrRef_0 CONST_-8 1
&strcmp_const_9_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_9_a_addrRef_1 CONST_-8 1
&strcmp_const_9_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_9_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr ABSSQ 8
&ABSSQ_addrRef_0 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_-8 1
&ABSSQ_addrRef_1 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_-8 1
&ABSSQ_addrRef_2 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_-8 1
&ABSSQ_addrRef_3 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_9_a ABSSQ STRCMP_CONST_9_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_9_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_9_a_addrRef_0 &strcmp_const_9_a ?+8 ; relsq tmp2 strcmp_const_9_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ABSSQ
&tmp :ABSSQ_addrRef_0 &ABSSQ ?+8 ; relsq tmp ABSSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_9_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_9_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_9_REVERT_ADDR
&tmp &CONST_-1 &JNZ_18_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_18_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_18_END ; lblsq ZERO ZERO JNZ_18_END
; label JNZ_18_REVERT_AND_JUMP
:JNZ_18_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_9_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_9_REVERT_ADDR
; label JNZ_18_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_9_len 0
# MSQ_START 1 mov strcmp_const_9_len strcmp_const_9_a tmp
# MSQ_START 2 movneg tmp strcmp_const_9_a
:JNZ_18_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_9_a_addrRef_1 &strcmp_const_9_a ?+8 ; relsq tmp strcmp_const_9_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_9_len tmp
&strcmp_const_9_len &strcmp_const_9_len ?+8 ; relsq strcmp_const_9_len strcmp_const_9_len 1
&strcmp_const_9_len &tmp ?+8 ; relsq strcmp_const_9_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_9_a 8
&strcmp_const_9_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_9_a_addrRef_0 CONST_8 1
&strcmp_const_9_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_9_a_addrRef_1 CONST_8 1
&strcmp_const_9_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_9_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr ABSSQ 8
&ABSSQ_addrRef_0 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_8 1
&ABSSQ_addrRef_1 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_8 1
&ABSSQ_addrRef_2 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_8 1
&ABSSQ_addrRef_3 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_9_aStr 0
; addr strcmp_const_9_bStr 0
# MSQ_START 1 setaddr strcmp_const_9_aStr strcmp_const_9_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_9_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_9_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_9_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_9_a
&tmp :strcmp_const_9_a_addrRef_2 &strcmp_const_9_a ?+8 ; relsq tmp strcmp_const_9_a 1
# MSQ_END 2 sub
&strcmp_const_9_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_9_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_9_bStr ABSSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_9_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_9_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_9_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ABSSQ
&tmp :ABSSQ_addrRef_1 &ABSSQ ?+8 ; relsq tmp ABSSQ 1
# MSQ_END 2 sub
&strcmp_const_9_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_9_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_9_LOOP
# MSQ_START 1 decleq strcmp_const_9_len 0 STEP2_HANDLE_SQ
:STRCMP_CONST_9_LOOP &strcmp_const_9_len &CONST_0 &STEP2_HANDLE_SQ ; lblsq strcmp_const_9_len CONST_0 STEP2_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_9_len 1
&strcmp_const_9_len &CONST_1 ?+8 ; relsq strcmp_const_9_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_9_aStr strcmp_const_9_bStr STRCMP_CONST_9_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_9_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_9_aStr_addrRef_0 &strcmp_const_9_aStr ?+8 ; relsq tmp2 strcmp_const_9_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_9_bStr
&tmp :strcmp_const_9_bStr_addrRef_0 &strcmp_const_9_bStr ?+8 ; relsq tmp strcmp_const_9_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_9_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_9_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_9_END
&tmp &CONST_-1 &JNZ_19_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_19_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_19_END ; lblsq ZERO ZERO JNZ_19_END
; label JNZ_19_REVERT_AND_JUMP
:JNZ_19_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_9_END ; lblsq ZERO ZERO STRCMP_CONST_9_END
; label JNZ_19_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_9_aStr 8
:JNZ_19_END &strcmp_const_9_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_9_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_9_bStr 8
&strcmp_const_9_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_9_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_9_LOOP
&ZERO &ZERO &STRCMP_CONST_9_LOOP ; lblsq ZERO ZERO STRCMP_CONST_9_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_9_REVERT_ADDR
# MSQ_START 1 decaddr ABSSQ 8
:STRCMP_CONST_9_REVERT_ADDR &ABSSQ_addrRef_0 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_8 1
&ABSSQ_addrRef_1 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_8 1
&ABSSQ_addrRef_2 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_8 1
&ABSSQ_addrRef_3 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_9_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step2 RELSQ STEP2_HANDLE_SQ tmp tmp2
; addr strcmp_const_10_a 0
# MSQ_START 1 copyaddr strcmp_const_10_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_10_a curLine_step2_addrRef_0 tmp tmp2
:STRCMP_CONST_9_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_10_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_10_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_10_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_10_a_addrRef_0 tmp 1
&strcmp_const_10_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_10_a_addrRef_1 tmp 1
&strcmp_const_10_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_10_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_10_a 8
&strcmp_const_10_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_10_a_addrRef_0 CONST_-8 1
&strcmp_const_10_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_10_a_addrRef_1 CONST_-8 1
&strcmp_const_10_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_10_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr RELSQ 8
&RELSQ_addrRef_0 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_0 CONST_-8 1
&RELSQ_addrRef_1 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_1 CONST_-8 1
&RELSQ_addrRef_2 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_2 CONST_-8 1
&RELSQ_addrRef_3 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_10_a RELSQ STRCMP_CONST_10_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_10_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_10_a_addrRef_0 &strcmp_const_10_a ?+8 ; relsq tmp2 strcmp_const_10_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RELSQ
&tmp :RELSQ_addrRef_0 &RELSQ ?+8 ; relsq tmp RELSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_10_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_10_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_10_REVERT_ADDR
&tmp &CONST_-1 &JNZ_20_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_20_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_20_END ; lblsq ZERO ZERO JNZ_20_END
; label JNZ_20_REVERT_AND_JUMP
:JNZ_20_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_10_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_10_REVERT_ADDR
; label JNZ_20_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_10_len 0
# MSQ_START 1 mov strcmp_const_10_len strcmp_const_10_a tmp
# MSQ_START 2 movneg tmp strcmp_const_10_a
:JNZ_20_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_10_a_addrRef_1 &strcmp_const_10_a ?+8 ; relsq tmp strcmp_const_10_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_10_len tmp
&strcmp_const_10_len &strcmp_const_10_len ?+8 ; relsq strcmp_const_10_len strcmp_const_10_len 1
&strcmp_const_10_len &tmp ?+8 ; relsq strcmp_const_10_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_10_a 8
&strcmp_const_10_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_10_a_addrRef_0 CONST_8 1
&strcmp_const_10_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_10_a_addrRef_1 CONST_8 1
&strcmp_const_10_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_10_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr RELSQ 8
&RELSQ_addrRef_0 &CONST_8 ?+8 ; relsq RELSQ_addrRef_0 CONST_8 1
&RELSQ_addrRef_1 &CONST_8 ?+8 ; relsq RELSQ_addrRef_1 CONST_8 1
&RELSQ_addrRef_2 &CONST_8 ?+8 ; relsq RELSQ_addrRef_2 CONST_8 1
&RELSQ_addrRef_3 &CONST_8 ?+8 ; relsq RELSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_10_aStr 0
; addr strcmp_const_10_bStr 0
# MSQ_START 1 setaddr strcmp_const_10_aStr strcmp_const_10_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_10_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_10_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_10_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_10_a
&tmp :strcmp_const_10_a_addrRef_2 &strcmp_const_10_a ?+8 ; relsq tmp strcmp_const_10_a 1
# MSQ_END 2 sub
&strcmp_const_10_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_10_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_10_bStr RELSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_10_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_10_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_10_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RELSQ
&tmp :RELSQ_addrRef_1 &RELSQ ?+8 ; relsq tmp RELSQ 1
# MSQ_END 2 sub
&strcmp_const_10_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_10_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_10_LOOP
# MSQ_START 1 decleq strcmp_const_10_len 0 STEP2_HANDLE_SQ
:STRCMP_CONST_10_LOOP &strcmp_const_10_len &CONST_0 &STEP2_HANDLE_SQ ; lblsq strcmp_const_10_len CONST_0 STEP2_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_10_len 1
&strcmp_const_10_len &CONST_1 ?+8 ; relsq strcmp_const_10_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_10_aStr strcmp_const_10_bStr STRCMP_CONST_10_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_10_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_10_aStr_addrRef_0 &strcmp_const_10_aStr ?+8 ; relsq tmp2 strcmp_const_10_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_10_bStr
&tmp :strcmp_const_10_bStr_addrRef_0 &strcmp_const_10_bStr ?+8 ; relsq tmp strcmp_const_10_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_10_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_10_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_10_END
&tmp &CONST_-1 &JNZ_21_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_21_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_21_END ; lblsq ZERO ZERO JNZ_21_END
; label JNZ_21_REVERT_AND_JUMP
:JNZ_21_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_10_END ; lblsq ZERO ZERO STRCMP_CONST_10_END
; label JNZ_21_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_10_aStr 8
:JNZ_21_END &strcmp_const_10_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_10_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_10_bStr 8
&strcmp_const_10_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_10_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_10_LOOP
&ZERO &ZERO &STRCMP_CONST_10_LOOP ; lblsq ZERO ZERO STRCMP_CONST_10_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_10_REVERT_ADDR
# MSQ_START 1 decaddr RELSQ 8
:STRCMP_CONST_10_REVERT_ADDR &RELSQ_addrRef_0 &CONST_8 ?+8 ; relsq RELSQ_addrRef_0 CONST_8 1
&RELSQ_addrRef_1 &CONST_8 ?+8 ; relsq RELSQ_addrRef_1 CONST_8 1
&RELSQ_addrRef_2 &CONST_8 ?+8 ; relsq RELSQ_addrRef_2 CONST_8 1
&RELSQ_addrRef_3 &CONST_8 ?+8 ; relsq RELSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_10_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step2 LBLSQ STEP2_HANDLE_SQ tmp tmp2
; addr strcmp_const_11_a 0
# MSQ_START 1 copyaddr strcmp_const_11_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_11_a curLine_step2_addrRef_0 tmp tmp2
:STRCMP_CONST_10_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_11_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_11_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_11_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_11_a_addrRef_0 tmp 1
&strcmp_const_11_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_11_a_addrRef_1 tmp 1
&strcmp_const_11_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_11_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_11_a 8
&strcmp_const_11_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_11_a_addrRef_0 CONST_-8 1
&strcmp_const_11_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_11_a_addrRef_1 CONST_-8 1
&strcmp_const_11_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_11_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_-8 1
&LBLSQ_addrRef_1 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_-8 1
&LBLSQ_addrRef_2 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_-8 1
&LBLSQ_addrRef_3 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_-8 1
&LBLSQ_addrRef_4 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_-8 1
&LBLSQ_addrRef_5 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_-8 1
&LBLSQ_addrRef_6 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_-8 1
&LBLSQ_addrRef_7 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_11_a LBLSQ STRCMP_CONST_11_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_11_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_11_a_addrRef_0 &strcmp_const_11_a ?+8 ; relsq tmp2 strcmp_const_11_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_0 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_11_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_11_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_11_REVERT_ADDR
&tmp &CONST_-1 &JNZ_22_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_22_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_22_END ; lblsq ZERO ZERO JNZ_22_END
; label JNZ_22_REVERT_AND_JUMP
:JNZ_22_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_11_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_11_REVERT_ADDR
; label JNZ_22_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_11_len 0
# MSQ_START 1 mov strcmp_const_11_len strcmp_const_11_a tmp
# MSQ_START 2 movneg tmp strcmp_const_11_a
:JNZ_22_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_11_a_addrRef_1 &strcmp_const_11_a ?+8 ; relsq tmp strcmp_const_11_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_11_len tmp
&strcmp_const_11_len &strcmp_const_11_len ?+8 ; relsq strcmp_const_11_len strcmp_const_11_len 1
&strcmp_const_11_len &tmp ?+8 ; relsq strcmp_const_11_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_11_a 8
&strcmp_const_11_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_11_a_addrRef_0 CONST_8 1
&strcmp_const_11_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_11_a_addrRef_1 CONST_8 1
&strcmp_const_11_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_11_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_11_aStr 0
; addr strcmp_const_11_bStr 0
# MSQ_START 1 setaddr strcmp_const_11_aStr strcmp_const_11_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_11_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_11_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_11_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_11_a
&tmp :strcmp_const_11_a_addrRef_2 &strcmp_const_11_a ?+8 ; relsq tmp strcmp_const_11_a 1
# MSQ_END 2 sub
&strcmp_const_11_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_11_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_11_bStr LBLSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_11_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_11_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_11_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_1 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
&strcmp_const_11_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_11_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_11_LOOP
# MSQ_START 1 decleq strcmp_const_11_len 0 STEP2_HANDLE_SQ
:STRCMP_CONST_11_LOOP &strcmp_const_11_len &CONST_0 &STEP2_HANDLE_SQ ; lblsq strcmp_const_11_len CONST_0 STEP2_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_11_len 1
&strcmp_const_11_len &CONST_1 ?+8 ; relsq strcmp_const_11_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_11_aStr strcmp_const_11_bStr STRCMP_CONST_11_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_11_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_11_aStr_addrRef_0 &strcmp_const_11_aStr ?+8 ; relsq tmp2 strcmp_const_11_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_11_bStr
&tmp :strcmp_const_11_bStr_addrRef_0 &strcmp_const_11_bStr ?+8 ; relsq tmp strcmp_const_11_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_11_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_11_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_11_END
&tmp &CONST_-1 &JNZ_23_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_23_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_23_END ; lblsq ZERO ZERO JNZ_23_END
; label JNZ_23_REVERT_AND_JUMP
:JNZ_23_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_11_END ; lblsq ZERO ZERO STRCMP_CONST_11_END
; label JNZ_23_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_11_aStr 8
:JNZ_23_END &strcmp_const_11_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_11_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_11_bStr 8
&strcmp_const_11_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_11_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_11_LOOP
&ZERO &ZERO &STRCMP_CONST_11_LOOP ; lblsq ZERO ZERO STRCMP_CONST_11_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_11_REVERT_ADDR
# MSQ_START 1 decaddr LBLSQ 8
:STRCMP_CONST_11_REVERT_ADDR &LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_11_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step2 SUBADDR STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
; addr strcmp_const_12_a 0
# MSQ_START 1 copyaddr strcmp_const_12_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_12_a curLine_step2_addrRef_0 tmp tmp2
:STRCMP_CONST_11_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_12_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_12_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_12_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_12_a_addrRef_0 tmp 1
&strcmp_const_12_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_12_a_addrRef_1 tmp 1
&strcmp_const_12_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_12_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_12_a 8
&strcmp_const_12_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_12_a_addrRef_0 CONST_-8 1
&strcmp_const_12_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_12_a_addrRef_1 CONST_-8 1
&strcmp_const_12_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_12_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_-8 1
&SUBADDR_addrRef_1 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_-8 1
&SUBADDR_addrRef_2 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_-8 1
&SUBADDR_addrRef_3 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_-8 1
&SUBADDR_addrRef_4 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_-8 1
&SUBADDR_addrRef_5 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_12_a SUBADDR STRCMP_CONST_12_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_12_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_12_a_addrRef_0 &strcmp_const_12_a ?+8 ; relsq tmp2 strcmp_const_12_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_0 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_12_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_12_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_12_REVERT_ADDR
&tmp &CONST_-1 &JNZ_24_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_24_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_24_END ; lblsq ZERO ZERO JNZ_24_END
; label JNZ_24_REVERT_AND_JUMP
:JNZ_24_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_12_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_12_REVERT_ADDR
; label JNZ_24_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_12_len 0
# MSQ_START 1 mov strcmp_const_12_len strcmp_const_12_a tmp
# MSQ_START 2 movneg tmp strcmp_const_12_a
:JNZ_24_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_12_a_addrRef_1 &strcmp_const_12_a ?+8 ; relsq tmp strcmp_const_12_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_12_len tmp
&strcmp_const_12_len &strcmp_const_12_len ?+8 ; relsq strcmp_const_12_len strcmp_const_12_len 1
&strcmp_const_12_len &tmp ?+8 ; relsq strcmp_const_12_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_12_a 8
&strcmp_const_12_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_12_a_addrRef_0 CONST_8 1
&strcmp_const_12_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_12_a_addrRef_1 CONST_8 1
&strcmp_const_12_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_12_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_12_aStr 0
; addr strcmp_const_12_bStr 0
# MSQ_START 1 setaddr strcmp_const_12_aStr strcmp_const_12_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_12_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_12_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_12_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_12_a
&tmp :strcmp_const_12_a_addrRef_2 &strcmp_const_12_a ?+8 ; relsq tmp strcmp_const_12_a 1
# MSQ_END 2 sub
&strcmp_const_12_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_12_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_12_bStr SUBADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_12_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_12_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_12_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_1 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
&strcmp_const_12_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_12_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_12_LOOP
# MSQ_START 1 decleq strcmp_const_12_len 0 STEP2_HANDLE_LBLSQ_SUBADDR
:STRCMP_CONST_12_LOOP &strcmp_const_12_len &CONST_0 &STEP2_HANDLE_LBLSQ_SUBADDR ; lblsq strcmp_const_12_len CONST_0 STEP2_HANDLE_LBLSQ_SUBADDR
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_12_len 1
&strcmp_const_12_len &CONST_1 ?+8 ; relsq strcmp_const_12_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_12_aStr strcmp_const_12_bStr STRCMP_CONST_12_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_12_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_12_aStr_addrRef_0 &strcmp_const_12_aStr ?+8 ; relsq tmp2 strcmp_const_12_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_12_bStr
&tmp :strcmp_const_12_bStr_addrRef_0 &strcmp_const_12_bStr ?+8 ; relsq tmp strcmp_const_12_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_12_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_12_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_12_END
&tmp &CONST_-1 &JNZ_25_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_25_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_25_END ; lblsq ZERO ZERO JNZ_25_END
; label JNZ_25_REVERT_AND_JUMP
:JNZ_25_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_12_END ; lblsq ZERO ZERO STRCMP_CONST_12_END
; label JNZ_25_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_12_aStr 8
:JNZ_25_END &strcmp_const_12_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_12_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_12_bStr 8
&strcmp_const_12_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_12_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_12_LOOP
&ZERO &ZERO &STRCMP_CONST_12_LOOP ; lblsq ZERO ZERO STRCMP_CONST_12_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_12_REVERT_ADDR
# MSQ_START 1 decaddr SUBADDR 8
:STRCMP_CONST_12_REVERT_ADDR &SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_12_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step2 RAW_REF STEP2_HANDLE_RAW_REF tmp tmp2
; addr strcmp_const_13_a 0
# MSQ_START 1 copyaddr strcmp_const_13_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_13_a curLine_step2_addrRef_0 tmp tmp2
:STRCMP_CONST_12_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_13_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_13_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_13_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_13_a_addrRef_0 tmp 1
&strcmp_const_13_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_13_a_addrRef_1 tmp 1
&strcmp_const_13_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_13_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_13_a 8
&strcmp_const_13_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_13_a_addrRef_0 CONST_-8 1
&strcmp_const_13_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_13_a_addrRef_1 CONST_-8 1
&strcmp_const_13_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_13_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr RAW_REF 8
&RAW_REF_addrRef_0 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_-8 1
&RAW_REF_addrRef_1 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_-8 1
&RAW_REF_addrRef_2 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_-8 1
&RAW_REF_addrRef_3 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_13_a RAW_REF STRCMP_CONST_13_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_13_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_13_a_addrRef_0 &strcmp_const_13_a ?+8 ; relsq tmp2 strcmp_const_13_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW_REF
&tmp :RAW_REF_addrRef_0 &RAW_REF ?+8 ; relsq tmp RAW_REF 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_13_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_13_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_13_REVERT_ADDR
&tmp &CONST_-1 &JNZ_26_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_26_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_26_END ; lblsq ZERO ZERO JNZ_26_END
; label JNZ_26_REVERT_AND_JUMP
:JNZ_26_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_13_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_13_REVERT_ADDR
; label JNZ_26_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_13_len 0
# MSQ_START 1 mov strcmp_const_13_len strcmp_const_13_a tmp
# MSQ_START 2 movneg tmp strcmp_const_13_a
:JNZ_26_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_13_a_addrRef_1 &strcmp_const_13_a ?+8 ; relsq tmp strcmp_const_13_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_13_len tmp
&strcmp_const_13_len &strcmp_const_13_len ?+8 ; relsq strcmp_const_13_len strcmp_const_13_len 1
&strcmp_const_13_len &tmp ?+8 ; relsq strcmp_const_13_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_13_a 8
&strcmp_const_13_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_13_a_addrRef_0 CONST_8 1
&strcmp_const_13_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_13_a_addrRef_1 CONST_8 1
&strcmp_const_13_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_13_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr RAW_REF 8
&RAW_REF_addrRef_0 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_8 1
&RAW_REF_addrRef_1 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_8 1
&RAW_REF_addrRef_2 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_8 1
&RAW_REF_addrRef_3 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_13_aStr 0
; addr strcmp_const_13_bStr 0
# MSQ_START 1 setaddr strcmp_const_13_aStr strcmp_const_13_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_13_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_13_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_13_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_13_a
&tmp :strcmp_const_13_a_addrRef_2 &strcmp_const_13_a ?+8 ; relsq tmp strcmp_const_13_a 1
# MSQ_END 2 sub
&strcmp_const_13_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_13_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_13_bStr RAW_REF tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_13_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_13_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_13_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW_REF
&tmp :RAW_REF_addrRef_1 &RAW_REF ?+8 ; relsq tmp RAW_REF 1
# MSQ_END 2 sub
&strcmp_const_13_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_13_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_13_LOOP
# MSQ_START 1 decleq strcmp_const_13_len 0 STEP2_HANDLE_RAW_REF
:STRCMP_CONST_13_LOOP &strcmp_const_13_len &CONST_0 &STEP2_HANDLE_RAW_REF ; lblsq strcmp_const_13_len CONST_0 STEP2_HANDLE_RAW_REF
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_13_len 1
&strcmp_const_13_len &CONST_1 ?+8 ; relsq strcmp_const_13_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_13_aStr strcmp_const_13_bStr STRCMP_CONST_13_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_13_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_13_aStr_addrRef_0 &strcmp_const_13_aStr ?+8 ; relsq tmp2 strcmp_const_13_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_13_bStr
&tmp :strcmp_const_13_bStr_addrRef_0 &strcmp_const_13_bStr ?+8 ; relsq tmp strcmp_const_13_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_13_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_13_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_13_END
&tmp &CONST_-1 &JNZ_27_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_27_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_27_END ; lblsq ZERO ZERO JNZ_27_END
; label JNZ_27_REVERT_AND_JUMP
:JNZ_27_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_13_END ; lblsq ZERO ZERO STRCMP_CONST_13_END
; label JNZ_27_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_13_aStr 8
:JNZ_27_END &strcmp_const_13_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_13_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_13_bStr 8
&strcmp_const_13_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_13_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_13_LOOP
&ZERO &ZERO &STRCMP_CONST_13_LOOP ; lblsq ZERO ZERO STRCMP_CONST_13_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_13_REVERT_ADDR
# MSQ_START 1 decaddr RAW_REF 8
:STRCMP_CONST_13_REVERT_ADDR &RAW_REF_addrRef_0 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_8 1
&RAW_REF_addrRef_1 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_8 1
&RAW_REF_addrRef_2 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_8 1
&RAW_REF_addrRef_3 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_13_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 lbljmp STEP2_LOOP_END
:STRCMP_CONST_13_END &ZERO &ZERO &STEP2_LOOP_END ; lblsq ZERO ZERO STEP2_LOOP_END
# MSQ_END 0 lbljmp

; label STEP2_HANDLE_SQ
# MSQ_START 0 call incRefCount tmp
# MSQ_START 1 mov incRefCount_retAddr incRefCount_retPosAddr_0 tmp
# MSQ_START 2 movneg tmp incRefCount_retPosAddr_0
:STEP2_HANDLE_SQ &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &incRefCount_retPosAddr_0 ?+8 ; relsq tmp incRefCount_retPosAddr_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg incRefCount_retAddr tmp
&incRefCount_retAddr &incRefCount_retAddr ?+8 ; relsq incRefCount_retAddr incRefCount_retAddr 1
&incRefCount_retAddr &tmp ?+8 ; relsq incRefCount_retAddr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 lbljmp incRefCount
&ZERO &ZERO &incRefCount ; lblsq ZERO ZERO incRefCount
# MSQ_END 1 lbljmp
; label incRefCount_retPosAddr_0
:incRefCount_retPosAddr_0 &incRefCount_retPos_0 ; raw_ref incRefCount_retPos_0
; label incRefCount_retPos_0
# MSQ_END 0 call

# MSQ_START 0 incaddr incRefCount_key 18
:incRefCount_retPos_0 &incRefCount_key_addrRef_0 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_-18 1
&incRefCount_key_addrRef_1 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 call incRefCount tmp
# MSQ_START 1 mov incRefCount_retAddr incRefCount_retPosAddr_1 tmp
# MSQ_START 2 movneg tmp incRefCount_retPosAddr_1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &incRefCount_retPosAddr_1 ?+8 ; relsq tmp incRefCount_retPosAddr_1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg incRefCount_retAddr tmp
&incRefCount_retAddr &incRefCount_retAddr ?+8 ; relsq incRefCount_retAddr incRefCount_retAddr 1
&incRefCount_retAddr &tmp ?+8 ; relsq incRefCount_retAddr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 lbljmp incRefCount
&ZERO &ZERO &incRefCount ; lblsq ZERO ZERO incRefCount
# MSQ_END 1 lbljmp
; label incRefCount_retPosAddr_1
:incRefCount_retPosAddr_1 &incRefCount_retPos_1 ; raw_ref incRefCount_retPos_1
; label incRefCount_retPos_1
# MSQ_END 0 call

# MSQ_START 0 strcmp_const curLine_step2 LBLSQ STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
; addr strcmp_const_14_a 0
# MSQ_START 1 copyaddr strcmp_const_14_a curLine_step2 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_14_a curLine_step2_addrRef_0 tmp tmp2
:incRefCount_retPos_1 &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_14_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_14_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step2_addrRef_0 ?+8 ; relsq tmp curLine_step2_addrRef_0 1
&strcmp_const_14_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_14_a_addrRef_0 tmp 1
&strcmp_const_14_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_14_a_addrRef_1 tmp 1
&strcmp_const_14_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_14_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_14_a 8
&strcmp_const_14_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_14_a_addrRef_0 CONST_-8 1
&strcmp_const_14_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_14_a_addrRef_1 CONST_-8 1
&strcmp_const_14_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_14_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_-8 1
&LBLSQ_addrRef_1 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_-8 1
&LBLSQ_addrRef_2 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_-8 1
&LBLSQ_addrRef_3 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_-8 1
&LBLSQ_addrRef_4 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_-8 1
&LBLSQ_addrRef_5 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_-8 1
&LBLSQ_addrRef_6 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_-8 1
&LBLSQ_addrRef_7 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_14_a LBLSQ STRCMP_CONST_14_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_14_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_14_a_addrRef_0 &strcmp_const_14_a ?+8 ; relsq tmp2 strcmp_const_14_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_2 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_14_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_14_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_14_REVERT_ADDR
&tmp &CONST_-1 &JNZ_28_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_28_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_28_END ; lblsq ZERO ZERO JNZ_28_END
; label JNZ_28_REVERT_AND_JUMP
:JNZ_28_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_14_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_14_REVERT_ADDR
; label JNZ_28_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_14_len 0
# MSQ_START 1 mov strcmp_const_14_len strcmp_const_14_a tmp
# MSQ_START 2 movneg tmp strcmp_const_14_a
:JNZ_28_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_14_a_addrRef_1 &strcmp_const_14_a ?+8 ; relsq tmp strcmp_const_14_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_14_len tmp
&strcmp_const_14_len &strcmp_const_14_len ?+8 ; relsq strcmp_const_14_len strcmp_const_14_len 1
&strcmp_const_14_len &tmp ?+8 ; relsq strcmp_const_14_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_14_a 8
&strcmp_const_14_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_14_a_addrRef_0 CONST_8 1
&strcmp_const_14_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_14_a_addrRef_1 CONST_8 1
&strcmp_const_14_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_14_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_14_aStr 0
; addr strcmp_const_14_bStr 0
# MSQ_START 1 setaddr strcmp_const_14_aStr strcmp_const_14_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_14_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_14_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_14_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_14_a
&tmp :strcmp_const_14_a_addrRef_2 &strcmp_const_14_a ?+8 ; relsq tmp strcmp_const_14_a 1
# MSQ_END 2 sub
&strcmp_const_14_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_14_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_14_bStr LBLSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_14_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_14_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_14_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_3 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
&strcmp_const_14_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_14_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_14_LOOP
# MSQ_START 1 decleq strcmp_const_14_len 0 STEP2_HANDLE_LBLSQ_SUBADDR
:STRCMP_CONST_14_LOOP &strcmp_const_14_len &CONST_0 &STEP2_HANDLE_LBLSQ_SUBADDR ; lblsq strcmp_const_14_len CONST_0 STEP2_HANDLE_LBLSQ_SUBADDR
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_14_len 1
&strcmp_const_14_len &CONST_1 ?+8 ; relsq strcmp_const_14_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_14_aStr strcmp_const_14_bStr STRCMP_CONST_14_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_14_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_14_aStr_addrRef_0 &strcmp_const_14_aStr ?+8 ; relsq tmp2 strcmp_const_14_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_14_bStr
&tmp :strcmp_const_14_bStr_addrRef_0 &strcmp_const_14_bStr ?+8 ; relsq tmp strcmp_const_14_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_14_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_14_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_14_END
&tmp &CONST_-1 &JNZ_29_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_29_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_29_END ; lblsq ZERO ZERO JNZ_29_END
; label JNZ_29_REVERT_AND_JUMP
:JNZ_29_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_14_END ; lblsq ZERO ZERO STRCMP_CONST_14_END
; label JNZ_29_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_14_aStr 8
:JNZ_29_END &strcmp_const_14_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_14_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_14_bStr 8
&strcmp_const_14_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_14_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_14_LOOP
&ZERO &ZERO &STRCMP_CONST_14_LOOP ; lblsq ZERO ZERO STRCMP_CONST_14_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_14_REVERT_ADDR
# MSQ_START 1 decaddr LBLSQ 8
:STRCMP_CONST_14_REVERT_ADDR &LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_14_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 lbljmp STEP2_LOOP_END
:STRCMP_CONST_14_END &ZERO &ZERO &STEP2_LOOP_END ; lblsq ZERO ZERO STEP2_LOOP_END
# MSQ_END 0 lbljmp


; label STEP2_HANDLE_LBLSQ_SUBADDR
# MSQ_START 0 incaddr incRefCount_key 18
:STEP2_HANDLE_LBLSQ_SUBADDR &incRefCount_key_addrRef_0 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_-18 1
&incRefCount_key_addrRef_1 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 call incRefCount tmp
# MSQ_START 1 mov incRefCount_retAddr incRefCount_retPosAddr_2 tmp
# MSQ_START 2 movneg tmp incRefCount_retPosAddr_2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &incRefCount_retPosAddr_2 ?+8 ; relsq tmp incRefCount_retPosAddr_2 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg incRefCount_retAddr tmp
&incRefCount_retAddr &incRefCount_retAddr ?+8 ; relsq incRefCount_retAddr incRefCount_retAddr 1
&incRefCount_retAddr &tmp ?+8 ; relsq incRefCount_retAddr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 lbljmp incRefCount
&ZERO &ZERO &incRefCount ; lblsq ZERO ZERO incRefCount
# MSQ_END 1 lbljmp
; label incRefCount_retPosAddr_2
:incRefCount_retPosAddr_2 &incRefCount_retPos_2 ; raw_ref incRefCount_retPos_2
; label incRefCount_retPos_2
# MSQ_END 0 call
# MSQ_START 0 lbljmp STEP2_LOOP_END
:incRefCount_retPos_2 &ZERO &ZERO &STEP2_LOOP_END ; lblsq ZERO ZERO STEP2_LOOP_END
# MSQ_END 0 lbljmp


; label STEP2_HANDLE_RAW_REF
# MSQ_START 0 incaddr curLine_step2 20
:STEP2_HANDLE_RAW_REF &curLine_step2_addrRef_0 &CONST_-20 ?+8 ; relsq curLine_step2_addrRef_0 CONST_-20 1
&curLine_step2_addrRef_1 &CONST_-20 ?+8 ; relsq curLine_step2_addrRef_1 CONST_-20 1
# MSQ_END 0 incaddr
; var tokensCount 0
# MSQ_START 0 mov tokensCount curLine_step2 tmp
# MSQ_START 1 movneg tmp curLine_step2
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp curLine_step2
&tmp :curLine_step2_addrRef_1 &curLine_step2 ?+8 ; relsq tmp curLine_step2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg tokensCount tmp
# MSQ_START 2 zero tokensCount
&tokensCount &tokensCount ?+8 ; relsq tokensCount tokensCount 1
# MSQ_END 2 zero
# MSQ_START 2 sub tokensCount tmp
&tokensCount &tmp ?+8 ; relsq tokensCount tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr curLine_step2 20
&curLine_step2_addrRef_0 &CONST_20 ?+8 ; relsq curLine_step2_addrRef_0 CONST_20 1
&curLine_step2_addrRef_1 &CONST_20 ?+8 ; relsq curLine_step2_addrRef_1 CONST_20 1
# MSQ_END 0 decaddr

; label STEP2_RAW_REF_LOOP
# MSQ_START 0 decleq tokensCount 0 STEP2_LOOP_END
:STEP2_RAW_REF_LOOP &tokensCount &CONST_0 &STEP2_LOOP_END ; lblsq tokensCount CONST_0 STEP2_LOOP_END
# MSQ_END 0 decleq
# MSQ_START 0 dec tokensCount 1
&tokensCount &CONST_1 ?+8 ; relsq tokensCount CONST_1 1
# MSQ_END 0 dec
# MSQ_START 0 call incRefCount tmp
# MSQ_START 1 mov incRefCount_retAddr incRefCount_retPosAddr_3 tmp
# MSQ_START 2 movneg tmp incRefCount_retPosAddr_3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &incRefCount_retPosAddr_3 ?+8 ; relsq tmp incRefCount_retPosAddr_3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg incRefCount_retAddr tmp
&incRefCount_retAddr &incRefCount_retAddr ?+8 ; relsq incRefCount_retAddr incRefCount_retAddr 1
&incRefCount_retAddr &tmp ?+8 ; relsq incRefCount_retAddr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 lbljmp incRefCount
&ZERO &ZERO &incRefCount ; lblsq ZERO ZERO incRefCount
# MSQ_END 1 lbljmp
; label incRefCount_retPosAddr_3
:incRefCount_retPosAddr_3 &incRefCount_retPos_3 ; raw_ref incRefCount_retPos_3
; label incRefCount_retPos_3
# MSQ_END 0 call
# MSQ_START 0 incaddr incRefCount_key 18
:incRefCount_retPos_3 &incRefCount_key_addrRef_0 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_0 CONST_-18 1
&incRefCount_key_addrRef_1 &CONST_-18 ?+8 ; relsq incRefCount_key_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP2_RAW_REF_LOOP
&ZERO &ZERO &STEP2_RAW_REF_LOOP ; lblsq ZERO ZERO STEP2_RAW_REF_LOOP
# MSQ_END 0 lbljmp


; label STEP2_LOOP_END
# MSQ_START 0 incaddr curLine_step2 58
:STEP2_LOOP_END &curLine_step2_addrRef_0 &CONST_-58 ?+8 ; relsq curLine_step2_addrRef_0 CONST_-58 1
&curLine_step2_addrRef_1 &CONST_-58 ?+8 ; relsq curLine_step2_addrRef_1 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP2_LOOP
&ZERO &ZERO &STEP2_LOOP ; lblsq ZERO ZERO STEP2_LOOP
# MSQ_END 0 lbljmp

; label STEP2_END
# MSQ_START 0 puts STEP2_PRINT_PREFIX tmp tmp2
; addr puts_7_str 0
# MSQ_START 1 setaddr puts_7_str STEP2_PRINT_PREFIX tmp tmp2
# MSQ_START 2 mov tmp puts_7_str_addrRef_0 tmp2
:STEP2_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_7_str_addrRef_0 ?+8 ; relsq tmp2 puts_7_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP2_PRINT_PREFIX
&tmp :STEP2_PRINT_PREFIX_addrRef_0 &STEP2_PRINT_PREFIX ?+8 ; relsq tmp STEP2_PRINT_PREFIX 1
# MSQ_END 2 sub
&puts_7_str_addrRef_0 &tmp ?+8 ; relsq puts_7_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_7_len 0
# MSQ_START 1 incaddr STEP2_PRINT_PREFIX 8
&STEP2_PRINT_PREFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP2_PRINT_PREFIX_addrRef_0 CONST_-8 1
&STEP2_PRINT_PREFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP2_PRINT_PREFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_7_len STEP2_PRINT_PREFIX tmp
# MSQ_START 2 movneg tmp STEP2_PRINT_PREFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP2_PRINT_PREFIX_addrRef_1 &STEP2_PRINT_PREFIX ?+8 ; relsq tmp STEP2_PRINT_PREFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_7_len tmp
&puts_7_len &puts_7_len ?+8 ; relsq puts_7_len puts_7_len 1
&puts_7_len &tmp ?+8 ; relsq puts_7_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP2_PRINT_PREFIX 8
&STEP2_PRINT_PREFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP2_PRINT_PREFIX_addrRef_0 CONST_8 1
&STEP2_PRINT_PREFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP2_PRINT_PREFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_7_LOOP
# MSQ_START 1 decleq puts_7_len 0 PUTS_7_END
:PUTS_7_LOOP &puts_7_len &CONST_0 &PUTS_7_END ; lblsq puts_7_len CONST_0 PUTS_7_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_7_len 1
&puts_7_len &CONST_1 ?+8 ; relsq puts_7_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_7_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_7_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_7_str_addrRef_0 &puts_7_str ?+8 ; relsq tmp puts_7_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_7_str 8
&puts_7_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_7_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_7_LOOP
&ZERO &ZERO &PUTS_7_LOOP ; lblsq ZERO ZERO PUTS_7_LOOP
# MSQ_END 1 lbljmp
; label PUTS_7_END
# MSQ_END 0 puts
; addr symbolCountPrint_step2 0
# MSQ_START 0 itoa symbolCountPrint_step2 symbolsLen tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_7_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr symbolCountPrint_step2 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 symbolCountPrint_step2_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolCountPrint_step2_addrRef_0 ?+8 ; relsq tmp symbolCountPrint_step2_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&symbolCountPrint_step2_addrRef_0 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 tmp3 1
&symbolCountPrint_step2_addrRef_1 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 tmp3 1
&symbolCountPrint_step2_addrRef_2 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 tmp3 1
&symbolCountPrint_step2_addrRef_3 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 tmp3 1
&symbolCountPrint_step2_addrRef_4 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 tmp3 1
&symbolCountPrint_step2_addrRef_5 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 tmp3 1
&symbolCountPrint_step2_addrRef_6 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 tmp3 1
&symbolCountPrint_step2_addrRef_7 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 tmp3 1
&symbolCountPrint_step2_addrRef_8 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 tmp3 1
&symbolCountPrint_step2_addrRef_9 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 tmp3 1
&symbolCountPrint_step2_addrRef_10 &tmp3 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const symbolCountPrint_step2 a0 tmp3
# MSQ_START 2 malloc_const symbolCountPrint_step2 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:symbolCountPrint_step2_addrRef_0 &symbolCountPrint_step2 :symbolCountPrint_step2_addrRef_1 &symbolCountPrint_step2 ?+8 ; relsq symbolCountPrint_step2 symbolCountPrint_step2 1
:symbolCountPrint_step2_addrRef_2 &symbolCountPrint_step2 &tmp3 ?+8 ; relsq symbolCountPrint_step2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr symbolCountPrint_step2 8
&symbolCountPrint_step2_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 CONST_-8 1
&symbolCountPrint_step2_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 CONST_-8 1
&symbolCountPrint_step2_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 CONST_-8 1
&symbolCountPrint_step2_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 CONST_-8 1
&symbolCountPrint_step2_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 CONST_-8 1
&symbolCountPrint_step2_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 CONST_-8 1
&symbolCountPrint_step2_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 CONST_-8 1
&symbolCountPrint_step2_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 CONST_-8 1
&symbolCountPrint_step2_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 CONST_-8 1
&symbolCountPrint_step2_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 CONST_-8 1
&symbolCountPrint_step2_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero symbolCountPrint_step2
:symbolCountPrint_step2_addrRef_3 &symbolCountPrint_step2 :symbolCountPrint_step2_addrRef_4 &symbolCountPrint_step2 ?+8 ; relsq symbolCountPrint_step2 symbolCountPrint_step2 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr symbolCountPrint_step2 8
&symbolCountPrint_step2_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 CONST_-8 1
&symbolCountPrint_step2_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 CONST_-8 1
&symbolCountPrint_step2_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 CONST_-8 1
&symbolCountPrint_step2_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 CONST_-8 1
&symbolCountPrint_step2_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 CONST_-8 1
&symbolCountPrint_step2_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 CONST_-8 1
&symbolCountPrint_step2_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 CONST_-8 1
&symbolCountPrint_step2_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 CONST_-8 1
&symbolCountPrint_step2_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 CONST_-8 1
&symbolCountPrint_step2_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 CONST_-8 1
&symbolCountPrint_step2_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov symbolCountPrint_step2 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:symbolCountPrint_step2_addrRef_5 &symbolCountPrint_step2 :symbolCountPrint_step2_addrRef_6 &symbolCountPrint_step2 ?+8 ; relsq symbolCountPrint_step2 symbolCountPrint_step2 1
:symbolCountPrint_step2_addrRef_7 &symbolCountPrint_step2 &tmp3 ?+8 ; relsq symbolCountPrint_step2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr symbolCountPrint_step2 10
&symbolCountPrint_step2_addrRef_0 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 CONST_10 1
&symbolCountPrint_step2_addrRef_1 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 CONST_10 1
&symbolCountPrint_step2_addrRef_2 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 CONST_10 1
&symbolCountPrint_step2_addrRef_3 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 CONST_10 1
&symbolCountPrint_step2_addrRef_4 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 CONST_10 1
&symbolCountPrint_step2_addrRef_5 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 CONST_10 1
&symbolCountPrint_step2_addrRef_6 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 CONST_10 1
&symbolCountPrint_step2_addrRef_7 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 CONST_10 1
&symbolCountPrint_step2_addrRef_8 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 CONST_10 1
&symbolCountPrint_step2_addrRef_9 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 CONST_10 1
&symbolCountPrint_step2_addrRef_10 &CONST_10 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_2_retBuf 0
# MSQ_START 1 setaddr itoa_2_retBuf symbolCountPrint_step2 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_2_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_2_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_2_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 symbolCountPrint_step2
&tmp2 :symbolCountPrint_step2_addrRef_8 &symbolCountPrint_step2 ?+8 ; relsq tmp2 symbolCountPrint_step2 1
# MSQ_END 2 sub
&itoa_2_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_0 tmp2 1
&itoa_2_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_1 tmp2 1
&itoa_2_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_2 tmp2 1
&itoa_2_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_3 tmp2 1
&itoa_2_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_4 tmp2 1
&itoa_2_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_5 tmp2 1
&itoa_2_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_6 tmp2 1
&itoa_2_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_7 tmp2 1
&itoa_2_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_8 tmp2 1
&itoa_2_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_2_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_2_retLength 0
# MSQ_START 1 copyaddr itoa_2_retLength symbolCountPrint_step2 tmp2 tmp3
# MSQ_START 2 setaddr itoa_2_retLength symbolCountPrint_step2_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_2_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_2_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &symbolCountPrint_step2_addrRef_0 ?+8 ; relsq tmp2 symbolCountPrint_step2_addrRef_0 1
&itoa_2_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_2_retLength_addrRef_0 tmp2 1
&itoa_2_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_2_retLength_addrRef_1 tmp2 1
&itoa_2_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_2_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_2_retLength 8
&itoa_2_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_2_retLength_addrRef_0 CONST_-8 1
&itoa_2_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_2_retLength_addrRef_1 CONST_-8 1
&itoa_2_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_2_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_2_noDigits 0
# MSQ_START 1 set itoa_2_noDigits 1
# MSQ_START 2 zero itoa_2_noDigits
&itoa_2_noDigits &itoa_2_noDigits ?+8 ; relsq itoa_2_noDigits itoa_2_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_2_noDigits 1
&itoa_2_noDigits &CONST_-1 ?+8 ; relsq itoa_2_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp symbolsLen tmp2
# MSQ_START 2 movneg tmp2 symbolsLen
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbolsLen ?+8 ; relsq tmp2 symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_2_isNeg 0
# MSQ_START 1 zero itoa_2_isNeg
# MSQ_START 2 sub itoa_2_isNeg itoa_2_isNeg
&itoa_2_isNeg &itoa_2_isNeg ?+8 ; relsq itoa_2_isNeg itoa_2_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_2_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_2_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_2_IS_NEG ; lblsq tmp2 ZERO ITOA_2_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_2_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_16_END
&tmp2 &CONST_-1 &JZ_16_END ; lblsq tmp2 CONST_-1 JZ_16_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_16_REVERT_A
&tmp &CONST_-1 &JZ_16_REVERT_A ; lblsq tmp CONST_-1 JZ_16_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_2_IS_ZERO
&ZERO &ZERO &ITOA_2_IS_ZERO ; lblsq ZERO ZERO ITOA_2_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_16_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_16_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_16_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_2_LOOP
:JZ_16_END &ZERO &ZERO &ITOA_2_LOOP ; lblsq ZERO ZERO ITOA_2_LOOP
# MSQ_END 1 lbljmp
; label ITOA_2_IS_ZERO
# MSQ_START 1 set itoa_2_retBuf 30
# MSQ_START 2 zero itoa_2_retBuf
:ITOA_2_IS_ZERO :itoa_2_retBuf_addrRef_0 &itoa_2_retBuf :itoa_2_retBuf_addrRef_1 &itoa_2_retBuf ?+8 ; relsq itoa_2_retBuf itoa_2_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_2_retBuf 30
:itoa_2_retBuf_addrRef_2 &itoa_2_retBuf &CONST_-30 ?+8 ; relsq itoa_2_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_2_retLength 1
# MSQ_START 2 dec itoa_2_retLength -1
:itoa_2_retLength_addrRef_0 &itoa_2_retLength &CONST_-1 ?+8 ; relsq itoa_2_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_2_END
&ZERO &ZERO &ITOA_2_END ; lblsq ZERO ZERO ITOA_2_END
# MSQ_END 1 lbljmp
; label ITOA_2_IS_NEG
# MSQ_START 1 inc itoa_2_isNeg 1
# MSQ_START 2 dec itoa_2_isNeg -1
:ITOA_2_IS_NEG &itoa_2_isNeg &CONST_-1 ?+8 ; relsq itoa_2_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_2_retBuf 2d
# MSQ_START 2 zero itoa_2_retBuf
:itoa_2_retBuf_addrRef_3 &itoa_2_retBuf :itoa_2_retBuf_addrRef_4 &itoa_2_retBuf ?+8 ; relsq itoa_2_retBuf itoa_2_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_2_retBuf 2d
:itoa_2_retBuf_addrRef_5 &itoa_2_retBuf &CONST_-2D ?+8 ; relsq itoa_2_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_2_retBuf 8
&itoa_2_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_0 CONST_-8 1
&itoa_2_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_1 CONST_-8 1
&itoa_2_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_2 CONST_-8 1
&itoa_2_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_3 CONST_-8 1
&itoa_2_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_4 CONST_-8 1
&itoa_2_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_5 CONST_-8 1
&itoa_2_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_6 CONST_-8 1
&itoa_2_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_7 CONST_-8 1
&itoa_2_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_8 CONST_-8 1
&itoa_2_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_2_retLength 1
# MSQ_START 2 dec itoa_2_retLength -1
:itoa_2_retLength_addrRef_1 &itoa_2_retLength &CONST_-1 ?+8 ; relsq itoa_2_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_2_LOOP
&ZERO &ZERO &ITOA_2_LOOP ; lblsq ZERO ZERO ITOA_2_LOOP
# MSQ_END 1 lbljmp
; label ITOA_2_SUBBERS
:ITOA_2_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_2_LOOP
# MSQ_START 1 jz ITOA_2_SUBBERS ITOA_2_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_2_SUBBERS
:ITOA_2_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_2_SUBBERS_addrRef_0 &ITOA_2_SUBBERS ?+8 ; relsq tmp2 ITOA_2_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_17_END
&tmp2 &CONST_-1 &JZ_17_END ; lblsq tmp2 CONST_-1 JZ_17_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_2_SUBBERS 1 JZ_17_REVERT_A
:ITOA_2_SUBBERS_addrRef_1 &ITOA_2_SUBBERS &CONST_-1 &JZ_17_REVERT_A ; lblsq ITOA_2_SUBBERS CONST_-1 JZ_17_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_2_SUBBERS 1
:ITOA_2_SUBBERS_addrRef_2 &ITOA_2_SUBBERS &CONST_1 ?+8 ; relsq ITOA_2_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_2_REVERT_SUBBERS
&ZERO &ZERO &ITOA_2_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_2_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_17_REVERT_A
# MSQ_START 2 dec ITOA_2_SUBBERS 1
:JZ_17_REVERT_A :ITOA_2_SUBBERS_addrRef_3 &ITOA_2_SUBBERS &CONST_1 ?+8 ; relsq ITOA_2_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_17_END
# MSQ_END 1 jz
; var itoa_2_digitVal 0
# MSQ_START 1 zero itoa_2_digitVal
# MSQ_START 2 sub itoa_2_digitVal itoa_2_digitVal
:JZ_17_END &itoa_2_digitVal &itoa_2_digitVal ?+8 ; relsq itoa_2_digitVal itoa_2_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_2_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_2_SUBBERS ITOA_2_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_2_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_2_SUBBERS_addrRef_4 &ITOA_2_SUBBERS &ITOA_2_HANDLE_DIGIT ; lblsq tmp2 ITOA_2_SUBBERS ITOA_2_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_2_digitVal 1
# MSQ_START 2 dec itoa_2_digitVal -1
&itoa_2_digitVal &CONST_-1 ?+8 ; relsq itoa_2_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_2_SUBBERS
&tmp :ITOA_2_SUBBERS_addrRef_5 &ITOA_2_SUBBERS ?+8 ; relsq tmp ITOA_2_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_2_SUBTRACT_A
&ZERO &ZERO &ITOA_2_SUBTRACT_A ; lblsq ZERO ZERO ITOA_2_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_2_HANDLE_DIGIT
# MSQ_START 1 jz itoa_2_noDigits ITOA_2_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_2_noDigits
:ITOA_2_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_2_noDigits ?+8 ; relsq tmp2 itoa_2_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_18_END
&tmp2 &CONST_-1 &JZ_18_END ; lblsq tmp2 CONST_-1 JZ_18_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_2_noDigits 1 JZ_18_REVERT_A
&itoa_2_noDigits &CONST_-1 &JZ_18_REVERT_A ; lblsq itoa_2_noDigits CONST_-1 JZ_18_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_2_noDigits 1
&itoa_2_noDigits &CONST_1 ?+8 ; relsq itoa_2_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_2_PRINT_DIGIT
&ZERO &ZERO &ITOA_2_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_2_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_18_REVERT_A
# MSQ_START 2 dec itoa_2_noDigits 1
:JZ_18_REVERT_A &itoa_2_noDigits &CONST_1 ?+8 ; relsq itoa_2_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_18_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_2_digitVal ITOA_2_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_2_digitVal
:JZ_18_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_2_digitVal ?+8 ; relsq tmp2 itoa_2_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_19_END
&tmp2 &CONST_-1 &JZ_19_END ; lblsq tmp2 CONST_-1 JZ_19_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_2_digitVal 1 JZ_19_REVERT_A
&itoa_2_digitVal &CONST_-1 &JZ_19_REVERT_A ; lblsq itoa_2_digitVal CONST_-1 JZ_19_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_2_digitVal 1
&itoa_2_digitVal &CONST_1 ?+8 ; relsq itoa_2_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_2_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_2_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_2_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_19_REVERT_A
# MSQ_START 2 dec itoa_2_digitVal 1
:JZ_19_REVERT_A &itoa_2_digitVal &CONST_1 ?+8 ; relsq itoa_2_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_19_END
# MSQ_END 1 jz
; label ITOA_2_PRINT_DIGIT
# MSQ_START 1 zero itoa_2_noDigits
# MSQ_START 2 sub itoa_2_noDigits itoa_2_noDigits
:JZ_19_END :ITOA_2_PRINT_DIGIT &itoa_2_noDigits &itoa_2_noDigits ?+8 ; relsq itoa_2_noDigits itoa_2_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_2_retBuf 30
# MSQ_START 2 zero itoa_2_retBuf
:itoa_2_retBuf_addrRef_6 &itoa_2_retBuf :itoa_2_retBuf_addrRef_7 &itoa_2_retBuf ?+8 ; relsq itoa_2_retBuf itoa_2_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_2_retBuf 30
:itoa_2_retBuf_addrRef_8 &itoa_2_retBuf &CONST_-30 ?+8 ; relsq itoa_2_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_2_retBuf itoa_2_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_2_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_2_digitVal ?+8 ; relsq tmp2 itoa_2_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_2_retBuf tmp2
:itoa_2_retBuf_addrRef_9 &itoa_2_retBuf &tmp2 ?+8 ; relsq itoa_2_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_2_retBuf 8
&itoa_2_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_0 CONST_-8 1
&itoa_2_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_1 CONST_-8 1
&itoa_2_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_2 CONST_-8 1
&itoa_2_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_3 CONST_-8 1
&itoa_2_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_4 CONST_-8 1
&itoa_2_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_5 CONST_-8 1
&itoa_2_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_6 CONST_-8 1
&itoa_2_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_7 CONST_-8 1
&itoa_2_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_8 CONST_-8 1
&itoa_2_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_2_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_2_retLength 1
# MSQ_START 2 dec itoa_2_retLength -1
:itoa_2_retLength_addrRef_2 &itoa_2_retLength &CONST_-1 ?+8 ; relsq itoa_2_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_2_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_2_SUBBERS 8
:ITOA_2_DONT_PRINT_DIGIT &ITOA_2_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_2_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_2_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_2_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_2_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_2_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_2_LOOP
&ZERO &ZERO &ITOA_2_LOOP ; lblsq ZERO ZERO ITOA_2_LOOP
# MSQ_END 1 lbljmp
; label ITOA_2_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_2_SUBBERS 98
:ITOA_2_REVERT_SUBBERS &ITOA_2_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_0 CONST_98 1
&ITOA_2_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_1 CONST_98 1
&ITOA_2_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_2 CONST_98 1
&ITOA_2_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_3 CONST_98 1
&ITOA_2_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_4 CONST_98 1
&ITOA_2_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_2_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_2_END
# MSQ_END 0 itoa
# MSQ_START 0 puts symbolCountPrint_step2 tmp tmp2
; addr puts_8_str 0
# MSQ_START 1 setaddr puts_8_str symbolCountPrint_step2 tmp tmp2
# MSQ_START 2 mov tmp puts_8_str_addrRef_0 tmp2
:ITOA_2_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_8_str_addrRef_0 ?+8 ; relsq tmp2 puts_8_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp symbolCountPrint_step2
&tmp :symbolCountPrint_step2_addrRef_9 &symbolCountPrint_step2 ?+8 ; relsq tmp symbolCountPrint_step2 1
# MSQ_END 2 sub
&puts_8_str_addrRef_0 &tmp ?+8 ; relsq puts_8_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_8_len 0
# MSQ_START 1 incaddr symbolCountPrint_step2 8
&symbolCountPrint_step2_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 CONST_-8 1
&symbolCountPrint_step2_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 CONST_-8 1
&symbolCountPrint_step2_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 CONST_-8 1
&symbolCountPrint_step2_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 CONST_-8 1
&symbolCountPrint_step2_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 CONST_-8 1
&symbolCountPrint_step2_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 CONST_-8 1
&symbolCountPrint_step2_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 CONST_-8 1
&symbolCountPrint_step2_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 CONST_-8 1
&symbolCountPrint_step2_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 CONST_-8 1
&symbolCountPrint_step2_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 CONST_-8 1
&symbolCountPrint_step2_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_8_len symbolCountPrint_step2 tmp
# MSQ_START 2 movneg tmp symbolCountPrint_step2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :symbolCountPrint_step2_addrRef_10 &symbolCountPrint_step2 ?+8 ; relsq tmp symbolCountPrint_step2 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_8_len tmp
&puts_8_len &puts_8_len ?+8 ; relsq puts_8_len puts_8_len 1
&puts_8_len &tmp ?+8 ; relsq puts_8_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolCountPrint_step2 8
&symbolCountPrint_step2_addrRef_0 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_0 CONST_8 1
&symbolCountPrint_step2_addrRef_1 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_1 CONST_8 1
&symbolCountPrint_step2_addrRef_2 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_2 CONST_8 1
&symbolCountPrint_step2_addrRef_3 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_3 CONST_8 1
&symbolCountPrint_step2_addrRef_4 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_4 CONST_8 1
&symbolCountPrint_step2_addrRef_5 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_5 CONST_8 1
&symbolCountPrint_step2_addrRef_6 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_6 CONST_8 1
&symbolCountPrint_step2_addrRef_7 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_7 CONST_8 1
&symbolCountPrint_step2_addrRef_8 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_8 CONST_8 1
&symbolCountPrint_step2_addrRef_9 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_9 CONST_8 1
&symbolCountPrint_step2_addrRef_10 &CONST_8 ?+8 ; relsq symbolCountPrint_step2_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_8_LOOP
# MSQ_START 1 decleq puts_8_len 0 PUTS_8_END
:PUTS_8_LOOP &puts_8_len &CONST_0 &PUTS_8_END ; lblsq puts_8_len CONST_0 PUTS_8_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_8_len 1
&puts_8_len &CONST_1 ?+8 ; relsq puts_8_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_8_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_8_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_8_str_addrRef_0 &puts_8_str ?+8 ; relsq tmp puts_8_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_8_str 8
&puts_8_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_8_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_8_LOOP
&ZERO &ZERO &PUTS_8_LOOP ; lblsq ZERO ZERO PUTS_8_LOOP
# MSQ_END 1 lbljmp
; label PUTS_8_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP2_PRINT_MIDDLE tmp tmp2
; addr puts_9_str 0
# MSQ_START 1 setaddr puts_9_str STEP2_PRINT_MIDDLE tmp tmp2
# MSQ_START 2 mov tmp puts_9_str_addrRef_0 tmp2
:PUTS_8_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_9_str_addrRef_0 ?+8 ; relsq tmp2 puts_9_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP2_PRINT_MIDDLE
&tmp :STEP2_PRINT_MIDDLE_addrRef_0 &STEP2_PRINT_MIDDLE ?+8 ; relsq tmp STEP2_PRINT_MIDDLE 1
# MSQ_END 2 sub
&puts_9_str_addrRef_0 &tmp ?+8 ; relsq puts_9_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_9_len 0
# MSQ_START 1 incaddr STEP2_PRINT_MIDDLE 8
&STEP2_PRINT_MIDDLE_addrRef_0 &CONST_-8 ?+8 ; relsq STEP2_PRINT_MIDDLE_addrRef_0 CONST_-8 1
&STEP2_PRINT_MIDDLE_addrRef_1 &CONST_-8 ?+8 ; relsq STEP2_PRINT_MIDDLE_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_9_len STEP2_PRINT_MIDDLE tmp
# MSQ_START 2 movneg tmp STEP2_PRINT_MIDDLE
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP2_PRINT_MIDDLE_addrRef_1 &STEP2_PRINT_MIDDLE ?+8 ; relsq tmp STEP2_PRINT_MIDDLE 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_9_len tmp
&puts_9_len &puts_9_len ?+8 ; relsq puts_9_len puts_9_len 1
&puts_9_len &tmp ?+8 ; relsq puts_9_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP2_PRINT_MIDDLE 8
&STEP2_PRINT_MIDDLE_addrRef_0 &CONST_8 ?+8 ; relsq STEP2_PRINT_MIDDLE_addrRef_0 CONST_8 1
&STEP2_PRINT_MIDDLE_addrRef_1 &CONST_8 ?+8 ; relsq STEP2_PRINT_MIDDLE_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_9_LOOP
# MSQ_START 1 decleq puts_9_len 0 PUTS_9_END
:PUTS_9_LOOP &puts_9_len &CONST_0 &PUTS_9_END ; lblsq puts_9_len CONST_0 PUTS_9_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_9_len 1
&puts_9_len &CONST_1 ?+8 ; relsq puts_9_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_9_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_9_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_9_str_addrRef_0 &puts_9_str ?+8 ; relsq tmp puts_9_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_9_str 8
&puts_9_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_9_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_9_LOOP
&ZERO &ZERO &PUTS_9_LOOP ; lblsq ZERO ZERO PUTS_9_LOOP
# MSQ_END 1 lbljmp
; label PUTS_9_END
# MSQ_END 0 puts
; addr totalRefCountStr_step2 0
# MSQ_START 0 itoa totalRefCountStr_step2 totalRefCount tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_9_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr totalRefCountStr_step2 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 totalRefCountStr_step2_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &totalRefCountStr_step2_addrRef_0 ?+8 ; relsq tmp totalRefCountStr_step2_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&totalRefCountStr_step2_addrRef_0 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 tmp3 1
&totalRefCountStr_step2_addrRef_1 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 tmp3 1
&totalRefCountStr_step2_addrRef_2 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 tmp3 1
&totalRefCountStr_step2_addrRef_3 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 tmp3 1
&totalRefCountStr_step2_addrRef_4 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 tmp3 1
&totalRefCountStr_step2_addrRef_5 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 tmp3 1
&totalRefCountStr_step2_addrRef_6 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 tmp3 1
&totalRefCountStr_step2_addrRef_7 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 tmp3 1
&totalRefCountStr_step2_addrRef_8 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 tmp3 1
&totalRefCountStr_step2_addrRef_9 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 tmp3 1
&totalRefCountStr_step2_addrRef_10 &tmp3 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const totalRefCountStr_step2 a0 tmp3
# MSQ_START 2 malloc_const totalRefCountStr_step2 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:totalRefCountStr_step2_addrRef_0 &totalRefCountStr_step2 :totalRefCountStr_step2_addrRef_1 &totalRefCountStr_step2 ?+8 ; relsq totalRefCountStr_step2 totalRefCountStr_step2 1
:totalRefCountStr_step2_addrRef_2 &totalRefCountStr_step2 &tmp3 ?+8 ; relsq totalRefCountStr_step2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr totalRefCountStr_step2 8
&totalRefCountStr_step2_addrRef_0 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 CONST_-8 1
&totalRefCountStr_step2_addrRef_1 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 CONST_-8 1
&totalRefCountStr_step2_addrRef_2 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 CONST_-8 1
&totalRefCountStr_step2_addrRef_3 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 CONST_-8 1
&totalRefCountStr_step2_addrRef_4 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 CONST_-8 1
&totalRefCountStr_step2_addrRef_5 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 CONST_-8 1
&totalRefCountStr_step2_addrRef_6 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 CONST_-8 1
&totalRefCountStr_step2_addrRef_7 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 CONST_-8 1
&totalRefCountStr_step2_addrRef_8 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 CONST_-8 1
&totalRefCountStr_step2_addrRef_9 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 CONST_-8 1
&totalRefCountStr_step2_addrRef_10 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero totalRefCountStr_step2
:totalRefCountStr_step2_addrRef_3 &totalRefCountStr_step2 :totalRefCountStr_step2_addrRef_4 &totalRefCountStr_step2 ?+8 ; relsq totalRefCountStr_step2 totalRefCountStr_step2 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr totalRefCountStr_step2 8
&totalRefCountStr_step2_addrRef_0 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 CONST_-8 1
&totalRefCountStr_step2_addrRef_1 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 CONST_-8 1
&totalRefCountStr_step2_addrRef_2 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 CONST_-8 1
&totalRefCountStr_step2_addrRef_3 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 CONST_-8 1
&totalRefCountStr_step2_addrRef_4 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 CONST_-8 1
&totalRefCountStr_step2_addrRef_5 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 CONST_-8 1
&totalRefCountStr_step2_addrRef_6 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 CONST_-8 1
&totalRefCountStr_step2_addrRef_7 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 CONST_-8 1
&totalRefCountStr_step2_addrRef_8 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 CONST_-8 1
&totalRefCountStr_step2_addrRef_9 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 CONST_-8 1
&totalRefCountStr_step2_addrRef_10 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov totalRefCountStr_step2 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:totalRefCountStr_step2_addrRef_5 &totalRefCountStr_step2 :totalRefCountStr_step2_addrRef_6 &totalRefCountStr_step2 ?+8 ; relsq totalRefCountStr_step2 totalRefCountStr_step2 1
:totalRefCountStr_step2_addrRef_7 &totalRefCountStr_step2 &tmp3 ?+8 ; relsq totalRefCountStr_step2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr totalRefCountStr_step2 10
&totalRefCountStr_step2_addrRef_0 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 CONST_10 1
&totalRefCountStr_step2_addrRef_1 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 CONST_10 1
&totalRefCountStr_step2_addrRef_2 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 CONST_10 1
&totalRefCountStr_step2_addrRef_3 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 CONST_10 1
&totalRefCountStr_step2_addrRef_4 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 CONST_10 1
&totalRefCountStr_step2_addrRef_5 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 CONST_10 1
&totalRefCountStr_step2_addrRef_6 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 CONST_10 1
&totalRefCountStr_step2_addrRef_7 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 CONST_10 1
&totalRefCountStr_step2_addrRef_8 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 CONST_10 1
&totalRefCountStr_step2_addrRef_9 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 CONST_10 1
&totalRefCountStr_step2_addrRef_10 &CONST_10 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_3_retBuf 0
# MSQ_START 1 setaddr itoa_3_retBuf totalRefCountStr_step2 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_3_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_3_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_3_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 totalRefCountStr_step2
&tmp2 :totalRefCountStr_step2_addrRef_8 &totalRefCountStr_step2 ?+8 ; relsq tmp2 totalRefCountStr_step2 1
# MSQ_END 2 sub
&itoa_3_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_0 tmp2 1
&itoa_3_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_1 tmp2 1
&itoa_3_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_2 tmp2 1
&itoa_3_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_3 tmp2 1
&itoa_3_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_4 tmp2 1
&itoa_3_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_5 tmp2 1
&itoa_3_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_6 tmp2 1
&itoa_3_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_7 tmp2 1
&itoa_3_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_8 tmp2 1
&itoa_3_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_3_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_3_retLength 0
# MSQ_START 1 copyaddr itoa_3_retLength totalRefCountStr_step2 tmp2 tmp3
# MSQ_START 2 setaddr itoa_3_retLength totalRefCountStr_step2_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_3_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_3_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &totalRefCountStr_step2_addrRef_0 ?+8 ; relsq tmp2 totalRefCountStr_step2_addrRef_0 1
&itoa_3_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_3_retLength_addrRef_0 tmp2 1
&itoa_3_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_3_retLength_addrRef_1 tmp2 1
&itoa_3_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_3_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_3_retLength 8
&itoa_3_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_3_retLength_addrRef_0 CONST_-8 1
&itoa_3_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_3_retLength_addrRef_1 CONST_-8 1
&itoa_3_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_3_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_3_noDigits 0
# MSQ_START 1 set itoa_3_noDigits 1
# MSQ_START 2 zero itoa_3_noDigits
&itoa_3_noDigits &itoa_3_noDigits ?+8 ; relsq itoa_3_noDigits itoa_3_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_3_noDigits 1
&itoa_3_noDigits &CONST_-1 ?+8 ; relsq itoa_3_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp totalRefCount tmp2
# MSQ_START 2 movneg tmp2 totalRefCount
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &totalRefCount ?+8 ; relsq tmp2 totalRefCount 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_3_isNeg 0
# MSQ_START 1 zero itoa_3_isNeg
# MSQ_START 2 sub itoa_3_isNeg itoa_3_isNeg
&itoa_3_isNeg &itoa_3_isNeg ?+8 ; relsq itoa_3_isNeg itoa_3_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_3_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_3_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_3_IS_NEG ; lblsq tmp2 ZERO ITOA_3_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_3_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_20_END
&tmp2 &CONST_-1 &JZ_20_END ; lblsq tmp2 CONST_-1 JZ_20_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_20_REVERT_A
&tmp &CONST_-1 &JZ_20_REVERT_A ; lblsq tmp CONST_-1 JZ_20_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_3_IS_ZERO
&ZERO &ZERO &ITOA_3_IS_ZERO ; lblsq ZERO ZERO ITOA_3_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_20_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_20_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_20_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_3_LOOP
:JZ_20_END &ZERO &ZERO &ITOA_3_LOOP ; lblsq ZERO ZERO ITOA_3_LOOP
# MSQ_END 1 lbljmp
; label ITOA_3_IS_ZERO
# MSQ_START 1 set itoa_3_retBuf 30
# MSQ_START 2 zero itoa_3_retBuf
:ITOA_3_IS_ZERO :itoa_3_retBuf_addrRef_0 &itoa_3_retBuf :itoa_3_retBuf_addrRef_1 &itoa_3_retBuf ?+8 ; relsq itoa_3_retBuf itoa_3_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_3_retBuf 30
:itoa_3_retBuf_addrRef_2 &itoa_3_retBuf &CONST_-30 ?+8 ; relsq itoa_3_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_3_retLength 1
# MSQ_START 2 dec itoa_3_retLength -1
:itoa_3_retLength_addrRef_0 &itoa_3_retLength &CONST_-1 ?+8 ; relsq itoa_3_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_3_END
&ZERO &ZERO &ITOA_3_END ; lblsq ZERO ZERO ITOA_3_END
# MSQ_END 1 lbljmp
; label ITOA_3_IS_NEG
# MSQ_START 1 inc itoa_3_isNeg 1
# MSQ_START 2 dec itoa_3_isNeg -1
:ITOA_3_IS_NEG &itoa_3_isNeg &CONST_-1 ?+8 ; relsq itoa_3_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_3_retBuf 2d
# MSQ_START 2 zero itoa_3_retBuf
:itoa_3_retBuf_addrRef_3 &itoa_3_retBuf :itoa_3_retBuf_addrRef_4 &itoa_3_retBuf ?+8 ; relsq itoa_3_retBuf itoa_3_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_3_retBuf 2d
:itoa_3_retBuf_addrRef_5 &itoa_3_retBuf &CONST_-2D ?+8 ; relsq itoa_3_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_3_retBuf 8
&itoa_3_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_0 CONST_-8 1
&itoa_3_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_1 CONST_-8 1
&itoa_3_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_2 CONST_-8 1
&itoa_3_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_3 CONST_-8 1
&itoa_3_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_4 CONST_-8 1
&itoa_3_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_5 CONST_-8 1
&itoa_3_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_6 CONST_-8 1
&itoa_3_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_7 CONST_-8 1
&itoa_3_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_8 CONST_-8 1
&itoa_3_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_3_retLength 1
# MSQ_START 2 dec itoa_3_retLength -1
:itoa_3_retLength_addrRef_1 &itoa_3_retLength &CONST_-1 ?+8 ; relsq itoa_3_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_3_LOOP
&ZERO &ZERO &ITOA_3_LOOP ; lblsq ZERO ZERO ITOA_3_LOOP
# MSQ_END 1 lbljmp
; label ITOA_3_SUBBERS
:ITOA_3_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_3_LOOP
# MSQ_START 1 jz ITOA_3_SUBBERS ITOA_3_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_3_SUBBERS
:ITOA_3_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_3_SUBBERS_addrRef_0 &ITOA_3_SUBBERS ?+8 ; relsq tmp2 ITOA_3_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_21_END
&tmp2 &CONST_-1 &JZ_21_END ; lblsq tmp2 CONST_-1 JZ_21_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_3_SUBBERS 1 JZ_21_REVERT_A
:ITOA_3_SUBBERS_addrRef_1 &ITOA_3_SUBBERS &CONST_-1 &JZ_21_REVERT_A ; lblsq ITOA_3_SUBBERS CONST_-1 JZ_21_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_3_SUBBERS 1
:ITOA_3_SUBBERS_addrRef_2 &ITOA_3_SUBBERS &CONST_1 ?+8 ; relsq ITOA_3_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_3_REVERT_SUBBERS
&ZERO &ZERO &ITOA_3_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_3_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_21_REVERT_A
# MSQ_START 2 dec ITOA_3_SUBBERS 1
:JZ_21_REVERT_A :ITOA_3_SUBBERS_addrRef_3 &ITOA_3_SUBBERS &CONST_1 ?+8 ; relsq ITOA_3_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_21_END
# MSQ_END 1 jz
; var itoa_3_digitVal 0
# MSQ_START 1 zero itoa_3_digitVal
# MSQ_START 2 sub itoa_3_digitVal itoa_3_digitVal
:JZ_21_END &itoa_3_digitVal &itoa_3_digitVal ?+8 ; relsq itoa_3_digitVal itoa_3_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_3_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_3_SUBBERS ITOA_3_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_3_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_3_SUBBERS_addrRef_4 &ITOA_3_SUBBERS &ITOA_3_HANDLE_DIGIT ; lblsq tmp2 ITOA_3_SUBBERS ITOA_3_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_3_digitVal 1
# MSQ_START 2 dec itoa_3_digitVal -1
&itoa_3_digitVal &CONST_-1 ?+8 ; relsq itoa_3_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_3_SUBBERS
&tmp :ITOA_3_SUBBERS_addrRef_5 &ITOA_3_SUBBERS ?+8 ; relsq tmp ITOA_3_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_3_SUBTRACT_A
&ZERO &ZERO &ITOA_3_SUBTRACT_A ; lblsq ZERO ZERO ITOA_3_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_3_HANDLE_DIGIT
# MSQ_START 1 jz itoa_3_noDigits ITOA_3_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_3_noDigits
:ITOA_3_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_3_noDigits ?+8 ; relsq tmp2 itoa_3_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_22_END
&tmp2 &CONST_-1 &JZ_22_END ; lblsq tmp2 CONST_-1 JZ_22_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_3_noDigits 1 JZ_22_REVERT_A
&itoa_3_noDigits &CONST_-1 &JZ_22_REVERT_A ; lblsq itoa_3_noDigits CONST_-1 JZ_22_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_3_noDigits 1
&itoa_3_noDigits &CONST_1 ?+8 ; relsq itoa_3_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_3_PRINT_DIGIT
&ZERO &ZERO &ITOA_3_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_3_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_22_REVERT_A
# MSQ_START 2 dec itoa_3_noDigits 1
:JZ_22_REVERT_A &itoa_3_noDigits &CONST_1 ?+8 ; relsq itoa_3_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_22_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_3_digitVal ITOA_3_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_3_digitVal
:JZ_22_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_3_digitVal ?+8 ; relsq tmp2 itoa_3_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_23_END
&tmp2 &CONST_-1 &JZ_23_END ; lblsq tmp2 CONST_-1 JZ_23_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_3_digitVal 1 JZ_23_REVERT_A
&itoa_3_digitVal &CONST_-1 &JZ_23_REVERT_A ; lblsq itoa_3_digitVal CONST_-1 JZ_23_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_3_digitVal 1
&itoa_3_digitVal &CONST_1 ?+8 ; relsq itoa_3_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_3_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_3_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_3_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_23_REVERT_A
# MSQ_START 2 dec itoa_3_digitVal 1
:JZ_23_REVERT_A &itoa_3_digitVal &CONST_1 ?+8 ; relsq itoa_3_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_23_END
# MSQ_END 1 jz
; label ITOA_3_PRINT_DIGIT
# MSQ_START 1 zero itoa_3_noDigits
# MSQ_START 2 sub itoa_3_noDigits itoa_3_noDigits
:JZ_23_END :ITOA_3_PRINT_DIGIT &itoa_3_noDigits &itoa_3_noDigits ?+8 ; relsq itoa_3_noDigits itoa_3_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_3_retBuf 30
# MSQ_START 2 zero itoa_3_retBuf
:itoa_3_retBuf_addrRef_6 &itoa_3_retBuf :itoa_3_retBuf_addrRef_7 &itoa_3_retBuf ?+8 ; relsq itoa_3_retBuf itoa_3_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_3_retBuf 30
:itoa_3_retBuf_addrRef_8 &itoa_3_retBuf &CONST_-30 ?+8 ; relsq itoa_3_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_3_retBuf itoa_3_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_3_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_3_digitVal ?+8 ; relsq tmp2 itoa_3_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_3_retBuf tmp2
:itoa_3_retBuf_addrRef_9 &itoa_3_retBuf &tmp2 ?+8 ; relsq itoa_3_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_3_retBuf 8
&itoa_3_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_0 CONST_-8 1
&itoa_3_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_1 CONST_-8 1
&itoa_3_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_2 CONST_-8 1
&itoa_3_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_3 CONST_-8 1
&itoa_3_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_4 CONST_-8 1
&itoa_3_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_5 CONST_-8 1
&itoa_3_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_6 CONST_-8 1
&itoa_3_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_7 CONST_-8 1
&itoa_3_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_8 CONST_-8 1
&itoa_3_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_3_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_3_retLength 1
# MSQ_START 2 dec itoa_3_retLength -1
:itoa_3_retLength_addrRef_2 &itoa_3_retLength &CONST_-1 ?+8 ; relsq itoa_3_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_3_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_3_SUBBERS 8
:ITOA_3_DONT_PRINT_DIGIT &ITOA_3_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_3_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_3_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_3_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_3_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_3_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_3_LOOP
&ZERO &ZERO &ITOA_3_LOOP ; lblsq ZERO ZERO ITOA_3_LOOP
# MSQ_END 1 lbljmp
; label ITOA_3_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_3_SUBBERS 98
:ITOA_3_REVERT_SUBBERS &ITOA_3_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_0 CONST_98 1
&ITOA_3_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_1 CONST_98 1
&ITOA_3_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_2 CONST_98 1
&ITOA_3_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_3 CONST_98 1
&ITOA_3_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_4 CONST_98 1
&ITOA_3_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_3_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_3_END
# MSQ_END 0 itoa
# MSQ_START 0 puts totalRefCountStr_step2 tmp tmp2
; addr puts_10_str 0
# MSQ_START 1 setaddr puts_10_str totalRefCountStr_step2 tmp tmp2
# MSQ_START 2 mov tmp puts_10_str_addrRef_0 tmp2
:ITOA_3_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_10_str_addrRef_0 ?+8 ; relsq tmp2 puts_10_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp totalRefCountStr_step2
&tmp :totalRefCountStr_step2_addrRef_9 &totalRefCountStr_step2 ?+8 ; relsq tmp totalRefCountStr_step2 1
# MSQ_END 2 sub
&puts_10_str_addrRef_0 &tmp ?+8 ; relsq puts_10_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_10_len 0
# MSQ_START 1 incaddr totalRefCountStr_step2 8
&totalRefCountStr_step2_addrRef_0 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 CONST_-8 1
&totalRefCountStr_step2_addrRef_1 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 CONST_-8 1
&totalRefCountStr_step2_addrRef_2 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 CONST_-8 1
&totalRefCountStr_step2_addrRef_3 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 CONST_-8 1
&totalRefCountStr_step2_addrRef_4 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 CONST_-8 1
&totalRefCountStr_step2_addrRef_5 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 CONST_-8 1
&totalRefCountStr_step2_addrRef_6 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 CONST_-8 1
&totalRefCountStr_step2_addrRef_7 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 CONST_-8 1
&totalRefCountStr_step2_addrRef_8 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 CONST_-8 1
&totalRefCountStr_step2_addrRef_9 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 CONST_-8 1
&totalRefCountStr_step2_addrRef_10 &CONST_-8 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_10_len totalRefCountStr_step2 tmp
# MSQ_START 2 movneg tmp totalRefCountStr_step2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :totalRefCountStr_step2_addrRef_10 &totalRefCountStr_step2 ?+8 ; relsq tmp totalRefCountStr_step2 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_10_len tmp
&puts_10_len &puts_10_len ?+8 ; relsq puts_10_len puts_10_len 1
&puts_10_len &tmp ?+8 ; relsq puts_10_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr totalRefCountStr_step2 8
&totalRefCountStr_step2_addrRef_0 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_0 CONST_8 1
&totalRefCountStr_step2_addrRef_1 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_1 CONST_8 1
&totalRefCountStr_step2_addrRef_2 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_2 CONST_8 1
&totalRefCountStr_step2_addrRef_3 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_3 CONST_8 1
&totalRefCountStr_step2_addrRef_4 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_4 CONST_8 1
&totalRefCountStr_step2_addrRef_5 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_5 CONST_8 1
&totalRefCountStr_step2_addrRef_6 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_6 CONST_8 1
&totalRefCountStr_step2_addrRef_7 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_7 CONST_8 1
&totalRefCountStr_step2_addrRef_8 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_8 CONST_8 1
&totalRefCountStr_step2_addrRef_9 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_9 CONST_8 1
&totalRefCountStr_step2_addrRef_10 &CONST_8 ?+8 ; relsq totalRefCountStr_step2_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_10_LOOP
# MSQ_START 1 decleq puts_10_len 0 PUTS_10_END
:PUTS_10_LOOP &puts_10_len &CONST_0 &PUTS_10_END ; lblsq puts_10_len CONST_0 PUTS_10_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_10_len 1
&puts_10_len &CONST_1 ?+8 ; relsq puts_10_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_10_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_10_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_10_str_addrRef_0 &puts_10_str ?+8 ; relsq tmp puts_10_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_10_str 8
&puts_10_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_10_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_10_LOOP
&ZERO &ZERO &PUTS_10_LOOP ; lblsq ZERO ZERO PUTS_10_LOOP
# MSQ_END 1 lbljmp
; label PUTS_10_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP2_PRINT_SUFFIX tmp tmp2
; addr puts_11_str 0
# MSQ_START 1 setaddr puts_11_str STEP2_PRINT_SUFFIX tmp tmp2
# MSQ_START 2 mov tmp puts_11_str_addrRef_0 tmp2
:PUTS_10_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_11_str_addrRef_0 ?+8 ; relsq tmp2 puts_11_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP2_PRINT_SUFFIX
&tmp :STEP2_PRINT_SUFFIX_addrRef_0 &STEP2_PRINT_SUFFIX ?+8 ; relsq tmp STEP2_PRINT_SUFFIX 1
# MSQ_END 2 sub
&puts_11_str_addrRef_0 &tmp ?+8 ; relsq puts_11_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_11_len 0
# MSQ_START 1 incaddr STEP2_PRINT_SUFFIX 8
&STEP2_PRINT_SUFFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP2_PRINT_SUFFIX_addrRef_0 CONST_-8 1
&STEP2_PRINT_SUFFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP2_PRINT_SUFFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_11_len STEP2_PRINT_SUFFIX tmp
# MSQ_START 2 movneg tmp STEP2_PRINT_SUFFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP2_PRINT_SUFFIX_addrRef_1 &STEP2_PRINT_SUFFIX ?+8 ; relsq tmp STEP2_PRINT_SUFFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_11_len tmp
&puts_11_len &puts_11_len ?+8 ; relsq puts_11_len puts_11_len 1
&puts_11_len &tmp ?+8 ; relsq puts_11_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP2_PRINT_SUFFIX 8
&STEP2_PRINT_SUFFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP2_PRINT_SUFFIX_addrRef_0 CONST_8 1
&STEP2_PRINT_SUFFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP2_PRINT_SUFFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_11_LOOP
# MSQ_START 1 decleq puts_11_len 0 PUTS_11_END
:PUTS_11_LOOP &puts_11_len &CONST_0 &PUTS_11_END ; lblsq puts_11_len CONST_0 PUTS_11_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_11_len 1
&puts_11_len &CONST_1 ?+8 ; relsq puts_11_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_11_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_11_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_11_str_addrRef_0 &puts_11_str ?+8 ; relsq tmp puts_11_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_11_str 8
&puts_11_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_11_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_11_LOOP
&ZERO &ZERO &PUTS_11_LOOP ; lblsq ZERO ZERO PUTS_11_LOOP
# MSQ_END 1 lbljmp
; label PUTS_11_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_11_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# 3. Create subaddr/zeroaddr stubs
; label STEP3_START

# An item in addrSymbols is made of two components, adding to a total of 0x20 bytes:
# 0x0 String containing the name of the symbol
# 0x18 Next id to assign to an addrRef
; var addrSymbolsBegin 600000
; var addrSymbolsLen 0

; var linesPass2Begin 700000
; var linesPass2Len 0
; addr curLinePass1_step3 100000
; addr curLinePass2_step3 700000

; label STEP3_LOOP
# MSQ_START 0 decleq linesPass1Len 0 STEP3_END
:STEP3_START :STEP3_LOOP &linesPass1Len &CONST_0 &STEP3_END ; lblsq linesPass1Len CONST_0 STEP3_END
# MSQ_END 0 decleq
# MSQ_START 0 dec linesPass1Len 1
&linesPass1Len &CONST_1 ?+8 ; relsq linesPass1Len CONST_1 1
# MSQ_END 0 dec

; addr inst_step3 0
# MSQ_START 0 copyaddr inst_step3 curLinePass1_step3 tmp tmp2
# MSQ_START 1 setaddr inst_step3 curLinePass1_step3_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp inst_step3_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &inst_step3_addrRef_0 ?+8 ; relsq tmp2 inst_step3_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp curLinePass1_step3_addrRef_0
&tmp &curLinePass1_step3_addrRef_0 ?+8 ; relsq tmp curLinePass1_step3_addrRef_0 1
# MSQ_END 2 sub
&inst_step3_addrRef_0 &tmp ?+8 ; relsq inst_step3_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 strcmp_const inst_step3 SUBADDR STEP3_PROCESS tmp tmp2
; addr strcmp_const_15_a 0
# MSQ_START 1 copyaddr strcmp_const_15_a inst_step3 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_15_a inst_step3_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_15_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_15_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &inst_step3_addrRef_0 ?+8 ; relsq tmp inst_step3_addrRef_0 1
&strcmp_const_15_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_15_a_addrRef_0 tmp 1
&strcmp_const_15_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_15_a_addrRef_1 tmp 1
&strcmp_const_15_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_15_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_15_a 8
&strcmp_const_15_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_15_a_addrRef_0 CONST_-8 1
&strcmp_const_15_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_15_a_addrRef_1 CONST_-8 1
&strcmp_const_15_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_15_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_-8 1
&SUBADDR_addrRef_1 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_-8 1
&SUBADDR_addrRef_2 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_-8 1
&SUBADDR_addrRef_3 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_-8 1
&SUBADDR_addrRef_4 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_-8 1
&SUBADDR_addrRef_5 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_15_a SUBADDR STRCMP_CONST_15_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_15_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_15_a_addrRef_0 &strcmp_const_15_a ?+8 ; relsq tmp2 strcmp_const_15_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_2 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_15_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_15_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_15_REVERT_ADDR
&tmp &CONST_-1 &JNZ_30_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_30_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_30_END ; lblsq ZERO ZERO JNZ_30_END
; label JNZ_30_REVERT_AND_JUMP
:JNZ_30_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_15_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_15_REVERT_ADDR
; label JNZ_30_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_15_len 0
# MSQ_START 1 mov strcmp_const_15_len strcmp_const_15_a tmp
# MSQ_START 2 movneg tmp strcmp_const_15_a
:JNZ_30_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_15_a_addrRef_1 &strcmp_const_15_a ?+8 ; relsq tmp strcmp_const_15_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_15_len tmp
&strcmp_const_15_len &strcmp_const_15_len ?+8 ; relsq strcmp_const_15_len strcmp_const_15_len 1
&strcmp_const_15_len &tmp ?+8 ; relsq strcmp_const_15_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_15_a 8
&strcmp_const_15_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_15_a_addrRef_0 CONST_8 1
&strcmp_const_15_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_15_a_addrRef_1 CONST_8 1
&strcmp_const_15_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_15_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_15_aStr 0
; addr strcmp_const_15_bStr 0
# MSQ_START 1 setaddr strcmp_const_15_aStr strcmp_const_15_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_15_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_15_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_15_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_15_a
&tmp :strcmp_const_15_a_addrRef_2 &strcmp_const_15_a ?+8 ; relsq tmp strcmp_const_15_a 1
# MSQ_END 2 sub
&strcmp_const_15_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_15_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_15_bStr SUBADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_15_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_15_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_15_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_3 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
&strcmp_const_15_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_15_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_15_LOOP
# MSQ_START 1 decleq strcmp_const_15_len 0 STEP3_PROCESS
:STRCMP_CONST_15_LOOP &strcmp_const_15_len &CONST_0 &STEP3_PROCESS ; lblsq strcmp_const_15_len CONST_0 STEP3_PROCESS
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_15_len 1
&strcmp_const_15_len &CONST_1 ?+8 ; relsq strcmp_const_15_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_15_aStr strcmp_const_15_bStr STRCMP_CONST_15_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_15_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_15_aStr_addrRef_0 &strcmp_const_15_aStr ?+8 ; relsq tmp2 strcmp_const_15_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_15_bStr
&tmp :strcmp_const_15_bStr_addrRef_0 &strcmp_const_15_bStr ?+8 ; relsq tmp strcmp_const_15_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_15_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_15_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_15_END
&tmp &CONST_-1 &JNZ_31_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_31_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_31_END ; lblsq ZERO ZERO JNZ_31_END
; label JNZ_31_REVERT_AND_JUMP
:JNZ_31_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_15_END ; lblsq ZERO ZERO STRCMP_CONST_15_END
; label JNZ_31_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_15_aStr 8
:JNZ_31_END &strcmp_const_15_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_15_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_15_bStr 8
&strcmp_const_15_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_15_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_15_LOOP
&ZERO &ZERO &STRCMP_CONST_15_LOOP ; lblsq ZERO ZERO STRCMP_CONST_15_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_15_REVERT_ADDR
# MSQ_START 1 decaddr SUBADDR 8
:STRCMP_CONST_15_REVERT_ADDR &SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_15_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const inst_step3 ZEROADDR STEP3_PROCESS tmp tmp2
; addr strcmp_const_16_a 0
# MSQ_START 1 copyaddr strcmp_const_16_a inst_step3 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_16_a inst_step3_addrRef_0 tmp tmp2
:STRCMP_CONST_15_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_16_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_16_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &inst_step3_addrRef_0 ?+8 ; relsq tmp inst_step3_addrRef_0 1
&strcmp_const_16_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_16_a_addrRef_0 tmp 1
&strcmp_const_16_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_16_a_addrRef_1 tmp 1
&strcmp_const_16_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_16_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_16_a 8
&strcmp_const_16_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_16_a_addrRef_0 CONST_-8 1
&strcmp_const_16_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_16_a_addrRef_1 CONST_-8 1
&strcmp_const_16_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_16_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr ZEROADDR 8
&ZEROADDR_addrRef_0 &CONST_-8 ?+8 ; relsq ZEROADDR_addrRef_0 CONST_-8 1
&ZEROADDR_addrRef_1 &CONST_-8 ?+8 ; relsq ZEROADDR_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_16_a ZEROADDR STRCMP_CONST_16_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_16_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_16_a_addrRef_0 &strcmp_const_16_a ?+8 ; relsq tmp2 strcmp_const_16_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ZEROADDR
&tmp :ZEROADDR_addrRef_0 &ZEROADDR ?+8 ; relsq tmp ZEROADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_16_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_16_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_16_REVERT_ADDR
&tmp &CONST_-1 &JNZ_32_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_32_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_32_END ; lblsq ZERO ZERO JNZ_32_END
; label JNZ_32_REVERT_AND_JUMP
:JNZ_32_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_16_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_16_REVERT_ADDR
; label JNZ_32_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_16_len 0
# MSQ_START 1 mov strcmp_const_16_len strcmp_const_16_a tmp
# MSQ_START 2 movneg tmp strcmp_const_16_a
:JNZ_32_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_16_a_addrRef_1 &strcmp_const_16_a ?+8 ; relsq tmp strcmp_const_16_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_16_len tmp
&strcmp_const_16_len &strcmp_const_16_len ?+8 ; relsq strcmp_const_16_len strcmp_const_16_len 1
&strcmp_const_16_len &tmp ?+8 ; relsq strcmp_const_16_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_16_a 8
&strcmp_const_16_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_16_a_addrRef_0 CONST_8 1
&strcmp_const_16_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_16_a_addrRef_1 CONST_8 1
&strcmp_const_16_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_16_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr ZEROADDR 8
&ZEROADDR_addrRef_0 &CONST_8 ?+8 ; relsq ZEROADDR_addrRef_0 CONST_8 1
&ZEROADDR_addrRef_1 &CONST_8 ?+8 ; relsq ZEROADDR_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_16_aStr 0
; addr strcmp_const_16_bStr 0
# MSQ_START 1 setaddr strcmp_const_16_aStr strcmp_const_16_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_16_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_16_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_16_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_16_a
&tmp :strcmp_const_16_a_addrRef_2 &strcmp_const_16_a ?+8 ; relsq tmp strcmp_const_16_a 1
# MSQ_END 2 sub
&strcmp_const_16_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_16_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_16_bStr ZEROADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_16_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_16_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_16_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ZEROADDR
&tmp :ZEROADDR_addrRef_1 &ZEROADDR ?+8 ; relsq tmp ZEROADDR 1
# MSQ_END 2 sub
&strcmp_const_16_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_16_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_16_LOOP
# MSQ_START 1 decleq strcmp_const_16_len 0 STEP3_PROCESS
:STRCMP_CONST_16_LOOP &strcmp_const_16_len &CONST_0 &STEP3_PROCESS ; lblsq strcmp_const_16_len CONST_0 STEP3_PROCESS
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_16_len 1
&strcmp_const_16_len &CONST_1 ?+8 ; relsq strcmp_const_16_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_16_aStr strcmp_const_16_bStr STRCMP_CONST_16_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_16_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_16_aStr_addrRef_0 &strcmp_const_16_aStr ?+8 ; relsq tmp2 strcmp_const_16_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_16_bStr
&tmp :strcmp_const_16_bStr_addrRef_0 &strcmp_const_16_bStr ?+8 ; relsq tmp strcmp_const_16_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_16_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_16_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_16_END
&tmp &CONST_-1 &JNZ_33_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_33_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_33_END ; lblsq ZERO ZERO JNZ_33_END
; label JNZ_33_REVERT_AND_JUMP
:JNZ_33_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_16_END ; lblsq ZERO ZERO STRCMP_CONST_16_END
; label JNZ_33_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_16_aStr 8
:JNZ_33_END &strcmp_const_16_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_16_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_16_bStr 8
&strcmp_const_16_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_16_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_16_LOOP
&ZERO &ZERO &STRCMP_CONST_16_LOOP ; lblsq ZERO ZERO STRCMP_CONST_16_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_16_REVERT_ADDR
# MSQ_START 1 decaddr ZEROADDR 8
:STRCMP_CONST_16_REVERT_ADDR &ZEROADDR_addrRef_0 &CONST_8 ?+8 ; relsq ZEROADDR_addrRef_0 CONST_8 1
&ZEROADDR_addrRef_1 &CONST_8 ?+8 ; relsq ZEROADDR_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_16_END
# MSQ_END 0 strcmp_const

# MSQ_START 0 memcpy_const curLinePass2_step3 curLinePass1_step3 58 tmp tmp2
# MSQ_START 1 memcpy curLinePass2_step3 curLinePass1_step3 CONST_58 tmp tmp2
; addr memcpy_1_dst 0
; addr memcpy_1_src 0
# MSQ_START 2 copyaddr memcpy_1_dst curLinePass2_step3 tmp tmp2
:STRCMP_CONST_16_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_1_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_1_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLinePass2_step3_addrRef_0 ?+8 ; relsq tmp curLinePass2_step3_addrRef_0 1
&memcpy_1_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_1_dst_addrRef_0 tmp 1
&memcpy_1_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_1_dst_addrRef_1 tmp 1
&memcpy_1_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_1_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_1_src curLinePass1_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_1_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_1_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLinePass1_step3_addrRef_0 ?+8 ; relsq tmp curLinePass1_step3_addrRef_0 1
&memcpy_1_src_addrRef_0 &tmp ?+8 ; relsq memcpy_1_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_1_numLeft 0
# MSQ_START 2 mov memcpy_1_numLeft CONST_58 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_58 ?+8 ; relsq tmp CONST_58 1
&memcpy_1_numLeft &memcpy_1_numLeft ?+8 ; relsq memcpy_1_numLeft memcpy_1_numLeft 1
&memcpy_1_numLeft &tmp ?+8 ; relsq memcpy_1_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_1_LOOP
# MSQ_START 2 decleq memcpy_1_numLeft 0 MEMCPY_1_END
:MEMCPY_1_LOOP &memcpy_1_numLeft &CONST_0 &MEMCPY_1_END ; lblsq memcpy_1_numLeft CONST_0 MEMCPY_1_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_1_numLeft 8
&memcpy_1_numLeft &CONST_8 ?+8 ; relsq memcpy_1_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_1_dst memcpy_1_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_1_src_addrRef_0 &memcpy_1_src ?+8 ; relsq tmp memcpy_1_src 1
:memcpy_1_dst_addrRef_0 &memcpy_1_dst :memcpy_1_dst_addrRef_1 &memcpy_1_dst ?+8 ; relsq memcpy_1_dst memcpy_1_dst 1
:memcpy_1_dst_addrRef_2 &memcpy_1_dst &tmp ?+8 ; relsq memcpy_1_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_1_dst 8
&memcpy_1_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_1_dst_addrRef_0 CONST_-8 1
&memcpy_1_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_1_dst_addrRef_1 CONST_-8 1
&memcpy_1_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_1_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_1_src 8
&memcpy_1_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_1_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_1_LOOP
&ZERO &ZERO &MEMCPY_1_LOOP ; lblsq ZERO ZERO MEMCPY_1_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_1_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 inc linesPass2Len 1
# MSQ_START 1 dec linesPass2Len -1
:MEMCPY_1_END &linesPass2Len &CONST_-1 ?+8 ; relsq linesPass2Len CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 incaddr curLinePass1_step3 58
&curLinePass1_step3_addrRef_0 &CONST_-58 ?+8 ; relsq curLinePass1_step3_addrRef_0 CONST_-58 1
&curLinePass1_step3_addrRef_1 &CONST_-58 ?+8 ; relsq curLinePass1_step3_addrRef_1 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 incaddr curLinePass2_step3 58
&curLinePass2_step3_addrRef_0 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-58 1
&curLinePass2_step3_addrRef_1 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-58 1
&curLinePass2_step3_addrRef_2 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-58 1
&curLinePass2_step3_addrRef_3 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-58 1
&curLinePass2_step3_addrRef_4 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-58 1
&curLinePass2_step3_addrRef_5 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-58 1
&curLinePass2_step3_addrRef_6 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-58 1
&curLinePass2_step3_addrRef_7 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-58 1
&curLinePass2_step3_addrRef_8 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-58 1
&curLinePass2_step3_addrRef_9 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-58 1
&curLinePass2_step3_addrRef_10 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-58 1
&curLinePass2_step3_addrRef_11 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-58 1
&curLinePass2_step3_addrRef_12 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-58 1
&curLinePass2_step3_addrRef_13 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-58 1
&curLinePass2_step3_addrRef_14 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-58 1
&curLinePass2_step3_addrRef_15 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-58 1
&curLinePass2_step3_addrRef_16 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-58 1
&curLinePass2_step3_addrRef_17 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-58 1
&curLinePass2_step3_addrRef_18 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-58 1
&curLinePass2_step3_addrRef_19 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-58 1
&curLinePass2_step3_addrRef_20 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-58 1
&curLinePass2_step3_addrRef_21 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-58 1
&curLinePass2_step3_addrRef_22 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-58 1
&curLinePass2_step3_addrRef_23 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-58 1
&curLinePass2_step3_addrRef_24 &CONST_-58 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP3_LOOP
&ZERO &ZERO &STEP3_LOOP ; lblsq ZERO ZERO STEP3_LOOP
# MSQ_END 0 lbljmp

; label STEP3_PROCESS
# Py: sym = lines[i].tokens[0]
; addr sym0_step3 0
; addr sym1_step3 0
# MSQ_START 0 incaddr curLinePass1_step3 18
:STEP3_PROCESS &curLinePass1_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curLinePass1_step3_addrRef_0 CONST_-18 1
&curLinePass1_step3_addrRef_1 &CONST_-18 ?+8 ; relsq curLinePass1_step3_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 setaddr sym0_step3 curLinePass1_step3 tmp tmp2
# MSQ_START 1 mov tmp sym0_step3_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 sym0_step3_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &sym0_step3_addrRef_0 ?+8 ; relsq tmp2 sym0_step3_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLinePass1_step3
&tmp :curLinePass1_step3_addrRef_0 0000000000100000 ?+8 ; relsq tmp curLinePass1_step3 1
# MSQ_END 1 sub
&sym0_step3_addrRef_0 &tmp ?+8 ; relsq sym0_step3_addrRef_0 tmp 1
&sym0_step3_addrRef_1 &tmp ?+8 ; relsq sym0_step3_addrRef_1 tmp 1
&sym0_step3_addrRef_2 &tmp ?+8 ; relsq sym0_step3_addrRef_2 tmp 1
&sym0_step3_addrRef_3 &tmp ?+8 ; relsq sym0_step3_addrRef_3 tmp 1
&sym0_step3_addrRef_4 &tmp ?+8 ; relsq sym0_step3_addrRef_4 tmp 1
&sym0_step3_addrRef_5 &tmp ?+8 ; relsq sym0_step3_addrRef_5 tmp 1
&sym0_step3_addrRef_6 &tmp ?+8 ; relsq sym0_step3_addrRef_6 tmp 1
&sym0_step3_addrRef_7 &tmp ?+8 ; relsq sym0_step3_addrRef_7 tmp 1
&sym0_step3_addrRef_8 &tmp ?+8 ; relsq sym0_step3_addrRef_8 tmp 1
&sym0_step3_addrRef_9 &tmp ?+8 ; relsq sym0_step3_addrRef_9 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 setaddr sym1_step3 curLinePass1_step3 tmp tmp2
# MSQ_START 1 mov tmp sym1_step3_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 sym1_step3_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &sym1_step3_addrRef_0 ?+8 ; relsq tmp2 sym1_step3_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLinePass1_step3
&tmp :curLinePass1_step3_addrRef_1 0000000000100000 ?+8 ; relsq tmp curLinePass1_step3 1
# MSQ_END 1 sub
&sym1_step3_addrRef_0 &tmp ?+8 ; relsq sym1_step3_addrRef_0 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 incaddr sym1_step3 18
&sym1_step3_addrRef_0 &CONST_-18 ?+8 ; relsq sym1_step3_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 incaddr curLinePass1_step3 40
&curLinePass1_step3_addrRef_0 &CONST_-40 ?+8 ; relsq curLinePass1_step3_addrRef_0 CONST_-40 1
&curLinePass1_step3_addrRef_1 &CONST_-40 ?+8 ; relsq curLinePass1_step3_addrRef_1 CONST_-40 1
# MSQ_END 0 incaddr

# Py: addrSymbols[sym] = 0
; addr addrSymbols_it_step3 0
# MSQ_START 0 setaddr addrSymbols_it_step3 addrSymbolsBegin tmp tmp2
# MSQ_START 1 mov tmp addrSymbols_it_step3_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 addrSymbols_it_step3_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &addrSymbols_it_step3_addrRef_0 ?+8 ; relsq tmp2 addrSymbols_it_step3_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp addrSymbolsBegin
&tmp &addrSymbolsBegin ?+8 ; relsq tmp addrSymbolsBegin 1
# MSQ_END 1 sub
&addrSymbols_it_step3_addrRef_0 &tmp ?+8 ; relsq addrSymbols_it_step3_addrRef_0 tmp 1
&addrSymbols_it_step3_addrRef_1 &tmp ?+8 ; relsq addrSymbols_it_step3_addrRef_1 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key addrSymbols_it_step3 sym0_step3 20 addrSymbolsLen STEP3_FOUND_ADDRSYMBOL tmp tmp2
; var find_item_in_buf_with_str_key_1_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_1_elmsLeft addrSymbolsLen tmp
# MSQ_START 2 movneg tmp addrSymbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &addrSymbolsLen ?+8 ; relsq tmp addrSymbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_1_elmsLeft tmp
&find_item_in_buf_with_str_key_1_elmsLeft &find_item_in_buf_with_str_key_1_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_1_elmsLeft find_item_in_buf_with_str_key_1_elmsLeft 1
&find_item_in_buf_with_str_key_1_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_1_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_1_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_1_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_1_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_1_LOOP &find_item_in_buf_with_str_key_1_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_1_NO_MATCH ; lblsq find_item_in_buf_with_str_key_1_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_1_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_1_elmsLeft 1
&find_item_in_buf_with_str_key_1_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_1_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const addrSymbols_it_step3 sym0_step3 STEP3_FOUND_ADDRSYMBOL tmp tmp2
; addr strcmp_const_17_a 0
# MSQ_START 2 copyaddr strcmp_const_17_a addrSymbols_it_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_17_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_17_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &addrSymbols_it_step3_addrRef_0 ?+8 ; relsq tmp addrSymbols_it_step3_addrRef_0 1
&strcmp_const_17_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_17_a_addrRef_0 tmp 1
&strcmp_const_17_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_17_a_addrRef_1 tmp 1
&strcmp_const_17_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_17_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_17_a 8
&strcmp_const_17_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_17_a_addrRef_0 CONST_-8 1
&strcmp_const_17_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_17_a_addrRef_1 CONST_-8 1
&strcmp_const_17_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_17_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_-8 1
&sym0_step3_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_-8 1
&sym0_step3_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_-8 1
&sym0_step3_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_-8 1
&sym0_step3_addrRef_4 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_-8 1
&sym0_step3_addrRef_5 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_-8 1
&sym0_step3_addrRef_6 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_-8 1
&sym0_step3_addrRef_7 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_-8 1
&sym0_step3_addrRef_8 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_-8 1
&sym0_step3_addrRef_9 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_17_a sym0_step3 STRCMP_CONST_17_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_17_a_addrRef_0 &strcmp_const_17_a ?+8 ; relsq tmp2 strcmp_const_17_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step3_addrRef_0 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_17_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_17_REVERT_ADDR
&tmp &CONST_-1 &JNZ_34_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_34_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_34_END ; lblsq ZERO ZERO JNZ_34_END
; label JNZ_34_REVERT_AND_JUMP
:JNZ_34_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_17_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_17_REVERT_ADDR
; label JNZ_34_END
# MSQ_END 2 jne
; var strcmp_const_17_len 0
# MSQ_START 2 mov strcmp_const_17_len strcmp_const_17_a tmp
:JNZ_34_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_17_a_addrRef_1 &strcmp_const_17_a ?+8 ; relsq tmp strcmp_const_17_a 1
&strcmp_const_17_len &strcmp_const_17_len ?+8 ; relsq strcmp_const_17_len strcmp_const_17_len 1
&strcmp_const_17_len &tmp ?+8 ; relsq strcmp_const_17_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_17_a 8
&strcmp_const_17_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_17_a_addrRef_0 CONST_8 1
&strcmp_const_17_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_17_a_addrRef_1 CONST_8 1
&strcmp_const_17_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_17_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_17_aStr 0
; addr strcmp_const_17_bStr 0
# MSQ_START 2 setaddr strcmp_const_17_aStr strcmp_const_17_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_17_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_17_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_17_a_addrRef_2 &strcmp_const_17_a ?+8 ; relsq tmp strcmp_const_17_a 1
&strcmp_const_17_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_17_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_17_bStr sym0_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_17_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_17_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step3_addrRef_1 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&strcmp_const_17_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_17_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_17_LOOP
# MSQ_START 2 decleq strcmp_const_17_len 0 STEP3_FOUND_ADDRSYMBOL
:STRCMP_CONST_17_LOOP &strcmp_const_17_len &CONST_0 &STEP3_FOUND_ADDRSYMBOL ; lblsq strcmp_const_17_len CONST_0 STEP3_FOUND_ADDRSYMBOL
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_17_len 1
&strcmp_const_17_len &CONST_1 ?+8 ; relsq strcmp_const_17_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_17_aStr strcmp_const_17_bStr STRCMP_CONST_17_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_17_aStr_addrRef_0 &strcmp_const_17_aStr ?+8 ; relsq tmp2 strcmp_const_17_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_17_bStr_addrRef_0 &strcmp_const_17_bStr ?+8 ; relsq tmp strcmp_const_17_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_17_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_17_END
&tmp &CONST_-1 &JNZ_35_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_35_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_35_END ; lblsq ZERO ZERO JNZ_35_END
; label JNZ_35_REVERT_AND_JUMP
:JNZ_35_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_17_END ; lblsq ZERO ZERO STRCMP_CONST_17_END
; label JNZ_35_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_17_aStr 8
:JNZ_35_END &strcmp_const_17_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_17_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_17_bStr 8
&strcmp_const_17_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_17_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_17_LOOP
&ZERO &ZERO &STRCMP_CONST_17_LOOP ; lblsq ZERO ZERO STRCMP_CONST_17_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_17_REVERT_ADDR
# MSQ_START 2 decaddr sym0_step3 8
:STRCMP_CONST_17_REVERT_ADDR &sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_17_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr addrSymbols_it_step3 20
:STRCMP_CONST_17_END &addrSymbols_it_step3_addrRef_0 &CONST_-20 ?+8 ; relsq addrSymbols_it_step3_addrRef_0 CONST_-20 1
&addrSymbols_it_step3_addrRef_1 &CONST_-20 ?+8 ; relsq addrSymbols_it_step3_addrRef_1 CONST_-20 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_1_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_1_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_1_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_1_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key

# No match. Create a new item instead
# MSQ_START 0 memcpy_const addrSymbols_it_step3 sym0_step3 18 tmp tmp2
# MSQ_START 1 memcpy addrSymbols_it_step3 sym0_step3 CONST_18 tmp tmp2
; addr memcpy_2_dst 0
; addr memcpy_2_src 0
# MSQ_START 2 copyaddr memcpy_2_dst addrSymbols_it_step3 tmp tmp2
:FIND_ITEM_IN_BUF_WITH_STR_KEY_1_NO_MATCH &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_2_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_2_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &addrSymbols_it_step3_addrRef_0 ?+8 ; relsq tmp addrSymbols_it_step3_addrRef_0 1
&memcpy_2_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_2_dst_addrRef_0 tmp 1
&memcpy_2_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_2_dst_addrRef_1 tmp 1
&memcpy_2_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_2_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_2_src sym0_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_2_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_2_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &sym0_step3_addrRef_0 ?+8 ; relsq tmp sym0_step3_addrRef_0 1
&memcpy_2_src_addrRef_0 &tmp ?+8 ; relsq memcpy_2_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_2_numLeft 0
# MSQ_START 2 mov memcpy_2_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_2_numLeft &memcpy_2_numLeft ?+8 ; relsq memcpy_2_numLeft memcpy_2_numLeft 1
&memcpy_2_numLeft &tmp ?+8 ; relsq memcpy_2_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_2_LOOP
# MSQ_START 2 decleq memcpy_2_numLeft 0 MEMCPY_2_END
:MEMCPY_2_LOOP &memcpy_2_numLeft &CONST_0 &MEMCPY_2_END ; lblsq memcpy_2_numLeft CONST_0 MEMCPY_2_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_2_numLeft 8
&memcpy_2_numLeft &CONST_8 ?+8 ; relsq memcpy_2_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_2_dst memcpy_2_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_2_src_addrRef_0 &memcpy_2_src ?+8 ; relsq tmp memcpy_2_src 1
:memcpy_2_dst_addrRef_0 &memcpy_2_dst :memcpy_2_dst_addrRef_1 &memcpy_2_dst ?+8 ; relsq memcpy_2_dst memcpy_2_dst 1
:memcpy_2_dst_addrRef_2 &memcpy_2_dst &tmp ?+8 ; relsq memcpy_2_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_2_dst 8
&memcpy_2_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_2_dst_addrRef_0 CONST_-8 1
&memcpy_2_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_2_dst_addrRef_1 CONST_-8 1
&memcpy_2_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_2_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_2_src 8
&memcpy_2_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_2_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_2_LOOP
&ZERO &ZERO &MEMCPY_2_LOOP ; lblsq ZERO ZERO MEMCPY_2_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_2_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 incaddr addrSymbols_it_step3 18
:MEMCPY_2_END &addrSymbols_it_step3_addrRef_0 &CONST_-18 ?+8 ; relsq addrSymbols_it_step3_addrRef_0 CONST_-18 1
&addrSymbols_it_step3_addrRef_1 &CONST_-18 ?+8 ; relsq addrSymbols_it_step3_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero addrSymbols_it_step3
# MSQ_START 1 sub addrSymbols_it_step3 addrSymbols_it_step3
:addrSymbols_it_step3_addrRef_0 &addrSymbols_it_step3 :addrSymbols_it_step3_addrRef_1 &addrSymbols_it_step3 ?+8 ; relsq addrSymbols_it_step3 addrSymbols_it_step3 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 decaddr addrSymbols_it_step3 18
&addrSymbols_it_step3_addrRef_0 &CONST_18 ?+8 ; relsq addrSymbols_it_step3_addrRef_0 CONST_18 1
&addrSymbols_it_step3_addrRef_1 &CONST_18 ?+8 ; relsq addrSymbols_it_step3_addrRef_1 CONST_18 1
# MSQ_END 0 decaddr
# MSQ_START 0 inc addrSymbolsLen 1
# MSQ_START 1 dec addrSymbolsLen -1
&addrSymbolsLen &CONST_-1 ?+8 ; relsq addrSymbolsLen CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

# Py: stubPrefix = f"{sym}_addrRef_"
; label STEP3_FOUND_ADDRSYMBOL
# Set stubPrefix_step3
; addr stubPrefix_step3 0
# MSQ_START 0 strcat stubPrefix_step3 sym0_step3 ADDRREF tmp tmp2 tmp3
; var strcat_0_aLength 0
; var strcat_0_retLength 0
# MSQ_START 1 strlen strcat_0_retLength ADDRREF tmp
# MSQ_START 2 incaddr ADDRREF 8
:STEP3_FOUND_ADDRSYMBOL &ADDRREF_addrRef_0 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_-8 1
&ADDRREF_addrRef_1 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_-8 1
&ADDRREF_addrRef_2 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_-8 1
&ADDRREF_addrRef_3 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_-8 1
&ADDRREF_addrRef_4 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_-8 1
&ADDRREF_addrRef_5 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_-8 1
&ADDRREF_addrRef_6 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_-8 1
&ADDRREF_addrRef_7 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_0_retLength ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_0 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcat_0_retLength &strcat_0_retLength ?+8 ; relsq strcat_0_retLength strcat_0_retLength 1
&strcat_0_retLength &tmp ?+8 ; relsq strcat_0_retLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_8 1
&ADDRREF_addrRef_1 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_8 1
&ADDRREF_addrRef_2 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_8 1
&ADDRREF_addrRef_3 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_8 1
&ADDRREF_addrRef_4 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_8 1
&ADDRREF_addrRef_5 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_8 1
&ADDRREF_addrRef_6 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_8 1
&ADDRREF_addrRef_7 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 strlen strcat_0_aLength sym0_step3 tmp
# MSQ_START 2 incaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_-8 1
&sym0_step3_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_-8 1
&sym0_step3_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_-8 1
&sym0_step3_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_-8 1
&sym0_step3_addrRef_4 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_-8 1
&sym0_step3_addrRef_5 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_-8 1
&sym0_step3_addrRef_6 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_-8 1
&sym0_step3_addrRef_7 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_-8 1
&sym0_step3_addrRef_8 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_-8 1
&sym0_step3_addrRef_9 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_0_aLength sym0_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sym0_step3_addrRef_2 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&strcat_0_aLength &strcat_0_aLength ?+8 ; relsq strcat_0_aLength strcat_0_aLength 1
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 add strcat_0_retLength strcat_0_aLength tmp
# MSQ_START 2 movneg tmp strcat_0_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_0_aLength ?+8 ; relsq tmp strcat_0_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_0_retLength tmp
&strcat_0_retLength &tmp ?+8 ; relsq strcat_0_retLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 malloc_const tmp 18 tmp2
# MSQ_START 2 malloc tmp CONST_18 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &CONST_18 ?+8 ; relsq tmp2 CONST_18 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr stubPrefix_step3 tmp tmp2 tmp3
# MSQ_START 2 mov tmp2 stubPrefix_step3_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &stubPrefix_step3_addrRef_0 ?+8 ; relsq tmp3 stubPrefix_step3_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
&stubPrefix_step3_addrRef_0 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_0 tmp2 1
&stubPrefix_step3_addrRef_1 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_1 tmp2 1
&stubPrefix_step3_addrRef_2 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_2 tmp2 1
&stubPrefix_step3_addrRef_3 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_3 tmp2 1
&stubPrefix_step3_addrRef_4 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_4 tmp2 1
&stubPrefix_step3_addrRef_5 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_5 tmp2 1
&stubPrefix_step3_addrRef_6 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_6 tmp2 1
&stubPrefix_step3_addrRef_7 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_7 tmp2 1
&stubPrefix_step3_addrRef_8 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_8 tmp2 1
&stubPrefix_step3_addrRef_9 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_9 tmp2 1
&stubPrefix_step3_addrRef_10 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_10 tmp2 1
&stubPrefix_step3_addrRef_11 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_11 tmp2 1
&stubPrefix_step3_addrRef_12 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_12 tmp2 1
&stubPrefix_step3_addrRef_13 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_13 tmp2 1
&stubPrefix_step3_addrRef_14 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_14 tmp2 1
&stubPrefix_step3_addrRef_15 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_15 tmp2 1
&stubPrefix_step3_addrRef_16 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_16 tmp2 1
&stubPrefix_step3_addrRef_17 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_17 tmp2 1
&stubPrefix_step3_addrRef_18 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_18 tmp2 1
&stubPrefix_step3_addrRef_19 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_19 tmp2 1
&stubPrefix_step3_addrRef_20 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_20 tmp2 1
&stubPrefix_step3_addrRef_21 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_21 tmp2 1
&stubPrefix_step3_addrRef_22 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_22 tmp2 1
&stubPrefix_step3_addrRef_23 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_23 tmp2 1
&stubPrefix_step3_addrRef_24 &tmp2 ?+8 ; relsq stubPrefix_step3_addrRef_24 tmp2 1
# MSQ_END 1 setaddr
# MSQ_START 1 mov tmp strcat_0_retLength tmp2
# MSQ_START 2 movneg tmp2 strcat_0_retLength
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcat_0_retLength ?+8 ; relsq tmp2 strcat_0_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 mul_8 tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 alloc_str stubPrefix_step3 tmp tmp2
# MSQ_START 2 malloc stubPrefix_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
:stubPrefix_step3_addrRef_0 &stubPrefix_step3 :stubPrefix_step3_addrRef_1 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
:stubPrefix_step3_addrRef_2 &stubPrefix_step3 &tmp2 ?+8 ; relsq stubPrefix_step3 tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero stubPrefix_step3
:stubPrefix_step3_addrRef_3 &stubPrefix_step3 :stubPrefix_step3_addrRef_4 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:stubPrefix_step3_addrRef_5 &stubPrefix_step3 :stubPrefix_step3_addrRef_6 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
:stubPrefix_step3_addrRef_7 &stubPrefix_step3 &tmp2 ?+8 ; relsq stubPrefix_step3 tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step3 10
&stubPrefix_step3_addrRef_0 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_10 1
&stubPrefix_step3_addrRef_1 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_10 1
&stubPrefix_step3_addrRef_2 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_10 1
&stubPrefix_step3_addrRef_3 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_10 1
&stubPrefix_step3_addrRef_4 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_10 1
&stubPrefix_step3_addrRef_5 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_10 1
&stubPrefix_step3_addrRef_6 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_10 1
&stubPrefix_step3_addrRef_7 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_10 1
&stubPrefix_step3_addrRef_8 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_10 1
&stubPrefix_step3_addrRef_9 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_10 1
&stubPrefix_step3_addrRef_10 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_10 1
&stubPrefix_step3_addrRef_11 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_10 1
&stubPrefix_step3_addrRef_12 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_10 1
&stubPrefix_step3_addrRef_13 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_10 1
&stubPrefix_step3_addrRef_14 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_10 1
&stubPrefix_step3_addrRef_15 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_10 1
&stubPrefix_step3_addrRef_16 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_10 1
&stubPrefix_step3_addrRef_17 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_10 1
&stubPrefix_step3_addrRef_18 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_10 1
&stubPrefix_step3_addrRef_19 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_10 1
&stubPrefix_step3_addrRef_20 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_10 1
&stubPrefix_step3_addrRef_21 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_10 1
&stubPrefix_step3_addrRef_22 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_10 1
&stubPrefix_step3_addrRef_23 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_10 1
&stubPrefix_step3_addrRef_24 &CONST_10 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str
# MSQ_START 1 strcpy stubPrefix_step3 sym0_step3 tmp tmp2
; addr strcpy_2_strA 0
# MSQ_START 2 setaddr strcpy_2_strA stubPrefix_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_2_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_2_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step3_addrRef_8 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
&strcpy_2_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_2_strA_addrRef_0 tmp 1
&strcpy_2_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_2_strA_addrRef_1 tmp 1
&strcpy_2_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_2_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_2_strB 0
# MSQ_START 2 setaddr strcpy_2_strB sym0_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_2_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_2_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step3_addrRef_3 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&strcpy_2_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_2_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_-8 1
&sym0_step3_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_-8 1
&sym0_step3_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_-8 1
&sym0_step3_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_-8 1
&sym0_step3_addrRef_4 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_-8 1
&sym0_step3_addrRef_5 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_-8 1
&sym0_step3_addrRef_6 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_-8 1
&sym0_step3_addrRef_7 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_-8 1
&sym0_step3_addrRef_8 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_-8 1
&sym0_step3_addrRef_9 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step3 sym0_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sym0_step3_addrRef_4 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
:stubPrefix_step3_addrRef_9 &stubPrefix_step3 :stubPrefix_step3_addrRef_10 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
:stubPrefix_step3_addrRef_11 &stubPrefix_step3 &tmp ?+8 ; relsq stubPrefix_step3 tmp 1
# MSQ_END 2 mov
; var strcpy_2_strLen 0
# MSQ_START 2 mov strcpy_2_strLen sym0_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sym0_step3_addrRef_5 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&strcpy_2_strLen &strcpy_2_strLen ?+8 ; relsq strcpy_2_strLen strcpy_2_strLen 1
&strcpy_2_strLen &tmp ?+8 ; relsq strcpy_2_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_8 1
&stubPrefix_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_8 1
&stubPrefix_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_8 1
&stubPrefix_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_8 1
&stubPrefix_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_8 1
&stubPrefix_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_8 1
&stubPrefix_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_8 1
&stubPrefix_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_8 1
&stubPrefix_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_8 1
&stubPrefix_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_8 1
&stubPrefix_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_8 1
&stubPrefix_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_8 1
&stubPrefix_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_8 1
&stubPrefix_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_8 1
&stubPrefix_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_8 1
&stubPrefix_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_8 1
&stubPrefix_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_8 1
&stubPrefix_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_8 1
&stubPrefix_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_8 1
&stubPrefix_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_8 1
&stubPrefix_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_8 1
&stubPrefix_step3_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_8 1
&stubPrefix_step3_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_8 1
&stubPrefix_step3_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_8 1
&stubPrefix_step3_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_2_LOOP
# MSQ_START 2 decleq strcpy_2_strLen 0 STRCPY_2_END
:STRCPY_2_LOOP &strcpy_2_strLen &CONST_0 &STRCPY_2_END ; lblsq strcpy_2_strLen CONST_0 STRCPY_2_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_2_strLen 1
&strcpy_2_strLen &CONST_1 ?+8 ; relsq strcpy_2_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_2_strA strcpy_2_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_2_strB_addrRef_0 &strcpy_2_strB ?+8 ; relsq tmp strcpy_2_strB 1
:strcpy_2_strA_addrRef_0 &strcpy_2_strA :strcpy_2_strA_addrRef_1 &strcpy_2_strA ?+8 ; relsq strcpy_2_strA strcpy_2_strA 1
:strcpy_2_strA_addrRef_2 &strcpy_2_strA &tmp ?+8 ; relsq strcpy_2_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_2_strA 8
&strcpy_2_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_2_strA_addrRef_0 CONST_-8 1
&strcpy_2_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_2_strA_addrRef_1 CONST_-8 1
&strcpy_2_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_2_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_2_strB 8
&strcpy_2_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_2_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_2_LOOP
&ZERO &ZERO &STRCPY_2_LOOP ; lblsq ZERO ZERO STRCPY_2_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_2_END
# MSQ_END 1 strcpy
# MSQ_START 1 mul_8 strcat_0_aLength tmp
# MSQ_START 2 movneg tmp strcat_0_aLength
:STRCPY_2_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_0_aLength ?+8 ; relsq tmp strcat_0_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_0_aLength tmp
&strcat_0_aLength &tmp ?+8 ; relsq strcat_0_aLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 add stubPrefix_step3 strcat_0_aLength tmp
# MSQ_START 2 movneg tmp strcat_0_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_0_aLength ?+8 ; relsq tmp strcat_0_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub stubPrefix_step3 tmp
:stubPrefix_step3_addrRef_12 &stubPrefix_step3 &tmp ?+8 ; relsq stubPrefix_step3 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 strcpy stubPrefix_step3 ADDRREF tmp tmp2
; addr strcpy_3_strA 0
# MSQ_START 2 setaddr strcpy_3_strA stubPrefix_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_3_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_3_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step3_addrRef_13 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
&strcpy_3_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_3_strA_addrRef_0 tmp 1
&strcpy_3_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_3_strA_addrRef_1 tmp 1
&strcpy_3_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_3_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_3_strB 0
# MSQ_START 2 setaddr strcpy_3_strB ADDRREF tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_3_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_3_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :ADDRREF_addrRef_1 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcpy_3_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_3_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_-8 1
&ADDRREF_addrRef_1 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_-8 1
&ADDRREF_addrRef_2 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_-8 1
&ADDRREF_addrRef_3 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_-8 1
&ADDRREF_addrRef_4 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_-8 1
&ADDRREF_addrRef_5 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_-8 1
&ADDRREF_addrRef_6 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_-8 1
&ADDRREF_addrRef_7 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step3 ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_2 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
:stubPrefix_step3_addrRef_14 &stubPrefix_step3 :stubPrefix_step3_addrRef_15 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
:stubPrefix_step3_addrRef_16 &stubPrefix_step3 &tmp ?+8 ; relsq stubPrefix_step3 tmp 1
# MSQ_END 2 mov
; var strcpy_3_strLen 0
# MSQ_START 2 mov strcpy_3_strLen ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_3 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcpy_3_strLen &strcpy_3_strLen ?+8 ; relsq strcpy_3_strLen strcpy_3_strLen 1
&strcpy_3_strLen &tmp ?+8 ; relsq strcpy_3_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_8 1
&stubPrefix_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_8 1
&stubPrefix_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_8 1
&stubPrefix_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_8 1
&stubPrefix_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_8 1
&stubPrefix_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_8 1
&stubPrefix_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_8 1
&stubPrefix_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_8 1
&stubPrefix_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_8 1
&stubPrefix_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_8 1
&stubPrefix_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_8 1
&stubPrefix_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_8 1
&stubPrefix_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_8 1
&stubPrefix_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_8 1
&stubPrefix_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_8 1
&stubPrefix_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_8 1
&stubPrefix_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_8 1
&stubPrefix_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_8 1
&stubPrefix_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_8 1
&stubPrefix_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_8 1
&stubPrefix_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_8 1
&stubPrefix_step3_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_8 1
&stubPrefix_step3_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_8 1
&stubPrefix_step3_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_8 1
&stubPrefix_step3_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_8 1
&ADDRREF_addrRef_1 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_8 1
&ADDRREF_addrRef_2 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_8 1
&ADDRREF_addrRef_3 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_8 1
&ADDRREF_addrRef_4 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_8 1
&ADDRREF_addrRef_5 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_8 1
&ADDRREF_addrRef_6 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_8 1
&ADDRREF_addrRef_7 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_3_LOOP
# MSQ_START 2 decleq strcpy_3_strLen 0 STRCPY_3_END
:STRCPY_3_LOOP &strcpy_3_strLen &CONST_0 &STRCPY_3_END ; lblsq strcpy_3_strLen CONST_0 STRCPY_3_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_3_strLen 1
&strcpy_3_strLen &CONST_1 ?+8 ; relsq strcpy_3_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_3_strA strcpy_3_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_3_strB_addrRef_0 &strcpy_3_strB ?+8 ; relsq tmp strcpy_3_strB 1
:strcpy_3_strA_addrRef_0 &strcpy_3_strA :strcpy_3_strA_addrRef_1 &strcpy_3_strA ?+8 ; relsq strcpy_3_strA strcpy_3_strA 1
:strcpy_3_strA_addrRef_2 &strcpy_3_strA &tmp ?+8 ; relsq strcpy_3_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_3_strA 8
&strcpy_3_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_3_strA_addrRef_0 CONST_-8 1
&strcpy_3_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_3_strA_addrRef_1 CONST_-8 1
&strcpy_3_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_3_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_3_strB 8
&strcpy_3_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_3_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_3_LOOP
&ZERO &ZERO &STRCPY_3_LOOP ; lblsq ZERO ZERO STRCPY_3_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_3_END
# MSQ_END 1 strcpy
# MSQ_START 1 sub stubPrefix_step3 strcat_0_aLength
:STRCPY_3_END :stubPrefix_step3_addrRef_17 &stubPrefix_step3 &strcat_0_aLength ?+8 ; relsq stubPrefix_step3 strcat_0_aLength 1
# MSQ_END 1 sub
# MSQ_START 1 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov stubPrefix_step3 strcat_0_retLength tmp
# MSQ_START 2 movneg tmp strcat_0_retLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_0_retLength ?+8 ; relsq tmp strcat_0_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg stubPrefix_step3 tmp
:stubPrefix_step3_addrRef_18 &stubPrefix_step3 :stubPrefix_step3_addrRef_19 &stubPrefix_step3 ?+8 ; relsq stubPrefix_step3 stubPrefix_step3 1
:stubPrefix_step3_addrRef_20 &stubPrefix_step3 &tmp ?+8 ; relsq stubPrefix_step3 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_8 1
&stubPrefix_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_8 1
&stubPrefix_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_8 1
&stubPrefix_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_8 1
&stubPrefix_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_8 1
&stubPrefix_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_8 1
&stubPrefix_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_8 1
&stubPrefix_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_8 1
&stubPrefix_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_8 1
&stubPrefix_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_8 1
&stubPrefix_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_8 1
&stubPrefix_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_8 1
&stubPrefix_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_8 1
&stubPrefix_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_8 1
&stubPrefix_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_8 1
&stubPrefix_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_8 1
&stubPrefix_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_8 1
&stubPrefix_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_8 1
&stubPrefix_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_8 1
&stubPrefix_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_8 1
&stubPrefix_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_8 1
&stubPrefix_step3_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_8 1
&stubPrefix_step3_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_8 1
&stubPrefix_step3_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_8 1
&stubPrefix_step3_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 strcat

# Find refCount
; var refCount_step3 0
; var nextId_step3 0
; addr symbols_it_step3 0
# MSQ_START 0 setaddr symbols_it_step3 symbolsBegin tmp tmp2
# MSQ_START 1 mov tmp symbols_it_step3_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 symbols_it_step3_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbols_it_step3_addrRef_0 ?+8 ; relsq tmp2 symbols_it_step3_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp symbolsBegin
&tmp &symbolsBegin ?+8 ; relsq tmp symbolsBegin 1
# MSQ_END 1 sub
&symbols_it_step3_addrRef_0 &tmp ?+8 ; relsq symbols_it_step3_addrRef_0 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key symbols_it_step3 sym0_step3 30 symbolsLen STEP3_FOUND_SYMBOL tmp tmp2
; var find_item_in_buf_with_str_key_2_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_2_elmsLeft symbolsLen tmp
# MSQ_START 2 movneg tmp symbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolsLen ?+8 ; relsq tmp symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_2_elmsLeft tmp
&find_item_in_buf_with_str_key_2_elmsLeft &find_item_in_buf_with_str_key_2_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_2_elmsLeft find_item_in_buf_with_str_key_2_elmsLeft 1
&find_item_in_buf_with_str_key_2_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_2_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_2_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_2_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_2_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_2_LOOP &find_item_in_buf_with_str_key_2_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_2_NO_MATCH ; lblsq find_item_in_buf_with_str_key_2_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_2_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_2_elmsLeft 1
&find_item_in_buf_with_str_key_2_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_2_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const symbols_it_step3 sym0_step3 STEP3_FOUND_SYMBOL tmp tmp2
; addr strcmp_const_18_a 0
# MSQ_START 2 copyaddr strcmp_const_18_a symbols_it_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_18_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_18_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &symbols_it_step3_addrRef_0 ?+8 ; relsq tmp symbols_it_step3_addrRef_0 1
&strcmp_const_18_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_18_a_addrRef_0 tmp 1
&strcmp_const_18_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_18_a_addrRef_1 tmp 1
&strcmp_const_18_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_18_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_18_a 8
&strcmp_const_18_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_18_a_addrRef_0 CONST_-8 1
&strcmp_const_18_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_18_a_addrRef_1 CONST_-8 1
&strcmp_const_18_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_18_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_-8 1
&sym0_step3_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_-8 1
&sym0_step3_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_-8 1
&sym0_step3_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_-8 1
&sym0_step3_addrRef_4 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_-8 1
&sym0_step3_addrRef_5 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_-8 1
&sym0_step3_addrRef_6 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_-8 1
&sym0_step3_addrRef_7 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_-8 1
&sym0_step3_addrRef_8 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_-8 1
&sym0_step3_addrRef_9 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_18_a sym0_step3 STRCMP_CONST_18_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_18_a_addrRef_0 &strcmp_const_18_a ?+8 ; relsq tmp2 strcmp_const_18_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step3_addrRef_6 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_18_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_18_REVERT_ADDR
&tmp &CONST_-1 &JNZ_36_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_36_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_36_END ; lblsq ZERO ZERO JNZ_36_END
; label JNZ_36_REVERT_AND_JUMP
:JNZ_36_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_18_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_18_REVERT_ADDR
; label JNZ_36_END
# MSQ_END 2 jne
; var strcmp_const_18_len 0
# MSQ_START 2 mov strcmp_const_18_len strcmp_const_18_a tmp
:JNZ_36_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_18_a_addrRef_1 &strcmp_const_18_a ?+8 ; relsq tmp strcmp_const_18_a 1
&strcmp_const_18_len &strcmp_const_18_len ?+8 ; relsq strcmp_const_18_len strcmp_const_18_len 1
&strcmp_const_18_len &tmp ?+8 ; relsq strcmp_const_18_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_18_a 8
&strcmp_const_18_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_18_a_addrRef_0 CONST_8 1
&strcmp_const_18_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_18_a_addrRef_1 CONST_8 1
&strcmp_const_18_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_18_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_18_aStr 0
; addr strcmp_const_18_bStr 0
# MSQ_START 2 setaddr strcmp_const_18_aStr strcmp_const_18_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_18_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_18_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_18_a_addrRef_2 &strcmp_const_18_a ?+8 ; relsq tmp strcmp_const_18_a 1
&strcmp_const_18_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_18_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_18_bStr sym0_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_18_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_18_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step3_addrRef_7 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
&strcmp_const_18_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_18_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_18_LOOP
# MSQ_START 2 decleq strcmp_const_18_len 0 STEP3_FOUND_SYMBOL
:STRCMP_CONST_18_LOOP &strcmp_const_18_len &CONST_0 &STEP3_FOUND_SYMBOL ; lblsq strcmp_const_18_len CONST_0 STEP3_FOUND_SYMBOL
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_18_len 1
&strcmp_const_18_len &CONST_1 ?+8 ; relsq strcmp_const_18_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_18_aStr strcmp_const_18_bStr STRCMP_CONST_18_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_18_aStr_addrRef_0 &strcmp_const_18_aStr ?+8 ; relsq tmp2 strcmp_const_18_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_18_bStr_addrRef_0 &strcmp_const_18_bStr ?+8 ; relsq tmp strcmp_const_18_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_18_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_18_END
&tmp &CONST_-1 &JNZ_37_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_37_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_37_END ; lblsq ZERO ZERO JNZ_37_END
; label JNZ_37_REVERT_AND_JUMP
:JNZ_37_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_18_END ; lblsq ZERO ZERO STRCMP_CONST_18_END
; label JNZ_37_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_18_aStr 8
:JNZ_37_END &strcmp_const_18_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_18_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_18_bStr 8
&strcmp_const_18_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_18_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_18_LOOP
&ZERO &ZERO &STRCMP_CONST_18_LOOP ; lblsq ZERO ZERO STRCMP_CONST_18_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_18_REVERT_ADDR
# MSQ_START 2 decaddr sym0_step3 8
:STRCMP_CONST_18_REVERT_ADDR &sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_18_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr symbols_it_step3 30
:STRCMP_CONST_18_END &symbols_it_step3_addrRef_0 &CONST_-30 ?+8 ; relsq symbols_it_step3_addrRef_0 CONST_-30 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_2_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_2_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_2_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_2_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key

# MSQ_START 0 puts STEP3_MISSING_SYMBOL tmp tmp2
; addr puts_12_str 0
# MSQ_START 1 setaddr puts_12_str STEP3_MISSING_SYMBOL tmp tmp2
# MSQ_START 2 mov tmp puts_12_str_addrRef_0 tmp2
:FIND_ITEM_IN_BUF_WITH_STR_KEY_2_NO_MATCH &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_12_str_addrRef_0 ?+8 ; relsq tmp2 puts_12_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP3_MISSING_SYMBOL
&tmp :STEP3_MISSING_SYMBOL_addrRef_0 &STEP3_MISSING_SYMBOL ?+8 ; relsq tmp STEP3_MISSING_SYMBOL 1
# MSQ_END 2 sub
&puts_12_str_addrRef_0 &tmp ?+8 ; relsq puts_12_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_12_len 0
# MSQ_START 1 incaddr STEP3_MISSING_SYMBOL 8
&STEP3_MISSING_SYMBOL_addrRef_0 &CONST_-8 ?+8 ; relsq STEP3_MISSING_SYMBOL_addrRef_0 CONST_-8 1
&STEP3_MISSING_SYMBOL_addrRef_1 &CONST_-8 ?+8 ; relsq STEP3_MISSING_SYMBOL_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_12_len STEP3_MISSING_SYMBOL tmp
# MSQ_START 2 movneg tmp STEP3_MISSING_SYMBOL
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP3_MISSING_SYMBOL_addrRef_1 &STEP3_MISSING_SYMBOL ?+8 ; relsq tmp STEP3_MISSING_SYMBOL 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_12_len tmp
&puts_12_len &puts_12_len ?+8 ; relsq puts_12_len puts_12_len 1
&puts_12_len &tmp ?+8 ; relsq puts_12_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP3_MISSING_SYMBOL 8
&STEP3_MISSING_SYMBOL_addrRef_0 &CONST_8 ?+8 ; relsq STEP3_MISSING_SYMBOL_addrRef_0 CONST_8 1
&STEP3_MISSING_SYMBOL_addrRef_1 &CONST_8 ?+8 ; relsq STEP3_MISSING_SYMBOL_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_12_LOOP
# MSQ_START 1 decleq puts_12_len 0 PUTS_12_END
:PUTS_12_LOOP &puts_12_len &CONST_0 &PUTS_12_END ; lblsq puts_12_len CONST_0 PUTS_12_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_12_len 1
&puts_12_len &CONST_1 ?+8 ; relsq puts_12_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_12_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_12_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_12_str_addrRef_0 &puts_12_str ?+8 ; relsq tmp puts_12_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_12_str 8
&puts_12_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_12_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_12_LOOP
&ZERO &ZERO &PUTS_12_LOOP ; lblsq ZERO ZERO PUTS_12_LOOP
# MSQ_END 1 lbljmp
; label PUTS_12_END
# MSQ_END 0 puts
# MSQ_START 0 putchar SPACE tmp
:PUTS_12_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp SPACE
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SPACE
&tmp &SPACE ?+8 ; relsq tmp SPACE 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 puts sym0_step3 tmp tmp2
; addr puts_13_str 0
# MSQ_START 1 setaddr puts_13_str sym0_step3 tmp tmp2
# MSQ_START 2 mov tmp puts_13_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_13_str_addrRef_0 ?+8 ; relsq tmp2 puts_13_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp sym0_step3
&tmp :sym0_step3_addrRef_8 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
# MSQ_END 2 sub
&puts_13_str_addrRef_0 &tmp ?+8 ; relsq puts_13_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_13_len 0
# MSQ_START 1 incaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_-8 1
&sym0_step3_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_-8 1
&sym0_step3_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_-8 1
&sym0_step3_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_-8 1
&sym0_step3_addrRef_4 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_-8 1
&sym0_step3_addrRef_5 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_-8 1
&sym0_step3_addrRef_6 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_-8 1
&sym0_step3_addrRef_7 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_-8 1
&sym0_step3_addrRef_8 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_-8 1
&sym0_step3_addrRef_9 &CONST_-8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_13_len sym0_step3 tmp
# MSQ_START 2 movneg tmp sym0_step3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sym0_step3_addrRef_9 &sym0_step3 ?+8 ; relsq tmp sym0_step3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_13_len tmp
&puts_13_len &puts_13_len ?+8 ; relsq puts_13_len puts_13_len 1
&puts_13_len &tmp ?+8 ; relsq puts_13_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr sym0_step3 8
&sym0_step3_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_0 CONST_8 1
&sym0_step3_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_1 CONST_8 1
&sym0_step3_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_2 CONST_8 1
&sym0_step3_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_3 CONST_8 1
&sym0_step3_addrRef_4 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_4 CONST_8 1
&sym0_step3_addrRef_5 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_5 CONST_8 1
&sym0_step3_addrRef_6 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_6 CONST_8 1
&sym0_step3_addrRef_7 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_7 CONST_8 1
&sym0_step3_addrRef_8 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_8 CONST_8 1
&sym0_step3_addrRef_9 &CONST_8 ?+8 ; relsq sym0_step3_addrRef_9 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_13_LOOP
# MSQ_START 1 decleq puts_13_len 0 PUTS_13_END
:PUTS_13_LOOP &puts_13_len &CONST_0 &PUTS_13_END ; lblsq puts_13_len CONST_0 PUTS_13_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_13_len 1
&puts_13_len &CONST_1 ?+8 ; relsq puts_13_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_13_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_13_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_13_str_addrRef_0 &puts_13_str ?+8 ; relsq tmp puts_13_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_13_str 8
&puts_13_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_13_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_13_LOOP
&ZERO &ZERO &PUTS_13_LOOP ; lblsq ZERO ZERO PUTS_13_LOOP
# MSQ_END 1 lbljmp
; label PUTS_13_END
# MSQ_END 0 puts
# MSQ_START 0 lbljmp HALT
:PUTS_13_END &ZERO &ZERO &HALT ; lblsq ZERO ZERO HALT
# MSQ_END 0 lbljmp

; label STEP3_FOUND_SYMBOL
# MSQ_START 0 incaddr symbols_it_step3 20
:STEP3_FOUND_SYMBOL &symbols_it_step3_addrRef_0 &CONST_-20 ?+8 ; relsq symbols_it_step3_addrRef_0 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov refCount_step3 symbols_it_step3 tmp
# MSQ_START 1 movneg tmp symbols_it_step3
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp symbols_it_step3
&tmp :symbols_it_step3_addrRef_0 &symbols_it_step3 ?+8 ; relsq tmp symbols_it_step3 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg refCount_step3 tmp
# MSQ_START 2 zero refCount_step3
&refCount_step3 &refCount_step3 ?+8 ; relsq refCount_step3 refCount_step3 1
# MSQ_END 2 zero
# MSQ_START 2 sub refCount_step3 tmp
&refCount_step3 &tmp ?+8 ; relsq refCount_step3 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 zero nextId_step3
# MSQ_START 1 sub nextId_step3 nextId_step3
&nextId_step3 &nextId_step3 ?+8 ; relsq nextId_step3 nextId_step3 1
# MSQ_END 1 sub
# MSQ_END 0 zero

; label STEP3_STUB_LOOP
# MSQ_START 0 decleq refCount_step3 0 STEP3_LOOP
:STEP3_STUB_LOOP &refCount_step3 &CONST_0 &STEP3_LOOP ; lblsq refCount_step3 CONST_0 STEP3_LOOP
# MSQ_END 0 decleq
# MSQ_START 0 dec refCount_step3 1
&refCount_step3 &CONST_1 ?+8 ; relsq refCount_step3 CONST_1 1
# MSQ_END 0 dec

; addr nextId_str_step3 0
# MSQ_START 0 itoa nextId_str_step3 nextId_step3 tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr nextId_str_step3 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 nextId_str_step3_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &nextId_str_step3_addrRef_0 ?+8 ; relsq tmp nextId_str_step3_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&nextId_str_step3_addrRef_0 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_0 tmp3 1
&nextId_str_step3_addrRef_1 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_1 tmp3 1
&nextId_str_step3_addrRef_2 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_2 tmp3 1
&nextId_str_step3_addrRef_3 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_3 tmp3 1
&nextId_str_step3_addrRef_4 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_4 tmp3 1
&nextId_str_step3_addrRef_5 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_5 tmp3 1
&nextId_str_step3_addrRef_6 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_6 tmp3 1
&nextId_str_step3_addrRef_7 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_7 tmp3 1
&nextId_str_step3_addrRef_8 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_8 tmp3 1
&nextId_str_step3_addrRef_9 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_9 tmp3 1
&nextId_str_step3_addrRef_10 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_10 tmp3 1
&nextId_str_step3_addrRef_11 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_11 tmp3 1
&nextId_str_step3_addrRef_12 &tmp3 ?+8 ; relsq nextId_str_step3_addrRef_12 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const nextId_str_step3 a0 tmp3
# MSQ_START 2 malloc_const nextId_str_step3 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:nextId_str_step3_addrRef_0 &nextId_str_step3 :nextId_str_step3_addrRef_1 &nextId_str_step3 ?+8 ; relsq nextId_str_step3 nextId_str_step3 1
:nextId_str_step3_addrRef_2 &nextId_str_step3 &tmp3 ?+8 ; relsq nextId_str_step3 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr nextId_str_step3 8
&nextId_str_step3_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_-8 1
&nextId_str_step3_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_-8 1
&nextId_str_step3_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_-8 1
&nextId_str_step3_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_-8 1
&nextId_str_step3_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_-8 1
&nextId_str_step3_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_-8 1
&nextId_str_step3_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_-8 1
&nextId_str_step3_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_-8 1
&nextId_str_step3_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_-8 1
&nextId_str_step3_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_-8 1
&nextId_str_step3_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_-8 1
&nextId_str_step3_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_-8 1
&nextId_str_step3_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero nextId_str_step3
:nextId_str_step3_addrRef_3 &nextId_str_step3 :nextId_str_step3_addrRef_4 &nextId_str_step3 ?+8 ; relsq nextId_str_step3 nextId_str_step3 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr nextId_str_step3 8
&nextId_str_step3_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_-8 1
&nextId_str_step3_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_-8 1
&nextId_str_step3_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_-8 1
&nextId_str_step3_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_-8 1
&nextId_str_step3_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_-8 1
&nextId_str_step3_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_-8 1
&nextId_str_step3_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_-8 1
&nextId_str_step3_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_-8 1
&nextId_str_step3_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_-8 1
&nextId_str_step3_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_-8 1
&nextId_str_step3_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_-8 1
&nextId_str_step3_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_-8 1
&nextId_str_step3_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov nextId_str_step3 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:nextId_str_step3_addrRef_5 &nextId_str_step3 :nextId_str_step3_addrRef_6 &nextId_str_step3 ?+8 ; relsq nextId_str_step3 nextId_str_step3 1
:nextId_str_step3_addrRef_7 &nextId_str_step3 &tmp3 ?+8 ; relsq nextId_str_step3 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr nextId_str_step3 10
&nextId_str_step3_addrRef_0 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_10 1
&nextId_str_step3_addrRef_1 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_10 1
&nextId_str_step3_addrRef_2 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_10 1
&nextId_str_step3_addrRef_3 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_10 1
&nextId_str_step3_addrRef_4 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_10 1
&nextId_str_step3_addrRef_5 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_10 1
&nextId_str_step3_addrRef_6 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_10 1
&nextId_str_step3_addrRef_7 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_10 1
&nextId_str_step3_addrRef_8 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_10 1
&nextId_str_step3_addrRef_9 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_10 1
&nextId_str_step3_addrRef_10 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_10 1
&nextId_str_step3_addrRef_11 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_10 1
&nextId_str_step3_addrRef_12 &CONST_10 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_4_retBuf 0
# MSQ_START 1 setaddr itoa_4_retBuf nextId_str_step3 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_4_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_4_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_4_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 nextId_str_step3
&tmp2 :nextId_str_step3_addrRef_8 &nextId_str_step3 ?+8 ; relsq tmp2 nextId_str_step3 1
# MSQ_END 2 sub
&itoa_4_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_0 tmp2 1
&itoa_4_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_1 tmp2 1
&itoa_4_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_2 tmp2 1
&itoa_4_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_3 tmp2 1
&itoa_4_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_4 tmp2 1
&itoa_4_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_5 tmp2 1
&itoa_4_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_6 tmp2 1
&itoa_4_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_7 tmp2 1
&itoa_4_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_8 tmp2 1
&itoa_4_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_4_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_4_retLength 0
# MSQ_START 1 copyaddr itoa_4_retLength nextId_str_step3 tmp2 tmp3
# MSQ_START 2 setaddr itoa_4_retLength nextId_str_step3_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_4_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_4_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &nextId_str_step3_addrRef_0 ?+8 ; relsq tmp2 nextId_str_step3_addrRef_0 1
&itoa_4_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_4_retLength_addrRef_0 tmp2 1
&itoa_4_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_4_retLength_addrRef_1 tmp2 1
&itoa_4_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_4_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_4_retLength 8
&itoa_4_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_4_retLength_addrRef_0 CONST_-8 1
&itoa_4_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_4_retLength_addrRef_1 CONST_-8 1
&itoa_4_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_4_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_4_noDigits 0
# MSQ_START 1 set itoa_4_noDigits 1
# MSQ_START 2 zero itoa_4_noDigits
&itoa_4_noDigits &itoa_4_noDigits ?+8 ; relsq itoa_4_noDigits itoa_4_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_4_noDigits 1
&itoa_4_noDigits &CONST_-1 ?+8 ; relsq itoa_4_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp nextId_step3 tmp2
# MSQ_START 2 movneg tmp2 nextId_step3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &nextId_step3 ?+8 ; relsq tmp2 nextId_step3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_4_isNeg 0
# MSQ_START 1 zero itoa_4_isNeg
# MSQ_START 2 sub itoa_4_isNeg itoa_4_isNeg
&itoa_4_isNeg &itoa_4_isNeg ?+8 ; relsq itoa_4_isNeg itoa_4_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_4_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_4_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_4_IS_NEG ; lblsq tmp2 ZERO ITOA_4_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_4_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_24_END
&tmp2 &CONST_-1 &JZ_24_END ; lblsq tmp2 CONST_-1 JZ_24_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_24_REVERT_A
&tmp &CONST_-1 &JZ_24_REVERT_A ; lblsq tmp CONST_-1 JZ_24_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_4_IS_ZERO
&ZERO &ZERO &ITOA_4_IS_ZERO ; lblsq ZERO ZERO ITOA_4_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_24_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_24_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_24_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_4_LOOP
:JZ_24_END &ZERO &ZERO &ITOA_4_LOOP ; lblsq ZERO ZERO ITOA_4_LOOP
# MSQ_END 1 lbljmp
; label ITOA_4_IS_ZERO
# MSQ_START 1 set itoa_4_retBuf 30
# MSQ_START 2 zero itoa_4_retBuf
:ITOA_4_IS_ZERO :itoa_4_retBuf_addrRef_0 &itoa_4_retBuf :itoa_4_retBuf_addrRef_1 &itoa_4_retBuf ?+8 ; relsq itoa_4_retBuf itoa_4_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_4_retBuf 30
:itoa_4_retBuf_addrRef_2 &itoa_4_retBuf &CONST_-30 ?+8 ; relsq itoa_4_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_4_retLength 1
# MSQ_START 2 dec itoa_4_retLength -1
:itoa_4_retLength_addrRef_0 &itoa_4_retLength &CONST_-1 ?+8 ; relsq itoa_4_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_4_END
&ZERO &ZERO &ITOA_4_END ; lblsq ZERO ZERO ITOA_4_END
# MSQ_END 1 lbljmp
; label ITOA_4_IS_NEG
# MSQ_START 1 inc itoa_4_isNeg 1
# MSQ_START 2 dec itoa_4_isNeg -1
:ITOA_4_IS_NEG &itoa_4_isNeg &CONST_-1 ?+8 ; relsq itoa_4_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_4_retBuf 2d
# MSQ_START 2 zero itoa_4_retBuf
:itoa_4_retBuf_addrRef_3 &itoa_4_retBuf :itoa_4_retBuf_addrRef_4 &itoa_4_retBuf ?+8 ; relsq itoa_4_retBuf itoa_4_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_4_retBuf 2d
:itoa_4_retBuf_addrRef_5 &itoa_4_retBuf &CONST_-2D ?+8 ; relsq itoa_4_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_4_retBuf 8
&itoa_4_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_0 CONST_-8 1
&itoa_4_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_1 CONST_-8 1
&itoa_4_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_2 CONST_-8 1
&itoa_4_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_3 CONST_-8 1
&itoa_4_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_4 CONST_-8 1
&itoa_4_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_5 CONST_-8 1
&itoa_4_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_6 CONST_-8 1
&itoa_4_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_7 CONST_-8 1
&itoa_4_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_8 CONST_-8 1
&itoa_4_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_4_retLength 1
# MSQ_START 2 dec itoa_4_retLength -1
:itoa_4_retLength_addrRef_1 &itoa_4_retLength &CONST_-1 ?+8 ; relsq itoa_4_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_4_LOOP
&ZERO &ZERO &ITOA_4_LOOP ; lblsq ZERO ZERO ITOA_4_LOOP
# MSQ_END 1 lbljmp
; label ITOA_4_SUBBERS
:ITOA_4_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_4_LOOP
# MSQ_START 1 jz ITOA_4_SUBBERS ITOA_4_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_4_SUBBERS
:ITOA_4_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_4_SUBBERS_addrRef_0 &ITOA_4_SUBBERS ?+8 ; relsq tmp2 ITOA_4_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_25_END
&tmp2 &CONST_-1 &JZ_25_END ; lblsq tmp2 CONST_-1 JZ_25_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_4_SUBBERS 1 JZ_25_REVERT_A
:ITOA_4_SUBBERS_addrRef_1 &ITOA_4_SUBBERS &CONST_-1 &JZ_25_REVERT_A ; lblsq ITOA_4_SUBBERS CONST_-1 JZ_25_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_4_SUBBERS 1
:ITOA_4_SUBBERS_addrRef_2 &ITOA_4_SUBBERS &CONST_1 ?+8 ; relsq ITOA_4_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_4_REVERT_SUBBERS
&ZERO &ZERO &ITOA_4_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_4_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_25_REVERT_A
# MSQ_START 2 dec ITOA_4_SUBBERS 1
:JZ_25_REVERT_A :ITOA_4_SUBBERS_addrRef_3 &ITOA_4_SUBBERS &CONST_1 ?+8 ; relsq ITOA_4_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_25_END
# MSQ_END 1 jz
; var itoa_4_digitVal 0
# MSQ_START 1 zero itoa_4_digitVal
# MSQ_START 2 sub itoa_4_digitVal itoa_4_digitVal
:JZ_25_END &itoa_4_digitVal &itoa_4_digitVal ?+8 ; relsq itoa_4_digitVal itoa_4_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_4_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_4_SUBBERS ITOA_4_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_4_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_4_SUBBERS_addrRef_4 &ITOA_4_SUBBERS &ITOA_4_HANDLE_DIGIT ; lblsq tmp2 ITOA_4_SUBBERS ITOA_4_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_4_digitVal 1
# MSQ_START 2 dec itoa_4_digitVal -1
&itoa_4_digitVal &CONST_-1 ?+8 ; relsq itoa_4_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_4_SUBBERS
&tmp :ITOA_4_SUBBERS_addrRef_5 &ITOA_4_SUBBERS ?+8 ; relsq tmp ITOA_4_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_4_SUBTRACT_A
&ZERO &ZERO &ITOA_4_SUBTRACT_A ; lblsq ZERO ZERO ITOA_4_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_4_HANDLE_DIGIT
# MSQ_START 1 jz itoa_4_noDigits ITOA_4_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_4_noDigits
:ITOA_4_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_4_noDigits ?+8 ; relsq tmp2 itoa_4_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_26_END
&tmp2 &CONST_-1 &JZ_26_END ; lblsq tmp2 CONST_-1 JZ_26_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_4_noDigits 1 JZ_26_REVERT_A
&itoa_4_noDigits &CONST_-1 &JZ_26_REVERT_A ; lblsq itoa_4_noDigits CONST_-1 JZ_26_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_4_noDigits 1
&itoa_4_noDigits &CONST_1 ?+8 ; relsq itoa_4_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_4_PRINT_DIGIT
&ZERO &ZERO &ITOA_4_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_4_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_26_REVERT_A
# MSQ_START 2 dec itoa_4_noDigits 1
:JZ_26_REVERT_A &itoa_4_noDigits &CONST_1 ?+8 ; relsq itoa_4_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_26_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_4_digitVal ITOA_4_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_4_digitVal
:JZ_26_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_4_digitVal ?+8 ; relsq tmp2 itoa_4_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_27_END
&tmp2 &CONST_-1 &JZ_27_END ; lblsq tmp2 CONST_-1 JZ_27_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_4_digitVal 1 JZ_27_REVERT_A
&itoa_4_digitVal &CONST_-1 &JZ_27_REVERT_A ; lblsq itoa_4_digitVal CONST_-1 JZ_27_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_4_digitVal 1
&itoa_4_digitVal &CONST_1 ?+8 ; relsq itoa_4_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_4_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_4_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_4_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_27_REVERT_A
# MSQ_START 2 dec itoa_4_digitVal 1
:JZ_27_REVERT_A &itoa_4_digitVal &CONST_1 ?+8 ; relsq itoa_4_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_27_END
# MSQ_END 1 jz
; label ITOA_4_PRINT_DIGIT
# MSQ_START 1 zero itoa_4_noDigits
# MSQ_START 2 sub itoa_4_noDigits itoa_4_noDigits
:JZ_27_END :ITOA_4_PRINT_DIGIT &itoa_4_noDigits &itoa_4_noDigits ?+8 ; relsq itoa_4_noDigits itoa_4_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_4_retBuf 30
# MSQ_START 2 zero itoa_4_retBuf
:itoa_4_retBuf_addrRef_6 &itoa_4_retBuf :itoa_4_retBuf_addrRef_7 &itoa_4_retBuf ?+8 ; relsq itoa_4_retBuf itoa_4_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_4_retBuf 30
:itoa_4_retBuf_addrRef_8 &itoa_4_retBuf &CONST_-30 ?+8 ; relsq itoa_4_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_4_retBuf itoa_4_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_4_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_4_digitVal ?+8 ; relsq tmp2 itoa_4_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_4_retBuf tmp2
:itoa_4_retBuf_addrRef_9 &itoa_4_retBuf &tmp2 ?+8 ; relsq itoa_4_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_4_retBuf 8
&itoa_4_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_0 CONST_-8 1
&itoa_4_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_1 CONST_-8 1
&itoa_4_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_2 CONST_-8 1
&itoa_4_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_3 CONST_-8 1
&itoa_4_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_4 CONST_-8 1
&itoa_4_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_5 CONST_-8 1
&itoa_4_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_6 CONST_-8 1
&itoa_4_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_7 CONST_-8 1
&itoa_4_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_8 CONST_-8 1
&itoa_4_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_4_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_4_retLength 1
# MSQ_START 2 dec itoa_4_retLength -1
:itoa_4_retLength_addrRef_2 &itoa_4_retLength &CONST_-1 ?+8 ; relsq itoa_4_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_4_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_4_SUBBERS 8
:ITOA_4_DONT_PRINT_DIGIT &ITOA_4_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_4_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_4_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_4_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_4_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_4_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_4_LOOP
&ZERO &ZERO &ITOA_4_LOOP ; lblsq ZERO ZERO ITOA_4_LOOP
# MSQ_END 1 lbljmp
; label ITOA_4_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_4_SUBBERS 98
:ITOA_4_REVERT_SUBBERS &ITOA_4_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_0 CONST_98 1
&ITOA_4_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_1 CONST_98 1
&ITOA_4_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_2 CONST_98 1
&ITOA_4_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_3 CONST_98 1
&ITOA_4_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_4 CONST_98 1
&ITOA_4_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_4_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_4_END
# MSQ_END 0 itoa
; addr stubSym_step3 0
# MSQ_START 0 strcat stubSym_step3 stubPrefix_step3 nextId_str_step3 tmp tmp2 tmp3
; var strcat_1_aLength 0
; var strcat_1_retLength 0
# MSQ_START 1 strlen strcat_1_retLength nextId_str_step3 tmp
# MSQ_START 2 incaddr nextId_str_step3 8
:ITOA_4_END &nextId_str_step3_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_-8 1
&nextId_str_step3_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_-8 1
&nextId_str_step3_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_-8 1
&nextId_str_step3_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_-8 1
&nextId_str_step3_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_-8 1
&nextId_str_step3_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_-8 1
&nextId_str_step3_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_-8 1
&nextId_str_step3_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_-8 1
&nextId_str_step3_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_-8 1
&nextId_str_step3_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_-8 1
&nextId_str_step3_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_-8 1
&nextId_str_step3_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_-8 1
&nextId_str_step3_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_1_retLength nextId_str_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step3_addrRef_9 &nextId_str_step3 ?+8 ; relsq tmp nextId_str_step3 1
&strcat_1_retLength &strcat_1_retLength ?+8 ; relsq strcat_1_retLength strcat_1_retLength 1
&strcat_1_retLength &tmp ?+8 ; relsq strcat_1_retLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr nextId_str_step3 8
&nextId_str_step3_addrRef_0 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_8 1
&nextId_str_step3_addrRef_1 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_8 1
&nextId_str_step3_addrRef_2 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_8 1
&nextId_str_step3_addrRef_3 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_8 1
&nextId_str_step3_addrRef_4 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_8 1
&nextId_str_step3_addrRef_5 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_8 1
&nextId_str_step3_addrRef_6 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_8 1
&nextId_str_step3_addrRef_7 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_8 1
&nextId_str_step3_addrRef_8 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_8 1
&nextId_str_step3_addrRef_9 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_8 1
&nextId_str_step3_addrRef_10 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_8 1
&nextId_str_step3_addrRef_11 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_8 1
&nextId_str_step3_addrRef_12 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 strlen strcat_1_aLength stubPrefix_step3 tmp
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_1_aLength stubPrefix_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step3_addrRef_21 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
&strcat_1_aLength &strcat_1_aLength ?+8 ; relsq strcat_1_aLength strcat_1_aLength 1
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_8 1
&stubPrefix_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_8 1
&stubPrefix_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_8 1
&stubPrefix_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_8 1
&stubPrefix_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_8 1
&stubPrefix_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_8 1
&stubPrefix_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_8 1
&stubPrefix_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_8 1
&stubPrefix_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_8 1
&stubPrefix_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_8 1
&stubPrefix_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_8 1
&stubPrefix_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_8 1
&stubPrefix_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_8 1
&stubPrefix_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_8 1
&stubPrefix_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_8 1
&stubPrefix_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_8 1
&stubPrefix_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_8 1
&stubPrefix_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_8 1
&stubPrefix_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_8 1
&stubPrefix_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_8 1
&stubPrefix_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_8 1
&stubPrefix_step3_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_8 1
&stubPrefix_step3_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_8 1
&stubPrefix_step3_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_8 1
&stubPrefix_step3_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 add strcat_1_retLength strcat_1_aLength tmp
# MSQ_START 2 movneg tmp strcat_1_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_1_aLength ?+8 ; relsq tmp strcat_1_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_1_retLength tmp
&strcat_1_retLength &tmp ?+8 ; relsq strcat_1_retLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 malloc_const tmp 18 tmp2
# MSQ_START 2 malloc tmp CONST_18 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &CONST_18 ?+8 ; relsq tmp2 CONST_18 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr stubSym_step3 tmp tmp2 tmp3
# MSQ_START 2 mov tmp2 stubSym_step3_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &stubSym_step3_addrRef_0 ?+8 ; relsq tmp3 stubSym_step3_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
&stubSym_step3_addrRef_0 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_0 tmp2 1
&stubSym_step3_addrRef_1 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_1 tmp2 1
&stubSym_step3_addrRef_2 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_2 tmp2 1
&stubSym_step3_addrRef_3 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_3 tmp2 1
&stubSym_step3_addrRef_4 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_4 tmp2 1
&stubSym_step3_addrRef_5 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_5 tmp2 1
&stubSym_step3_addrRef_6 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_6 tmp2 1
&stubSym_step3_addrRef_7 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_7 tmp2 1
&stubSym_step3_addrRef_8 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_8 tmp2 1
&stubSym_step3_addrRef_9 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_9 tmp2 1
&stubSym_step3_addrRef_10 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_10 tmp2 1
&stubSym_step3_addrRef_11 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_11 tmp2 1
&stubSym_step3_addrRef_12 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_12 tmp2 1
&stubSym_step3_addrRef_13 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_13 tmp2 1
&stubSym_step3_addrRef_14 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_14 tmp2 1
&stubSym_step3_addrRef_15 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_15 tmp2 1
&stubSym_step3_addrRef_16 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_16 tmp2 1
&stubSym_step3_addrRef_17 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_17 tmp2 1
&stubSym_step3_addrRef_18 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_18 tmp2 1
&stubSym_step3_addrRef_19 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_19 tmp2 1
&stubSym_step3_addrRef_20 &tmp2 ?+8 ; relsq stubSym_step3_addrRef_20 tmp2 1
# MSQ_END 1 setaddr
# MSQ_START 1 mov tmp strcat_1_retLength tmp2
# MSQ_START 2 movneg tmp2 strcat_1_retLength
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcat_1_retLength ?+8 ; relsq tmp2 strcat_1_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 mul_8 tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 alloc_str stubSym_step3 tmp tmp2
# MSQ_START 2 malloc stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
:stubSym_step3_addrRef_0 &stubSym_step3 :stubSym_step3_addrRef_1 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
:stubSym_step3_addrRef_2 &stubSym_step3 &tmp2 ?+8 ; relsq stubSym_step3 tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_START 2 incaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_-8 1
&stubSym_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_-8 1
&stubSym_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_-8 1
&stubSym_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_-8 1
&stubSym_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_-8 1
&stubSym_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_-8 1
&stubSym_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_-8 1
&stubSym_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_-8 1
&stubSym_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_-8 1
&stubSym_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_-8 1
&stubSym_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_-8 1
&stubSym_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_-8 1
&stubSym_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_-8 1
&stubSym_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_-8 1
&stubSym_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_-8 1
&stubSym_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_-8 1
&stubSym_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_-8 1
&stubSym_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_-8 1
&stubSym_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_-8 1
&stubSym_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_-8 1
&stubSym_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero stubSym_step3
:stubSym_step3_addrRef_3 &stubSym_step3 :stubSym_step3_addrRef_4 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_-8 1
&stubSym_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_-8 1
&stubSym_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_-8 1
&stubSym_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_-8 1
&stubSym_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_-8 1
&stubSym_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_-8 1
&stubSym_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_-8 1
&stubSym_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_-8 1
&stubSym_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_-8 1
&stubSym_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_-8 1
&stubSym_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_-8 1
&stubSym_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_-8 1
&stubSym_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_-8 1
&stubSym_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_-8 1
&stubSym_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_-8 1
&stubSym_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_-8 1
&stubSym_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_-8 1
&stubSym_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_-8 1
&stubSym_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_-8 1
&stubSym_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_-8 1
&stubSym_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:stubSym_step3_addrRef_5 &stubSym_step3 :stubSym_step3_addrRef_6 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
:stubSym_step3_addrRef_7 &stubSym_step3 &tmp2 ?+8 ; relsq stubSym_step3 tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step3 10
&stubSym_step3_addrRef_0 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_10 1
&stubSym_step3_addrRef_1 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_10 1
&stubSym_step3_addrRef_2 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_10 1
&stubSym_step3_addrRef_3 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_10 1
&stubSym_step3_addrRef_4 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_10 1
&stubSym_step3_addrRef_5 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_10 1
&stubSym_step3_addrRef_6 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_10 1
&stubSym_step3_addrRef_7 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_10 1
&stubSym_step3_addrRef_8 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_10 1
&stubSym_step3_addrRef_9 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_10 1
&stubSym_step3_addrRef_10 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_10 1
&stubSym_step3_addrRef_11 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_10 1
&stubSym_step3_addrRef_12 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_10 1
&stubSym_step3_addrRef_13 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_10 1
&stubSym_step3_addrRef_14 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_10 1
&stubSym_step3_addrRef_15 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_10 1
&stubSym_step3_addrRef_16 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_10 1
&stubSym_step3_addrRef_17 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_10 1
&stubSym_step3_addrRef_18 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_10 1
&stubSym_step3_addrRef_19 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_10 1
&stubSym_step3_addrRef_20 &CONST_10 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str
# MSQ_START 1 strcpy stubSym_step3 stubPrefix_step3 tmp tmp2
; addr strcpy_4_strA 0
# MSQ_START 2 setaddr strcpy_4_strA stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_4_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_4_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step3_addrRef_8 &stubSym_step3 ?+8 ; relsq tmp stubSym_step3 1
&strcpy_4_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_4_strA_addrRef_0 tmp 1
&strcpy_4_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_4_strA_addrRef_1 tmp 1
&strcpy_4_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_4_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_4_strB 0
# MSQ_START 2 setaddr strcpy_4_strB stubPrefix_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_4_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_4_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step3_addrRef_22 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
&strcpy_4_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_4_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_-8 1
&stubSym_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_-8 1
&stubSym_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_-8 1
&stubSym_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_-8 1
&stubSym_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_-8 1
&stubSym_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_-8 1
&stubSym_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_-8 1
&stubSym_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_-8 1
&stubSym_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_-8 1
&stubSym_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_-8 1
&stubSym_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_-8 1
&stubSym_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_-8 1
&stubSym_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_-8 1
&stubSym_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_-8 1
&stubSym_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_-8 1
&stubSym_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_-8 1
&stubSym_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_-8 1
&stubSym_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_-8 1
&stubSym_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_-8 1
&stubSym_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_-8 1
&stubSym_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_-8 1
&stubPrefix_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_-8 1
&stubPrefix_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_-8 1
&stubPrefix_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_-8 1
&stubPrefix_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_-8 1
&stubPrefix_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_-8 1
&stubPrefix_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_-8 1
&stubPrefix_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_-8 1
&stubPrefix_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_-8 1
&stubPrefix_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_-8 1
&stubPrefix_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_-8 1
&stubPrefix_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_-8 1
&stubPrefix_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_-8 1
&stubPrefix_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_-8 1
&stubPrefix_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_-8 1
&stubPrefix_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_-8 1
&stubPrefix_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_-8 1
&stubPrefix_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_-8 1
&stubPrefix_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_-8 1
&stubPrefix_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_-8 1
&stubPrefix_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_-8 1
&stubPrefix_step3_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_-8 1
&stubPrefix_step3_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_-8 1
&stubPrefix_step3_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_-8 1
&stubPrefix_step3_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step3 stubPrefix_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step3_addrRef_23 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
:stubSym_step3_addrRef_9 &stubSym_step3 :stubSym_step3_addrRef_10 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
:stubSym_step3_addrRef_11 &stubSym_step3 &tmp ?+8 ; relsq stubSym_step3 tmp 1
# MSQ_END 2 mov
; var strcpy_4_strLen 0
# MSQ_START 2 mov strcpy_4_strLen stubPrefix_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step3_addrRef_24 &stubPrefix_step3 ?+8 ; relsq tmp stubPrefix_step3 1
&strcpy_4_strLen &strcpy_4_strLen ?+8 ; relsq strcpy_4_strLen strcpy_4_strLen 1
&strcpy_4_strLen &tmp ?+8 ; relsq strcpy_4_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_8 1
&stubSym_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_8 1
&stubSym_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_8 1
&stubSym_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_8 1
&stubSym_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_8 1
&stubSym_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_8 1
&stubSym_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_8 1
&stubSym_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_8 1
&stubSym_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_8 1
&stubSym_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_8 1
&stubSym_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_8 1
&stubSym_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_8 1
&stubSym_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_8 1
&stubSym_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_8 1
&stubSym_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_8 1
&stubSym_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_8 1
&stubSym_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_8 1
&stubSym_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_8 1
&stubSym_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_8 1
&stubSym_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_8 1
&stubSym_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr stubPrefix_step3 8
&stubPrefix_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_0 CONST_8 1
&stubPrefix_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_1 CONST_8 1
&stubPrefix_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_2 CONST_8 1
&stubPrefix_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_3 CONST_8 1
&stubPrefix_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_4 CONST_8 1
&stubPrefix_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_5 CONST_8 1
&stubPrefix_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_6 CONST_8 1
&stubPrefix_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_7 CONST_8 1
&stubPrefix_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_8 CONST_8 1
&stubPrefix_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_9 CONST_8 1
&stubPrefix_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_10 CONST_8 1
&stubPrefix_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_11 CONST_8 1
&stubPrefix_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_12 CONST_8 1
&stubPrefix_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_13 CONST_8 1
&stubPrefix_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_14 CONST_8 1
&stubPrefix_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_15 CONST_8 1
&stubPrefix_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_16 CONST_8 1
&stubPrefix_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_17 CONST_8 1
&stubPrefix_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_18 CONST_8 1
&stubPrefix_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_19 CONST_8 1
&stubPrefix_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_20 CONST_8 1
&stubPrefix_step3_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_21 CONST_8 1
&stubPrefix_step3_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_22 CONST_8 1
&stubPrefix_step3_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_23 CONST_8 1
&stubPrefix_step3_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step3_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_4_LOOP
# MSQ_START 2 decleq strcpy_4_strLen 0 STRCPY_4_END
:STRCPY_4_LOOP &strcpy_4_strLen &CONST_0 &STRCPY_4_END ; lblsq strcpy_4_strLen CONST_0 STRCPY_4_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_4_strLen 1
&strcpy_4_strLen &CONST_1 ?+8 ; relsq strcpy_4_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_4_strA strcpy_4_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_4_strB_addrRef_0 &strcpy_4_strB ?+8 ; relsq tmp strcpy_4_strB 1
:strcpy_4_strA_addrRef_0 &strcpy_4_strA :strcpy_4_strA_addrRef_1 &strcpy_4_strA ?+8 ; relsq strcpy_4_strA strcpy_4_strA 1
:strcpy_4_strA_addrRef_2 &strcpy_4_strA &tmp ?+8 ; relsq strcpy_4_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_4_strA 8
&strcpy_4_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_4_strA_addrRef_0 CONST_-8 1
&strcpy_4_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_4_strA_addrRef_1 CONST_-8 1
&strcpy_4_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_4_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_4_strB 8
&strcpy_4_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_4_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_4_LOOP
&ZERO &ZERO &STRCPY_4_LOOP ; lblsq ZERO ZERO STRCPY_4_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_4_END
# MSQ_END 1 strcpy
# MSQ_START 1 mul_8 strcat_1_aLength tmp
# MSQ_START 2 movneg tmp strcat_1_aLength
:STRCPY_4_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_1_aLength ?+8 ; relsq tmp strcat_1_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_1_aLength tmp
&strcat_1_aLength &tmp ?+8 ; relsq strcat_1_aLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 add stubSym_step3 strcat_1_aLength tmp
# MSQ_START 2 movneg tmp strcat_1_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_1_aLength ?+8 ; relsq tmp strcat_1_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub stubSym_step3 tmp
:stubSym_step3_addrRef_12 &stubSym_step3 &tmp ?+8 ; relsq stubSym_step3 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 strcpy stubSym_step3 nextId_str_step3 tmp tmp2
; addr strcpy_5_strA 0
# MSQ_START 2 setaddr strcpy_5_strA stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_5_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_5_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step3_addrRef_13 &stubSym_step3 ?+8 ; relsq tmp stubSym_step3 1
&strcpy_5_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_5_strA_addrRef_0 tmp 1
&strcpy_5_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_5_strA_addrRef_1 tmp 1
&strcpy_5_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_5_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_5_strB 0
# MSQ_START 2 setaddr strcpy_5_strB nextId_str_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_5_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_5_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :nextId_str_step3_addrRef_10 &nextId_str_step3 ?+8 ; relsq tmp nextId_str_step3 1
&strcpy_5_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_5_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_-8 1
&stubSym_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_-8 1
&stubSym_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_-8 1
&stubSym_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_-8 1
&stubSym_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_-8 1
&stubSym_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_-8 1
&stubSym_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_-8 1
&stubSym_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_-8 1
&stubSym_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_-8 1
&stubSym_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_-8 1
&stubSym_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_-8 1
&stubSym_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_-8 1
&stubSym_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_-8 1
&stubSym_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_-8 1
&stubSym_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_-8 1
&stubSym_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_-8 1
&stubSym_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_-8 1
&stubSym_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_-8 1
&stubSym_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_-8 1
&stubSym_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_-8 1
&stubSym_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr nextId_str_step3 8
&nextId_str_step3_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_-8 1
&nextId_str_step3_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_-8 1
&nextId_str_step3_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_-8 1
&nextId_str_step3_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_-8 1
&nextId_str_step3_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_-8 1
&nextId_str_step3_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_-8 1
&nextId_str_step3_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_-8 1
&nextId_str_step3_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_-8 1
&nextId_str_step3_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_-8 1
&nextId_str_step3_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_-8 1
&nextId_str_step3_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_-8 1
&nextId_str_step3_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_-8 1
&nextId_str_step3_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step3 nextId_str_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step3_addrRef_11 &nextId_str_step3 ?+8 ; relsq tmp nextId_str_step3 1
:stubSym_step3_addrRef_14 &stubSym_step3 :stubSym_step3_addrRef_15 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
:stubSym_step3_addrRef_16 &stubSym_step3 &tmp ?+8 ; relsq stubSym_step3 tmp 1
# MSQ_END 2 mov
; var strcpy_5_strLen 0
# MSQ_START 2 mov strcpy_5_strLen nextId_str_step3 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step3_addrRef_12 &nextId_str_step3 ?+8 ; relsq tmp nextId_str_step3 1
&strcpy_5_strLen &strcpy_5_strLen ?+8 ; relsq strcpy_5_strLen strcpy_5_strLen 1
&strcpy_5_strLen &tmp ?+8 ; relsq strcpy_5_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_8 1
&stubSym_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_8 1
&stubSym_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_8 1
&stubSym_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_8 1
&stubSym_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_8 1
&stubSym_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_8 1
&stubSym_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_8 1
&stubSym_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_8 1
&stubSym_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_8 1
&stubSym_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_8 1
&stubSym_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_8 1
&stubSym_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_8 1
&stubSym_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_8 1
&stubSym_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_8 1
&stubSym_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_8 1
&stubSym_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_8 1
&stubSym_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_8 1
&stubSym_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_8 1
&stubSym_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_8 1
&stubSym_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_8 1
&stubSym_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr nextId_str_step3 8
&nextId_str_step3_addrRef_0 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_0 CONST_8 1
&nextId_str_step3_addrRef_1 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_1 CONST_8 1
&nextId_str_step3_addrRef_2 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_2 CONST_8 1
&nextId_str_step3_addrRef_3 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_3 CONST_8 1
&nextId_str_step3_addrRef_4 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_4 CONST_8 1
&nextId_str_step3_addrRef_5 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_5 CONST_8 1
&nextId_str_step3_addrRef_6 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_6 CONST_8 1
&nextId_str_step3_addrRef_7 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_7 CONST_8 1
&nextId_str_step3_addrRef_8 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_8 CONST_8 1
&nextId_str_step3_addrRef_9 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_9 CONST_8 1
&nextId_str_step3_addrRef_10 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_10 CONST_8 1
&nextId_str_step3_addrRef_11 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_11 CONST_8 1
&nextId_str_step3_addrRef_12 &CONST_8 ?+8 ; relsq nextId_str_step3_addrRef_12 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_5_LOOP
# MSQ_START 2 decleq strcpy_5_strLen 0 STRCPY_5_END
:STRCPY_5_LOOP &strcpy_5_strLen &CONST_0 &STRCPY_5_END ; lblsq strcpy_5_strLen CONST_0 STRCPY_5_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_5_strLen 1
&strcpy_5_strLen &CONST_1 ?+8 ; relsq strcpy_5_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_5_strA strcpy_5_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_5_strB_addrRef_0 &strcpy_5_strB ?+8 ; relsq tmp strcpy_5_strB 1
:strcpy_5_strA_addrRef_0 &strcpy_5_strA :strcpy_5_strA_addrRef_1 &strcpy_5_strA ?+8 ; relsq strcpy_5_strA strcpy_5_strA 1
:strcpy_5_strA_addrRef_2 &strcpy_5_strA &tmp ?+8 ; relsq strcpy_5_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_5_strA 8
&strcpy_5_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_5_strA_addrRef_0 CONST_-8 1
&strcpy_5_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_5_strA_addrRef_1 CONST_-8 1
&strcpy_5_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_5_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_5_strB 8
&strcpy_5_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_5_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_5_LOOP
&ZERO &ZERO &STRCPY_5_LOOP ; lblsq ZERO ZERO STRCPY_5_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_5_END
# MSQ_END 1 strcpy
# MSQ_START 1 sub stubSym_step3 strcat_1_aLength
:STRCPY_5_END :stubSym_step3_addrRef_17 &stubSym_step3 &strcat_1_aLength ?+8 ; relsq stubSym_step3 strcat_1_aLength 1
# MSQ_END 1 sub
# MSQ_START 1 incaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_-8 1
&stubSym_step3_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_-8 1
&stubSym_step3_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_-8 1
&stubSym_step3_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_-8 1
&stubSym_step3_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_-8 1
&stubSym_step3_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_-8 1
&stubSym_step3_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_-8 1
&stubSym_step3_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_-8 1
&stubSym_step3_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_-8 1
&stubSym_step3_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_-8 1
&stubSym_step3_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_-8 1
&stubSym_step3_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_-8 1
&stubSym_step3_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_-8 1
&stubSym_step3_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_-8 1
&stubSym_step3_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_-8 1
&stubSym_step3_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_-8 1
&stubSym_step3_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_-8 1
&stubSym_step3_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_-8 1
&stubSym_step3_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_-8 1
&stubSym_step3_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_-8 1
&stubSym_step3_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov stubSym_step3 strcat_1_retLength tmp
# MSQ_START 2 movneg tmp strcat_1_retLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_1_retLength ?+8 ; relsq tmp strcat_1_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg stubSym_step3 tmp
:stubSym_step3_addrRef_18 &stubSym_step3 :stubSym_step3_addrRef_19 &stubSym_step3 ?+8 ; relsq stubSym_step3 stubSym_step3 1
:stubSym_step3_addrRef_20 &stubSym_step3 &tmp ?+8 ; relsq stubSym_step3 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr stubSym_step3 8
&stubSym_step3_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_0 CONST_8 1
&stubSym_step3_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_1 CONST_8 1
&stubSym_step3_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_2 CONST_8 1
&stubSym_step3_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_3 CONST_8 1
&stubSym_step3_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_4 CONST_8 1
&stubSym_step3_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_5 CONST_8 1
&stubSym_step3_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_6 CONST_8 1
&stubSym_step3_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_7 CONST_8 1
&stubSym_step3_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_8 CONST_8 1
&stubSym_step3_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_9 CONST_8 1
&stubSym_step3_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_10 CONST_8 1
&stubSym_step3_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_11 CONST_8 1
&stubSym_step3_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_12 CONST_8 1
&stubSym_step3_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_13 CONST_8 1
&stubSym_step3_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_14 CONST_8 1
&stubSym_step3_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_15 CONST_8 1
&stubSym_step3_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_16 CONST_8 1
&stubSym_step3_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_17 CONST_8 1
&stubSym_step3_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_18 CONST_8 1
&stubSym_step3_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_19 CONST_8 1
&stubSym_step3_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step3_addrRef_20 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 strcat

# Py: Line("relsq", ...)
# MSQ_START 0 memcpy_const curLinePass2_step3 RELSQ 18 tmp tmp2
# MSQ_START 1 memcpy curLinePass2_step3 RELSQ CONST_18 tmp tmp2
; addr memcpy_3_dst 0
; addr memcpy_3_src 0
# MSQ_START 2 copyaddr memcpy_3_dst curLinePass2_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_3_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_3_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLinePass2_step3_addrRef_0 ?+8 ; relsq tmp curLinePass2_step3_addrRef_0 1
&memcpy_3_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_3_dst_addrRef_0 tmp 1
&memcpy_3_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_3_dst_addrRef_1 tmp 1
&memcpy_3_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_3_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_3_src RELSQ tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_3_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_3_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &RELSQ_addrRef_0 ?+8 ; relsq tmp RELSQ_addrRef_0 1
&memcpy_3_src_addrRef_0 &tmp ?+8 ; relsq memcpy_3_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_3_numLeft 0
# MSQ_START 2 mov memcpy_3_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_3_numLeft &memcpy_3_numLeft ?+8 ; relsq memcpy_3_numLeft memcpy_3_numLeft 1
&memcpy_3_numLeft &tmp ?+8 ; relsq memcpy_3_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_3_LOOP
# MSQ_START 2 decleq memcpy_3_numLeft 0 MEMCPY_3_END
:MEMCPY_3_LOOP &memcpy_3_numLeft &CONST_0 &MEMCPY_3_END ; lblsq memcpy_3_numLeft CONST_0 MEMCPY_3_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_3_numLeft 8
&memcpy_3_numLeft &CONST_8 ?+8 ; relsq memcpy_3_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_3_dst memcpy_3_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_3_src_addrRef_0 &memcpy_3_src ?+8 ; relsq tmp memcpy_3_src 1
:memcpy_3_dst_addrRef_0 &memcpy_3_dst :memcpy_3_dst_addrRef_1 &memcpy_3_dst ?+8 ; relsq memcpy_3_dst memcpy_3_dst 1
:memcpy_3_dst_addrRef_2 &memcpy_3_dst &tmp ?+8 ; relsq memcpy_3_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_3_dst 8
&memcpy_3_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_3_dst_addrRef_0 CONST_-8 1
&memcpy_3_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_3_dst_addrRef_1 CONST_-8 1
&memcpy_3_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_3_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_3_src 8
&memcpy_3_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_3_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_3_LOOP
&ZERO &ZERO &MEMCPY_3_LOOP ; lblsq ZERO ZERO MEMCPY_3_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_3_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 incaddr curLinePass2_step3 18
:MEMCPY_3_END &curLinePass2_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-18 1
&curLinePass2_step3_addrRef_1 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-18 1
&curLinePass2_step3_addrRef_2 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-18 1
&curLinePass2_step3_addrRef_3 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-18 1
&curLinePass2_step3_addrRef_4 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-18 1
&curLinePass2_step3_addrRef_5 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-18 1
&curLinePass2_step3_addrRef_6 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-18 1
&curLinePass2_step3_addrRef_7 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-18 1
&curLinePass2_step3_addrRef_8 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-18 1
&curLinePass2_step3_addrRef_9 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-18 1
&curLinePass2_step3_addrRef_10 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-18 1
&curLinePass2_step3_addrRef_11 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-18 1
&curLinePass2_step3_addrRef_12 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-18 1
&curLinePass2_step3_addrRef_13 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-18 1
&curLinePass2_step3_addrRef_14 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-18 1
&curLinePass2_step3_addrRef_15 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-18 1
&curLinePass2_step3_addrRef_16 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-18 1
&curLinePass2_step3_addrRef_17 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-18 1
&curLinePass2_step3_addrRef_18 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-18 1
&curLinePass2_step3_addrRef_19 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-18 1
&curLinePass2_step3_addrRef_20 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-18 1
&curLinePass2_step3_addrRef_21 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-18 1
&curLinePass2_step3_addrRef_22 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-18 1
&curLinePass2_step3_addrRef_23 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-18 1
&curLinePass2_step3_addrRef_24 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_array curLinePass2_step3 18 3 tmp
# MSQ_START 1 malloc_const curLinePass2_step3 48 tmp
# MSQ_START 2 malloc curLinePass2_step3 CONST_48 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLinePass2_step3_addrRef_0 0000000000700000 :curLinePass2_step3_addrRef_1 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
:curLinePass2_step3_addrRef_2 0000000000700000 &tmp ?+8 ; relsq curLinePass2_step3 tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_48 ?+8 ; relsq tmp CONST_48 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLinePass2_step3
# MSQ_START 2 sub curLinePass2_step3 curLinePass2_step3
:curLinePass2_step3_addrRef_3 0000000000700000 :curLinePass2_step3_addrRef_4 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLinePass2_step3 CONST_18 tmp
# MSQ_START 2 movneg tmp CONST_18
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLinePass2_step3 tmp
:curLinePass2_step3_addrRef_5 0000000000700000 :curLinePass2_step3_addrRef_6 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
:curLinePass2_step3_addrRef_7 0000000000700000 &tmp ?+8 ; relsq curLinePass2_step3 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLinePass2_step3 CONST_48 tmp
# MSQ_START 2 movneg tmp CONST_48
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_48 ?+8 ; relsq tmp CONST_48 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLinePass2_step3 tmp
:curLinePass2_step3_addrRef_8 0000000000700000 :curLinePass2_step3_addrRef_9 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
:curLinePass2_step3_addrRef_10 0000000000700000 &tmp ?+8 ; relsq curLinePass2_step3 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLinePass2_step3 18
&curLinePass2_step3_addrRef_0 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_18 1
&curLinePass2_step3_addrRef_1 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_18 1
&curLinePass2_step3_addrRef_2 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_18 1
&curLinePass2_step3_addrRef_3 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_18 1
&curLinePass2_step3_addrRef_4 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_18 1
&curLinePass2_step3_addrRef_5 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_18 1
&curLinePass2_step3_addrRef_6 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_18 1
&curLinePass2_step3_addrRef_7 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_18 1
&curLinePass2_step3_addrRef_8 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_18 1
&curLinePass2_step3_addrRef_9 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_18 1
&curLinePass2_step3_addrRef_10 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_18 1
&curLinePass2_step3_addrRef_11 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_18 1
&curLinePass2_step3_addrRef_12 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_18 1
&curLinePass2_step3_addrRef_13 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_18 1
&curLinePass2_step3_addrRef_14 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_18 1
&curLinePass2_step3_addrRef_15 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_18 1
&curLinePass2_step3_addrRef_16 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_18 1
&curLinePass2_step3_addrRef_17 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_18 1
&curLinePass2_step3_addrRef_18 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_18 1
&curLinePass2_step3_addrRef_19 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_18 1
&curLinePass2_step3_addrRef_20 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_18 1
&curLinePass2_step3_addrRef_21 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_18 1
&curLinePass2_step3_addrRef_22 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_18 1
&curLinePass2_step3_addrRef_23 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_18 1
&curLinePass2_step3_addrRef_24 &CONST_18 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_18 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_array

# Add the three tokens
; addr curTokens_step3 0
# MSQ_START 0 setaddr curTokens_step3 curLinePass2_step3 tmp tmp2
# MSQ_START 1 mov tmp curTokens_step3_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curTokens_step3_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curTokens_step3_addrRef_0 ?+8 ; relsq tmp2 curTokens_step3_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLinePass2_step3
&tmp :curLinePass2_step3_addrRef_11 0000000000700000 ?+8 ; relsq tmp curLinePass2_step3 1
# MSQ_END 1 sub
&curTokens_step3_addrRef_0 &tmp ?+8 ; relsq curTokens_step3_addrRef_0 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 memcpy_const curTokens_step3 stubSym_step3 18 tmp tmp2
# MSQ_START 1 memcpy curTokens_step3 stubSym_step3 CONST_18 tmp tmp2
; addr memcpy_4_dst 0
; addr memcpy_4_src 0
# MSQ_START 2 copyaddr memcpy_4_dst curTokens_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_4_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_4_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curTokens_step3_addrRef_0 ?+8 ; relsq tmp curTokens_step3_addrRef_0 1
&memcpy_4_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_4_dst_addrRef_0 tmp 1
&memcpy_4_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_4_dst_addrRef_1 tmp 1
&memcpy_4_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_4_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_4_src stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_4_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_4_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &stubSym_step3_addrRef_0 ?+8 ; relsq tmp stubSym_step3_addrRef_0 1
&memcpy_4_src_addrRef_0 &tmp ?+8 ; relsq memcpy_4_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_4_numLeft 0
# MSQ_START 2 mov memcpy_4_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_4_numLeft &memcpy_4_numLeft ?+8 ; relsq memcpy_4_numLeft memcpy_4_numLeft 1
&memcpy_4_numLeft &tmp ?+8 ; relsq memcpy_4_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_4_LOOP
# MSQ_START 2 decleq memcpy_4_numLeft 0 MEMCPY_4_END
:MEMCPY_4_LOOP &memcpy_4_numLeft &CONST_0 &MEMCPY_4_END ; lblsq memcpy_4_numLeft CONST_0 MEMCPY_4_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_4_numLeft 8
&memcpy_4_numLeft &CONST_8 ?+8 ; relsq memcpy_4_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_4_dst memcpy_4_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_4_src_addrRef_0 &memcpy_4_src ?+8 ; relsq tmp memcpy_4_src 1
:memcpy_4_dst_addrRef_0 &memcpy_4_dst :memcpy_4_dst_addrRef_1 &memcpy_4_dst ?+8 ; relsq memcpy_4_dst memcpy_4_dst 1
:memcpy_4_dst_addrRef_2 &memcpy_4_dst &tmp ?+8 ; relsq memcpy_4_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_4_dst 8
&memcpy_4_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_4_dst_addrRef_0 CONST_-8 1
&memcpy_4_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_4_dst_addrRef_1 CONST_-8 1
&memcpy_4_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_4_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_4_src 8
&memcpy_4_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_4_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_4_LOOP
&ZERO &ZERO &MEMCPY_4_LOOP ; lblsq ZERO ZERO MEMCPY_4_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_4_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 incaddr curTokens_step3 18
:MEMCPY_4_END &curTokens_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curTokens_step3_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr

# MSQ_START 0 strcmp_const inst_step3 SUBADDR STEP3_TOKEN2_SUBADDR tmp tmp2
; addr strcmp_const_19_a 0
# MSQ_START 1 copyaddr strcmp_const_19_a inst_step3 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_19_a inst_step3_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_19_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_19_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &inst_step3_addrRef_0 ?+8 ; relsq tmp inst_step3_addrRef_0 1
&strcmp_const_19_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_19_a_addrRef_0 tmp 1
&strcmp_const_19_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_19_a_addrRef_1 tmp 1
&strcmp_const_19_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_19_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_19_a 8
&strcmp_const_19_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_19_a_addrRef_0 CONST_-8 1
&strcmp_const_19_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_19_a_addrRef_1 CONST_-8 1
&strcmp_const_19_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_19_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_-8 1
&SUBADDR_addrRef_1 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_-8 1
&SUBADDR_addrRef_2 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_-8 1
&SUBADDR_addrRef_3 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_-8 1
&SUBADDR_addrRef_4 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_-8 1
&SUBADDR_addrRef_5 &CONST_-8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_19_a SUBADDR STRCMP_CONST_19_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_19_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_19_a_addrRef_0 &strcmp_const_19_a ?+8 ; relsq tmp2 strcmp_const_19_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_4 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_19_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_19_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_19_REVERT_ADDR
&tmp &CONST_-1 &JNZ_38_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_38_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_38_END ; lblsq ZERO ZERO JNZ_38_END
; label JNZ_38_REVERT_AND_JUMP
:JNZ_38_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_19_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_19_REVERT_ADDR
; label JNZ_38_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_19_len 0
# MSQ_START 1 mov strcmp_const_19_len strcmp_const_19_a tmp
# MSQ_START 2 movneg tmp strcmp_const_19_a
:JNZ_38_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_19_a_addrRef_1 &strcmp_const_19_a ?+8 ; relsq tmp strcmp_const_19_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_19_len tmp
&strcmp_const_19_len &strcmp_const_19_len ?+8 ; relsq strcmp_const_19_len strcmp_const_19_len 1
&strcmp_const_19_len &tmp ?+8 ; relsq strcmp_const_19_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_19_a 8
&strcmp_const_19_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_19_a_addrRef_0 CONST_8 1
&strcmp_const_19_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_19_a_addrRef_1 CONST_8 1
&strcmp_const_19_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_19_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr SUBADDR 8
&SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_19_aStr 0
; addr strcmp_const_19_bStr 0
# MSQ_START 1 setaddr strcmp_const_19_aStr strcmp_const_19_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_19_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_19_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_19_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_19_a
&tmp :strcmp_const_19_a_addrRef_2 &strcmp_const_19_a ?+8 ; relsq tmp strcmp_const_19_a 1
# MSQ_END 2 sub
&strcmp_const_19_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_19_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_19_bStr SUBADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_19_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_19_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_19_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SUBADDR
&tmp :SUBADDR_addrRef_5 &SUBADDR ?+8 ; relsq tmp SUBADDR 1
# MSQ_END 2 sub
&strcmp_const_19_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_19_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_19_LOOP
# MSQ_START 1 decleq strcmp_const_19_len 0 STEP3_TOKEN2_SUBADDR
:STRCMP_CONST_19_LOOP &strcmp_const_19_len &CONST_0 &STEP3_TOKEN2_SUBADDR ; lblsq strcmp_const_19_len CONST_0 STEP3_TOKEN2_SUBADDR
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_19_len 1
&strcmp_const_19_len &CONST_1 ?+8 ; relsq strcmp_const_19_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_19_aStr strcmp_const_19_bStr STRCMP_CONST_19_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_19_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_19_aStr_addrRef_0 &strcmp_const_19_aStr ?+8 ; relsq tmp2 strcmp_const_19_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_19_bStr
&tmp :strcmp_const_19_bStr_addrRef_0 &strcmp_const_19_bStr ?+8 ; relsq tmp strcmp_const_19_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_19_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_19_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_19_END
&tmp &CONST_-1 &JNZ_39_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_39_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_39_END ; lblsq ZERO ZERO JNZ_39_END
; label JNZ_39_REVERT_AND_JUMP
:JNZ_39_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_19_END ; lblsq ZERO ZERO STRCMP_CONST_19_END
; label JNZ_39_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_19_aStr 8
:JNZ_39_END &strcmp_const_19_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_19_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_19_bStr 8
&strcmp_const_19_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_19_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_19_LOOP
&ZERO &ZERO &STRCMP_CONST_19_LOOP ; lblsq ZERO ZERO STRCMP_CONST_19_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_19_REVERT_ADDR
# MSQ_START 1 decaddr SUBADDR 8
:STRCMP_CONST_19_REVERT_ADDR &SUBADDR_addrRef_0 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_0 CONST_8 1
&SUBADDR_addrRef_1 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_1 CONST_8 1
&SUBADDR_addrRef_2 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_2 CONST_8 1
&SUBADDR_addrRef_3 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_3 CONST_8 1
&SUBADDR_addrRef_4 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_4 CONST_8 1
&SUBADDR_addrRef_5 &CONST_8 ?+8 ; relsq SUBADDR_addrRef_5 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_19_END
# MSQ_END 0 strcmp_const
; label STEP3_TOKEN2_ZEROADDR
# MSQ_START 0 memcpy_const curTokens_step3 stubSym_step3 18 tmp tmp2
# MSQ_START 1 memcpy curTokens_step3 stubSym_step3 CONST_18 tmp tmp2
; addr memcpy_5_dst 0
; addr memcpy_5_src 0
# MSQ_START 2 copyaddr memcpy_5_dst curTokens_step3 tmp tmp2
:STRCMP_CONST_19_END :STEP3_TOKEN2_ZEROADDR &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_5_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_5_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curTokens_step3_addrRef_0 ?+8 ; relsq tmp curTokens_step3_addrRef_0 1
&memcpy_5_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_5_dst_addrRef_0 tmp 1
&memcpy_5_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_5_dst_addrRef_1 tmp 1
&memcpy_5_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_5_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_5_src stubSym_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_5_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_5_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &stubSym_step3_addrRef_0 ?+8 ; relsq tmp stubSym_step3_addrRef_0 1
&memcpy_5_src_addrRef_0 &tmp ?+8 ; relsq memcpy_5_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_5_numLeft 0
# MSQ_START 2 mov memcpy_5_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_5_numLeft &memcpy_5_numLeft ?+8 ; relsq memcpy_5_numLeft memcpy_5_numLeft 1
&memcpy_5_numLeft &tmp ?+8 ; relsq memcpy_5_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_5_LOOP
# MSQ_START 2 decleq memcpy_5_numLeft 0 MEMCPY_5_END
:MEMCPY_5_LOOP &memcpy_5_numLeft &CONST_0 &MEMCPY_5_END ; lblsq memcpy_5_numLeft CONST_0 MEMCPY_5_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_5_numLeft 8
&memcpy_5_numLeft &CONST_8 ?+8 ; relsq memcpy_5_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_5_dst memcpy_5_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_5_src_addrRef_0 &memcpy_5_src ?+8 ; relsq tmp memcpy_5_src 1
:memcpy_5_dst_addrRef_0 &memcpy_5_dst :memcpy_5_dst_addrRef_1 &memcpy_5_dst ?+8 ; relsq memcpy_5_dst memcpy_5_dst 1
:memcpy_5_dst_addrRef_2 &memcpy_5_dst &tmp ?+8 ; relsq memcpy_5_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_5_dst 8
&memcpy_5_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_5_dst_addrRef_0 CONST_-8 1
&memcpy_5_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_5_dst_addrRef_1 CONST_-8 1
&memcpy_5_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_5_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_5_src 8
&memcpy_5_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_5_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_5_LOOP
&ZERO &ZERO &MEMCPY_5_LOOP ; lblsq ZERO ZERO MEMCPY_5_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_5_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const
# MSQ_START 0 lbljmp STEP3_TOKEN3
:MEMCPY_5_END &ZERO &ZERO &STEP3_TOKEN3 ; lblsq ZERO ZERO STEP3_TOKEN3
# MSQ_END 0 lbljmp

; label STEP3_TOKEN2_SUBADDR
# MSQ_START 0 memcpy_const curTokens_step3 sym1_step3 18 tmp tmp2
# MSQ_START 1 memcpy curTokens_step3 sym1_step3 CONST_18 tmp tmp2
; addr memcpy_6_dst 0
; addr memcpy_6_src 0
# MSQ_START 2 copyaddr memcpy_6_dst curTokens_step3 tmp tmp2
:STEP3_TOKEN2_SUBADDR &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_6_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_6_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curTokens_step3_addrRef_0 ?+8 ; relsq tmp curTokens_step3_addrRef_0 1
&memcpy_6_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_6_dst_addrRef_0 tmp 1
&memcpy_6_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_6_dst_addrRef_1 tmp 1
&memcpy_6_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_6_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_6_src sym1_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_6_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_6_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &sym1_step3_addrRef_0 ?+8 ; relsq tmp sym1_step3_addrRef_0 1
&memcpy_6_src_addrRef_0 &tmp ?+8 ; relsq memcpy_6_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_6_numLeft 0
# MSQ_START 2 mov memcpy_6_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_6_numLeft &memcpy_6_numLeft ?+8 ; relsq memcpy_6_numLeft memcpy_6_numLeft 1
&memcpy_6_numLeft &tmp ?+8 ; relsq memcpy_6_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_6_LOOP
# MSQ_START 2 decleq memcpy_6_numLeft 0 MEMCPY_6_END
:MEMCPY_6_LOOP &memcpy_6_numLeft &CONST_0 &MEMCPY_6_END ; lblsq memcpy_6_numLeft CONST_0 MEMCPY_6_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_6_numLeft 8
&memcpy_6_numLeft &CONST_8 ?+8 ; relsq memcpy_6_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_6_dst memcpy_6_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_6_src_addrRef_0 &memcpy_6_src ?+8 ; relsq tmp memcpy_6_src 1
:memcpy_6_dst_addrRef_0 &memcpy_6_dst :memcpy_6_dst_addrRef_1 &memcpy_6_dst ?+8 ; relsq memcpy_6_dst memcpy_6_dst 1
:memcpy_6_dst_addrRef_2 &memcpy_6_dst &tmp ?+8 ; relsq memcpy_6_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_6_dst 8
&memcpy_6_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_6_dst_addrRef_0 CONST_-8 1
&memcpy_6_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_6_dst_addrRef_1 CONST_-8 1
&memcpy_6_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_6_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_6_src 8
&memcpy_6_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_6_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_6_LOOP
&ZERO &ZERO &MEMCPY_6_LOOP ; lblsq ZERO ZERO MEMCPY_6_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_6_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const

; label STEP3_TOKEN3
# MSQ_START 0 incaddr curTokens_step3 18
:MEMCPY_6_END :STEP3_TOKEN3 &curTokens_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curTokens_step3_addrRef_0 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 memcpy_const curTokens_step3 ONE 18 tmp tmp2
# MSQ_START 1 memcpy curTokens_step3 ONE CONST_18 tmp tmp2
; addr memcpy_7_dst 0
; addr memcpy_7_src 0
# MSQ_START 2 copyaddr memcpy_7_dst curTokens_step3 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_7_dst_addrRef_0 ?+8 ; relsq tmp2 memcpy_7_dst_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curTokens_step3_addrRef_0 ?+8 ; relsq tmp curTokens_step3_addrRef_0 1
&memcpy_7_dst_addrRef_0 &tmp ?+8 ; relsq memcpy_7_dst_addrRef_0 tmp 1
&memcpy_7_dst_addrRef_1 &tmp ?+8 ; relsq memcpy_7_dst_addrRef_1 tmp 1
&memcpy_7_dst_addrRef_2 &tmp ?+8 ; relsq memcpy_7_dst_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 copyaddr memcpy_7_src ONE tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &memcpy_7_src_addrRef_0 ?+8 ; relsq tmp2 memcpy_7_src_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &ONE_addrRef_0 ?+8 ; relsq tmp ONE_addrRef_0 1
&memcpy_7_src_addrRef_0 &tmp ?+8 ; relsq memcpy_7_src_addrRef_0 tmp 1
# MSQ_END 2 copyaddr
; var memcpy_7_numLeft 0
# MSQ_START 2 mov memcpy_7_numLeft CONST_18 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_18 ?+8 ; relsq tmp CONST_18 1
&memcpy_7_numLeft &memcpy_7_numLeft ?+8 ; relsq memcpy_7_numLeft memcpy_7_numLeft 1
&memcpy_7_numLeft &tmp ?+8 ; relsq memcpy_7_numLeft tmp 1
# MSQ_END 2 mov
; label MEMCPY_7_LOOP
# MSQ_START 2 decleq memcpy_7_numLeft 0 MEMCPY_7_END
:MEMCPY_7_LOOP &memcpy_7_numLeft &CONST_0 &MEMCPY_7_END ; lblsq memcpy_7_numLeft CONST_0 MEMCPY_7_END
# MSQ_END 2 decleq
# MSQ_START 2 dec memcpy_7_numLeft 8
&memcpy_7_numLeft &CONST_8 ?+8 ; relsq memcpy_7_numLeft CONST_8 1
# MSQ_END 2 dec
# MSQ_START 2 mov memcpy_7_dst memcpy_7_src tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :memcpy_7_src_addrRef_0 &memcpy_7_src ?+8 ; relsq tmp memcpy_7_src 1
:memcpy_7_dst_addrRef_0 &memcpy_7_dst :memcpy_7_dst_addrRef_1 &memcpy_7_dst ?+8 ; relsq memcpy_7_dst memcpy_7_dst 1
:memcpy_7_dst_addrRef_2 &memcpy_7_dst &tmp ?+8 ; relsq memcpy_7_dst tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr memcpy_7_dst 8
&memcpy_7_dst_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_7_dst_addrRef_0 CONST_-8 1
&memcpy_7_dst_addrRef_1 &CONST_-8 ?+8 ; relsq memcpy_7_dst_addrRef_1 CONST_-8 1
&memcpy_7_dst_addrRef_2 &CONST_-8 ?+8 ; relsq memcpy_7_dst_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr memcpy_7_src 8
&memcpy_7_src_addrRef_0 &CONST_-8 ?+8 ; relsq memcpy_7_src_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp MEMCPY_7_LOOP
&ZERO &ZERO &MEMCPY_7_LOOP ; lblsq ZERO ZERO MEMCPY_7_LOOP
# MSQ_END 2 lbljmp
; label MEMCPY_7_END
# MSQ_END 1 memcpy
# MSQ_END 0 memcpy_const

# MSQ_START 0 incaddr curLinePass2_step3 8
:MEMCPY_7_END &curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 set curLinePass2_step3 3
# MSQ_START 1 zero curLinePass2_step3
# MSQ_START 2 sub curLinePass2_step3 curLinePass2_step3
:curLinePass2_step3_addrRef_12 0000000000700000 :curLinePass2_step3_addrRef_13 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc curLinePass2_step3 3
# MSQ_START 2 dec curLinePass2_step3 -3
:curLinePass2_step3_addrRef_14 0000000000700000 &CONST_-3 ?+8 ; relsq curLinePass2_step3 CONST_-3 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set

# Handle comment and offset
# MSQ_START 0 incaddr curLinePass2_step3 18
&curLinePass2_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-18 1
&curLinePass2_step3_addrRef_1 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-18 1
&curLinePass2_step3_addrRef_2 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-18 1
&curLinePass2_step3_addrRef_3 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-18 1
&curLinePass2_step3_addrRef_4 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-18 1
&curLinePass2_step3_addrRef_5 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-18 1
&curLinePass2_step3_addrRef_6 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-18 1
&curLinePass2_step3_addrRef_7 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-18 1
&curLinePass2_step3_addrRef_8 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-18 1
&curLinePass2_step3_addrRef_9 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-18 1
&curLinePass2_step3_addrRef_10 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-18 1
&curLinePass2_step3_addrRef_11 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-18 1
&curLinePass2_step3_addrRef_12 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-18 1
&curLinePass2_step3_addrRef_13 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-18 1
&curLinePass2_step3_addrRef_14 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-18 1
&curLinePass2_step3_addrRef_15 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-18 1
&curLinePass2_step3_addrRef_16 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-18 1
&curLinePass2_step3_addrRef_17 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-18 1
&curLinePass2_step3_addrRef_18 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-18 1
&curLinePass2_step3_addrRef_19 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-18 1
&curLinePass2_step3_addrRef_20 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-18 1
&curLinePass2_step3_addrRef_21 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-18 1
&curLinePass2_step3_addrRef_22 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-18 1
&curLinePass2_step3_addrRef_23 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-18 1
&curLinePass2_step3_addrRef_24 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 alloc_str_const curLinePass2_step3 0 tmp
# MSQ_START 1 malloc_const curLinePass2_step3 0 tmp
# MSQ_START 2 malloc curLinePass2_step3 CONST_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &FREE_START ?+8 ; relsq tmp FREE_START 1
:curLinePass2_step3_addrRef_15 0000000000700000 :curLinePass2_step3_addrRef_16 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
:curLinePass2_step3_addrRef_17 0000000000700000 &tmp ?+8 ; relsq curLinePass2_step3 tmp 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
&FREE_START &tmp ?+8 ; relsq FREE_START tmp 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 zero curLinePass2_step3
# MSQ_START 2 sub curLinePass2_step3 curLinePass2_step3
:curLinePass2_step3_addrRef_18 0000000000700000 :curLinePass2_step3_addrRef_19 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov curLinePass2_step3 CONST_0 tmp
# MSQ_START 2 movneg tmp CONST_0
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &CONST_0 ?+8 ; relsq tmp CONST_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg curLinePass2_step3 tmp
:curLinePass2_step3_addrRef_20 0000000000700000 :curLinePass2_step3_addrRef_21 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
:curLinePass2_step3_addrRef_22 0000000000700000 &tmp ?+8 ; relsq curLinePass2_step3 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr curLinePass2_step3 10
&curLinePass2_step3_addrRef_0 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_10 1
&curLinePass2_step3_addrRef_1 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_10 1
&curLinePass2_step3_addrRef_2 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_10 1
&curLinePass2_step3_addrRef_3 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_10 1
&curLinePass2_step3_addrRef_4 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_10 1
&curLinePass2_step3_addrRef_5 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_10 1
&curLinePass2_step3_addrRef_6 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_10 1
&curLinePass2_step3_addrRef_7 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_10 1
&curLinePass2_step3_addrRef_8 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_10 1
&curLinePass2_step3_addrRef_9 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_10 1
&curLinePass2_step3_addrRef_10 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_10 1
&curLinePass2_step3_addrRef_11 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_10 1
&curLinePass2_step3_addrRef_12 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_10 1
&curLinePass2_step3_addrRef_13 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_10 1
&curLinePass2_step3_addrRef_14 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_10 1
&curLinePass2_step3_addrRef_15 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_10 1
&curLinePass2_step3_addrRef_16 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_10 1
&curLinePass2_step3_addrRef_17 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_10 1
&curLinePass2_step3_addrRef_18 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_10 1
&curLinePass2_step3_addrRef_19 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_10 1
&curLinePass2_step3_addrRef_20 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_10 1
&curLinePass2_step3_addrRef_21 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_10 1
&curLinePass2_step3_addrRef_22 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_10 1
&curLinePass2_step3_addrRef_23 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_10 1
&curLinePass2_step3_addrRef_24 &CONST_10 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_10 1
# MSQ_END 1 decaddr
# MSQ_END 0 alloc_str_const
# MSQ_START 0 incaddr curLinePass2_step3 18
&curLinePass2_step3_addrRef_0 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-18 1
&curLinePass2_step3_addrRef_1 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-18 1
&curLinePass2_step3_addrRef_2 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-18 1
&curLinePass2_step3_addrRef_3 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-18 1
&curLinePass2_step3_addrRef_4 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-18 1
&curLinePass2_step3_addrRef_5 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-18 1
&curLinePass2_step3_addrRef_6 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-18 1
&curLinePass2_step3_addrRef_7 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-18 1
&curLinePass2_step3_addrRef_8 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-18 1
&curLinePass2_step3_addrRef_9 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-18 1
&curLinePass2_step3_addrRef_10 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-18 1
&curLinePass2_step3_addrRef_11 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-18 1
&curLinePass2_step3_addrRef_12 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-18 1
&curLinePass2_step3_addrRef_13 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-18 1
&curLinePass2_step3_addrRef_14 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-18 1
&curLinePass2_step3_addrRef_15 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-18 1
&curLinePass2_step3_addrRef_16 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-18 1
&curLinePass2_step3_addrRef_17 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-18 1
&curLinePass2_step3_addrRef_18 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-18 1
&curLinePass2_step3_addrRef_19 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-18 1
&curLinePass2_step3_addrRef_20 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-18 1
&curLinePass2_step3_addrRef_21 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-18 1
&curLinePass2_step3_addrRef_22 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-18 1
&curLinePass2_step3_addrRef_23 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-18 1
&curLinePass2_step3_addrRef_24 &CONST_-18 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 zero curLinePass2_step3
# MSQ_START 1 sub curLinePass2_step3 curLinePass2_step3
:curLinePass2_step3_addrRef_23 0000000000700000 :curLinePass2_step3_addrRef_24 0000000000700000 ?+8 ; relsq curLinePass2_step3 curLinePass2_step3 1
# MSQ_END 1 sub
# MSQ_END 0 zero
# MSQ_START 0 incaddr curLinePass2_step3 8
&curLinePass2_step3_addrRef_0 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_0 CONST_-8 1
&curLinePass2_step3_addrRef_1 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_1 CONST_-8 1
&curLinePass2_step3_addrRef_2 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_2 CONST_-8 1
&curLinePass2_step3_addrRef_3 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_3 CONST_-8 1
&curLinePass2_step3_addrRef_4 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_4 CONST_-8 1
&curLinePass2_step3_addrRef_5 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_5 CONST_-8 1
&curLinePass2_step3_addrRef_6 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_6 CONST_-8 1
&curLinePass2_step3_addrRef_7 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_7 CONST_-8 1
&curLinePass2_step3_addrRef_8 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_8 CONST_-8 1
&curLinePass2_step3_addrRef_9 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_9 CONST_-8 1
&curLinePass2_step3_addrRef_10 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_10 CONST_-8 1
&curLinePass2_step3_addrRef_11 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_11 CONST_-8 1
&curLinePass2_step3_addrRef_12 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_12 CONST_-8 1
&curLinePass2_step3_addrRef_13 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_13 CONST_-8 1
&curLinePass2_step3_addrRef_14 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_14 CONST_-8 1
&curLinePass2_step3_addrRef_15 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_15 CONST_-8 1
&curLinePass2_step3_addrRef_16 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_16 CONST_-8 1
&curLinePass2_step3_addrRef_17 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_17 CONST_-8 1
&curLinePass2_step3_addrRef_18 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_18 CONST_-8 1
&curLinePass2_step3_addrRef_19 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_19 CONST_-8 1
&curLinePass2_step3_addrRef_20 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_20 CONST_-8 1
&curLinePass2_step3_addrRef_21 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_21 CONST_-8 1
&curLinePass2_step3_addrRef_22 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_22 CONST_-8 1
&curLinePass2_step3_addrRef_23 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_23 CONST_-8 1
&curLinePass2_step3_addrRef_24 &CONST_-8 ?+8 ; relsq curLinePass2_step3_addrRef_24 CONST_-8 1
# MSQ_END 0 incaddr

# Py: incRefCount(f"{stubPrefix}{k}")
# MSQ_START 0 copyaddr incRefCount_key stubSym_step3 tmp tmp2
# MSQ_START 1 setaddr incRefCount_key stubSym_step3_addrRef_0 tmp tmp2
# MSQ_START 2 mov tmp incRefCount_key_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &incRefCount_key_addrRef_0 ?+8 ; relsq tmp2 incRefCount_key_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp stubSym_step3_addrRef_0
&tmp &stubSym_step3_addrRef_0 ?+8 ; relsq tmp stubSym_step3_addrRef_0 1
# MSQ_END 2 sub
&incRefCount_key_addrRef_0 &tmp ?+8 ; relsq incRefCount_key_addrRef_0 tmp 1
&incRefCount_key_addrRef_1 &tmp ?+8 ; relsq incRefCount_key_addrRef_1 tmp 1
# MSQ_END 1 setaddr
# MSQ_END 0 copyaddr
# MSQ_START 0 call incRefCount tmp
# MSQ_START 1 mov incRefCount_retAddr incRefCount_retPosAddr_4 tmp
# MSQ_START 2 movneg tmp incRefCount_retPosAddr_4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &incRefCount_retPosAddr_4 ?+8 ; relsq tmp incRefCount_retPosAddr_4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg incRefCount_retAddr tmp
&incRefCount_retAddr &incRefCount_retAddr ?+8 ; relsq incRefCount_retAddr incRefCount_retAddr 1
&incRefCount_retAddr &tmp ?+8 ; relsq incRefCount_retAddr tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 lbljmp incRefCount
&ZERO &ZERO &incRefCount ; lblsq ZERO ZERO incRefCount
# MSQ_END 1 lbljmp
; label incRefCount_retPosAddr_4
:incRefCount_retPosAddr_4 &incRefCount_retPos_4 ; raw_ref incRefCount_retPos_4
; label incRefCount_retPos_4
# MSQ_END 0 call

# MSQ_START 0 inc linesPass2Len 1
# MSQ_START 1 dec linesPass2Len -1
:incRefCount_retPos_4 &linesPass2Len &CONST_-1 ?+8 ; relsq linesPass2Len CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 inc nextId_step3 1
# MSQ_START 1 dec nextId_step3 -1
&nextId_step3 &CONST_-1 ?+8 ; relsq nextId_step3 CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 lbljmp STEP3_STUB_LOOP
&ZERO &ZERO &STEP3_STUB_LOOP ; lblsq ZERO ZERO STEP3_STUB_LOOP
# MSQ_END 0 lbljmp

; label STEP3_END
# MSQ_START 0 puts STEP3_PRINT_PREFIX tmp tmp2
; addr puts_14_str 0
# MSQ_START 1 setaddr puts_14_str STEP3_PRINT_PREFIX tmp tmp2
# MSQ_START 2 mov tmp puts_14_str_addrRef_0 tmp2
:STEP3_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_14_str_addrRef_0 ?+8 ; relsq tmp2 puts_14_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP3_PRINT_PREFIX
&tmp :STEP3_PRINT_PREFIX_addrRef_0 &STEP3_PRINT_PREFIX ?+8 ; relsq tmp STEP3_PRINT_PREFIX 1
# MSQ_END 2 sub
&puts_14_str_addrRef_0 &tmp ?+8 ; relsq puts_14_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_14_len 0
# MSQ_START 1 incaddr STEP3_PRINT_PREFIX 8
&STEP3_PRINT_PREFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP3_PRINT_PREFIX_addrRef_0 CONST_-8 1
&STEP3_PRINT_PREFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP3_PRINT_PREFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_14_len STEP3_PRINT_PREFIX tmp
# MSQ_START 2 movneg tmp STEP3_PRINT_PREFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP3_PRINT_PREFIX_addrRef_1 &STEP3_PRINT_PREFIX ?+8 ; relsq tmp STEP3_PRINT_PREFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_14_len tmp
&puts_14_len &puts_14_len ?+8 ; relsq puts_14_len puts_14_len 1
&puts_14_len &tmp ?+8 ; relsq puts_14_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP3_PRINT_PREFIX 8
&STEP3_PRINT_PREFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP3_PRINT_PREFIX_addrRef_0 CONST_8 1
&STEP3_PRINT_PREFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP3_PRINT_PREFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_14_LOOP
# MSQ_START 1 decleq puts_14_len 0 PUTS_14_END
:PUTS_14_LOOP &puts_14_len &CONST_0 &PUTS_14_END ; lblsq puts_14_len CONST_0 PUTS_14_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_14_len 1
&puts_14_len &CONST_1 ?+8 ; relsq puts_14_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_14_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_14_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_14_str_addrRef_0 &puts_14_str ?+8 ; relsq tmp puts_14_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_14_str 8
&puts_14_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_14_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_14_LOOP
&ZERO &ZERO &PUTS_14_LOOP ; lblsq ZERO ZERO PUTS_14_LOOP
# MSQ_END 1 lbljmp
; label PUTS_14_END
# MSQ_END 0 puts
; addr symbolCountPrint_step3 0
# MSQ_START 0 itoa symbolCountPrint_step3 symbolsLen tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_14_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr symbolCountPrint_step3 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 symbolCountPrint_step3_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolCountPrint_step3_addrRef_0 ?+8 ; relsq tmp symbolCountPrint_step3_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&symbolCountPrint_step3_addrRef_0 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 tmp3 1
&symbolCountPrint_step3_addrRef_1 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 tmp3 1
&symbolCountPrint_step3_addrRef_2 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 tmp3 1
&symbolCountPrint_step3_addrRef_3 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 tmp3 1
&symbolCountPrint_step3_addrRef_4 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 tmp3 1
&symbolCountPrint_step3_addrRef_5 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 tmp3 1
&symbolCountPrint_step3_addrRef_6 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 tmp3 1
&symbolCountPrint_step3_addrRef_7 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 tmp3 1
&symbolCountPrint_step3_addrRef_8 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 tmp3 1
&symbolCountPrint_step3_addrRef_9 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 tmp3 1
&symbolCountPrint_step3_addrRef_10 &tmp3 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const symbolCountPrint_step3 a0 tmp3
# MSQ_START 2 malloc_const symbolCountPrint_step3 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:symbolCountPrint_step3_addrRef_0 &symbolCountPrint_step3 :symbolCountPrint_step3_addrRef_1 &symbolCountPrint_step3 ?+8 ; relsq symbolCountPrint_step3 symbolCountPrint_step3 1
:symbolCountPrint_step3_addrRef_2 &symbolCountPrint_step3 &tmp3 ?+8 ; relsq symbolCountPrint_step3 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr symbolCountPrint_step3 8
&symbolCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 CONST_-8 1
&symbolCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 CONST_-8 1
&symbolCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 CONST_-8 1
&symbolCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 CONST_-8 1
&symbolCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 CONST_-8 1
&symbolCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 CONST_-8 1
&symbolCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 CONST_-8 1
&symbolCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 CONST_-8 1
&symbolCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 CONST_-8 1
&symbolCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 CONST_-8 1
&symbolCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero symbolCountPrint_step3
:symbolCountPrint_step3_addrRef_3 &symbolCountPrint_step3 :symbolCountPrint_step3_addrRef_4 &symbolCountPrint_step3 ?+8 ; relsq symbolCountPrint_step3 symbolCountPrint_step3 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr symbolCountPrint_step3 8
&symbolCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 CONST_-8 1
&symbolCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 CONST_-8 1
&symbolCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 CONST_-8 1
&symbolCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 CONST_-8 1
&symbolCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 CONST_-8 1
&symbolCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 CONST_-8 1
&symbolCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 CONST_-8 1
&symbolCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 CONST_-8 1
&symbolCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 CONST_-8 1
&symbolCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 CONST_-8 1
&symbolCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov symbolCountPrint_step3 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:symbolCountPrint_step3_addrRef_5 &symbolCountPrint_step3 :symbolCountPrint_step3_addrRef_6 &symbolCountPrint_step3 ?+8 ; relsq symbolCountPrint_step3 symbolCountPrint_step3 1
:symbolCountPrint_step3_addrRef_7 &symbolCountPrint_step3 &tmp3 ?+8 ; relsq symbolCountPrint_step3 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr symbolCountPrint_step3 10
&symbolCountPrint_step3_addrRef_0 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 CONST_10 1
&symbolCountPrint_step3_addrRef_1 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 CONST_10 1
&symbolCountPrint_step3_addrRef_2 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 CONST_10 1
&symbolCountPrint_step3_addrRef_3 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 CONST_10 1
&symbolCountPrint_step3_addrRef_4 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 CONST_10 1
&symbolCountPrint_step3_addrRef_5 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 CONST_10 1
&symbolCountPrint_step3_addrRef_6 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 CONST_10 1
&symbolCountPrint_step3_addrRef_7 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 CONST_10 1
&symbolCountPrint_step3_addrRef_8 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 CONST_10 1
&symbolCountPrint_step3_addrRef_9 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 CONST_10 1
&symbolCountPrint_step3_addrRef_10 &CONST_10 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_5_retBuf 0
# MSQ_START 1 setaddr itoa_5_retBuf symbolCountPrint_step3 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_5_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_5_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_5_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 symbolCountPrint_step3
&tmp2 :symbolCountPrint_step3_addrRef_8 &symbolCountPrint_step3 ?+8 ; relsq tmp2 symbolCountPrint_step3 1
# MSQ_END 2 sub
&itoa_5_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_0 tmp2 1
&itoa_5_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_1 tmp2 1
&itoa_5_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_2 tmp2 1
&itoa_5_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_3 tmp2 1
&itoa_5_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_4 tmp2 1
&itoa_5_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_5 tmp2 1
&itoa_5_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_6 tmp2 1
&itoa_5_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_7 tmp2 1
&itoa_5_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_8 tmp2 1
&itoa_5_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_5_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_5_retLength 0
# MSQ_START 1 copyaddr itoa_5_retLength symbolCountPrint_step3 tmp2 tmp3
# MSQ_START 2 setaddr itoa_5_retLength symbolCountPrint_step3_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_5_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_5_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &symbolCountPrint_step3_addrRef_0 ?+8 ; relsq tmp2 symbolCountPrint_step3_addrRef_0 1
&itoa_5_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_5_retLength_addrRef_0 tmp2 1
&itoa_5_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_5_retLength_addrRef_1 tmp2 1
&itoa_5_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_5_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_5_retLength 8
&itoa_5_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_5_retLength_addrRef_0 CONST_-8 1
&itoa_5_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_5_retLength_addrRef_1 CONST_-8 1
&itoa_5_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_5_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_5_noDigits 0
# MSQ_START 1 set itoa_5_noDigits 1
# MSQ_START 2 zero itoa_5_noDigits
&itoa_5_noDigits &itoa_5_noDigits ?+8 ; relsq itoa_5_noDigits itoa_5_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_5_noDigits 1
&itoa_5_noDigits &CONST_-1 ?+8 ; relsq itoa_5_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp symbolsLen tmp2
# MSQ_START 2 movneg tmp2 symbolsLen
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbolsLen ?+8 ; relsq tmp2 symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_5_isNeg 0
# MSQ_START 1 zero itoa_5_isNeg
# MSQ_START 2 sub itoa_5_isNeg itoa_5_isNeg
&itoa_5_isNeg &itoa_5_isNeg ?+8 ; relsq itoa_5_isNeg itoa_5_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_5_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_5_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_5_IS_NEG ; lblsq tmp2 ZERO ITOA_5_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_5_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_28_END
&tmp2 &CONST_-1 &JZ_28_END ; lblsq tmp2 CONST_-1 JZ_28_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_28_REVERT_A
&tmp &CONST_-1 &JZ_28_REVERT_A ; lblsq tmp CONST_-1 JZ_28_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_5_IS_ZERO
&ZERO &ZERO &ITOA_5_IS_ZERO ; lblsq ZERO ZERO ITOA_5_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_28_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_28_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_28_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_5_LOOP
:JZ_28_END &ZERO &ZERO &ITOA_5_LOOP ; lblsq ZERO ZERO ITOA_5_LOOP
# MSQ_END 1 lbljmp
; label ITOA_5_IS_ZERO
# MSQ_START 1 set itoa_5_retBuf 30
# MSQ_START 2 zero itoa_5_retBuf
:ITOA_5_IS_ZERO :itoa_5_retBuf_addrRef_0 &itoa_5_retBuf :itoa_5_retBuf_addrRef_1 &itoa_5_retBuf ?+8 ; relsq itoa_5_retBuf itoa_5_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_5_retBuf 30
:itoa_5_retBuf_addrRef_2 &itoa_5_retBuf &CONST_-30 ?+8 ; relsq itoa_5_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_5_retLength 1
# MSQ_START 2 dec itoa_5_retLength -1
:itoa_5_retLength_addrRef_0 &itoa_5_retLength &CONST_-1 ?+8 ; relsq itoa_5_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_5_END
&ZERO &ZERO &ITOA_5_END ; lblsq ZERO ZERO ITOA_5_END
# MSQ_END 1 lbljmp
; label ITOA_5_IS_NEG
# MSQ_START 1 inc itoa_5_isNeg 1
# MSQ_START 2 dec itoa_5_isNeg -1
:ITOA_5_IS_NEG &itoa_5_isNeg &CONST_-1 ?+8 ; relsq itoa_5_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_5_retBuf 2d
# MSQ_START 2 zero itoa_5_retBuf
:itoa_5_retBuf_addrRef_3 &itoa_5_retBuf :itoa_5_retBuf_addrRef_4 &itoa_5_retBuf ?+8 ; relsq itoa_5_retBuf itoa_5_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_5_retBuf 2d
:itoa_5_retBuf_addrRef_5 &itoa_5_retBuf &CONST_-2D ?+8 ; relsq itoa_5_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_5_retBuf 8
&itoa_5_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_0 CONST_-8 1
&itoa_5_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_1 CONST_-8 1
&itoa_5_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_2 CONST_-8 1
&itoa_5_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_3 CONST_-8 1
&itoa_5_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_4 CONST_-8 1
&itoa_5_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_5 CONST_-8 1
&itoa_5_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_6 CONST_-8 1
&itoa_5_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_7 CONST_-8 1
&itoa_5_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_8 CONST_-8 1
&itoa_5_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_5_retLength 1
# MSQ_START 2 dec itoa_5_retLength -1
:itoa_5_retLength_addrRef_1 &itoa_5_retLength &CONST_-1 ?+8 ; relsq itoa_5_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_5_LOOP
&ZERO &ZERO &ITOA_5_LOOP ; lblsq ZERO ZERO ITOA_5_LOOP
# MSQ_END 1 lbljmp
; label ITOA_5_SUBBERS
:ITOA_5_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_5_LOOP
# MSQ_START 1 jz ITOA_5_SUBBERS ITOA_5_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_5_SUBBERS
:ITOA_5_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_5_SUBBERS_addrRef_0 &ITOA_5_SUBBERS ?+8 ; relsq tmp2 ITOA_5_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_29_END
&tmp2 &CONST_-1 &JZ_29_END ; lblsq tmp2 CONST_-1 JZ_29_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_5_SUBBERS 1 JZ_29_REVERT_A
:ITOA_5_SUBBERS_addrRef_1 &ITOA_5_SUBBERS &CONST_-1 &JZ_29_REVERT_A ; lblsq ITOA_5_SUBBERS CONST_-1 JZ_29_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_5_SUBBERS 1
:ITOA_5_SUBBERS_addrRef_2 &ITOA_5_SUBBERS &CONST_1 ?+8 ; relsq ITOA_5_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_5_REVERT_SUBBERS
&ZERO &ZERO &ITOA_5_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_5_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_29_REVERT_A
# MSQ_START 2 dec ITOA_5_SUBBERS 1
:JZ_29_REVERT_A :ITOA_5_SUBBERS_addrRef_3 &ITOA_5_SUBBERS &CONST_1 ?+8 ; relsq ITOA_5_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_29_END
# MSQ_END 1 jz
; var itoa_5_digitVal 0
# MSQ_START 1 zero itoa_5_digitVal
# MSQ_START 2 sub itoa_5_digitVal itoa_5_digitVal
:JZ_29_END &itoa_5_digitVal &itoa_5_digitVal ?+8 ; relsq itoa_5_digitVal itoa_5_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_5_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_5_SUBBERS ITOA_5_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_5_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_5_SUBBERS_addrRef_4 &ITOA_5_SUBBERS &ITOA_5_HANDLE_DIGIT ; lblsq tmp2 ITOA_5_SUBBERS ITOA_5_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_5_digitVal 1
# MSQ_START 2 dec itoa_5_digitVal -1
&itoa_5_digitVal &CONST_-1 ?+8 ; relsq itoa_5_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_5_SUBBERS
&tmp :ITOA_5_SUBBERS_addrRef_5 &ITOA_5_SUBBERS ?+8 ; relsq tmp ITOA_5_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_5_SUBTRACT_A
&ZERO &ZERO &ITOA_5_SUBTRACT_A ; lblsq ZERO ZERO ITOA_5_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_5_HANDLE_DIGIT
# MSQ_START 1 jz itoa_5_noDigits ITOA_5_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_5_noDigits
:ITOA_5_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_5_noDigits ?+8 ; relsq tmp2 itoa_5_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_30_END
&tmp2 &CONST_-1 &JZ_30_END ; lblsq tmp2 CONST_-1 JZ_30_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_5_noDigits 1 JZ_30_REVERT_A
&itoa_5_noDigits &CONST_-1 &JZ_30_REVERT_A ; lblsq itoa_5_noDigits CONST_-1 JZ_30_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_5_noDigits 1
&itoa_5_noDigits &CONST_1 ?+8 ; relsq itoa_5_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_5_PRINT_DIGIT
&ZERO &ZERO &ITOA_5_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_5_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_30_REVERT_A
# MSQ_START 2 dec itoa_5_noDigits 1
:JZ_30_REVERT_A &itoa_5_noDigits &CONST_1 ?+8 ; relsq itoa_5_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_30_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_5_digitVal ITOA_5_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_5_digitVal
:JZ_30_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_5_digitVal ?+8 ; relsq tmp2 itoa_5_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_31_END
&tmp2 &CONST_-1 &JZ_31_END ; lblsq tmp2 CONST_-1 JZ_31_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_5_digitVal 1 JZ_31_REVERT_A
&itoa_5_digitVal &CONST_-1 &JZ_31_REVERT_A ; lblsq itoa_5_digitVal CONST_-1 JZ_31_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_5_digitVal 1
&itoa_5_digitVal &CONST_1 ?+8 ; relsq itoa_5_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_5_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_5_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_5_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_31_REVERT_A
# MSQ_START 2 dec itoa_5_digitVal 1
:JZ_31_REVERT_A &itoa_5_digitVal &CONST_1 ?+8 ; relsq itoa_5_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_31_END
# MSQ_END 1 jz
; label ITOA_5_PRINT_DIGIT
# MSQ_START 1 zero itoa_5_noDigits
# MSQ_START 2 sub itoa_5_noDigits itoa_5_noDigits
:JZ_31_END :ITOA_5_PRINT_DIGIT &itoa_5_noDigits &itoa_5_noDigits ?+8 ; relsq itoa_5_noDigits itoa_5_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_5_retBuf 30
# MSQ_START 2 zero itoa_5_retBuf
:itoa_5_retBuf_addrRef_6 &itoa_5_retBuf :itoa_5_retBuf_addrRef_7 &itoa_5_retBuf ?+8 ; relsq itoa_5_retBuf itoa_5_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_5_retBuf 30
:itoa_5_retBuf_addrRef_8 &itoa_5_retBuf &CONST_-30 ?+8 ; relsq itoa_5_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_5_retBuf itoa_5_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_5_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_5_digitVal ?+8 ; relsq tmp2 itoa_5_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_5_retBuf tmp2
:itoa_5_retBuf_addrRef_9 &itoa_5_retBuf &tmp2 ?+8 ; relsq itoa_5_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_5_retBuf 8
&itoa_5_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_0 CONST_-8 1
&itoa_5_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_1 CONST_-8 1
&itoa_5_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_2 CONST_-8 1
&itoa_5_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_3 CONST_-8 1
&itoa_5_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_4 CONST_-8 1
&itoa_5_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_5 CONST_-8 1
&itoa_5_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_6 CONST_-8 1
&itoa_5_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_7 CONST_-8 1
&itoa_5_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_8 CONST_-8 1
&itoa_5_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_5_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_5_retLength 1
# MSQ_START 2 dec itoa_5_retLength -1
:itoa_5_retLength_addrRef_2 &itoa_5_retLength &CONST_-1 ?+8 ; relsq itoa_5_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_5_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_5_SUBBERS 8
:ITOA_5_DONT_PRINT_DIGIT &ITOA_5_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_5_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_5_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_5_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_5_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_5_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_5_LOOP
&ZERO &ZERO &ITOA_5_LOOP ; lblsq ZERO ZERO ITOA_5_LOOP
# MSQ_END 1 lbljmp
; label ITOA_5_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_5_SUBBERS 98
:ITOA_5_REVERT_SUBBERS &ITOA_5_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_0 CONST_98 1
&ITOA_5_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_1 CONST_98 1
&ITOA_5_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_2 CONST_98 1
&ITOA_5_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_3 CONST_98 1
&ITOA_5_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_4 CONST_98 1
&ITOA_5_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_5_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_5_END
# MSQ_END 0 itoa
# MSQ_START 0 puts symbolCountPrint_step3 tmp tmp2
; addr puts_15_str 0
# MSQ_START 1 setaddr puts_15_str symbolCountPrint_step3 tmp tmp2
# MSQ_START 2 mov tmp puts_15_str_addrRef_0 tmp2
:ITOA_5_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_15_str_addrRef_0 ?+8 ; relsq tmp2 puts_15_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp symbolCountPrint_step3
&tmp :symbolCountPrint_step3_addrRef_9 &symbolCountPrint_step3 ?+8 ; relsq tmp symbolCountPrint_step3 1
# MSQ_END 2 sub
&puts_15_str_addrRef_0 &tmp ?+8 ; relsq puts_15_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_15_len 0
# MSQ_START 1 incaddr symbolCountPrint_step3 8
&symbolCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 CONST_-8 1
&symbolCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 CONST_-8 1
&symbolCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 CONST_-8 1
&symbolCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 CONST_-8 1
&symbolCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 CONST_-8 1
&symbolCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 CONST_-8 1
&symbolCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 CONST_-8 1
&symbolCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 CONST_-8 1
&symbolCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 CONST_-8 1
&symbolCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 CONST_-8 1
&symbolCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_15_len symbolCountPrint_step3 tmp
# MSQ_START 2 movneg tmp symbolCountPrint_step3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :symbolCountPrint_step3_addrRef_10 &symbolCountPrint_step3 ?+8 ; relsq tmp symbolCountPrint_step3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_15_len tmp
&puts_15_len &puts_15_len ?+8 ; relsq puts_15_len puts_15_len 1
&puts_15_len &tmp ?+8 ; relsq puts_15_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolCountPrint_step3 8
&symbolCountPrint_step3_addrRef_0 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_0 CONST_8 1
&symbolCountPrint_step3_addrRef_1 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_1 CONST_8 1
&symbolCountPrint_step3_addrRef_2 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_2 CONST_8 1
&symbolCountPrint_step3_addrRef_3 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_3 CONST_8 1
&symbolCountPrint_step3_addrRef_4 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_4 CONST_8 1
&symbolCountPrint_step3_addrRef_5 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_5 CONST_8 1
&symbolCountPrint_step3_addrRef_6 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_6 CONST_8 1
&symbolCountPrint_step3_addrRef_7 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_7 CONST_8 1
&symbolCountPrint_step3_addrRef_8 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_8 CONST_8 1
&symbolCountPrint_step3_addrRef_9 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_9 CONST_8 1
&symbolCountPrint_step3_addrRef_10 &CONST_8 ?+8 ; relsq symbolCountPrint_step3_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_15_LOOP
# MSQ_START 1 decleq puts_15_len 0 PUTS_15_END
:PUTS_15_LOOP &puts_15_len &CONST_0 &PUTS_15_END ; lblsq puts_15_len CONST_0 PUTS_15_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_15_len 1
&puts_15_len &CONST_1 ?+8 ; relsq puts_15_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_15_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_15_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_15_str_addrRef_0 &puts_15_str ?+8 ; relsq tmp puts_15_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_15_str 8
&puts_15_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_15_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_15_LOOP
&ZERO &ZERO &PUTS_15_LOOP ; lblsq ZERO ZERO PUTS_15_LOOP
# MSQ_END 1 lbljmp
; label PUTS_15_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP3_PRINT_MIDDLE tmp tmp2
; addr puts_16_str 0
# MSQ_START 1 setaddr puts_16_str STEP3_PRINT_MIDDLE tmp tmp2
# MSQ_START 2 mov tmp puts_16_str_addrRef_0 tmp2
:PUTS_15_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_16_str_addrRef_0 ?+8 ; relsq tmp2 puts_16_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP3_PRINT_MIDDLE
&tmp :STEP3_PRINT_MIDDLE_addrRef_0 &STEP3_PRINT_MIDDLE ?+8 ; relsq tmp STEP3_PRINT_MIDDLE 1
# MSQ_END 2 sub
&puts_16_str_addrRef_0 &tmp ?+8 ; relsq puts_16_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_16_len 0
# MSQ_START 1 incaddr STEP3_PRINT_MIDDLE 8
&STEP3_PRINT_MIDDLE_addrRef_0 &CONST_-8 ?+8 ; relsq STEP3_PRINT_MIDDLE_addrRef_0 CONST_-8 1
&STEP3_PRINT_MIDDLE_addrRef_1 &CONST_-8 ?+8 ; relsq STEP3_PRINT_MIDDLE_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_16_len STEP3_PRINT_MIDDLE tmp
# MSQ_START 2 movneg tmp STEP3_PRINT_MIDDLE
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP3_PRINT_MIDDLE_addrRef_1 &STEP3_PRINT_MIDDLE ?+8 ; relsq tmp STEP3_PRINT_MIDDLE 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_16_len tmp
&puts_16_len &puts_16_len ?+8 ; relsq puts_16_len puts_16_len 1
&puts_16_len &tmp ?+8 ; relsq puts_16_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP3_PRINT_MIDDLE 8
&STEP3_PRINT_MIDDLE_addrRef_0 &CONST_8 ?+8 ; relsq STEP3_PRINT_MIDDLE_addrRef_0 CONST_8 1
&STEP3_PRINT_MIDDLE_addrRef_1 &CONST_8 ?+8 ; relsq STEP3_PRINT_MIDDLE_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_16_LOOP
# MSQ_START 1 decleq puts_16_len 0 PUTS_16_END
:PUTS_16_LOOP &puts_16_len &CONST_0 &PUTS_16_END ; lblsq puts_16_len CONST_0 PUTS_16_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_16_len 1
&puts_16_len &CONST_1 ?+8 ; relsq puts_16_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_16_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_16_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_16_str_addrRef_0 &puts_16_str ?+8 ; relsq tmp puts_16_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_16_str 8
&puts_16_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_16_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_16_LOOP
&ZERO &ZERO &PUTS_16_LOOP ; lblsq ZERO ZERO PUTS_16_LOOP
# MSQ_END 1 lbljmp
; label PUTS_16_END
# MSQ_END 0 puts
; addr lineCountPrint_step3 0
# MSQ_START 0 itoa lineCountPrint_step3 linesPass2Len tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_16_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr lineCountPrint_step3 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 lineCountPrint_step3_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &lineCountPrint_step3_addrRef_0 ?+8 ; relsq tmp lineCountPrint_step3_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&lineCountPrint_step3_addrRef_0 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_0 tmp3 1
&lineCountPrint_step3_addrRef_1 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_1 tmp3 1
&lineCountPrint_step3_addrRef_2 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_2 tmp3 1
&lineCountPrint_step3_addrRef_3 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_3 tmp3 1
&lineCountPrint_step3_addrRef_4 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_4 tmp3 1
&lineCountPrint_step3_addrRef_5 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_5 tmp3 1
&lineCountPrint_step3_addrRef_6 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_6 tmp3 1
&lineCountPrint_step3_addrRef_7 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_7 tmp3 1
&lineCountPrint_step3_addrRef_8 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_8 tmp3 1
&lineCountPrint_step3_addrRef_9 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_9 tmp3 1
&lineCountPrint_step3_addrRef_10 &tmp3 ?+8 ; relsq lineCountPrint_step3_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const lineCountPrint_step3 a0 tmp3
# MSQ_START 2 malloc_const lineCountPrint_step3 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:lineCountPrint_step3_addrRef_0 &lineCountPrint_step3 :lineCountPrint_step3_addrRef_1 &lineCountPrint_step3 ?+8 ; relsq lineCountPrint_step3 lineCountPrint_step3 1
:lineCountPrint_step3_addrRef_2 &lineCountPrint_step3 &tmp3 ?+8 ; relsq lineCountPrint_step3 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr lineCountPrint_step3 8
&lineCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_0 CONST_-8 1
&lineCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_1 CONST_-8 1
&lineCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_2 CONST_-8 1
&lineCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_3 CONST_-8 1
&lineCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_4 CONST_-8 1
&lineCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_5 CONST_-8 1
&lineCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_6 CONST_-8 1
&lineCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_7 CONST_-8 1
&lineCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_8 CONST_-8 1
&lineCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_9 CONST_-8 1
&lineCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero lineCountPrint_step3
:lineCountPrint_step3_addrRef_3 &lineCountPrint_step3 :lineCountPrint_step3_addrRef_4 &lineCountPrint_step3 ?+8 ; relsq lineCountPrint_step3 lineCountPrint_step3 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr lineCountPrint_step3 8
&lineCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_0 CONST_-8 1
&lineCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_1 CONST_-8 1
&lineCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_2 CONST_-8 1
&lineCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_3 CONST_-8 1
&lineCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_4 CONST_-8 1
&lineCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_5 CONST_-8 1
&lineCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_6 CONST_-8 1
&lineCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_7 CONST_-8 1
&lineCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_8 CONST_-8 1
&lineCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_9 CONST_-8 1
&lineCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov lineCountPrint_step3 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:lineCountPrint_step3_addrRef_5 &lineCountPrint_step3 :lineCountPrint_step3_addrRef_6 &lineCountPrint_step3 ?+8 ; relsq lineCountPrint_step3 lineCountPrint_step3 1
:lineCountPrint_step3_addrRef_7 &lineCountPrint_step3 &tmp3 ?+8 ; relsq lineCountPrint_step3 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr lineCountPrint_step3 10
&lineCountPrint_step3_addrRef_0 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_0 CONST_10 1
&lineCountPrint_step3_addrRef_1 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_1 CONST_10 1
&lineCountPrint_step3_addrRef_2 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_2 CONST_10 1
&lineCountPrint_step3_addrRef_3 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_3 CONST_10 1
&lineCountPrint_step3_addrRef_4 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_4 CONST_10 1
&lineCountPrint_step3_addrRef_5 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_5 CONST_10 1
&lineCountPrint_step3_addrRef_6 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_6 CONST_10 1
&lineCountPrint_step3_addrRef_7 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_7 CONST_10 1
&lineCountPrint_step3_addrRef_8 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_8 CONST_10 1
&lineCountPrint_step3_addrRef_9 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_9 CONST_10 1
&lineCountPrint_step3_addrRef_10 &CONST_10 ?+8 ; relsq lineCountPrint_step3_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_6_retBuf 0
# MSQ_START 1 setaddr itoa_6_retBuf lineCountPrint_step3 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_6_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_6_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_6_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 lineCountPrint_step3
&tmp2 :lineCountPrint_step3_addrRef_8 &lineCountPrint_step3 ?+8 ; relsq tmp2 lineCountPrint_step3 1
# MSQ_END 2 sub
&itoa_6_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_0 tmp2 1
&itoa_6_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_1 tmp2 1
&itoa_6_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_2 tmp2 1
&itoa_6_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_3 tmp2 1
&itoa_6_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_4 tmp2 1
&itoa_6_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_5 tmp2 1
&itoa_6_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_6 tmp2 1
&itoa_6_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_7 tmp2 1
&itoa_6_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_8 tmp2 1
&itoa_6_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_6_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_6_retLength 0
# MSQ_START 1 copyaddr itoa_6_retLength lineCountPrint_step3 tmp2 tmp3
# MSQ_START 2 setaddr itoa_6_retLength lineCountPrint_step3_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_6_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_6_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &lineCountPrint_step3_addrRef_0 ?+8 ; relsq tmp2 lineCountPrint_step3_addrRef_0 1
&itoa_6_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_6_retLength_addrRef_0 tmp2 1
&itoa_6_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_6_retLength_addrRef_1 tmp2 1
&itoa_6_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_6_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_6_retLength 8
&itoa_6_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_6_retLength_addrRef_0 CONST_-8 1
&itoa_6_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_6_retLength_addrRef_1 CONST_-8 1
&itoa_6_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_6_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_6_noDigits 0
# MSQ_START 1 set itoa_6_noDigits 1
# MSQ_START 2 zero itoa_6_noDigits
&itoa_6_noDigits &itoa_6_noDigits ?+8 ; relsq itoa_6_noDigits itoa_6_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_6_noDigits 1
&itoa_6_noDigits &CONST_-1 ?+8 ; relsq itoa_6_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp linesPass2Len tmp2
# MSQ_START 2 movneg tmp2 linesPass2Len
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &linesPass2Len ?+8 ; relsq tmp2 linesPass2Len 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_6_isNeg 0
# MSQ_START 1 zero itoa_6_isNeg
# MSQ_START 2 sub itoa_6_isNeg itoa_6_isNeg
&itoa_6_isNeg &itoa_6_isNeg ?+8 ; relsq itoa_6_isNeg itoa_6_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_6_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_6_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_6_IS_NEG ; lblsq tmp2 ZERO ITOA_6_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_6_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_32_END
&tmp2 &CONST_-1 &JZ_32_END ; lblsq tmp2 CONST_-1 JZ_32_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_32_REVERT_A
&tmp &CONST_-1 &JZ_32_REVERT_A ; lblsq tmp CONST_-1 JZ_32_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_6_IS_ZERO
&ZERO &ZERO &ITOA_6_IS_ZERO ; lblsq ZERO ZERO ITOA_6_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_32_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_32_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_32_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_6_LOOP
:JZ_32_END &ZERO &ZERO &ITOA_6_LOOP ; lblsq ZERO ZERO ITOA_6_LOOP
# MSQ_END 1 lbljmp
; label ITOA_6_IS_ZERO
# MSQ_START 1 set itoa_6_retBuf 30
# MSQ_START 2 zero itoa_6_retBuf
:ITOA_6_IS_ZERO :itoa_6_retBuf_addrRef_0 &itoa_6_retBuf :itoa_6_retBuf_addrRef_1 &itoa_6_retBuf ?+8 ; relsq itoa_6_retBuf itoa_6_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_6_retBuf 30
:itoa_6_retBuf_addrRef_2 &itoa_6_retBuf &CONST_-30 ?+8 ; relsq itoa_6_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_6_retLength 1
# MSQ_START 2 dec itoa_6_retLength -1
:itoa_6_retLength_addrRef_0 &itoa_6_retLength &CONST_-1 ?+8 ; relsq itoa_6_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_6_END
&ZERO &ZERO &ITOA_6_END ; lblsq ZERO ZERO ITOA_6_END
# MSQ_END 1 lbljmp
; label ITOA_6_IS_NEG
# MSQ_START 1 inc itoa_6_isNeg 1
# MSQ_START 2 dec itoa_6_isNeg -1
:ITOA_6_IS_NEG &itoa_6_isNeg &CONST_-1 ?+8 ; relsq itoa_6_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_6_retBuf 2d
# MSQ_START 2 zero itoa_6_retBuf
:itoa_6_retBuf_addrRef_3 &itoa_6_retBuf :itoa_6_retBuf_addrRef_4 &itoa_6_retBuf ?+8 ; relsq itoa_6_retBuf itoa_6_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_6_retBuf 2d
:itoa_6_retBuf_addrRef_5 &itoa_6_retBuf &CONST_-2D ?+8 ; relsq itoa_6_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_6_retBuf 8
&itoa_6_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_0 CONST_-8 1
&itoa_6_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_1 CONST_-8 1
&itoa_6_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_2 CONST_-8 1
&itoa_6_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_3 CONST_-8 1
&itoa_6_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_4 CONST_-8 1
&itoa_6_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_5 CONST_-8 1
&itoa_6_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_6 CONST_-8 1
&itoa_6_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_7 CONST_-8 1
&itoa_6_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_8 CONST_-8 1
&itoa_6_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_6_retLength 1
# MSQ_START 2 dec itoa_6_retLength -1
:itoa_6_retLength_addrRef_1 &itoa_6_retLength &CONST_-1 ?+8 ; relsq itoa_6_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_6_LOOP
&ZERO &ZERO &ITOA_6_LOOP ; lblsq ZERO ZERO ITOA_6_LOOP
# MSQ_END 1 lbljmp
; label ITOA_6_SUBBERS
:ITOA_6_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_6_LOOP
# MSQ_START 1 jz ITOA_6_SUBBERS ITOA_6_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_6_SUBBERS
:ITOA_6_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_6_SUBBERS_addrRef_0 &ITOA_6_SUBBERS ?+8 ; relsq tmp2 ITOA_6_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_33_END
&tmp2 &CONST_-1 &JZ_33_END ; lblsq tmp2 CONST_-1 JZ_33_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_6_SUBBERS 1 JZ_33_REVERT_A
:ITOA_6_SUBBERS_addrRef_1 &ITOA_6_SUBBERS &CONST_-1 &JZ_33_REVERT_A ; lblsq ITOA_6_SUBBERS CONST_-1 JZ_33_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_6_SUBBERS 1
:ITOA_6_SUBBERS_addrRef_2 &ITOA_6_SUBBERS &CONST_1 ?+8 ; relsq ITOA_6_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_6_REVERT_SUBBERS
&ZERO &ZERO &ITOA_6_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_6_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_33_REVERT_A
# MSQ_START 2 dec ITOA_6_SUBBERS 1
:JZ_33_REVERT_A :ITOA_6_SUBBERS_addrRef_3 &ITOA_6_SUBBERS &CONST_1 ?+8 ; relsq ITOA_6_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_33_END
# MSQ_END 1 jz
; var itoa_6_digitVal 0
# MSQ_START 1 zero itoa_6_digitVal
# MSQ_START 2 sub itoa_6_digitVal itoa_6_digitVal
:JZ_33_END &itoa_6_digitVal &itoa_6_digitVal ?+8 ; relsq itoa_6_digitVal itoa_6_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_6_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_6_SUBBERS ITOA_6_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_6_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_6_SUBBERS_addrRef_4 &ITOA_6_SUBBERS &ITOA_6_HANDLE_DIGIT ; lblsq tmp2 ITOA_6_SUBBERS ITOA_6_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_6_digitVal 1
# MSQ_START 2 dec itoa_6_digitVal -1
&itoa_6_digitVal &CONST_-1 ?+8 ; relsq itoa_6_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_6_SUBBERS
&tmp :ITOA_6_SUBBERS_addrRef_5 &ITOA_6_SUBBERS ?+8 ; relsq tmp ITOA_6_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_6_SUBTRACT_A
&ZERO &ZERO &ITOA_6_SUBTRACT_A ; lblsq ZERO ZERO ITOA_6_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_6_HANDLE_DIGIT
# MSQ_START 1 jz itoa_6_noDigits ITOA_6_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_6_noDigits
:ITOA_6_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_6_noDigits ?+8 ; relsq tmp2 itoa_6_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_34_END
&tmp2 &CONST_-1 &JZ_34_END ; lblsq tmp2 CONST_-1 JZ_34_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_6_noDigits 1 JZ_34_REVERT_A
&itoa_6_noDigits &CONST_-1 &JZ_34_REVERT_A ; lblsq itoa_6_noDigits CONST_-1 JZ_34_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_6_noDigits 1
&itoa_6_noDigits &CONST_1 ?+8 ; relsq itoa_6_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_6_PRINT_DIGIT
&ZERO &ZERO &ITOA_6_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_6_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_34_REVERT_A
# MSQ_START 2 dec itoa_6_noDigits 1
:JZ_34_REVERT_A &itoa_6_noDigits &CONST_1 ?+8 ; relsq itoa_6_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_34_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_6_digitVal ITOA_6_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_6_digitVal
:JZ_34_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_6_digitVal ?+8 ; relsq tmp2 itoa_6_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_35_END
&tmp2 &CONST_-1 &JZ_35_END ; lblsq tmp2 CONST_-1 JZ_35_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_6_digitVal 1 JZ_35_REVERT_A
&itoa_6_digitVal &CONST_-1 &JZ_35_REVERT_A ; lblsq itoa_6_digitVal CONST_-1 JZ_35_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_6_digitVal 1
&itoa_6_digitVal &CONST_1 ?+8 ; relsq itoa_6_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_6_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_6_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_6_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_35_REVERT_A
# MSQ_START 2 dec itoa_6_digitVal 1
:JZ_35_REVERT_A &itoa_6_digitVal &CONST_1 ?+8 ; relsq itoa_6_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_35_END
# MSQ_END 1 jz
; label ITOA_6_PRINT_DIGIT
# MSQ_START 1 zero itoa_6_noDigits
# MSQ_START 2 sub itoa_6_noDigits itoa_6_noDigits
:JZ_35_END :ITOA_6_PRINT_DIGIT &itoa_6_noDigits &itoa_6_noDigits ?+8 ; relsq itoa_6_noDigits itoa_6_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_6_retBuf 30
# MSQ_START 2 zero itoa_6_retBuf
:itoa_6_retBuf_addrRef_6 &itoa_6_retBuf :itoa_6_retBuf_addrRef_7 &itoa_6_retBuf ?+8 ; relsq itoa_6_retBuf itoa_6_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_6_retBuf 30
:itoa_6_retBuf_addrRef_8 &itoa_6_retBuf &CONST_-30 ?+8 ; relsq itoa_6_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_6_retBuf itoa_6_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_6_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_6_digitVal ?+8 ; relsq tmp2 itoa_6_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_6_retBuf tmp2
:itoa_6_retBuf_addrRef_9 &itoa_6_retBuf &tmp2 ?+8 ; relsq itoa_6_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_6_retBuf 8
&itoa_6_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_0 CONST_-8 1
&itoa_6_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_1 CONST_-8 1
&itoa_6_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_2 CONST_-8 1
&itoa_6_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_3 CONST_-8 1
&itoa_6_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_4 CONST_-8 1
&itoa_6_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_5 CONST_-8 1
&itoa_6_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_6 CONST_-8 1
&itoa_6_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_7 CONST_-8 1
&itoa_6_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_8 CONST_-8 1
&itoa_6_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_6_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_6_retLength 1
# MSQ_START 2 dec itoa_6_retLength -1
:itoa_6_retLength_addrRef_2 &itoa_6_retLength &CONST_-1 ?+8 ; relsq itoa_6_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_6_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_6_SUBBERS 8
:ITOA_6_DONT_PRINT_DIGIT &ITOA_6_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_6_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_6_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_6_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_6_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_6_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_6_LOOP
&ZERO &ZERO &ITOA_6_LOOP ; lblsq ZERO ZERO ITOA_6_LOOP
# MSQ_END 1 lbljmp
; label ITOA_6_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_6_SUBBERS 98
:ITOA_6_REVERT_SUBBERS &ITOA_6_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_0 CONST_98 1
&ITOA_6_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_1 CONST_98 1
&ITOA_6_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_2 CONST_98 1
&ITOA_6_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_3 CONST_98 1
&ITOA_6_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_4 CONST_98 1
&ITOA_6_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_6_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_6_END
# MSQ_END 0 itoa
# MSQ_START 0 puts lineCountPrint_step3 tmp tmp2
; addr puts_17_str 0
# MSQ_START 1 setaddr puts_17_str lineCountPrint_step3 tmp tmp2
# MSQ_START 2 mov tmp puts_17_str_addrRef_0 tmp2
:ITOA_6_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_17_str_addrRef_0 ?+8 ; relsq tmp2 puts_17_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp lineCountPrint_step3
&tmp :lineCountPrint_step3_addrRef_9 &lineCountPrint_step3 ?+8 ; relsq tmp lineCountPrint_step3 1
# MSQ_END 2 sub
&puts_17_str_addrRef_0 &tmp ?+8 ; relsq puts_17_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_17_len 0
# MSQ_START 1 incaddr lineCountPrint_step3 8
&lineCountPrint_step3_addrRef_0 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_0 CONST_-8 1
&lineCountPrint_step3_addrRef_1 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_1 CONST_-8 1
&lineCountPrint_step3_addrRef_2 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_2 CONST_-8 1
&lineCountPrint_step3_addrRef_3 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_3 CONST_-8 1
&lineCountPrint_step3_addrRef_4 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_4 CONST_-8 1
&lineCountPrint_step3_addrRef_5 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_5 CONST_-8 1
&lineCountPrint_step3_addrRef_6 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_6 CONST_-8 1
&lineCountPrint_step3_addrRef_7 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_7 CONST_-8 1
&lineCountPrint_step3_addrRef_8 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_8 CONST_-8 1
&lineCountPrint_step3_addrRef_9 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_9 CONST_-8 1
&lineCountPrint_step3_addrRef_10 &CONST_-8 ?+8 ; relsq lineCountPrint_step3_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_17_len lineCountPrint_step3 tmp
# MSQ_START 2 movneg tmp lineCountPrint_step3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :lineCountPrint_step3_addrRef_10 &lineCountPrint_step3 ?+8 ; relsq tmp lineCountPrint_step3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_17_len tmp
&puts_17_len &puts_17_len ?+8 ; relsq puts_17_len puts_17_len 1
&puts_17_len &tmp ?+8 ; relsq puts_17_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr lineCountPrint_step3 8
&lineCountPrint_step3_addrRef_0 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_0 CONST_8 1
&lineCountPrint_step3_addrRef_1 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_1 CONST_8 1
&lineCountPrint_step3_addrRef_2 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_2 CONST_8 1
&lineCountPrint_step3_addrRef_3 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_3 CONST_8 1
&lineCountPrint_step3_addrRef_4 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_4 CONST_8 1
&lineCountPrint_step3_addrRef_5 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_5 CONST_8 1
&lineCountPrint_step3_addrRef_6 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_6 CONST_8 1
&lineCountPrint_step3_addrRef_7 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_7 CONST_8 1
&lineCountPrint_step3_addrRef_8 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_8 CONST_8 1
&lineCountPrint_step3_addrRef_9 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_9 CONST_8 1
&lineCountPrint_step3_addrRef_10 &CONST_8 ?+8 ; relsq lineCountPrint_step3_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_17_LOOP
# MSQ_START 1 decleq puts_17_len 0 PUTS_17_END
:PUTS_17_LOOP &puts_17_len &CONST_0 &PUTS_17_END ; lblsq puts_17_len CONST_0 PUTS_17_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_17_len 1
&puts_17_len &CONST_1 ?+8 ; relsq puts_17_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_17_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_17_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_17_str_addrRef_0 &puts_17_str ?+8 ; relsq tmp puts_17_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_17_str 8
&puts_17_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_17_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_17_LOOP
&ZERO &ZERO &PUTS_17_LOOP ; lblsq ZERO ZERO PUTS_17_LOOP
# MSQ_END 1 lbljmp
; label PUTS_17_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP3_PRINT_SUFFIX tmp tmp2
; addr puts_18_str 0
# MSQ_START 1 setaddr puts_18_str STEP3_PRINT_SUFFIX tmp tmp2
# MSQ_START 2 mov tmp puts_18_str_addrRef_0 tmp2
:PUTS_17_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_18_str_addrRef_0 ?+8 ; relsq tmp2 puts_18_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP3_PRINT_SUFFIX
&tmp :STEP3_PRINT_SUFFIX_addrRef_0 &STEP3_PRINT_SUFFIX ?+8 ; relsq tmp STEP3_PRINT_SUFFIX 1
# MSQ_END 2 sub
&puts_18_str_addrRef_0 &tmp ?+8 ; relsq puts_18_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_18_len 0
# MSQ_START 1 incaddr STEP3_PRINT_SUFFIX 8
&STEP3_PRINT_SUFFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP3_PRINT_SUFFIX_addrRef_0 CONST_-8 1
&STEP3_PRINT_SUFFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP3_PRINT_SUFFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_18_len STEP3_PRINT_SUFFIX tmp
# MSQ_START 2 movneg tmp STEP3_PRINT_SUFFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP3_PRINT_SUFFIX_addrRef_1 &STEP3_PRINT_SUFFIX ?+8 ; relsq tmp STEP3_PRINT_SUFFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_18_len tmp
&puts_18_len &puts_18_len ?+8 ; relsq puts_18_len puts_18_len 1
&puts_18_len &tmp ?+8 ; relsq puts_18_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP3_PRINT_SUFFIX 8
&STEP3_PRINT_SUFFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP3_PRINT_SUFFIX_addrRef_0 CONST_8 1
&STEP3_PRINT_SUFFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP3_PRINT_SUFFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_18_LOOP
# MSQ_START 1 decleq puts_18_len 0 PUTS_18_END
:PUTS_18_LOOP &puts_18_len &CONST_0 &PUTS_18_END ; lblsq puts_18_len CONST_0 PUTS_18_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_18_len 1
&puts_18_len &CONST_1 ?+8 ; relsq puts_18_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_18_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_18_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_18_str_addrRef_0 &puts_18_str ?+8 ; relsq tmp puts_18_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_18_str 8
&puts_18_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_18_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_18_LOOP
&ZERO &ZERO &PUTS_18_LOOP ; lblsq ZERO ZERO PUTS_18_LOOP
# MSQ_END 1 lbljmp
; label PUTS_18_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_18_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar


# 4. Find label+stub addresses
; label STEP4_START
; var size_step4 0

; addr curLine_step4 0
# MSQ_START 0 setaddr curLine_step4 linesPass2Begin tmp tmp2
# MSQ_START 1 mov tmp curLine_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curLine_step4_addrRef_0
:STEP4_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curLine_step4_addrRef_0 ?+8 ; relsq tmp2 curLine_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp linesPass2Begin
&tmp &linesPass2Begin ?+8 ; relsq tmp linesPass2Begin 1
# MSQ_END 1 sub
&curLine_step4_addrRef_0 &tmp ?+8 ; relsq curLine_step4_addrRef_0 tmp 1
&curLine_step4_addrRef_1 &tmp ?+8 ; relsq curLine_step4_addrRef_1 tmp 1
&curLine_step4_addrRef_2 &tmp ?+8 ; relsq curLine_step4_addrRef_2 tmp 1
&curLine_step4_addrRef_3 &tmp ?+8 ; relsq curLine_step4_addrRef_3 tmp 1
&curLine_step4_addrRef_4 &tmp ?+8 ; relsq curLine_step4_addrRef_4 tmp 1
&curLine_step4_addrRef_5 &tmp ?+8 ; relsq curLine_step4_addrRef_5 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 mov linesLeft linesPass2Len tmp
# MSQ_START 1 movneg tmp linesPass2Len
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp linesPass2Len
&tmp &linesPass2Len ?+8 ; relsq tmp linesPass2Len 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg linesLeft tmp
# MSQ_START 2 zero linesLeft
&linesLeft &linesLeft ?+8 ; relsq linesLeft linesLeft 1
# MSQ_END 2 zero
# MSQ_START 2 sub linesLeft tmp
&linesLeft &tmp ?+8 ; relsq linesLeft tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label STEP4_LOOP
# MSQ_START 0 decleq linesLeft 0 STEP4_END
:STEP4_LOOP &linesLeft &CONST_0 &STEP4_END ; lblsq linesLeft CONST_0 STEP4_END
# MSQ_END 0 decleq
# MSQ_START 0 dec linesLeft 1
&linesLeft &CONST_1 ?+8 ; relsq linesLeft CONST_1 1
# MSQ_END 0 dec

# Py: line.offset = size
# MSQ_START 0 incaddr curLine_step4 50
&curLine_step4_addrRef_0 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-50 1
&curLine_step4_addrRef_1 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-50 1
&curLine_step4_addrRef_2 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-50 1
&curLine_step4_addrRef_3 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-50 1
&curLine_step4_addrRef_4 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-50 1
&curLine_step4_addrRef_5 &CONST_-50 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-50 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov curLine_step4 size_step4 tmp
# MSQ_START 1 movneg tmp size_step4
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp size_step4
&tmp &size_step4 ?+8 ; relsq tmp size_step4 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg curLine_step4 tmp
# MSQ_START 2 zero curLine_step4
:curLine_step4_addrRef_0 &curLine_step4 :curLine_step4_addrRef_1 &curLine_step4 ?+8 ; relsq curLine_step4 curLine_step4 1
# MSQ_END 2 zero
# MSQ_START 2 sub curLine_step4 tmp
:curLine_step4_addrRef_2 &curLine_step4 &tmp ?+8 ; relsq curLine_step4 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 decaddr curLine_step4 50
&curLine_step4_addrRef_0 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_0 CONST_50 1
&curLine_step4_addrRef_1 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_1 CONST_50 1
&curLine_step4_addrRef_2 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_2 CONST_50 1
&curLine_step4_addrRef_3 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_3 CONST_50 1
&curLine_step4_addrRef_4 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_4 CONST_50 1
&curLine_step4_addrRef_5 &CONST_50 ?+8 ; relsq curLine_step4_addrRef_5 CONST_50 1
# MSQ_END 0 decaddr

# MSQ_START 0 strcmp_const curLine_step4 ABSSQ STEP4_HANDLE_SQ tmp tmp2
; addr strcmp_const_20_a 0
# MSQ_START 1 copyaddr strcmp_const_20_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_20_a curLine_step4_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_20_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_20_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_20_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_20_a_addrRef_0 tmp 1
&strcmp_const_20_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_20_a_addrRef_1 tmp 1
&strcmp_const_20_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_20_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_20_a 8
&strcmp_const_20_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_20_a_addrRef_0 CONST_-8 1
&strcmp_const_20_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_20_a_addrRef_1 CONST_-8 1
&strcmp_const_20_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_20_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr ABSSQ 8
&ABSSQ_addrRef_0 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_-8 1
&ABSSQ_addrRef_1 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_-8 1
&ABSSQ_addrRef_2 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_-8 1
&ABSSQ_addrRef_3 &CONST_-8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_20_a ABSSQ STRCMP_CONST_20_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_20_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_20_a_addrRef_0 &strcmp_const_20_a ?+8 ; relsq tmp2 strcmp_const_20_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ABSSQ
&tmp :ABSSQ_addrRef_2 &ABSSQ ?+8 ; relsq tmp ABSSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_20_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_20_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_20_REVERT_ADDR
&tmp &CONST_-1 &JNZ_40_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_40_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_40_END ; lblsq ZERO ZERO JNZ_40_END
; label JNZ_40_REVERT_AND_JUMP
:JNZ_40_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_20_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_20_REVERT_ADDR
; label JNZ_40_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_20_len 0
# MSQ_START 1 mov strcmp_const_20_len strcmp_const_20_a tmp
# MSQ_START 2 movneg tmp strcmp_const_20_a
:JNZ_40_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_20_a_addrRef_1 &strcmp_const_20_a ?+8 ; relsq tmp strcmp_const_20_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_20_len tmp
&strcmp_const_20_len &strcmp_const_20_len ?+8 ; relsq strcmp_const_20_len strcmp_const_20_len 1
&strcmp_const_20_len &tmp ?+8 ; relsq strcmp_const_20_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_20_a 8
&strcmp_const_20_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_20_a_addrRef_0 CONST_8 1
&strcmp_const_20_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_20_a_addrRef_1 CONST_8 1
&strcmp_const_20_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_20_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr ABSSQ 8
&ABSSQ_addrRef_0 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_8 1
&ABSSQ_addrRef_1 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_8 1
&ABSSQ_addrRef_2 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_8 1
&ABSSQ_addrRef_3 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_20_aStr 0
; addr strcmp_const_20_bStr 0
# MSQ_START 1 setaddr strcmp_const_20_aStr strcmp_const_20_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_20_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_20_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_20_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_20_a
&tmp :strcmp_const_20_a_addrRef_2 &strcmp_const_20_a ?+8 ; relsq tmp strcmp_const_20_a 1
# MSQ_END 2 sub
&strcmp_const_20_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_20_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_20_bStr ABSSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_20_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_20_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_20_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp ABSSQ
&tmp :ABSSQ_addrRef_3 &ABSSQ ?+8 ; relsq tmp ABSSQ 1
# MSQ_END 2 sub
&strcmp_const_20_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_20_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_20_LOOP
# MSQ_START 1 decleq strcmp_const_20_len 0 STEP4_HANDLE_SQ
:STRCMP_CONST_20_LOOP &strcmp_const_20_len &CONST_0 &STEP4_HANDLE_SQ ; lblsq strcmp_const_20_len CONST_0 STEP4_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_20_len 1
&strcmp_const_20_len &CONST_1 ?+8 ; relsq strcmp_const_20_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_20_aStr strcmp_const_20_bStr STRCMP_CONST_20_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_20_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_20_aStr_addrRef_0 &strcmp_const_20_aStr ?+8 ; relsq tmp2 strcmp_const_20_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_20_bStr
&tmp :strcmp_const_20_bStr_addrRef_0 &strcmp_const_20_bStr ?+8 ; relsq tmp strcmp_const_20_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_20_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_20_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_20_END
&tmp &CONST_-1 &JNZ_41_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_41_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_41_END ; lblsq ZERO ZERO JNZ_41_END
; label JNZ_41_REVERT_AND_JUMP
:JNZ_41_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_20_END ; lblsq ZERO ZERO STRCMP_CONST_20_END
; label JNZ_41_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_20_aStr 8
:JNZ_41_END &strcmp_const_20_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_20_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_20_bStr 8
&strcmp_const_20_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_20_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_20_LOOP
&ZERO &ZERO &STRCMP_CONST_20_LOOP ; lblsq ZERO ZERO STRCMP_CONST_20_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_20_REVERT_ADDR
# MSQ_START 1 decaddr ABSSQ 8
:STRCMP_CONST_20_REVERT_ADDR &ABSSQ_addrRef_0 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_0 CONST_8 1
&ABSSQ_addrRef_1 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_1 CONST_8 1
&ABSSQ_addrRef_2 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_2 CONST_8 1
&ABSSQ_addrRef_3 &CONST_8 ?+8 ; relsq ABSSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_20_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step4 RELSQ STEP4_HANDLE_SQ tmp tmp2
; addr strcmp_const_21_a 0
# MSQ_START 1 copyaddr strcmp_const_21_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_21_a curLine_step4_addrRef_0 tmp tmp2
:STRCMP_CONST_20_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_21_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_21_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_21_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_21_a_addrRef_0 tmp 1
&strcmp_const_21_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_21_a_addrRef_1 tmp 1
&strcmp_const_21_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_21_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_21_a 8
&strcmp_const_21_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_21_a_addrRef_0 CONST_-8 1
&strcmp_const_21_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_21_a_addrRef_1 CONST_-8 1
&strcmp_const_21_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_21_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr RELSQ 8
&RELSQ_addrRef_0 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_0 CONST_-8 1
&RELSQ_addrRef_1 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_1 CONST_-8 1
&RELSQ_addrRef_2 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_2 CONST_-8 1
&RELSQ_addrRef_3 &CONST_-8 ?+8 ; relsq RELSQ_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_21_a RELSQ STRCMP_CONST_21_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_21_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_21_a_addrRef_0 &strcmp_const_21_a ?+8 ; relsq tmp2 strcmp_const_21_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RELSQ
&tmp :RELSQ_addrRef_2 &RELSQ ?+8 ; relsq tmp RELSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_21_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_21_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_21_REVERT_ADDR
&tmp &CONST_-1 &JNZ_42_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_42_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_42_END ; lblsq ZERO ZERO JNZ_42_END
; label JNZ_42_REVERT_AND_JUMP
:JNZ_42_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_21_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_21_REVERT_ADDR
; label JNZ_42_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_21_len 0
# MSQ_START 1 mov strcmp_const_21_len strcmp_const_21_a tmp
# MSQ_START 2 movneg tmp strcmp_const_21_a
:JNZ_42_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_21_a_addrRef_1 &strcmp_const_21_a ?+8 ; relsq tmp strcmp_const_21_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_21_len tmp
&strcmp_const_21_len &strcmp_const_21_len ?+8 ; relsq strcmp_const_21_len strcmp_const_21_len 1
&strcmp_const_21_len &tmp ?+8 ; relsq strcmp_const_21_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_21_a 8
&strcmp_const_21_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_21_a_addrRef_0 CONST_8 1
&strcmp_const_21_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_21_a_addrRef_1 CONST_8 1
&strcmp_const_21_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_21_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr RELSQ 8
&RELSQ_addrRef_0 &CONST_8 ?+8 ; relsq RELSQ_addrRef_0 CONST_8 1
&RELSQ_addrRef_1 &CONST_8 ?+8 ; relsq RELSQ_addrRef_1 CONST_8 1
&RELSQ_addrRef_2 &CONST_8 ?+8 ; relsq RELSQ_addrRef_2 CONST_8 1
&RELSQ_addrRef_3 &CONST_8 ?+8 ; relsq RELSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_21_aStr 0
; addr strcmp_const_21_bStr 0
# MSQ_START 1 setaddr strcmp_const_21_aStr strcmp_const_21_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_21_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_21_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_21_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_21_a
&tmp :strcmp_const_21_a_addrRef_2 &strcmp_const_21_a ?+8 ; relsq tmp strcmp_const_21_a 1
# MSQ_END 2 sub
&strcmp_const_21_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_21_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_21_bStr RELSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_21_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_21_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_21_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RELSQ
&tmp :RELSQ_addrRef_3 &RELSQ ?+8 ; relsq tmp RELSQ 1
# MSQ_END 2 sub
&strcmp_const_21_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_21_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_21_LOOP
# MSQ_START 1 decleq strcmp_const_21_len 0 STEP4_HANDLE_SQ
:STRCMP_CONST_21_LOOP &strcmp_const_21_len &CONST_0 &STEP4_HANDLE_SQ ; lblsq strcmp_const_21_len CONST_0 STEP4_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_21_len 1
&strcmp_const_21_len &CONST_1 ?+8 ; relsq strcmp_const_21_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_21_aStr strcmp_const_21_bStr STRCMP_CONST_21_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_21_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_21_aStr_addrRef_0 &strcmp_const_21_aStr ?+8 ; relsq tmp2 strcmp_const_21_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_21_bStr
&tmp :strcmp_const_21_bStr_addrRef_0 &strcmp_const_21_bStr ?+8 ; relsq tmp strcmp_const_21_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_21_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_21_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_21_END
&tmp &CONST_-1 &JNZ_43_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_43_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_43_END ; lblsq ZERO ZERO JNZ_43_END
; label JNZ_43_REVERT_AND_JUMP
:JNZ_43_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_21_END ; lblsq ZERO ZERO STRCMP_CONST_21_END
; label JNZ_43_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_21_aStr 8
:JNZ_43_END &strcmp_const_21_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_21_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_21_bStr 8
&strcmp_const_21_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_21_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_21_LOOP
&ZERO &ZERO &STRCMP_CONST_21_LOOP ; lblsq ZERO ZERO STRCMP_CONST_21_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_21_REVERT_ADDR
# MSQ_START 1 decaddr RELSQ 8
:STRCMP_CONST_21_REVERT_ADDR &RELSQ_addrRef_0 &CONST_8 ?+8 ; relsq RELSQ_addrRef_0 CONST_8 1
&RELSQ_addrRef_1 &CONST_8 ?+8 ; relsq RELSQ_addrRef_1 CONST_8 1
&RELSQ_addrRef_2 &CONST_8 ?+8 ; relsq RELSQ_addrRef_2 CONST_8 1
&RELSQ_addrRef_3 &CONST_8 ?+8 ; relsq RELSQ_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_21_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step4 LBLSQ STEP4_HANDLE_SQ tmp tmp2
; addr strcmp_const_22_a 0
# MSQ_START 1 copyaddr strcmp_const_22_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_22_a curLine_step4_addrRef_0 tmp tmp2
:STRCMP_CONST_21_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_22_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_22_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_22_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_22_a_addrRef_0 tmp 1
&strcmp_const_22_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_22_a_addrRef_1 tmp 1
&strcmp_const_22_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_22_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_22_a 8
&strcmp_const_22_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_22_a_addrRef_0 CONST_-8 1
&strcmp_const_22_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_22_a_addrRef_1 CONST_-8 1
&strcmp_const_22_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_22_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_-8 1
&LBLSQ_addrRef_1 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_-8 1
&LBLSQ_addrRef_2 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_-8 1
&LBLSQ_addrRef_3 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_-8 1
&LBLSQ_addrRef_4 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_-8 1
&LBLSQ_addrRef_5 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_-8 1
&LBLSQ_addrRef_6 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_-8 1
&LBLSQ_addrRef_7 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_22_a LBLSQ STRCMP_CONST_22_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_22_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_22_a_addrRef_0 &strcmp_const_22_a ?+8 ; relsq tmp2 strcmp_const_22_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_4 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_22_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_22_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_22_REVERT_ADDR
&tmp &CONST_-1 &JNZ_44_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_44_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_44_END ; lblsq ZERO ZERO JNZ_44_END
; label JNZ_44_REVERT_AND_JUMP
:JNZ_44_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_22_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_22_REVERT_ADDR
; label JNZ_44_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_22_len 0
# MSQ_START 1 mov strcmp_const_22_len strcmp_const_22_a tmp
# MSQ_START 2 movneg tmp strcmp_const_22_a
:JNZ_44_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_22_a_addrRef_1 &strcmp_const_22_a ?+8 ; relsq tmp strcmp_const_22_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_22_len tmp
&strcmp_const_22_len &strcmp_const_22_len ?+8 ; relsq strcmp_const_22_len strcmp_const_22_len 1
&strcmp_const_22_len &tmp ?+8 ; relsq strcmp_const_22_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_22_a 8
&strcmp_const_22_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_22_a_addrRef_0 CONST_8 1
&strcmp_const_22_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_22_a_addrRef_1 CONST_8 1
&strcmp_const_22_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_22_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_22_aStr 0
; addr strcmp_const_22_bStr 0
# MSQ_START 1 setaddr strcmp_const_22_aStr strcmp_const_22_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_22_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_22_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_22_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_22_a
&tmp :strcmp_const_22_a_addrRef_2 &strcmp_const_22_a ?+8 ; relsq tmp strcmp_const_22_a 1
# MSQ_END 2 sub
&strcmp_const_22_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_22_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_22_bStr LBLSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_22_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_22_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_22_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_5 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
&strcmp_const_22_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_22_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_22_LOOP
# MSQ_START 1 decleq strcmp_const_22_len 0 STEP4_HANDLE_SQ
:STRCMP_CONST_22_LOOP &strcmp_const_22_len &CONST_0 &STEP4_HANDLE_SQ ; lblsq strcmp_const_22_len CONST_0 STEP4_HANDLE_SQ
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_22_len 1
&strcmp_const_22_len &CONST_1 ?+8 ; relsq strcmp_const_22_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_22_aStr strcmp_const_22_bStr STRCMP_CONST_22_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_22_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_22_aStr_addrRef_0 &strcmp_const_22_aStr ?+8 ; relsq tmp2 strcmp_const_22_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_22_bStr
&tmp :strcmp_const_22_bStr_addrRef_0 &strcmp_const_22_bStr ?+8 ; relsq tmp strcmp_const_22_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_22_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_22_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_22_END
&tmp &CONST_-1 &JNZ_45_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_45_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_45_END ; lblsq ZERO ZERO JNZ_45_END
; label JNZ_45_REVERT_AND_JUMP
:JNZ_45_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_22_END ; lblsq ZERO ZERO STRCMP_CONST_22_END
; label JNZ_45_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_22_aStr 8
:JNZ_45_END &strcmp_const_22_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_22_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_22_bStr 8
&strcmp_const_22_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_22_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_22_LOOP
&ZERO &ZERO &STRCMP_CONST_22_LOOP ; lblsq ZERO ZERO STRCMP_CONST_22_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_22_REVERT_ADDR
# MSQ_START 1 decaddr LBLSQ 8
:STRCMP_CONST_22_REVERT_ADDR &LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_22_END
# MSQ_END 0 strcmp_const

# MSQ_START 0 strcmp_const curLine_step4 RAW STEP4_HANDLE_RAW tmp tmp2
; addr strcmp_const_23_a 0
# MSQ_START 1 copyaddr strcmp_const_23_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_23_a curLine_step4_addrRef_0 tmp tmp2
:STRCMP_CONST_22_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_23_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_23_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_23_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_23_a_addrRef_0 tmp 1
&strcmp_const_23_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_23_a_addrRef_1 tmp 1
&strcmp_const_23_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_23_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_23_a 8
&strcmp_const_23_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_23_a_addrRef_0 CONST_-8 1
&strcmp_const_23_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_23_a_addrRef_1 CONST_-8 1
&strcmp_const_23_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_23_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr RAW 8
&RAW_addrRef_0 &CONST_-8 ?+8 ; relsq RAW_addrRef_0 CONST_-8 1
&RAW_addrRef_1 &CONST_-8 ?+8 ; relsq RAW_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_23_a RAW STRCMP_CONST_23_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_23_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_23_a_addrRef_0 &strcmp_const_23_a ?+8 ; relsq tmp2 strcmp_const_23_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW
&tmp :RAW_addrRef_0 &RAW ?+8 ; relsq tmp RAW 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_23_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_23_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_23_REVERT_ADDR
&tmp &CONST_-1 &JNZ_46_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_46_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_46_END ; lblsq ZERO ZERO JNZ_46_END
; label JNZ_46_REVERT_AND_JUMP
:JNZ_46_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_23_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_23_REVERT_ADDR
; label JNZ_46_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_23_len 0
# MSQ_START 1 mov strcmp_const_23_len strcmp_const_23_a tmp
# MSQ_START 2 movneg tmp strcmp_const_23_a
:JNZ_46_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_23_a_addrRef_1 &strcmp_const_23_a ?+8 ; relsq tmp strcmp_const_23_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_23_len tmp
&strcmp_const_23_len &strcmp_const_23_len ?+8 ; relsq strcmp_const_23_len strcmp_const_23_len 1
&strcmp_const_23_len &tmp ?+8 ; relsq strcmp_const_23_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_23_a 8
&strcmp_const_23_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_23_a_addrRef_0 CONST_8 1
&strcmp_const_23_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_23_a_addrRef_1 CONST_8 1
&strcmp_const_23_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_23_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr RAW 8
&RAW_addrRef_0 &CONST_8 ?+8 ; relsq RAW_addrRef_0 CONST_8 1
&RAW_addrRef_1 &CONST_8 ?+8 ; relsq RAW_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_23_aStr 0
; addr strcmp_const_23_bStr 0
# MSQ_START 1 setaddr strcmp_const_23_aStr strcmp_const_23_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_23_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_23_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_23_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_23_a
&tmp :strcmp_const_23_a_addrRef_2 &strcmp_const_23_a ?+8 ; relsq tmp strcmp_const_23_a 1
# MSQ_END 2 sub
&strcmp_const_23_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_23_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_23_bStr RAW tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_23_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_23_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_23_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW
&tmp :RAW_addrRef_1 &RAW ?+8 ; relsq tmp RAW 1
# MSQ_END 2 sub
&strcmp_const_23_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_23_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_23_LOOP
# MSQ_START 1 decleq strcmp_const_23_len 0 STEP4_HANDLE_RAW
:STRCMP_CONST_23_LOOP &strcmp_const_23_len &CONST_0 &STEP4_HANDLE_RAW ; lblsq strcmp_const_23_len CONST_0 STEP4_HANDLE_RAW
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_23_len 1
&strcmp_const_23_len &CONST_1 ?+8 ; relsq strcmp_const_23_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_23_aStr strcmp_const_23_bStr STRCMP_CONST_23_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_23_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_23_aStr_addrRef_0 &strcmp_const_23_aStr ?+8 ; relsq tmp2 strcmp_const_23_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_23_bStr
&tmp :strcmp_const_23_bStr_addrRef_0 &strcmp_const_23_bStr ?+8 ; relsq tmp strcmp_const_23_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_23_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_23_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_23_END
&tmp &CONST_-1 &JNZ_47_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_47_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_47_END ; lblsq ZERO ZERO JNZ_47_END
; label JNZ_47_REVERT_AND_JUMP
:JNZ_47_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_23_END ; lblsq ZERO ZERO STRCMP_CONST_23_END
; label JNZ_47_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_23_aStr 8
:JNZ_47_END &strcmp_const_23_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_23_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_23_bStr 8
&strcmp_const_23_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_23_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_23_LOOP
&ZERO &ZERO &STRCMP_CONST_23_LOOP ; lblsq ZERO ZERO STRCMP_CONST_23_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_23_REVERT_ADDR
# MSQ_START 1 decaddr RAW 8
:STRCMP_CONST_23_REVERT_ADDR &RAW_addrRef_0 &CONST_8 ?+8 ; relsq RAW_addrRef_0 CONST_8 1
&RAW_addrRef_1 &CONST_8 ?+8 ; relsq RAW_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_23_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 strcmp_const curLine_step4 RAW_REF STEP4_HANDLE_RAW tmp tmp2
; addr strcmp_const_24_a 0
# MSQ_START 1 copyaddr strcmp_const_24_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_24_a curLine_step4_addrRef_0 tmp tmp2
:STRCMP_CONST_23_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_24_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_24_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_24_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_24_a_addrRef_0 tmp 1
&strcmp_const_24_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_24_a_addrRef_1 tmp 1
&strcmp_const_24_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_24_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_24_a 8
&strcmp_const_24_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_24_a_addrRef_0 CONST_-8 1
&strcmp_const_24_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_24_a_addrRef_1 CONST_-8 1
&strcmp_const_24_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_24_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr RAW_REF 8
&RAW_REF_addrRef_0 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_-8 1
&RAW_REF_addrRef_1 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_-8 1
&RAW_REF_addrRef_2 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_-8 1
&RAW_REF_addrRef_3 &CONST_-8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_24_a RAW_REF STRCMP_CONST_24_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_24_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_24_a_addrRef_0 &strcmp_const_24_a ?+8 ; relsq tmp2 strcmp_const_24_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW_REF
&tmp :RAW_REF_addrRef_2 &RAW_REF ?+8 ; relsq tmp RAW_REF 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_24_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_24_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_24_REVERT_ADDR
&tmp &CONST_-1 &JNZ_48_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_48_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_48_END ; lblsq ZERO ZERO JNZ_48_END
; label JNZ_48_REVERT_AND_JUMP
:JNZ_48_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_24_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_24_REVERT_ADDR
; label JNZ_48_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_24_len 0
# MSQ_START 1 mov strcmp_const_24_len strcmp_const_24_a tmp
# MSQ_START 2 movneg tmp strcmp_const_24_a
:JNZ_48_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_24_a_addrRef_1 &strcmp_const_24_a ?+8 ; relsq tmp strcmp_const_24_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_24_len tmp
&strcmp_const_24_len &strcmp_const_24_len ?+8 ; relsq strcmp_const_24_len strcmp_const_24_len 1
&strcmp_const_24_len &tmp ?+8 ; relsq strcmp_const_24_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_24_a 8
&strcmp_const_24_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_24_a_addrRef_0 CONST_8 1
&strcmp_const_24_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_24_a_addrRef_1 CONST_8 1
&strcmp_const_24_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_24_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr RAW_REF 8
&RAW_REF_addrRef_0 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_8 1
&RAW_REF_addrRef_1 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_8 1
&RAW_REF_addrRef_2 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_8 1
&RAW_REF_addrRef_3 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_24_aStr 0
; addr strcmp_const_24_bStr 0
# MSQ_START 1 setaddr strcmp_const_24_aStr strcmp_const_24_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_24_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_24_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_24_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_24_a
&tmp :strcmp_const_24_a_addrRef_2 &strcmp_const_24_a ?+8 ; relsq tmp strcmp_const_24_a 1
# MSQ_END 2 sub
&strcmp_const_24_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_24_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_24_bStr RAW_REF tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_24_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_24_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_24_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp RAW_REF
&tmp :RAW_REF_addrRef_3 &RAW_REF ?+8 ; relsq tmp RAW_REF 1
# MSQ_END 2 sub
&strcmp_const_24_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_24_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_24_LOOP
# MSQ_START 1 decleq strcmp_const_24_len 0 STEP4_HANDLE_RAW
:STRCMP_CONST_24_LOOP &strcmp_const_24_len &CONST_0 &STEP4_HANDLE_RAW ; lblsq strcmp_const_24_len CONST_0 STEP4_HANDLE_RAW
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_24_len 1
&strcmp_const_24_len &CONST_1 ?+8 ; relsq strcmp_const_24_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_24_aStr strcmp_const_24_bStr STRCMP_CONST_24_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_24_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_24_aStr_addrRef_0 &strcmp_const_24_aStr ?+8 ; relsq tmp2 strcmp_const_24_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_24_bStr
&tmp :strcmp_const_24_bStr_addrRef_0 &strcmp_const_24_bStr ?+8 ; relsq tmp strcmp_const_24_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_24_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_24_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_24_END
&tmp &CONST_-1 &JNZ_49_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_49_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_49_END ; lblsq ZERO ZERO JNZ_49_END
; label JNZ_49_REVERT_AND_JUMP
:JNZ_49_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_24_END ; lblsq ZERO ZERO STRCMP_CONST_24_END
; label JNZ_49_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_24_aStr 8
:JNZ_49_END &strcmp_const_24_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_24_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_24_bStr 8
&strcmp_const_24_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_24_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_24_LOOP
&ZERO &ZERO &STRCMP_CONST_24_LOOP ; lblsq ZERO ZERO STRCMP_CONST_24_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_24_REVERT_ADDR
# MSQ_START 1 decaddr RAW_REF 8
:STRCMP_CONST_24_REVERT_ADDR &RAW_REF_addrRef_0 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_0 CONST_8 1
&RAW_REF_addrRef_1 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_1 CONST_8 1
&RAW_REF_addrRef_2 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_2 CONST_8 1
&RAW_REF_addrRef_3 &CONST_8 ?+8 ; relsq RAW_REF_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_24_END
# MSQ_END 0 strcmp_const

# MSQ_START 0 strcmp_const curLine_step4 LABEL STEP4_HANDLE_LABEL tmp tmp2
; addr strcmp_const_25_a 0
# MSQ_START 1 copyaddr strcmp_const_25_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_25_a curLine_step4_addrRef_0 tmp tmp2
:STRCMP_CONST_24_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_25_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_25_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_25_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_25_a_addrRef_0 tmp 1
&strcmp_const_25_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_25_a_addrRef_1 tmp 1
&strcmp_const_25_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_25_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_25_a 8
&strcmp_const_25_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_25_a_addrRef_0 CONST_-8 1
&strcmp_const_25_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_25_a_addrRef_1 CONST_-8 1
&strcmp_const_25_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_25_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LABEL 8
&LABEL_addrRef_0 &CONST_-8 ?+8 ; relsq LABEL_addrRef_0 CONST_-8 1
&LABEL_addrRef_1 &CONST_-8 ?+8 ; relsq LABEL_addrRef_1 CONST_-8 1
&LABEL_addrRef_2 &CONST_-8 ?+8 ; relsq LABEL_addrRef_2 CONST_-8 1
&LABEL_addrRef_3 &CONST_-8 ?+8 ; relsq LABEL_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_25_a LABEL STRCMP_CONST_25_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_25_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_25_a_addrRef_0 &strcmp_const_25_a ?+8 ; relsq tmp2 strcmp_const_25_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LABEL
&tmp :LABEL_addrRef_2 &LABEL ?+8 ; relsq tmp LABEL 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_25_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_25_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_25_REVERT_ADDR
&tmp &CONST_-1 &JNZ_50_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_50_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_50_END ; lblsq ZERO ZERO JNZ_50_END
; label JNZ_50_REVERT_AND_JUMP
:JNZ_50_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_25_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_25_REVERT_ADDR
; label JNZ_50_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_25_len 0
# MSQ_START 1 mov strcmp_const_25_len strcmp_const_25_a tmp
# MSQ_START 2 movneg tmp strcmp_const_25_a
:JNZ_50_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_25_a_addrRef_1 &strcmp_const_25_a ?+8 ; relsq tmp strcmp_const_25_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_25_len tmp
&strcmp_const_25_len &strcmp_const_25_len ?+8 ; relsq strcmp_const_25_len strcmp_const_25_len 1
&strcmp_const_25_len &tmp ?+8 ; relsq strcmp_const_25_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_25_a 8
&strcmp_const_25_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_25_a_addrRef_0 CONST_8 1
&strcmp_const_25_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_25_a_addrRef_1 CONST_8 1
&strcmp_const_25_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_25_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LABEL 8
&LABEL_addrRef_0 &CONST_8 ?+8 ; relsq LABEL_addrRef_0 CONST_8 1
&LABEL_addrRef_1 &CONST_8 ?+8 ; relsq LABEL_addrRef_1 CONST_8 1
&LABEL_addrRef_2 &CONST_8 ?+8 ; relsq LABEL_addrRef_2 CONST_8 1
&LABEL_addrRef_3 &CONST_8 ?+8 ; relsq LABEL_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_25_aStr 0
; addr strcmp_const_25_bStr 0
# MSQ_START 1 setaddr strcmp_const_25_aStr strcmp_const_25_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_25_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_25_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_25_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_25_a
&tmp :strcmp_const_25_a_addrRef_2 &strcmp_const_25_a ?+8 ; relsq tmp strcmp_const_25_a 1
# MSQ_END 2 sub
&strcmp_const_25_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_25_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_25_bStr LABEL tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_25_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_25_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_25_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LABEL
&tmp :LABEL_addrRef_3 &LABEL ?+8 ; relsq tmp LABEL 1
# MSQ_END 2 sub
&strcmp_const_25_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_25_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_25_LOOP
# MSQ_START 1 decleq strcmp_const_25_len 0 STEP4_HANDLE_LABEL
:STRCMP_CONST_25_LOOP &strcmp_const_25_len &CONST_0 &STEP4_HANDLE_LABEL ; lblsq strcmp_const_25_len CONST_0 STEP4_HANDLE_LABEL
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_25_len 1
&strcmp_const_25_len &CONST_1 ?+8 ; relsq strcmp_const_25_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_25_aStr strcmp_const_25_bStr STRCMP_CONST_25_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_25_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_25_aStr_addrRef_0 &strcmp_const_25_aStr ?+8 ; relsq tmp2 strcmp_const_25_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_25_bStr
&tmp :strcmp_const_25_bStr_addrRef_0 &strcmp_const_25_bStr ?+8 ; relsq tmp strcmp_const_25_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_25_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_25_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_25_END
&tmp &CONST_-1 &JNZ_51_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_51_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_51_END ; lblsq ZERO ZERO JNZ_51_END
; label JNZ_51_REVERT_AND_JUMP
:JNZ_51_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_25_END ; lblsq ZERO ZERO STRCMP_CONST_25_END
; label JNZ_51_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_25_aStr 8
:JNZ_51_END &strcmp_const_25_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_25_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_25_bStr 8
&strcmp_const_25_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_25_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_25_LOOP
&ZERO &ZERO &STRCMP_CONST_25_LOOP ; lblsq ZERO ZERO STRCMP_CONST_25_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_25_REVERT_ADDR
# MSQ_START 1 decaddr LABEL 8
:STRCMP_CONST_25_REVERT_ADDR &LABEL_addrRef_0 &CONST_8 ?+8 ; relsq LABEL_addrRef_0 CONST_8 1
&LABEL_addrRef_1 &CONST_8 ?+8 ; relsq LABEL_addrRef_1 CONST_8 1
&LABEL_addrRef_2 &CONST_8 ?+8 ; relsq LABEL_addrRef_2 CONST_8 1
&LABEL_addrRef_3 &CONST_8 ?+8 ; relsq LABEL_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_25_END
# MSQ_END 0 strcmp_const

# MSQ_START 0 incaddr curLine_step4 58
:STRCMP_CONST_25_END &curLine_step4_addrRef_0 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-58 1
&curLine_step4_addrRef_1 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-58 1
&curLine_step4_addrRef_2 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-58 1
&curLine_step4_addrRef_3 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-58 1
&curLine_step4_addrRef_4 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-58 1
&curLine_step4_addrRef_5 &CONST_-58 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-58 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP4_LOOP
&ZERO &ZERO &STEP4_LOOP ; lblsq ZERO ZERO STEP4_LOOP
# MSQ_END 0 lbljmp

; label STEP4_HANDLE_SQ
; var sq_i_step4 -2
# MSQ_START 0 set sq_i_step4 -2
# MSQ_START 1 zero sq_i_step4
# MSQ_START 2 sub sq_i_step4 sq_i_step4
:STEP4_HANDLE_SQ &sq_i_step4 &sq_i_step4 ?+8 ; relsq sq_i_step4 sq_i_step4 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc sq_i_step4 -2
# MSQ_START 2 dec sq_i_step4 2
&sq_i_step4 &CONST_2 ?+8 ; relsq sq_i_step4 CONST_2 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set

; addr curSym_step4 0
# MSQ_START 0 incaddr curLine_step4 18
&curLine_step4_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-18 1
&curLine_step4_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-18 1
&curLine_step4_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-18 1
&curLine_step4_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-18 1
&curLine_step4_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-18 1
&curLine_step4_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 setaddr curSym_step4 curLine_step4 tmp tmp2
# MSQ_START 1 mov tmp curSym_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 curSym_step4_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &curSym_step4_addrRef_0 ?+8 ; relsq tmp2 curSym_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLine_step4
&tmp :curLine_step4_addrRef_3 &curLine_step4 ?+8 ; relsq tmp curLine_step4 1
# MSQ_END 1 sub
&curSym_step4_addrRef_0 &tmp ?+8 ; relsq curSym_step4_addrRef_0 tmp 1
&curSym_step4_addrRef_1 &tmp ?+8 ; relsq curSym_step4_addrRef_1 tmp 1
&curSym_step4_addrRef_2 &tmp ?+8 ; relsq curSym_step4_addrRef_2 tmp 1
&curSym_step4_addrRef_3 &tmp ?+8 ; relsq curSym_step4_addrRef_3 tmp 1
&curSym_step4_addrRef_4 &tmp ?+8 ; relsq curSym_step4_addrRef_4 tmp 1
&curSym_step4_addrRef_5 &tmp ?+8 ; relsq curSym_step4_addrRef_5 tmp 1
# MSQ_END 0 setaddr

; label STEP4_HANDLE_SQ_LOOP
# Jumps on first and second iterations
# MSQ_START 0 incleq sq_i_step4 1 STEP4_HANDLE_SQ_TOKEN
# MSQ_START 1 decleq sq_i_step4 -1 STEP4_HANDLE_SQ_TOKEN
:STEP4_HANDLE_SQ_LOOP &sq_i_step4 &CONST_-1 &STEP4_HANDLE_SQ_TOKEN ; lblsq sq_i_step4 CONST_-1 STEP4_HANDLE_SQ_TOKEN
# MSQ_END 1 decleq
# MSQ_END 0 incleq
# Jumps on third iteration
# MSQ_START 0 decleq sq_i_step4 1 STEP4_HANDLE_SQ_THIRD_TOKEN
&sq_i_step4 &CONST_1 &STEP4_HANDLE_SQ_THIRD_TOKEN ; lblsq sq_i_step4 CONST_1 STEP4_HANDLE_SQ_THIRD_TOKEN
# MSQ_END 0 decleq

# MSQ_START 0 incaddr curLine_step4 40
&curLine_step4_addrRef_0 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-40 1
&curLine_step4_addrRef_1 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-40 1
&curLine_step4_addrRef_2 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-40 1
&curLine_step4_addrRef_3 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-40 1
&curLine_step4_addrRef_4 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-40 1
&curLine_step4_addrRef_5 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-40 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP4_LOOP
&ZERO &ZERO &STEP4_LOOP ; lblsq ZERO ZERO STEP4_LOOP
# MSQ_END 0 lbljmp

; label STEP4_HANDLE_SQ_THIRD_TOKEN
# Ensure the fourth iteration exits
# MSQ_START 0 inc sq_i_step4 1
# MSQ_START 1 dec sq_i_step4 -1
:STEP4_HANDLE_SQ_THIRD_TOKEN &sq_i_step4 &CONST_-1 ?+8 ; relsq sq_i_step4 CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

# MSQ_START 0 strcmp_const curLine_step4 LBLSQ STEP4_HANDLE_SQ_TOKEN tmp tmp2
; addr strcmp_const_26_a 0
# MSQ_START 1 copyaddr strcmp_const_26_a curLine_step4 tmp tmp2
# MSQ_START 2 setaddr strcmp_const_26_a curLine_step4_addrRef_0 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_26_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_26_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &curLine_step4_addrRef_0 ?+8 ; relsq tmp curLine_step4_addrRef_0 1
&strcmp_const_26_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_26_a_addrRef_0 tmp 1
&strcmp_const_26_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_26_a_addrRef_1 tmp 1
&strcmp_const_26_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_26_a_addrRef_2 tmp 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr strcmp_const_26_a 8
&strcmp_const_26_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_26_a_addrRef_0 CONST_-8 1
&strcmp_const_26_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_26_a_addrRef_1 CONST_-8 1
&strcmp_const_26_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_26_a_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_-8 1
&LBLSQ_addrRef_1 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_-8 1
&LBLSQ_addrRef_2 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_-8 1
&LBLSQ_addrRef_3 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_-8 1
&LBLSQ_addrRef_4 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_-8 1
&LBLSQ_addrRef_5 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_-8 1
&LBLSQ_addrRef_6 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_-8 1
&LBLSQ_addrRef_7 &CONST_-8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 jne strcmp_const_26_a LBLSQ STRCMP_CONST_26_REVERT_ADDR tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_26_a tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_26_a_addrRef_0 &strcmp_const_26_a ?+8 ; relsq tmp2 strcmp_const_26_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_6 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_26_REVERT_ADDR tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_26_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_26_REVERT_ADDR
&tmp &CONST_-1 &JNZ_52_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_52_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_52_END ; lblsq ZERO ZERO JNZ_52_END
; label JNZ_52_REVERT_AND_JUMP
:JNZ_52_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_26_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_26_REVERT_ADDR
; label JNZ_52_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
; var strcmp_const_26_len 0
# MSQ_START 1 mov strcmp_const_26_len strcmp_const_26_a tmp
# MSQ_START 2 movneg tmp strcmp_const_26_a
:JNZ_52_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_26_a_addrRef_1 &strcmp_const_26_a ?+8 ; relsq tmp strcmp_const_26_a 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg strcmp_const_26_len tmp
&strcmp_const_26_len &strcmp_const_26_len ?+8 ; relsq strcmp_const_26_len strcmp_const_26_len 1
&strcmp_const_26_len &tmp ?+8 ; relsq strcmp_const_26_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr strcmp_const_26_a 8
&strcmp_const_26_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_26_a_addrRef_0 CONST_8 1
&strcmp_const_26_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_26_a_addrRef_1 CONST_8 1
&strcmp_const_26_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_26_a_addrRef_2 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_START 1 decaddr LBLSQ 8
&LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; addr strcmp_const_26_aStr 0
; addr strcmp_const_26_bStr 0
# MSQ_START 1 setaddr strcmp_const_26_aStr strcmp_const_26_a tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_26_aStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_26_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_26_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_26_a
&tmp :strcmp_const_26_a_addrRef_2 &strcmp_const_26_a ?+8 ; relsq tmp strcmp_const_26_a 1
# MSQ_END 2 sub
&strcmp_const_26_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_26_aStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
# MSQ_START 1 setaddr strcmp_const_26_bStr LBLSQ tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_26_bStr_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_26_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_26_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LBLSQ
&tmp :LBLSQ_addrRef_7 &LBLSQ ?+8 ; relsq tmp LBLSQ 1
# MSQ_END 2 sub
&strcmp_const_26_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_26_bStr_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; label STRCMP_CONST_26_LOOP
# MSQ_START 1 decleq strcmp_const_26_len 0 STEP4_HANDLE_SQ_TOKEN
:STRCMP_CONST_26_LOOP &strcmp_const_26_len &CONST_0 &STEP4_HANDLE_SQ_TOKEN ; lblsq strcmp_const_26_len CONST_0 STEP4_HANDLE_SQ_TOKEN
# MSQ_END 1 decleq
# MSQ_START 1 dec strcmp_const_26_len 1
&strcmp_const_26_len &CONST_1 ?+8 ; relsq strcmp_const_26_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 jne strcmp_const_26_aStr strcmp_const_26_bStr STRCMP_CONST_26_END tmp tmp2
# MSQ_START 2 mov tmp strcmp_const_26_aStr tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_26_aStr_addrRef_0 &strcmp_const_26_aStr ?+8 ; relsq tmp2 strcmp_const_26_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp strcmp_const_26_bStr
&tmp :strcmp_const_26_bStr_addrRef_0 &strcmp_const_26_bStr ?+8 ; relsq tmp strcmp_const_26_bStr 1
# MSQ_END 2 sub
# MSQ_START 2 jnz tmp STRCMP_CONST_26_END tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_26_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_26_END
&tmp &CONST_-1 &JNZ_53_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_53_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_53_END ; lblsq ZERO ZERO JNZ_53_END
; label JNZ_53_REVERT_AND_JUMP
:JNZ_53_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_26_END ; lblsq ZERO ZERO STRCMP_CONST_26_END
; label JNZ_53_END
# MSQ_END 2 jnz
# MSQ_END 1 jne
# MSQ_START 1 incaddr strcmp_const_26_aStr 8
:JNZ_53_END &strcmp_const_26_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_26_aStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 incaddr strcmp_const_26_bStr 8
&strcmp_const_26_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_26_bStr_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp STRCMP_CONST_26_LOOP
&ZERO &ZERO &STRCMP_CONST_26_LOOP ; lblsq ZERO ZERO STRCMP_CONST_26_LOOP
# MSQ_END 1 lbljmp
; label STRCMP_CONST_26_REVERT_ADDR
# MSQ_START 1 decaddr LBLSQ 8
:STRCMP_CONST_26_REVERT_ADDR &LBLSQ_addrRef_0 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_0 CONST_8 1
&LBLSQ_addrRef_1 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_1 CONST_8 1
&LBLSQ_addrRef_2 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_2 CONST_8 1
&LBLSQ_addrRef_3 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_3 CONST_8 1
&LBLSQ_addrRef_4 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_4 CONST_8 1
&LBLSQ_addrRef_5 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_5 CONST_8 1
&LBLSQ_addrRef_6 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_6 CONST_8 1
&LBLSQ_addrRef_7 &CONST_8 ?+8 ; relsq LBLSQ_addrRef_7 CONST_8 1
# MSQ_END 1 decaddr
; label STRCMP_CONST_26_END
# MSQ_END 0 strcmp_const
# MSQ_START 0 lbljmp STEP4_HANDLE_SQ_INC_SIZE
:STRCMP_CONST_26_END &ZERO &ZERO &STEP4_HANDLE_SQ_INC_SIZE ; lblsq ZERO ZERO STEP4_HANDLE_SQ_INC_SIZE
# MSQ_END 0 lbljmp

# Only run if `line.inst == "lblsq" or i < 2`
; label STEP4_HANDLE_SQ_TOKEN
; addr addrSymbols_it_step4 0
# MSQ_START 0 setaddr addrSymbols_it_step4 addrSymbolsBegin tmp tmp2
# MSQ_START 1 mov tmp addrSymbols_it_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 addrSymbols_it_step4_addrRef_0
:STEP4_HANDLE_SQ_TOKEN &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &addrSymbols_it_step4_addrRef_0 ?+8 ; relsq tmp2 addrSymbols_it_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp addrSymbolsBegin
&tmp &addrSymbolsBegin ?+8 ; relsq tmp addrSymbolsBegin 1
# MSQ_END 1 sub
&addrSymbols_it_step4_addrRef_0 &tmp ?+8 ; relsq addrSymbols_it_step4_addrRef_0 tmp 1
&addrSymbols_it_step4_addrRef_1 &tmp ?+8 ; relsq addrSymbols_it_step4_addrRef_1 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key addrSymbols_it_step4 curSym_step4 20 addrSymbolsLen STEP4_SQ_FOUND_ADDRSYMBOL tmp tmp2
; var find_item_in_buf_with_str_key_3_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_3_elmsLeft addrSymbolsLen tmp
# MSQ_START 2 movneg tmp addrSymbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &addrSymbolsLen ?+8 ; relsq tmp addrSymbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_3_elmsLeft tmp
&find_item_in_buf_with_str_key_3_elmsLeft &find_item_in_buf_with_str_key_3_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_3_elmsLeft find_item_in_buf_with_str_key_3_elmsLeft 1
&find_item_in_buf_with_str_key_3_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_3_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_3_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_3_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_3_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_3_LOOP &find_item_in_buf_with_str_key_3_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_3_NO_MATCH ; lblsq find_item_in_buf_with_str_key_3_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_3_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_3_elmsLeft 1
&find_item_in_buf_with_str_key_3_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_3_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const addrSymbols_it_step4 curSym_step4 STEP4_SQ_FOUND_ADDRSYMBOL tmp tmp2
; addr strcmp_const_27_a 0
# MSQ_START 2 copyaddr strcmp_const_27_a addrSymbols_it_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_27_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_27_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &addrSymbols_it_step4_addrRef_0 ?+8 ; relsq tmp addrSymbols_it_step4_addrRef_0 1
&strcmp_const_27_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_27_a_addrRef_0 tmp 1
&strcmp_const_27_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_27_a_addrRef_1 tmp 1
&strcmp_const_27_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_27_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_27_a 8
&strcmp_const_27_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_27_a_addrRef_0 CONST_-8 1
&strcmp_const_27_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_27_a_addrRef_1 CONST_-8 1
&strcmp_const_27_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_27_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_-8 1
&curSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_-8 1
&curSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_-8 1
&curSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_-8 1
&curSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_-8 1
&curSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_27_a curSym_step4 STRCMP_CONST_27_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_27_a_addrRef_0 &strcmp_const_27_a ?+8 ; relsq tmp2 strcmp_const_27_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :curSym_step4_addrRef_0 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_27_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_27_REVERT_ADDR
&tmp &CONST_-1 &JNZ_54_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_54_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_54_END ; lblsq ZERO ZERO JNZ_54_END
; label JNZ_54_REVERT_AND_JUMP
:JNZ_54_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_27_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_27_REVERT_ADDR
; label JNZ_54_END
# MSQ_END 2 jne
; var strcmp_const_27_len 0
# MSQ_START 2 mov strcmp_const_27_len strcmp_const_27_a tmp
:JNZ_54_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_27_a_addrRef_1 &strcmp_const_27_a ?+8 ; relsq tmp strcmp_const_27_a 1
&strcmp_const_27_len &strcmp_const_27_len ?+8 ; relsq strcmp_const_27_len strcmp_const_27_len 1
&strcmp_const_27_len &tmp ?+8 ; relsq strcmp_const_27_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_27_a 8
&strcmp_const_27_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_27_a_addrRef_0 CONST_8 1
&strcmp_const_27_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_27_a_addrRef_1 CONST_8 1
&strcmp_const_27_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_27_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_8 1
&curSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_8 1
&curSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_8 1
&curSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_8 1
&curSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_8 1
&curSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_27_aStr 0
; addr strcmp_const_27_bStr 0
# MSQ_START 2 setaddr strcmp_const_27_aStr strcmp_const_27_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_27_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_27_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_27_a_addrRef_2 &strcmp_const_27_a ?+8 ; relsq tmp strcmp_const_27_a 1
&strcmp_const_27_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_27_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_27_bStr curSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_27_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_27_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :curSym_step4_addrRef_1 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
&strcmp_const_27_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_27_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_27_LOOP
# MSQ_START 2 decleq strcmp_const_27_len 0 STEP4_SQ_FOUND_ADDRSYMBOL
:STRCMP_CONST_27_LOOP &strcmp_const_27_len &CONST_0 &STEP4_SQ_FOUND_ADDRSYMBOL ; lblsq strcmp_const_27_len CONST_0 STEP4_SQ_FOUND_ADDRSYMBOL
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_27_len 1
&strcmp_const_27_len &CONST_1 ?+8 ; relsq strcmp_const_27_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_27_aStr strcmp_const_27_bStr STRCMP_CONST_27_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_27_aStr_addrRef_0 &strcmp_const_27_aStr ?+8 ; relsq tmp2 strcmp_const_27_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_27_bStr_addrRef_0 &strcmp_const_27_bStr ?+8 ; relsq tmp strcmp_const_27_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_27_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_27_END
&tmp &CONST_-1 &JNZ_55_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_55_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_55_END ; lblsq ZERO ZERO JNZ_55_END
; label JNZ_55_REVERT_AND_JUMP
:JNZ_55_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_27_END ; lblsq ZERO ZERO STRCMP_CONST_27_END
; label JNZ_55_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_27_aStr 8
:JNZ_55_END &strcmp_const_27_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_27_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_27_bStr 8
&strcmp_const_27_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_27_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_27_LOOP
&ZERO &ZERO &STRCMP_CONST_27_LOOP ; lblsq ZERO ZERO STRCMP_CONST_27_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_27_REVERT_ADDR
# MSQ_START 2 decaddr curSym_step4 8
:STRCMP_CONST_27_REVERT_ADDR &curSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_8 1
&curSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_8 1
&curSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_8 1
&curSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_8 1
&curSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_8 1
&curSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_27_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr addrSymbols_it_step4 20
:STRCMP_CONST_27_END &addrSymbols_it_step4_addrRef_0 &CONST_-20 ?+8 ; relsq addrSymbols_it_step4_addrRef_0 CONST_-20 1
&addrSymbols_it_step4_addrRef_1 &CONST_-20 ?+8 ; relsq addrSymbols_it_step4_addrRef_1 CONST_-20 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_3_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_3_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_3_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_3_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key
# MSQ_START 0 lbljmp STEP4_HANDLE_SQ_INC_SIZE
:FIND_ITEM_IN_BUF_WITH_STR_KEY_3_NO_MATCH &ZERO &ZERO &STEP4_HANDLE_SQ_INC_SIZE ; lblsq ZERO ZERO STEP4_HANDLE_SQ_INC_SIZE
# MSQ_END 0 lbljmp

# Only run if `sym in addrSymbols`
; label STEP4_SQ_FOUND_ADDRSYMBOL
# MSQ_START 0 incaddr addrSymbols_it_step4 18
:STEP4_SQ_FOUND_ADDRSYMBOL &addrSymbols_it_step4_addrRef_0 &CONST_-18 ?+8 ; relsq addrSymbols_it_step4_addrRef_0 CONST_-18 1
&addrSymbols_it_step4_addrRef_1 &CONST_-18 ?+8 ; relsq addrSymbols_it_step4_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr

# Py: stubSym = f"{sym}_addrRef_{addrSymbols[sym]}"
; addr stubPrefix_step4 0
# MSQ_START 0 strcat stubPrefix_step4 curSym_step4 ADDRREF tmp tmp2 tmp3
; var strcat_2_aLength 0
; var strcat_2_retLength 0
# MSQ_START 1 strlen strcat_2_retLength ADDRREF tmp
# MSQ_START 2 incaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_-8 1
&ADDRREF_addrRef_1 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_-8 1
&ADDRREF_addrRef_2 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_-8 1
&ADDRREF_addrRef_3 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_-8 1
&ADDRREF_addrRef_4 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_-8 1
&ADDRREF_addrRef_5 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_-8 1
&ADDRREF_addrRef_6 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_-8 1
&ADDRREF_addrRef_7 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_2_retLength ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_4 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcat_2_retLength &strcat_2_retLength ?+8 ; relsq strcat_2_retLength strcat_2_retLength 1
&strcat_2_retLength &tmp ?+8 ; relsq strcat_2_retLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_8 1
&ADDRREF_addrRef_1 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_8 1
&ADDRREF_addrRef_2 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_8 1
&ADDRREF_addrRef_3 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_8 1
&ADDRREF_addrRef_4 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_8 1
&ADDRREF_addrRef_5 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_8 1
&ADDRREF_addrRef_6 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_8 1
&ADDRREF_addrRef_7 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 strlen strcat_2_aLength curSym_step4 tmp
# MSQ_START 2 incaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_-8 1
&curSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_-8 1
&curSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_-8 1
&curSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_-8 1
&curSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_-8 1
&curSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_2_aLength curSym_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curSym_step4_addrRef_2 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
&strcat_2_aLength &strcat_2_aLength ?+8 ; relsq strcat_2_aLength strcat_2_aLength 1
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_8 1
&curSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_8 1
&curSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_8 1
&curSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_8 1
&curSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_8 1
&curSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 add strcat_2_retLength strcat_2_aLength tmp
# MSQ_START 2 movneg tmp strcat_2_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_2_aLength ?+8 ; relsq tmp strcat_2_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_2_retLength tmp
&strcat_2_retLength &tmp ?+8 ; relsq strcat_2_retLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 malloc_const tmp 18 tmp2
# MSQ_START 2 malloc tmp CONST_18 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &CONST_18 ?+8 ; relsq tmp2 CONST_18 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr stubPrefix_step4 tmp tmp2 tmp3
# MSQ_START 2 mov tmp2 stubPrefix_step4_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &stubPrefix_step4_addrRef_0 ?+8 ; relsq tmp3 stubPrefix_step4_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
&stubPrefix_step4_addrRef_0 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_0 tmp2 1
&stubPrefix_step4_addrRef_1 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_1 tmp2 1
&stubPrefix_step4_addrRef_2 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_2 tmp2 1
&stubPrefix_step4_addrRef_3 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_3 tmp2 1
&stubPrefix_step4_addrRef_4 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_4 tmp2 1
&stubPrefix_step4_addrRef_5 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_5 tmp2 1
&stubPrefix_step4_addrRef_6 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_6 tmp2 1
&stubPrefix_step4_addrRef_7 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_7 tmp2 1
&stubPrefix_step4_addrRef_8 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_8 tmp2 1
&stubPrefix_step4_addrRef_9 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_9 tmp2 1
&stubPrefix_step4_addrRef_10 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_10 tmp2 1
&stubPrefix_step4_addrRef_11 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_11 tmp2 1
&stubPrefix_step4_addrRef_12 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_12 tmp2 1
&stubPrefix_step4_addrRef_13 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_13 tmp2 1
&stubPrefix_step4_addrRef_14 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_14 tmp2 1
&stubPrefix_step4_addrRef_15 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_15 tmp2 1
&stubPrefix_step4_addrRef_16 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_16 tmp2 1
&stubPrefix_step4_addrRef_17 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_17 tmp2 1
&stubPrefix_step4_addrRef_18 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_18 tmp2 1
&stubPrefix_step4_addrRef_19 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_19 tmp2 1
&stubPrefix_step4_addrRef_20 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_20 tmp2 1
&stubPrefix_step4_addrRef_21 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_21 tmp2 1
&stubPrefix_step4_addrRef_22 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_22 tmp2 1
&stubPrefix_step4_addrRef_23 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_23 tmp2 1
&stubPrefix_step4_addrRef_24 &tmp2 ?+8 ; relsq stubPrefix_step4_addrRef_24 tmp2 1
# MSQ_END 1 setaddr
# MSQ_START 1 mov tmp strcat_2_retLength tmp2
# MSQ_START 2 movneg tmp2 strcat_2_retLength
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcat_2_retLength ?+8 ; relsq tmp2 strcat_2_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 mul_8 tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 alloc_str stubPrefix_step4 tmp tmp2
# MSQ_START 2 malloc stubPrefix_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
:stubPrefix_step4_addrRef_0 &stubPrefix_step4 :stubPrefix_step4_addrRef_1 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
:stubPrefix_step4_addrRef_2 &stubPrefix_step4 &tmp2 ?+8 ; relsq stubPrefix_step4 tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero stubPrefix_step4
:stubPrefix_step4_addrRef_3 &stubPrefix_step4 :stubPrefix_step4_addrRef_4 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:stubPrefix_step4_addrRef_5 &stubPrefix_step4 :stubPrefix_step4_addrRef_6 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
:stubPrefix_step4_addrRef_7 &stubPrefix_step4 &tmp2 ?+8 ; relsq stubPrefix_step4 tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step4 10
&stubPrefix_step4_addrRef_0 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_10 1
&stubPrefix_step4_addrRef_1 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_10 1
&stubPrefix_step4_addrRef_2 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_10 1
&stubPrefix_step4_addrRef_3 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_10 1
&stubPrefix_step4_addrRef_4 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_10 1
&stubPrefix_step4_addrRef_5 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_10 1
&stubPrefix_step4_addrRef_6 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_10 1
&stubPrefix_step4_addrRef_7 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_10 1
&stubPrefix_step4_addrRef_8 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_10 1
&stubPrefix_step4_addrRef_9 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_10 1
&stubPrefix_step4_addrRef_10 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_10 1
&stubPrefix_step4_addrRef_11 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_10 1
&stubPrefix_step4_addrRef_12 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_10 1
&stubPrefix_step4_addrRef_13 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_10 1
&stubPrefix_step4_addrRef_14 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_10 1
&stubPrefix_step4_addrRef_15 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_10 1
&stubPrefix_step4_addrRef_16 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_10 1
&stubPrefix_step4_addrRef_17 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_10 1
&stubPrefix_step4_addrRef_18 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_10 1
&stubPrefix_step4_addrRef_19 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_10 1
&stubPrefix_step4_addrRef_20 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_10 1
&stubPrefix_step4_addrRef_21 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_10 1
&stubPrefix_step4_addrRef_22 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_10 1
&stubPrefix_step4_addrRef_23 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_10 1
&stubPrefix_step4_addrRef_24 &CONST_10 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str
# MSQ_START 1 strcpy stubPrefix_step4 curSym_step4 tmp tmp2
; addr strcpy_6_strA 0
# MSQ_START 2 setaddr strcpy_6_strA stubPrefix_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_6_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_6_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step4_addrRef_8 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
&strcpy_6_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_6_strA_addrRef_0 tmp 1
&strcpy_6_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_6_strA_addrRef_1 tmp 1
&strcpy_6_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_6_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_6_strB 0
# MSQ_START 2 setaddr strcpy_6_strB curSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_6_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_6_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :curSym_step4_addrRef_3 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
&strcpy_6_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_6_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_-8 1
&curSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_-8 1
&curSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_-8 1
&curSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_-8 1
&curSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_-8 1
&curSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step4 curSym_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curSym_step4_addrRef_4 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
:stubPrefix_step4_addrRef_9 &stubPrefix_step4 :stubPrefix_step4_addrRef_10 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
:stubPrefix_step4_addrRef_11 &stubPrefix_step4 &tmp ?+8 ; relsq stubPrefix_step4 tmp 1
# MSQ_END 2 mov
; var strcpy_6_strLen 0
# MSQ_START 2 mov strcpy_6_strLen curSym_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :curSym_step4_addrRef_5 &curSym_step4 ?+8 ; relsq tmp curSym_step4 1
&strcpy_6_strLen &strcpy_6_strLen ?+8 ; relsq strcpy_6_strLen strcpy_6_strLen 1
&strcpy_6_strLen &tmp ?+8 ; relsq strcpy_6_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_8 1
&stubPrefix_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_8 1
&stubPrefix_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_8 1
&stubPrefix_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_8 1
&stubPrefix_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_8 1
&stubPrefix_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_8 1
&stubPrefix_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_8 1
&stubPrefix_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_8 1
&stubPrefix_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_8 1
&stubPrefix_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_8 1
&stubPrefix_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_8 1
&stubPrefix_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_8 1
&stubPrefix_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_8 1
&stubPrefix_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_8 1
&stubPrefix_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_8 1
&stubPrefix_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_8 1
&stubPrefix_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_8 1
&stubPrefix_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_8 1
&stubPrefix_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_8 1
&stubPrefix_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_8 1
&stubPrefix_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_8 1
&stubPrefix_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_8 1
&stubPrefix_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_8 1
&stubPrefix_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_8 1
&stubPrefix_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr curSym_step4 8
&curSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_0 CONST_8 1
&curSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_1 CONST_8 1
&curSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_2 CONST_8 1
&curSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_3 CONST_8 1
&curSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_4 CONST_8 1
&curSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq curSym_step4_addrRef_5 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_6_LOOP
# MSQ_START 2 decleq strcpy_6_strLen 0 STRCPY_6_END
:STRCPY_6_LOOP &strcpy_6_strLen &CONST_0 &STRCPY_6_END ; lblsq strcpy_6_strLen CONST_0 STRCPY_6_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_6_strLen 1
&strcpy_6_strLen &CONST_1 ?+8 ; relsq strcpy_6_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_6_strA strcpy_6_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_6_strB_addrRef_0 &strcpy_6_strB ?+8 ; relsq tmp strcpy_6_strB 1
:strcpy_6_strA_addrRef_0 &strcpy_6_strA :strcpy_6_strA_addrRef_1 &strcpy_6_strA ?+8 ; relsq strcpy_6_strA strcpy_6_strA 1
:strcpy_6_strA_addrRef_2 &strcpy_6_strA &tmp ?+8 ; relsq strcpy_6_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_6_strA 8
&strcpy_6_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_6_strA_addrRef_0 CONST_-8 1
&strcpy_6_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_6_strA_addrRef_1 CONST_-8 1
&strcpy_6_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_6_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_6_strB 8
&strcpy_6_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_6_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_6_LOOP
&ZERO &ZERO &STRCPY_6_LOOP ; lblsq ZERO ZERO STRCPY_6_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_6_END
# MSQ_END 1 strcpy
# MSQ_START 1 mul_8 strcat_2_aLength tmp
# MSQ_START 2 movneg tmp strcat_2_aLength
:STRCPY_6_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_2_aLength ?+8 ; relsq tmp strcat_2_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_2_aLength tmp
&strcat_2_aLength &tmp ?+8 ; relsq strcat_2_aLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 add stubPrefix_step4 strcat_2_aLength tmp
# MSQ_START 2 movneg tmp strcat_2_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_2_aLength ?+8 ; relsq tmp strcat_2_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub stubPrefix_step4 tmp
:stubPrefix_step4_addrRef_12 &stubPrefix_step4 &tmp ?+8 ; relsq stubPrefix_step4 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 strcpy stubPrefix_step4 ADDRREF tmp tmp2
; addr strcpy_7_strA 0
# MSQ_START 2 setaddr strcpy_7_strA stubPrefix_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_7_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_7_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step4_addrRef_13 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
&strcpy_7_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_7_strA_addrRef_0 tmp 1
&strcpy_7_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_7_strA_addrRef_1 tmp 1
&strcpy_7_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_7_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_7_strB 0
# MSQ_START 2 setaddr strcpy_7_strB ADDRREF tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_7_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_7_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :ADDRREF_addrRef_5 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcpy_7_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_7_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_-8 1
&ADDRREF_addrRef_1 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_-8 1
&ADDRREF_addrRef_2 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_-8 1
&ADDRREF_addrRef_3 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_-8 1
&ADDRREF_addrRef_4 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_-8 1
&ADDRREF_addrRef_5 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_-8 1
&ADDRREF_addrRef_6 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_-8 1
&ADDRREF_addrRef_7 &CONST_-8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubPrefix_step4 ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_6 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
:stubPrefix_step4_addrRef_14 &stubPrefix_step4 :stubPrefix_step4_addrRef_15 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
:stubPrefix_step4_addrRef_16 &stubPrefix_step4 &tmp ?+8 ; relsq stubPrefix_step4 tmp 1
# MSQ_END 2 mov
; var strcpy_7_strLen 0
# MSQ_START 2 mov strcpy_7_strLen ADDRREF tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :ADDRREF_addrRef_7 &ADDRREF ?+8 ; relsq tmp ADDRREF 1
&strcpy_7_strLen &strcpy_7_strLen ?+8 ; relsq strcpy_7_strLen strcpy_7_strLen 1
&strcpy_7_strLen &tmp ?+8 ; relsq strcpy_7_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_8 1
&stubPrefix_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_8 1
&stubPrefix_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_8 1
&stubPrefix_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_8 1
&stubPrefix_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_8 1
&stubPrefix_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_8 1
&stubPrefix_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_8 1
&stubPrefix_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_8 1
&stubPrefix_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_8 1
&stubPrefix_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_8 1
&stubPrefix_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_8 1
&stubPrefix_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_8 1
&stubPrefix_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_8 1
&stubPrefix_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_8 1
&stubPrefix_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_8 1
&stubPrefix_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_8 1
&stubPrefix_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_8 1
&stubPrefix_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_8 1
&stubPrefix_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_8 1
&stubPrefix_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_8 1
&stubPrefix_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_8 1
&stubPrefix_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_8 1
&stubPrefix_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_8 1
&stubPrefix_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_8 1
&stubPrefix_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr ADDRREF 8
&ADDRREF_addrRef_0 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_0 CONST_8 1
&ADDRREF_addrRef_1 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_1 CONST_8 1
&ADDRREF_addrRef_2 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_2 CONST_8 1
&ADDRREF_addrRef_3 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_3 CONST_8 1
&ADDRREF_addrRef_4 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_4 CONST_8 1
&ADDRREF_addrRef_5 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_5 CONST_8 1
&ADDRREF_addrRef_6 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_6 CONST_8 1
&ADDRREF_addrRef_7 &CONST_8 ?+8 ; relsq ADDRREF_addrRef_7 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_7_LOOP
# MSQ_START 2 decleq strcpy_7_strLen 0 STRCPY_7_END
:STRCPY_7_LOOP &strcpy_7_strLen &CONST_0 &STRCPY_7_END ; lblsq strcpy_7_strLen CONST_0 STRCPY_7_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_7_strLen 1
&strcpy_7_strLen &CONST_1 ?+8 ; relsq strcpy_7_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_7_strA strcpy_7_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_7_strB_addrRef_0 &strcpy_7_strB ?+8 ; relsq tmp strcpy_7_strB 1
:strcpy_7_strA_addrRef_0 &strcpy_7_strA :strcpy_7_strA_addrRef_1 &strcpy_7_strA ?+8 ; relsq strcpy_7_strA strcpy_7_strA 1
:strcpy_7_strA_addrRef_2 &strcpy_7_strA &tmp ?+8 ; relsq strcpy_7_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_7_strA 8
&strcpy_7_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_7_strA_addrRef_0 CONST_-8 1
&strcpy_7_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_7_strA_addrRef_1 CONST_-8 1
&strcpy_7_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_7_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_7_strB 8
&strcpy_7_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_7_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_7_LOOP
&ZERO &ZERO &STRCPY_7_LOOP ; lblsq ZERO ZERO STRCPY_7_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_7_END
# MSQ_END 1 strcpy
# MSQ_START 1 sub stubPrefix_step4 strcat_2_aLength
:STRCPY_7_END :stubPrefix_step4_addrRef_17 &stubPrefix_step4 &strcat_2_aLength ?+8 ; relsq stubPrefix_step4 strcat_2_aLength 1
# MSQ_END 1 sub
# MSQ_START 1 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov stubPrefix_step4 strcat_2_retLength tmp
# MSQ_START 2 movneg tmp strcat_2_retLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_2_retLength ?+8 ; relsq tmp strcat_2_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg stubPrefix_step4 tmp
:stubPrefix_step4_addrRef_18 &stubPrefix_step4 :stubPrefix_step4_addrRef_19 &stubPrefix_step4 ?+8 ; relsq stubPrefix_step4 stubPrefix_step4 1
:stubPrefix_step4_addrRef_20 &stubPrefix_step4 &tmp ?+8 ; relsq stubPrefix_step4 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_8 1
&stubPrefix_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_8 1
&stubPrefix_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_8 1
&stubPrefix_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_8 1
&stubPrefix_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_8 1
&stubPrefix_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_8 1
&stubPrefix_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_8 1
&stubPrefix_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_8 1
&stubPrefix_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_8 1
&stubPrefix_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_8 1
&stubPrefix_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_8 1
&stubPrefix_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_8 1
&stubPrefix_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_8 1
&stubPrefix_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_8 1
&stubPrefix_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_8 1
&stubPrefix_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_8 1
&stubPrefix_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_8 1
&stubPrefix_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_8 1
&stubPrefix_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_8 1
&stubPrefix_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_8 1
&stubPrefix_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_8 1
&stubPrefix_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_8 1
&stubPrefix_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_8 1
&stubPrefix_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_8 1
&stubPrefix_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 strcat
; addr nextId_str_step4 0
# MSQ_START 0 itoa nextId_str_step4 addrSymbols_it_step4 tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr nextId_str_step4 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 nextId_str_step4_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &nextId_str_step4_addrRef_0 ?+8 ; relsq tmp nextId_str_step4_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&nextId_str_step4_addrRef_0 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_0 tmp3 1
&nextId_str_step4_addrRef_1 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_1 tmp3 1
&nextId_str_step4_addrRef_2 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_2 tmp3 1
&nextId_str_step4_addrRef_3 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_3 tmp3 1
&nextId_str_step4_addrRef_4 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_4 tmp3 1
&nextId_str_step4_addrRef_5 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_5 tmp3 1
&nextId_str_step4_addrRef_6 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_6 tmp3 1
&nextId_str_step4_addrRef_7 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_7 tmp3 1
&nextId_str_step4_addrRef_8 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_8 tmp3 1
&nextId_str_step4_addrRef_9 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_9 tmp3 1
&nextId_str_step4_addrRef_10 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_10 tmp3 1
&nextId_str_step4_addrRef_11 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_11 tmp3 1
&nextId_str_step4_addrRef_12 &tmp3 ?+8 ; relsq nextId_str_step4_addrRef_12 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const nextId_str_step4 a0 tmp3
# MSQ_START 2 malloc_const nextId_str_step4 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:nextId_str_step4_addrRef_0 &nextId_str_step4 :nextId_str_step4_addrRef_1 &nextId_str_step4 ?+8 ; relsq nextId_str_step4 nextId_str_step4 1
:nextId_str_step4_addrRef_2 &nextId_str_step4 &tmp3 ?+8 ; relsq nextId_str_step4 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr nextId_str_step4 8
&nextId_str_step4_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_-8 1
&nextId_str_step4_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_-8 1
&nextId_str_step4_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_-8 1
&nextId_str_step4_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_-8 1
&nextId_str_step4_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_-8 1
&nextId_str_step4_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_-8 1
&nextId_str_step4_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_-8 1
&nextId_str_step4_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_-8 1
&nextId_str_step4_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_-8 1
&nextId_str_step4_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_-8 1
&nextId_str_step4_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_-8 1
&nextId_str_step4_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_-8 1
&nextId_str_step4_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero nextId_str_step4
:nextId_str_step4_addrRef_3 &nextId_str_step4 :nextId_str_step4_addrRef_4 &nextId_str_step4 ?+8 ; relsq nextId_str_step4 nextId_str_step4 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr nextId_str_step4 8
&nextId_str_step4_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_-8 1
&nextId_str_step4_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_-8 1
&nextId_str_step4_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_-8 1
&nextId_str_step4_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_-8 1
&nextId_str_step4_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_-8 1
&nextId_str_step4_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_-8 1
&nextId_str_step4_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_-8 1
&nextId_str_step4_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_-8 1
&nextId_str_step4_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_-8 1
&nextId_str_step4_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_-8 1
&nextId_str_step4_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_-8 1
&nextId_str_step4_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_-8 1
&nextId_str_step4_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov nextId_str_step4 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:nextId_str_step4_addrRef_5 &nextId_str_step4 :nextId_str_step4_addrRef_6 &nextId_str_step4 ?+8 ; relsq nextId_str_step4 nextId_str_step4 1
:nextId_str_step4_addrRef_7 &nextId_str_step4 &tmp3 ?+8 ; relsq nextId_str_step4 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr nextId_str_step4 10
&nextId_str_step4_addrRef_0 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_10 1
&nextId_str_step4_addrRef_1 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_10 1
&nextId_str_step4_addrRef_2 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_10 1
&nextId_str_step4_addrRef_3 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_10 1
&nextId_str_step4_addrRef_4 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_10 1
&nextId_str_step4_addrRef_5 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_10 1
&nextId_str_step4_addrRef_6 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_10 1
&nextId_str_step4_addrRef_7 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_10 1
&nextId_str_step4_addrRef_8 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_10 1
&nextId_str_step4_addrRef_9 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_10 1
&nextId_str_step4_addrRef_10 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_10 1
&nextId_str_step4_addrRef_11 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_10 1
&nextId_str_step4_addrRef_12 &CONST_10 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_7_retBuf 0
# MSQ_START 1 setaddr itoa_7_retBuf nextId_str_step4 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_7_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_7_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_7_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 nextId_str_step4
&tmp2 :nextId_str_step4_addrRef_8 &nextId_str_step4 ?+8 ; relsq tmp2 nextId_str_step4 1
# MSQ_END 2 sub
&itoa_7_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_0 tmp2 1
&itoa_7_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_1 tmp2 1
&itoa_7_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_2 tmp2 1
&itoa_7_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_3 tmp2 1
&itoa_7_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_4 tmp2 1
&itoa_7_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_5 tmp2 1
&itoa_7_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_6 tmp2 1
&itoa_7_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_7 tmp2 1
&itoa_7_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_8 tmp2 1
&itoa_7_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_7_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_7_retLength 0
# MSQ_START 1 copyaddr itoa_7_retLength nextId_str_step4 tmp2 tmp3
# MSQ_START 2 setaddr itoa_7_retLength nextId_str_step4_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_7_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_7_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &nextId_str_step4_addrRef_0 ?+8 ; relsq tmp2 nextId_str_step4_addrRef_0 1
&itoa_7_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_7_retLength_addrRef_0 tmp2 1
&itoa_7_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_7_retLength_addrRef_1 tmp2 1
&itoa_7_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_7_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_7_retLength 8
&itoa_7_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_7_retLength_addrRef_0 CONST_-8 1
&itoa_7_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_7_retLength_addrRef_1 CONST_-8 1
&itoa_7_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_7_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_7_noDigits 0
# MSQ_START 1 set itoa_7_noDigits 1
# MSQ_START 2 zero itoa_7_noDigits
&itoa_7_noDigits &itoa_7_noDigits ?+8 ; relsq itoa_7_noDigits itoa_7_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_7_noDigits 1
&itoa_7_noDigits &CONST_-1 ?+8 ; relsq itoa_7_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp addrSymbols_it_step4 tmp2
# MSQ_START 2 movneg tmp2 addrSymbols_it_step4
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :addrSymbols_it_step4_addrRef_0 &addrSymbols_it_step4 ?+8 ; relsq tmp2 addrSymbols_it_step4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_7_isNeg 0
# MSQ_START 1 zero itoa_7_isNeg
# MSQ_START 2 sub itoa_7_isNeg itoa_7_isNeg
&itoa_7_isNeg &itoa_7_isNeg ?+8 ; relsq itoa_7_isNeg itoa_7_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_7_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_7_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_7_IS_NEG ; lblsq tmp2 ZERO ITOA_7_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_7_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_36_END
&tmp2 &CONST_-1 &JZ_36_END ; lblsq tmp2 CONST_-1 JZ_36_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_36_REVERT_A
&tmp &CONST_-1 &JZ_36_REVERT_A ; lblsq tmp CONST_-1 JZ_36_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_7_IS_ZERO
&ZERO &ZERO &ITOA_7_IS_ZERO ; lblsq ZERO ZERO ITOA_7_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_36_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_36_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_36_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_7_LOOP
:JZ_36_END &ZERO &ZERO &ITOA_7_LOOP ; lblsq ZERO ZERO ITOA_7_LOOP
# MSQ_END 1 lbljmp
; label ITOA_7_IS_ZERO
# MSQ_START 1 set itoa_7_retBuf 30
# MSQ_START 2 zero itoa_7_retBuf
:ITOA_7_IS_ZERO :itoa_7_retBuf_addrRef_0 &itoa_7_retBuf :itoa_7_retBuf_addrRef_1 &itoa_7_retBuf ?+8 ; relsq itoa_7_retBuf itoa_7_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_7_retBuf 30
:itoa_7_retBuf_addrRef_2 &itoa_7_retBuf &CONST_-30 ?+8 ; relsq itoa_7_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_7_retLength 1
# MSQ_START 2 dec itoa_7_retLength -1
:itoa_7_retLength_addrRef_0 &itoa_7_retLength &CONST_-1 ?+8 ; relsq itoa_7_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_7_END
&ZERO &ZERO &ITOA_7_END ; lblsq ZERO ZERO ITOA_7_END
# MSQ_END 1 lbljmp
; label ITOA_7_IS_NEG
# MSQ_START 1 inc itoa_7_isNeg 1
# MSQ_START 2 dec itoa_7_isNeg -1
:ITOA_7_IS_NEG &itoa_7_isNeg &CONST_-1 ?+8 ; relsq itoa_7_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_7_retBuf 2d
# MSQ_START 2 zero itoa_7_retBuf
:itoa_7_retBuf_addrRef_3 &itoa_7_retBuf :itoa_7_retBuf_addrRef_4 &itoa_7_retBuf ?+8 ; relsq itoa_7_retBuf itoa_7_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_7_retBuf 2d
:itoa_7_retBuf_addrRef_5 &itoa_7_retBuf &CONST_-2D ?+8 ; relsq itoa_7_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_7_retBuf 8
&itoa_7_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_0 CONST_-8 1
&itoa_7_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_1 CONST_-8 1
&itoa_7_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_2 CONST_-8 1
&itoa_7_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_3 CONST_-8 1
&itoa_7_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_4 CONST_-8 1
&itoa_7_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_5 CONST_-8 1
&itoa_7_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_6 CONST_-8 1
&itoa_7_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_7 CONST_-8 1
&itoa_7_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_8 CONST_-8 1
&itoa_7_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_7_retLength 1
# MSQ_START 2 dec itoa_7_retLength -1
:itoa_7_retLength_addrRef_1 &itoa_7_retLength &CONST_-1 ?+8 ; relsq itoa_7_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_7_LOOP
&ZERO &ZERO &ITOA_7_LOOP ; lblsq ZERO ZERO ITOA_7_LOOP
# MSQ_END 1 lbljmp
; label ITOA_7_SUBBERS
:ITOA_7_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_7_LOOP
# MSQ_START 1 jz ITOA_7_SUBBERS ITOA_7_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_7_SUBBERS
:ITOA_7_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_7_SUBBERS_addrRef_0 &ITOA_7_SUBBERS ?+8 ; relsq tmp2 ITOA_7_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_37_END
&tmp2 &CONST_-1 &JZ_37_END ; lblsq tmp2 CONST_-1 JZ_37_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_7_SUBBERS 1 JZ_37_REVERT_A
:ITOA_7_SUBBERS_addrRef_1 &ITOA_7_SUBBERS &CONST_-1 &JZ_37_REVERT_A ; lblsq ITOA_7_SUBBERS CONST_-1 JZ_37_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_7_SUBBERS 1
:ITOA_7_SUBBERS_addrRef_2 &ITOA_7_SUBBERS &CONST_1 ?+8 ; relsq ITOA_7_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_7_REVERT_SUBBERS
&ZERO &ZERO &ITOA_7_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_7_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_37_REVERT_A
# MSQ_START 2 dec ITOA_7_SUBBERS 1
:JZ_37_REVERT_A :ITOA_7_SUBBERS_addrRef_3 &ITOA_7_SUBBERS &CONST_1 ?+8 ; relsq ITOA_7_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_37_END
# MSQ_END 1 jz
; var itoa_7_digitVal 0
# MSQ_START 1 zero itoa_7_digitVal
# MSQ_START 2 sub itoa_7_digitVal itoa_7_digitVal
:JZ_37_END &itoa_7_digitVal &itoa_7_digitVal ?+8 ; relsq itoa_7_digitVal itoa_7_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_7_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_7_SUBBERS ITOA_7_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_7_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_7_SUBBERS_addrRef_4 &ITOA_7_SUBBERS &ITOA_7_HANDLE_DIGIT ; lblsq tmp2 ITOA_7_SUBBERS ITOA_7_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_7_digitVal 1
# MSQ_START 2 dec itoa_7_digitVal -1
&itoa_7_digitVal &CONST_-1 ?+8 ; relsq itoa_7_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_7_SUBBERS
&tmp :ITOA_7_SUBBERS_addrRef_5 &ITOA_7_SUBBERS ?+8 ; relsq tmp ITOA_7_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_7_SUBTRACT_A
&ZERO &ZERO &ITOA_7_SUBTRACT_A ; lblsq ZERO ZERO ITOA_7_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_7_HANDLE_DIGIT
# MSQ_START 1 jz itoa_7_noDigits ITOA_7_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_7_noDigits
:ITOA_7_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_7_noDigits ?+8 ; relsq tmp2 itoa_7_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_38_END
&tmp2 &CONST_-1 &JZ_38_END ; lblsq tmp2 CONST_-1 JZ_38_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_7_noDigits 1 JZ_38_REVERT_A
&itoa_7_noDigits &CONST_-1 &JZ_38_REVERT_A ; lblsq itoa_7_noDigits CONST_-1 JZ_38_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_7_noDigits 1
&itoa_7_noDigits &CONST_1 ?+8 ; relsq itoa_7_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_7_PRINT_DIGIT
&ZERO &ZERO &ITOA_7_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_7_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_38_REVERT_A
# MSQ_START 2 dec itoa_7_noDigits 1
:JZ_38_REVERT_A &itoa_7_noDigits &CONST_1 ?+8 ; relsq itoa_7_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_38_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_7_digitVal ITOA_7_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_7_digitVal
:JZ_38_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_7_digitVal ?+8 ; relsq tmp2 itoa_7_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_39_END
&tmp2 &CONST_-1 &JZ_39_END ; lblsq tmp2 CONST_-1 JZ_39_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_7_digitVal 1 JZ_39_REVERT_A
&itoa_7_digitVal &CONST_-1 &JZ_39_REVERT_A ; lblsq itoa_7_digitVal CONST_-1 JZ_39_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_7_digitVal 1
&itoa_7_digitVal &CONST_1 ?+8 ; relsq itoa_7_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_7_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_7_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_7_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_39_REVERT_A
# MSQ_START 2 dec itoa_7_digitVal 1
:JZ_39_REVERT_A &itoa_7_digitVal &CONST_1 ?+8 ; relsq itoa_7_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_39_END
# MSQ_END 1 jz
; label ITOA_7_PRINT_DIGIT
# MSQ_START 1 zero itoa_7_noDigits
# MSQ_START 2 sub itoa_7_noDigits itoa_7_noDigits
:JZ_39_END :ITOA_7_PRINT_DIGIT &itoa_7_noDigits &itoa_7_noDigits ?+8 ; relsq itoa_7_noDigits itoa_7_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_7_retBuf 30
# MSQ_START 2 zero itoa_7_retBuf
:itoa_7_retBuf_addrRef_6 &itoa_7_retBuf :itoa_7_retBuf_addrRef_7 &itoa_7_retBuf ?+8 ; relsq itoa_7_retBuf itoa_7_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_7_retBuf 30
:itoa_7_retBuf_addrRef_8 &itoa_7_retBuf &CONST_-30 ?+8 ; relsq itoa_7_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_7_retBuf itoa_7_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_7_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_7_digitVal ?+8 ; relsq tmp2 itoa_7_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_7_retBuf tmp2
:itoa_7_retBuf_addrRef_9 &itoa_7_retBuf &tmp2 ?+8 ; relsq itoa_7_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_7_retBuf 8
&itoa_7_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_0 CONST_-8 1
&itoa_7_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_1 CONST_-8 1
&itoa_7_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_2 CONST_-8 1
&itoa_7_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_3 CONST_-8 1
&itoa_7_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_4 CONST_-8 1
&itoa_7_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_5 CONST_-8 1
&itoa_7_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_6 CONST_-8 1
&itoa_7_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_7 CONST_-8 1
&itoa_7_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_8 CONST_-8 1
&itoa_7_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_7_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_7_retLength 1
# MSQ_START 2 dec itoa_7_retLength -1
:itoa_7_retLength_addrRef_2 &itoa_7_retLength &CONST_-1 ?+8 ; relsq itoa_7_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_7_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_7_SUBBERS 8
:ITOA_7_DONT_PRINT_DIGIT &ITOA_7_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_7_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_7_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_7_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_7_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_7_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_7_LOOP
&ZERO &ZERO &ITOA_7_LOOP ; lblsq ZERO ZERO ITOA_7_LOOP
# MSQ_END 1 lbljmp
; label ITOA_7_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_7_SUBBERS 98
:ITOA_7_REVERT_SUBBERS &ITOA_7_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_0 CONST_98 1
&ITOA_7_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_1 CONST_98 1
&ITOA_7_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_2 CONST_98 1
&ITOA_7_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_3 CONST_98 1
&ITOA_7_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_4 CONST_98 1
&ITOA_7_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_7_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_7_END
# MSQ_END 0 itoa
; addr stubSym_step4 0
# MSQ_START 0 strcat stubSym_step4 stubPrefix_step4 nextId_str_step4 tmp tmp2 tmp3
; var strcat_3_aLength 0
; var strcat_3_retLength 0
# MSQ_START 1 strlen strcat_3_retLength nextId_str_step4 tmp
# MSQ_START 2 incaddr nextId_str_step4 8
:ITOA_7_END &nextId_str_step4_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_-8 1
&nextId_str_step4_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_-8 1
&nextId_str_step4_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_-8 1
&nextId_str_step4_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_-8 1
&nextId_str_step4_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_-8 1
&nextId_str_step4_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_-8 1
&nextId_str_step4_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_-8 1
&nextId_str_step4_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_-8 1
&nextId_str_step4_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_-8 1
&nextId_str_step4_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_-8 1
&nextId_str_step4_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_-8 1
&nextId_str_step4_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_-8 1
&nextId_str_step4_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_3_retLength nextId_str_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step4_addrRef_9 &nextId_str_step4 ?+8 ; relsq tmp nextId_str_step4 1
&strcat_3_retLength &strcat_3_retLength ?+8 ; relsq strcat_3_retLength strcat_3_retLength 1
&strcat_3_retLength &tmp ?+8 ; relsq strcat_3_retLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr nextId_str_step4 8
&nextId_str_step4_addrRef_0 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_8 1
&nextId_str_step4_addrRef_1 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_8 1
&nextId_str_step4_addrRef_2 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_8 1
&nextId_str_step4_addrRef_3 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_8 1
&nextId_str_step4_addrRef_4 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_8 1
&nextId_str_step4_addrRef_5 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_8 1
&nextId_str_step4_addrRef_6 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_8 1
&nextId_str_step4_addrRef_7 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_8 1
&nextId_str_step4_addrRef_8 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_8 1
&nextId_str_step4_addrRef_9 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_8 1
&nextId_str_step4_addrRef_10 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_8 1
&nextId_str_step4_addrRef_11 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_8 1
&nextId_str_step4_addrRef_12 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 strlen strcat_3_aLength stubPrefix_step4 tmp
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov strcat_3_aLength stubPrefix_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step4_addrRef_21 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
&strcat_3_aLength &strcat_3_aLength ?+8 ; relsq strcat_3_aLength strcat_3_aLength 1
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_8 1
&stubPrefix_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_8 1
&stubPrefix_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_8 1
&stubPrefix_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_8 1
&stubPrefix_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_8 1
&stubPrefix_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_8 1
&stubPrefix_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_8 1
&stubPrefix_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_8 1
&stubPrefix_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_8 1
&stubPrefix_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_8 1
&stubPrefix_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_8 1
&stubPrefix_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_8 1
&stubPrefix_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_8 1
&stubPrefix_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_8 1
&stubPrefix_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_8 1
&stubPrefix_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_8 1
&stubPrefix_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_8 1
&stubPrefix_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_8 1
&stubPrefix_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_8 1
&stubPrefix_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_8 1
&stubPrefix_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_8 1
&stubPrefix_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_8 1
&stubPrefix_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_8 1
&stubPrefix_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_8 1
&stubPrefix_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_END 1 strlen
# MSQ_START 1 add strcat_3_retLength strcat_3_aLength tmp
# MSQ_START 2 movneg tmp strcat_3_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_3_aLength ?+8 ; relsq tmp strcat_3_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_3_retLength tmp
&strcat_3_retLength &tmp ?+8 ; relsq strcat_3_retLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 malloc_const tmp 18 tmp2
# MSQ_START 2 malloc tmp CONST_18 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &CONST_18 ?+8 ; relsq tmp2 CONST_18 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr stubSym_step4 tmp tmp2 tmp3
# MSQ_START 2 mov tmp2 stubSym_step4_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &stubSym_step4_addrRef_0 ?+8 ; relsq tmp3 stubSym_step4_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
&stubSym_step4_addrRef_0 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_0 tmp2 1
&stubSym_step4_addrRef_1 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_1 tmp2 1
&stubSym_step4_addrRef_2 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_2 tmp2 1
&stubSym_step4_addrRef_3 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_3 tmp2 1
&stubSym_step4_addrRef_4 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_4 tmp2 1
&stubSym_step4_addrRef_5 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_5 tmp2 1
&stubSym_step4_addrRef_6 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_6 tmp2 1
&stubSym_step4_addrRef_7 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_7 tmp2 1
&stubSym_step4_addrRef_8 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_8 tmp2 1
&stubSym_step4_addrRef_9 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_9 tmp2 1
&stubSym_step4_addrRef_10 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_10 tmp2 1
&stubSym_step4_addrRef_11 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_11 tmp2 1
&stubSym_step4_addrRef_12 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_12 tmp2 1
&stubSym_step4_addrRef_13 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_13 tmp2 1
&stubSym_step4_addrRef_14 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_14 tmp2 1
&stubSym_step4_addrRef_15 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_15 tmp2 1
&stubSym_step4_addrRef_16 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_16 tmp2 1
&stubSym_step4_addrRef_17 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_17 tmp2 1
&stubSym_step4_addrRef_18 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_18 tmp2 1
&stubSym_step4_addrRef_19 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_19 tmp2 1
&stubSym_step4_addrRef_20 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_20 tmp2 1
&stubSym_step4_addrRef_21 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_21 tmp2 1
&stubSym_step4_addrRef_22 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_22 tmp2 1
&stubSym_step4_addrRef_23 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_23 tmp2 1
&stubSym_step4_addrRef_24 &tmp2 ?+8 ; relsq stubSym_step4_addrRef_24 tmp2 1
# MSQ_END 1 setaddr
# MSQ_START 1 mov tmp strcat_3_retLength tmp2
# MSQ_START 2 movneg tmp2 strcat_3_retLength
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcat_3_retLength ?+8 ; relsq tmp2 strcat_3_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 mul_8 tmp tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 alloc_str stubSym_step4 tmp tmp2
# MSQ_START 2 malloc stubSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &FREE_START ?+8 ; relsq tmp2 FREE_START 1
:stubSym_step4_addrRef_0 &stubSym_step4 :stubSym_step4_addrRef_1 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
:stubSym_step4_addrRef_2 &stubSym_step4 &tmp2 ?+8 ; relsq stubSym_step4 tmp2 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&FREE_START &tmp2 ?+8 ; relsq FREE_START tmp2 1
# MSQ_END 2 malloc
# MSQ_START 2 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero stubSym_step4
:stubSym_step4_addrRef_3 &stubSym_step4 :stubSym_step4_addrRef_4 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
:stubSym_step4_addrRef_5 &stubSym_step4 :stubSym_step4_addrRef_6 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
:stubSym_step4_addrRef_7 &stubSym_step4 &tmp2 ?+8 ; relsq stubSym_step4 tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step4 10
&stubSym_step4_addrRef_0 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_10 1
&stubSym_step4_addrRef_1 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_10 1
&stubSym_step4_addrRef_2 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_10 1
&stubSym_step4_addrRef_3 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_10 1
&stubSym_step4_addrRef_4 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_10 1
&stubSym_step4_addrRef_5 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_10 1
&stubSym_step4_addrRef_6 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_10 1
&stubSym_step4_addrRef_7 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_10 1
&stubSym_step4_addrRef_8 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_10 1
&stubSym_step4_addrRef_9 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_10 1
&stubSym_step4_addrRef_10 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_10 1
&stubSym_step4_addrRef_11 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_10 1
&stubSym_step4_addrRef_12 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_10 1
&stubSym_step4_addrRef_13 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_10 1
&stubSym_step4_addrRef_14 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_10 1
&stubSym_step4_addrRef_15 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_10 1
&stubSym_step4_addrRef_16 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_10 1
&stubSym_step4_addrRef_17 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_10 1
&stubSym_step4_addrRef_18 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_10 1
&stubSym_step4_addrRef_19 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_10 1
&stubSym_step4_addrRef_20 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_10 1
&stubSym_step4_addrRef_21 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_10 1
&stubSym_step4_addrRef_22 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_10 1
&stubSym_step4_addrRef_23 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_10 1
&stubSym_step4_addrRef_24 &CONST_10 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str
# MSQ_START 1 strcpy stubSym_step4 stubPrefix_step4 tmp tmp2
; addr strcpy_8_strA 0
# MSQ_START 2 setaddr strcpy_8_strA stubSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_8_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_8_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step4_addrRef_8 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
&strcpy_8_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_8_strA_addrRef_0 tmp 1
&strcpy_8_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_8_strA_addrRef_1 tmp 1
&strcpy_8_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_8_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_8_strB 0
# MSQ_START 2 setaddr strcpy_8_strB stubPrefix_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_8_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_8_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubPrefix_step4_addrRef_22 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
&strcpy_8_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_8_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_-8 1
&stubPrefix_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_-8 1
&stubPrefix_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_-8 1
&stubPrefix_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_-8 1
&stubPrefix_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_-8 1
&stubPrefix_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_-8 1
&stubPrefix_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_-8 1
&stubPrefix_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_-8 1
&stubPrefix_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_-8 1
&stubPrefix_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_-8 1
&stubPrefix_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_-8 1
&stubPrefix_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_-8 1
&stubPrefix_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_-8 1
&stubPrefix_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_-8 1
&stubPrefix_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_-8 1
&stubPrefix_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_-8 1
&stubPrefix_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_-8 1
&stubPrefix_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_-8 1
&stubPrefix_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_-8 1
&stubPrefix_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_-8 1
&stubPrefix_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_-8 1
&stubPrefix_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_-8 1
&stubPrefix_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_-8 1
&stubPrefix_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_-8 1
&stubPrefix_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step4 stubPrefix_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step4_addrRef_23 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
:stubSym_step4_addrRef_9 &stubSym_step4 :stubSym_step4_addrRef_10 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
:stubSym_step4_addrRef_11 &stubSym_step4 &tmp ?+8 ; relsq stubSym_step4 tmp 1
# MSQ_END 2 mov
; var strcpy_8_strLen 0
# MSQ_START 2 mov strcpy_8_strLen stubPrefix_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubPrefix_step4_addrRef_24 &stubPrefix_step4 ?+8 ; relsq tmp stubPrefix_step4 1
&strcpy_8_strLen &strcpy_8_strLen ?+8 ; relsq strcpy_8_strLen strcpy_8_strLen 1
&strcpy_8_strLen &tmp ?+8 ; relsq strcpy_8_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr stubPrefix_step4 8
&stubPrefix_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_0 CONST_8 1
&stubPrefix_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_1 CONST_8 1
&stubPrefix_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_2 CONST_8 1
&stubPrefix_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_3 CONST_8 1
&stubPrefix_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_4 CONST_8 1
&stubPrefix_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_5 CONST_8 1
&stubPrefix_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_6 CONST_8 1
&stubPrefix_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_7 CONST_8 1
&stubPrefix_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_8 CONST_8 1
&stubPrefix_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_9 CONST_8 1
&stubPrefix_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_10 CONST_8 1
&stubPrefix_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_11 CONST_8 1
&stubPrefix_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_12 CONST_8 1
&stubPrefix_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_13 CONST_8 1
&stubPrefix_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_14 CONST_8 1
&stubPrefix_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_15 CONST_8 1
&stubPrefix_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_16 CONST_8 1
&stubPrefix_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_17 CONST_8 1
&stubPrefix_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_18 CONST_8 1
&stubPrefix_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_19 CONST_8 1
&stubPrefix_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_20 CONST_8 1
&stubPrefix_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_21 CONST_8 1
&stubPrefix_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_22 CONST_8 1
&stubPrefix_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_23 CONST_8 1
&stubPrefix_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubPrefix_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_8_LOOP
# MSQ_START 2 decleq strcpy_8_strLen 0 STRCPY_8_END
:STRCPY_8_LOOP &strcpy_8_strLen &CONST_0 &STRCPY_8_END ; lblsq strcpy_8_strLen CONST_0 STRCPY_8_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_8_strLen 1
&strcpy_8_strLen &CONST_1 ?+8 ; relsq strcpy_8_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_8_strA strcpy_8_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_8_strB_addrRef_0 &strcpy_8_strB ?+8 ; relsq tmp strcpy_8_strB 1
:strcpy_8_strA_addrRef_0 &strcpy_8_strA :strcpy_8_strA_addrRef_1 &strcpy_8_strA ?+8 ; relsq strcpy_8_strA strcpy_8_strA 1
:strcpy_8_strA_addrRef_2 &strcpy_8_strA &tmp ?+8 ; relsq strcpy_8_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_8_strA 8
&strcpy_8_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_8_strA_addrRef_0 CONST_-8 1
&strcpy_8_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_8_strA_addrRef_1 CONST_-8 1
&strcpy_8_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_8_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_8_strB 8
&strcpy_8_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_8_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_8_LOOP
&ZERO &ZERO &STRCPY_8_LOOP ; lblsq ZERO ZERO STRCPY_8_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_8_END
# MSQ_END 1 strcpy
# MSQ_START 1 mul_8 strcat_3_aLength tmp
# MSQ_START 2 movneg tmp strcat_3_aLength
:STRCPY_8_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_3_aLength ?+8 ; relsq tmp strcat_3_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_START 2 sub strcat_3_aLength tmp
&strcat_3_aLength &tmp ?+8 ; relsq strcat_3_aLength tmp 1
# MSQ_END 2 sub
# MSQ_END 1 mul_8
# MSQ_START 1 add stubSym_step4 strcat_3_aLength tmp
# MSQ_START 2 movneg tmp strcat_3_aLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_3_aLength ?+8 ; relsq tmp strcat_3_aLength 1
# MSQ_END 2 movneg
# MSQ_START 2 sub stubSym_step4 tmp
:stubSym_step4_addrRef_12 &stubSym_step4 &tmp ?+8 ; relsq stubSym_step4 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 strcpy stubSym_step4 nextId_str_step4 tmp tmp2
; addr strcpy_9_strA 0
# MSQ_START 2 setaddr strcpy_9_strA stubSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_9_strA_addrRef_0 ?+8 ; relsq tmp2 strcpy_9_strA_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step4_addrRef_13 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
&strcpy_9_strA_addrRef_0 &tmp ?+8 ; relsq strcpy_9_strA_addrRef_0 tmp 1
&strcpy_9_strA_addrRef_1 &tmp ?+8 ; relsq strcpy_9_strA_addrRef_1 tmp 1
&strcpy_9_strA_addrRef_2 &tmp ?+8 ; relsq strcpy_9_strA_addrRef_2 tmp 1
# MSQ_END 2 setaddr
; addr strcpy_9_strB 0
# MSQ_START 2 setaddr strcpy_9_strB nextId_str_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcpy_9_strB_addrRef_0 ?+8 ; relsq tmp2 strcpy_9_strB_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :nextId_str_step4_addrRef_10 &nextId_str_step4 ?+8 ; relsq tmp nextId_str_step4 1
&strcpy_9_strB_addrRef_0 &tmp ?+8 ; relsq strcpy_9_strB_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr nextId_str_step4 8
&nextId_str_step4_addrRef_0 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_-8 1
&nextId_str_step4_addrRef_1 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_-8 1
&nextId_str_step4_addrRef_2 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_-8 1
&nextId_str_step4_addrRef_3 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_-8 1
&nextId_str_step4_addrRef_4 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_-8 1
&nextId_str_step4_addrRef_5 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_-8 1
&nextId_str_step4_addrRef_6 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_-8 1
&nextId_str_step4_addrRef_7 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_-8 1
&nextId_str_step4_addrRef_8 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_-8 1
&nextId_str_step4_addrRef_9 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_-8 1
&nextId_str_step4_addrRef_10 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_-8 1
&nextId_str_step4_addrRef_11 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_-8 1
&nextId_str_step4_addrRef_12 &CONST_-8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov stubSym_step4 nextId_str_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step4_addrRef_11 &nextId_str_step4 ?+8 ; relsq tmp nextId_str_step4 1
:stubSym_step4_addrRef_14 &stubSym_step4 :stubSym_step4_addrRef_15 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
:stubSym_step4_addrRef_16 &stubSym_step4 &tmp ?+8 ; relsq stubSym_step4 tmp 1
# MSQ_END 2 mov
; var strcpy_9_strLen 0
# MSQ_START 2 mov strcpy_9_strLen nextId_str_step4 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :nextId_str_step4_addrRef_12 &nextId_str_step4 ?+8 ; relsq tmp nextId_str_step4 1
&strcpy_9_strLen &strcpy_9_strLen ?+8 ; relsq strcpy_9_strLen strcpy_9_strLen 1
&strcpy_9_strLen &tmp ?+8 ; relsq strcpy_9_strLen tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr nextId_str_step4 8
&nextId_str_step4_addrRef_0 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_0 CONST_8 1
&nextId_str_step4_addrRef_1 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_1 CONST_8 1
&nextId_str_step4_addrRef_2 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_2 CONST_8 1
&nextId_str_step4_addrRef_3 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_3 CONST_8 1
&nextId_str_step4_addrRef_4 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_4 CONST_8 1
&nextId_str_step4_addrRef_5 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_5 CONST_8 1
&nextId_str_step4_addrRef_6 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_6 CONST_8 1
&nextId_str_step4_addrRef_7 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_7 CONST_8 1
&nextId_str_step4_addrRef_8 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_8 CONST_8 1
&nextId_str_step4_addrRef_9 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_9 CONST_8 1
&nextId_str_step4_addrRef_10 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_10 CONST_8 1
&nextId_str_step4_addrRef_11 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_11 CONST_8 1
&nextId_str_step4_addrRef_12 &CONST_8 ?+8 ; relsq nextId_str_step4_addrRef_12 CONST_8 1
# MSQ_END 2 decaddr
; label STRCPY_9_LOOP
# MSQ_START 2 decleq strcpy_9_strLen 0 STRCPY_9_END
:STRCPY_9_LOOP &strcpy_9_strLen &CONST_0 &STRCPY_9_END ; lblsq strcpy_9_strLen CONST_0 STRCPY_9_END
# MSQ_END 2 decleq
# MSQ_START 2 dec strcpy_9_strLen 1
&strcpy_9_strLen &CONST_1 ?+8 ; relsq strcpy_9_strLen CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 mov strcpy_9_strA strcpy_9_strB tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcpy_9_strB_addrRef_0 &strcpy_9_strB ?+8 ; relsq tmp strcpy_9_strB 1
:strcpy_9_strA_addrRef_0 &strcpy_9_strA :strcpy_9_strA_addrRef_1 &strcpy_9_strA ?+8 ; relsq strcpy_9_strA strcpy_9_strA 1
:strcpy_9_strA_addrRef_2 &strcpy_9_strA &tmp ?+8 ; relsq strcpy_9_strA tmp 1
# MSQ_END 2 mov
# MSQ_START 2 incaddr strcpy_9_strA 8
&strcpy_9_strA_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_9_strA_addrRef_0 CONST_-8 1
&strcpy_9_strA_addrRef_1 &CONST_-8 ?+8 ; relsq strcpy_9_strA_addrRef_1 CONST_-8 1
&strcpy_9_strA_addrRef_2 &CONST_-8 ?+8 ; relsq strcpy_9_strA_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcpy_9_strB 8
&strcpy_9_strB_addrRef_0 &CONST_-8 ?+8 ; relsq strcpy_9_strB_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCPY_9_LOOP
&ZERO &ZERO &STRCPY_9_LOOP ; lblsq ZERO ZERO STRCPY_9_LOOP
# MSQ_END 2 lbljmp
; label STRCPY_9_END
# MSQ_END 1 strcpy
# MSQ_START 1 sub stubSym_step4 strcat_3_aLength
:STRCPY_9_END :stubSym_step4_addrRef_17 &stubSym_step4 &strcat_3_aLength ?+8 ; relsq stubSym_step4 strcat_3_aLength 1
# MSQ_END 1 sub
# MSQ_START 1 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov stubSym_step4 strcat_3_retLength tmp
# MSQ_START 2 movneg tmp strcat_3_retLength
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &strcat_3_retLength ?+8 ; relsq tmp strcat_3_retLength 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg stubSym_step4 tmp
:stubSym_step4_addrRef_18 &stubSym_step4 :stubSym_step4_addrRef_19 &stubSym_step4 ?+8 ; relsq stubSym_step4 stubSym_step4 1
:stubSym_step4_addrRef_20 &stubSym_step4 &tmp ?+8 ; relsq stubSym_step4 tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
# MSQ_END 0 strcat

# Py: symbols[stubSym].addr = size
; addr symbols_it_step4 0
# MSQ_START 0 setaddr symbols_it_step4 symbolsBegin tmp tmp2
# MSQ_START 1 mov tmp symbols_it_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 symbols_it_step4_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbols_it_step4_addrRef_0 ?+8 ; relsq tmp2 symbols_it_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp symbolsBegin
&tmp &symbolsBegin ?+8 ; relsq tmp symbolsBegin 1
# MSQ_END 1 sub
&symbols_it_step4_addrRef_0 &tmp ?+8 ; relsq symbols_it_step4_addrRef_0 tmp 1
&symbols_it_step4_addrRef_1 &tmp ?+8 ; relsq symbols_it_step4_addrRef_1 tmp 1
&symbols_it_step4_addrRef_2 &tmp ?+8 ; relsq symbols_it_step4_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key symbols_it_step4 stubSym_step4 30 symbolsLen STEP4_SQ_FOUND_SYMBOL tmp tmp2
; var find_item_in_buf_with_str_key_4_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_4_elmsLeft symbolsLen tmp
# MSQ_START 2 movneg tmp symbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolsLen ?+8 ; relsq tmp symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_4_elmsLeft tmp
&find_item_in_buf_with_str_key_4_elmsLeft &find_item_in_buf_with_str_key_4_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_4_elmsLeft find_item_in_buf_with_str_key_4_elmsLeft 1
&find_item_in_buf_with_str_key_4_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_4_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_4_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_4_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_4_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_4_LOOP &find_item_in_buf_with_str_key_4_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_4_NO_MATCH ; lblsq find_item_in_buf_with_str_key_4_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_4_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_4_elmsLeft 1
&find_item_in_buf_with_str_key_4_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_4_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const symbols_it_step4 stubSym_step4 STEP4_SQ_FOUND_SYMBOL tmp tmp2
; addr strcmp_const_28_a 0
# MSQ_START 2 copyaddr strcmp_const_28_a symbols_it_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_28_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_28_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &symbols_it_step4_addrRef_0 ?+8 ; relsq tmp symbols_it_step4_addrRef_0 1
&strcmp_const_28_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_28_a_addrRef_0 tmp 1
&strcmp_const_28_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_28_a_addrRef_1 tmp 1
&strcmp_const_28_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_28_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_28_a 8
&strcmp_const_28_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_28_a_addrRef_0 CONST_-8 1
&strcmp_const_28_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_28_a_addrRef_1 CONST_-8 1
&strcmp_const_28_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_28_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_28_a stubSym_step4 STRCMP_CONST_28_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_28_a_addrRef_0 &strcmp_const_28_a ?+8 ; relsq tmp2 strcmp_const_28_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step4_addrRef_21 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_28_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_28_REVERT_ADDR
&tmp &CONST_-1 &JNZ_56_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_56_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_56_END ; lblsq ZERO ZERO JNZ_56_END
; label JNZ_56_REVERT_AND_JUMP
:JNZ_56_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_28_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_28_REVERT_ADDR
; label JNZ_56_END
# MSQ_END 2 jne
; var strcmp_const_28_len 0
# MSQ_START 2 mov strcmp_const_28_len strcmp_const_28_a tmp
:JNZ_56_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_28_a_addrRef_1 &strcmp_const_28_a ?+8 ; relsq tmp strcmp_const_28_a 1
&strcmp_const_28_len &strcmp_const_28_len ?+8 ; relsq strcmp_const_28_len strcmp_const_28_len 1
&strcmp_const_28_len &tmp ?+8 ; relsq strcmp_const_28_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_28_a 8
&strcmp_const_28_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_28_a_addrRef_0 CONST_8 1
&strcmp_const_28_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_28_a_addrRef_1 CONST_8 1
&strcmp_const_28_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_28_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_28_aStr 0
; addr strcmp_const_28_bStr 0
# MSQ_START 2 setaddr strcmp_const_28_aStr strcmp_const_28_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_28_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_28_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_28_a_addrRef_2 &strcmp_const_28_a ?+8 ; relsq tmp strcmp_const_28_a 1
&strcmp_const_28_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_28_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_28_bStr stubSym_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_28_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_28_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :stubSym_step4_addrRef_22 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
&strcmp_const_28_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_28_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_28_LOOP
# MSQ_START 2 decleq strcmp_const_28_len 0 STEP4_SQ_FOUND_SYMBOL
:STRCMP_CONST_28_LOOP &strcmp_const_28_len &CONST_0 &STEP4_SQ_FOUND_SYMBOL ; lblsq strcmp_const_28_len CONST_0 STEP4_SQ_FOUND_SYMBOL
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_28_len 1
&strcmp_const_28_len &CONST_1 ?+8 ; relsq strcmp_const_28_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_28_aStr strcmp_const_28_bStr STRCMP_CONST_28_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_28_aStr_addrRef_0 &strcmp_const_28_aStr ?+8 ; relsq tmp2 strcmp_const_28_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_28_bStr_addrRef_0 &strcmp_const_28_bStr ?+8 ; relsq tmp strcmp_const_28_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_28_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_28_END
&tmp &CONST_-1 &JNZ_57_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_57_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_57_END ; lblsq ZERO ZERO JNZ_57_END
; label JNZ_57_REVERT_AND_JUMP
:JNZ_57_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_28_END ; lblsq ZERO ZERO STRCMP_CONST_28_END
; label JNZ_57_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_28_aStr 8
:JNZ_57_END &strcmp_const_28_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_28_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_28_bStr 8
&strcmp_const_28_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_28_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_28_LOOP
&ZERO &ZERO &STRCMP_CONST_28_LOOP ; lblsq ZERO ZERO STRCMP_CONST_28_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_28_REVERT_ADDR
# MSQ_START 2 decaddr stubSym_step4 8
:STRCMP_CONST_28_REVERT_ADDR &stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_28_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr symbols_it_step4 30
:STRCMP_CONST_28_END &symbols_it_step4_addrRef_0 &CONST_-30 ?+8 ; relsq symbols_it_step4_addrRef_0 CONST_-30 1
&symbols_it_step4_addrRef_1 &CONST_-30 ?+8 ; relsq symbols_it_step4_addrRef_1 CONST_-30 1
&symbols_it_step4_addrRef_2 &CONST_-30 ?+8 ; relsq symbols_it_step4_addrRef_2 CONST_-30 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_4_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_4_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_4_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_4_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key

# MSQ_START 0 puts STEP4_SQ_MISSING_SYMBOL tmp tmp2
; addr puts_19_str 0
# MSQ_START 1 setaddr puts_19_str STEP4_SQ_MISSING_SYMBOL tmp tmp2
# MSQ_START 2 mov tmp puts_19_str_addrRef_0 tmp2
:FIND_ITEM_IN_BUF_WITH_STR_KEY_4_NO_MATCH &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_19_str_addrRef_0 ?+8 ; relsq tmp2 puts_19_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP4_SQ_MISSING_SYMBOL
&tmp :STEP4_SQ_MISSING_SYMBOL_addrRef_0 &STEP4_SQ_MISSING_SYMBOL ?+8 ; relsq tmp STEP4_SQ_MISSING_SYMBOL 1
# MSQ_END 2 sub
&puts_19_str_addrRef_0 &tmp ?+8 ; relsq puts_19_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_19_len 0
# MSQ_START 1 incaddr STEP4_SQ_MISSING_SYMBOL 8
&STEP4_SQ_MISSING_SYMBOL_addrRef_0 &CONST_-8 ?+8 ; relsq STEP4_SQ_MISSING_SYMBOL_addrRef_0 CONST_-8 1
&STEP4_SQ_MISSING_SYMBOL_addrRef_1 &CONST_-8 ?+8 ; relsq STEP4_SQ_MISSING_SYMBOL_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_19_len STEP4_SQ_MISSING_SYMBOL tmp
# MSQ_START 2 movneg tmp STEP4_SQ_MISSING_SYMBOL
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP4_SQ_MISSING_SYMBOL_addrRef_1 &STEP4_SQ_MISSING_SYMBOL ?+8 ; relsq tmp STEP4_SQ_MISSING_SYMBOL 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_19_len tmp
&puts_19_len &puts_19_len ?+8 ; relsq puts_19_len puts_19_len 1
&puts_19_len &tmp ?+8 ; relsq puts_19_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP4_SQ_MISSING_SYMBOL 8
&STEP4_SQ_MISSING_SYMBOL_addrRef_0 &CONST_8 ?+8 ; relsq STEP4_SQ_MISSING_SYMBOL_addrRef_0 CONST_8 1
&STEP4_SQ_MISSING_SYMBOL_addrRef_1 &CONST_8 ?+8 ; relsq STEP4_SQ_MISSING_SYMBOL_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_19_LOOP
# MSQ_START 1 decleq puts_19_len 0 PUTS_19_END
:PUTS_19_LOOP &puts_19_len &CONST_0 &PUTS_19_END ; lblsq puts_19_len CONST_0 PUTS_19_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_19_len 1
&puts_19_len &CONST_1 ?+8 ; relsq puts_19_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_19_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_19_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_19_str_addrRef_0 &puts_19_str ?+8 ; relsq tmp puts_19_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_19_str 8
&puts_19_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_19_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_19_LOOP
&ZERO &ZERO &PUTS_19_LOOP ; lblsq ZERO ZERO PUTS_19_LOOP
# MSQ_END 1 lbljmp
; label PUTS_19_END
# MSQ_END 0 puts
# MSQ_START 0 putchar SPACE tmp
:PUTS_19_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp SPACE
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SPACE
&tmp &SPACE ?+8 ; relsq tmp SPACE 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 puts stubSym_step4 tmp tmp2
; addr puts_20_str 0
# MSQ_START 1 setaddr puts_20_str stubSym_step4 tmp tmp2
# MSQ_START 2 mov tmp puts_20_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_20_str_addrRef_0 ?+8 ; relsq tmp2 puts_20_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp stubSym_step4
&tmp :stubSym_step4_addrRef_23 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
# MSQ_END 2 sub
&puts_20_str_addrRef_0 &tmp ?+8 ; relsq puts_20_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_20_len 0
# MSQ_START 1 incaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_-8 1
&stubSym_step4_addrRef_1 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_-8 1
&stubSym_step4_addrRef_2 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_-8 1
&stubSym_step4_addrRef_3 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_-8 1
&stubSym_step4_addrRef_4 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_-8 1
&stubSym_step4_addrRef_5 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_-8 1
&stubSym_step4_addrRef_6 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_-8 1
&stubSym_step4_addrRef_7 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_-8 1
&stubSym_step4_addrRef_8 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_-8 1
&stubSym_step4_addrRef_9 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_-8 1
&stubSym_step4_addrRef_10 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_-8 1
&stubSym_step4_addrRef_11 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_-8 1
&stubSym_step4_addrRef_12 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_-8 1
&stubSym_step4_addrRef_13 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_-8 1
&stubSym_step4_addrRef_14 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_-8 1
&stubSym_step4_addrRef_15 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_-8 1
&stubSym_step4_addrRef_16 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_-8 1
&stubSym_step4_addrRef_17 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_-8 1
&stubSym_step4_addrRef_18 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_-8 1
&stubSym_step4_addrRef_19 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_-8 1
&stubSym_step4_addrRef_20 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_-8 1
&stubSym_step4_addrRef_21 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_-8 1
&stubSym_step4_addrRef_22 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_-8 1
&stubSym_step4_addrRef_23 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_-8 1
&stubSym_step4_addrRef_24 &CONST_-8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_20_len stubSym_step4 tmp
# MSQ_START 2 movneg tmp stubSym_step4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :stubSym_step4_addrRef_24 &stubSym_step4 ?+8 ; relsq tmp stubSym_step4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_20_len tmp
&puts_20_len &puts_20_len ?+8 ; relsq puts_20_len puts_20_len 1
&puts_20_len &tmp ?+8 ; relsq puts_20_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr stubSym_step4 8
&stubSym_step4_addrRef_0 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_0 CONST_8 1
&stubSym_step4_addrRef_1 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_1 CONST_8 1
&stubSym_step4_addrRef_2 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_2 CONST_8 1
&stubSym_step4_addrRef_3 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_3 CONST_8 1
&stubSym_step4_addrRef_4 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_4 CONST_8 1
&stubSym_step4_addrRef_5 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_5 CONST_8 1
&stubSym_step4_addrRef_6 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_6 CONST_8 1
&stubSym_step4_addrRef_7 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_7 CONST_8 1
&stubSym_step4_addrRef_8 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_8 CONST_8 1
&stubSym_step4_addrRef_9 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_9 CONST_8 1
&stubSym_step4_addrRef_10 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_10 CONST_8 1
&stubSym_step4_addrRef_11 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_11 CONST_8 1
&stubSym_step4_addrRef_12 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_12 CONST_8 1
&stubSym_step4_addrRef_13 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_13 CONST_8 1
&stubSym_step4_addrRef_14 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_14 CONST_8 1
&stubSym_step4_addrRef_15 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_15 CONST_8 1
&stubSym_step4_addrRef_16 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_16 CONST_8 1
&stubSym_step4_addrRef_17 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_17 CONST_8 1
&stubSym_step4_addrRef_18 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_18 CONST_8 1
&stubSym_step4_addrRef_19 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_19 CONST_8 1
&stubSym_step4_addrRef_20 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_20 CONST_8 1
&stubSym_step4_addrRef_21 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_21 CONST_8 1
&stubSym_step4_addrRef_22 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_22 CONST_8 1
&stubSym_step4_addrRef_23 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_23 CONST_8 1
&stubSym_step4_addrRef_24 &CONST_8 ?+8 ; relsq stubSym_step4_addrRef_24 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_20_LOOP
# MSQ_START 1 decleq puts_20_len 0 PUTS_20_END
:PUTS_20_LOOP &puts_20_len &CONST_0 &PUTS_20_END ; lblsq puts_20_len CONST_0 PUTS_20_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_20_len 1
&puts_20_len &CONST_1 ?+8 ; relsq puts_20_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_20_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_20_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_20_str_addrRef_0 &puts_20_str ?+8 ; relsq tmp puts_20_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_20_str 8
&puts_20_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_20_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_20_LOOP
&ZERO &ZERO &PUTS_20_LOOP ; lblsq ZERO ZERO PUTS_20_LOOP
# MSQ_END 1 lbljmp
; label PUTS_20_END
# MSQ_END 0 puts
# MSQ_START 0 lbljmp HALT
:PUTS_20_END &ZERO &ZERO &HALT ; lblsq ZERO ZERO HALT
# MSQ_END 0 lbljmp

; label STEP4_SQ_FOUND_SYMBOL
# MSQ_START 0 incaddr symbols_it_step4 18
:STEP4_SQ_FOUND_SYMBOL &symbols_it_step4_addrRef_0 &CONST_-18 ?+8 ; relsq symbols_it_step4_addrRef_0 CONST_-18 1
&symbols_it_step4_addrRef_1 &CONST_-18 ?+8 ; relsq symbols_it_step4_addrRef_1 CONST_-18 1
&symbols_it_step4_addrRef_2 &CONST_-18 ?+8 ; relsq symbols_it_step4_addrRef_2 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov symbols_it_step4 size_step4 tmp
# MSQ_START 1 movneg tmp size_step4
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp size_step4
&tmp &size_step4 ?+8 ; relsq tmp size_step4 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg symbols_it_step4 tmp
# MSQ_START 2 zero symbols_it_step4
:symbols_it_step4_addrRef_0 &symbols_it_step4 :symbols_it_step4_addrRef_1 &symbols_it_step4 ?+8 ; relsq symbols_it_step4 symbols_it_step4 1
# MSQ_END 2 zero
# MSQ_START 2 sub symbols_it_step4 tmp
:symbols_it_step4_addrRef_2 &symbols_it_step4 &tmp ?+8 ; relsq symbols_it_step4 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# Py: addrSymbols[sym] += 1
# MSQ_START 0 inc addrSymbols_it_step4 1
# MSQ_START 1 dec addrSymbols_it_step4 -1
:addrSymbols_it_step4_addrRef_1 &addrSymbols_it_step4 &CONST_-1 ?+8 ; relsq addrSymbols_it_step4 CONST_-1 1
# MSQ_END 1 dec
# MSQ_END 0 inc

; label STEP4_HANDLE_SQ_INC_SIZE
# MSQ_START 0 inc size_step4 8
# MSQ_START 1 dec size_step4 -8
:STEP4_HANDLE_SQ_INC_SIZE &size_step4 &CONST_-8 ?+8 ; relsq size_step4 CONST_-8 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 incaddr curSym_step4 18
&curSym_step4_addrRef_0 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_0 CONST_-18 1
&curSym_step4_addrRef_1 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_1 CONST_-18 1
&curSym_step4_addrRef_2 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_2 CONST_-18 1
&curSym_step4_addrRef_3 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_3 CONST_-18 1
&curSym_step4_addrRef_4 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_4 CONST_-18 1
&curSym_step4_addrRef_5 &CONST_-18 ?+8 ; relsq curSym_step4_addrRef_5 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP4_HANDLE_SQ_LOOP
&ZERO &ZERO &STEP4_HANDLE_SQ_LOOP ; lblsq ZERO ZERO STEP4_HANDLE_SQ_LOOP
# MSQ_END 0 lbljmp

; label STEP4_HANDLE_RAW
# Py: size += 8 * len(line.tokens)
# MSQ_START 0 incaddr curLine_step4 20
:STEP4_HANDLE_RAW &curLine_step4_addrRef_0 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-20 1
&curLine_step4_addrRef_1 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-20 1
&curLine_step4_addrRef_2 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-20 1
&curLine_step4_addrRef_3 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-20 1
&curLine_step4_addrRef_4 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-20 1
&curLine_step4_addrRef_5 &CONST_-20 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-20 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov tmp curLine_step4 tmp2
# MSQ_START 1 movneg tmp2 curLine_step4
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 curLine_step4
&tmp2 :curLine_step4_addrRef_4 &curLine_step4 ?+8 ; relsq tmp2 curLine_step4 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg tmp tmp2
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov
# MSQ_START 0 mul_8 tmp tmp2
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 sub tmp tmp2
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 1 sub
# MSQ_END 0 mul_8
# MSQ_START 0 add size_step4 tmp tmp2
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 sub size_step4 tmp2
&size_step4 &tmp2 ?+8 ; relsq size_step4 tmp2 1
# MSQ_END 1 sub
# MSQ_END 0 add

# MSQ_START 0 incaddr curLine_step4 38
&curLine_step4_addrRef_0 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-38 1
&curLine_step4_addrRef_1 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-38 1
&curLine_step4_addrRef_2 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-38 1
&curLine_step4_addrRef_3 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-38 1
&curLine_step4_addrRef_4 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-38 1
&curLine_step4_addrRef_5 &CONST_-38 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-38 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP4_LOOP
&ZERO &ZERO &STEP4_LOOP ; lblsq ZERO ZERO STEP4_LOOP
# MSQ_END 0 lbljmp

; label STEP4_HANDLE_LABEL
# Py: symbols[line.tokens[0]].addr = size
; addr sym0_step4 0
# MSQ_START 0 incaddr curLine_step4 18
:STEP4_HANDLE_LABEL &curLine_step4_addrRef_0 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-18 1
&curLine_step4_addrRef_1 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-18 1
&curLine_step4_addrRef_2 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-18 1
&curLine_step4_addrRef_3 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-18 1
&curLine_step4_addrRef_4 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-18 1
&curLine_step4_addrRef_5 &CONST_-18 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 setaddr sym0_step4 curLine_step4 tmp tmp2
# MSQ_START 1 mov tmp sym0_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 sym0_step4_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &sym0_step4_addrRef_0 ?+8 ; relsq tmp2 sym0_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp curLine_step4
&tmp :curLine_step4_addrRef_5 &curLine_step4 ?+8 ; relsq tmp curLine_step4 1
# MSQ_END 1 sub
&sym0_step4_addrRef_0 &tmp ?+8 ; relsq sym0_step4_addrRef_0 tmp 1
&sym0_step4_addrRef_1 &tmp ?+8 ; relsq sym0_step4_addrRef_1 tmp 1
&sym0_step4_addrRef_2 &tmp ?+8 ; relsq sym0_step4_addrRef_2 tmp 1
&sym0_step4_addrRef_3 &tmp ?+8 ; relsq sym0_step4_addrRef_3 tmp 1
# MSQ_END 0 setaddr

; addr symbols_it2_step4 0
# MSQ_START 0 setaddr symbols_it2_step4 symbolsBegin tmp tmp2
# MSQ_START 1 mov tmp symbols_it2_step4_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 symbols_it2_step4_addrRef_0
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbols_it2_step4_addrRef_0 ?+8 ; relsq tmp2 symbols_it2_step4_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp symbolsBegin
&tmp &symbolsBegin ?+8 ; relsq tmp symbolsBegin 1
# MSQ_END 1 sub
&symbols_it2_step4_addrRef_0 &tmp ?+8 ; relsq symbols_it2_step4_addrRef_0 tmp 1
&symbols_it2_step4_addrRef_1 &tmp ?+8 ; relsq symbols_it2_step4_addrRef_1 tmp 1
&symbols_it2_step4_addrRef_2 &tmp ?+8 ; relsq symbols_it2_step4_addrRef_2 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 find_item_in_buf_with_str_key symbols_it2_step4 sym0_step4 30 symbolsLen STEP4_LABEL_FOUND_SYMBOL tmp tmp2
; var find_item_in_buf_with_str_key_5_elmsLeft 0
# MSQ_START 1 mov find_item_in_buf_with_str_key_5_elmsLeft symbolsLen tmp
# MSQ_START 2 movneg tmp symbolsLen
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &symbolsLen ?+8 ; relsq tmp symbolsLen 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg find_item_in_buf_with_str_key_5_elmsLeft tmp
&find_item_in_buf_with_str_key_5_elmsLeft &find_item_in_buf_with_str_key_5_elmsLeft ?+8 ; relsq find_item_in_buf_with_str_key_5_elmsLeft find_item_in_buf_with_str_key_5_elmsLeft 1
&find_item_in_buf_with_str_key_5_elmsLeft &tmp ?+8 ; relsq find_item_in_buf_with_str_key_5_elmsLeft tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_5_LOOP
# MSQ_START 1 decleq find_item_in_buf_with_str_key_5_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_5_NO_MATCH
:FIND_ITEM_IN_BUF_WITH_STR_KEY_5_LOOP &find_item_in_buf_with_str_key_5_elmsLeft &CONST_0 &FIND_ITEM_IN_BUF_WITH_STR_KEY_5_NO_MATCH ; lblsq find_item_in_buf_with_str_key_5_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_5_NO_MATCH
# MSQ_END 1 decleq
# MSQ_START 1 dec find_item_in_buf_with_str_key_5_elmsLeft 1
&find_item_in_buf_with_str_key_5_elmsLeft &CONST_1 ?+8 ; relsq find_item_in_buf_with_str_key_5_elmsLeft CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 strcmp_const symbols_it2_step4 sym0_step4 STEP4_LABEL_FOUND_SYMBOL tmp tmp2
; addr strcmp_const_29_a 0
# MSQ_START 2 copyaddr strcmp_const_29_a symbols_it2_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_29_a_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_29_a_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp &symbols_it2_step4_addrRef_0 ?+8 ; relsq tmp symbols_it2_step4_addrRef_0 1
&strcmp_const_29_a_addrRef_0 &tmp ?+8 ; relsq strcmp_const_29_a_addrRef_0 tmp 1
&strcmp_const_29_a_addrRef_1 &tmp ?+8 ; relsq strcmp_const_29_a_addrRef_1 tmp 1
&strcmp_const_29_a_addrRef_2 &tmp ?+8 ; relsq strcmp_const_29_a_addrRef_2 tmp 1
# MSQ_END 2 copyaddr
# MSQ_START 2 incaddr strcmp_const_29_a 8
&strcmp_const_29_a_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_29_a_addrRef_0 CONST_-8 1
&strcmp_const_29_a_addrRef_1 &CONST_-8 ?+8 ; relsq strcmp_const_29_a_addrRef_1 CONST_-8 1
&strcmp_const_29_a_addrRef_2 &CONST_-8 ?+8 ; relsq strcmp_const_29_a_addrRef_2 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr sym0_step4 8
&sym0_step4_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_0 CONST_-8 1
&sym0_step4_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_1 CONST_-8 1
&sym0_step4_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_2 CONST_-8 1
&sym0_step4_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_3 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 jne strcmp_const_29_a sym0_step4 STRCMP_CONST_29_REVERT_ADDR tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_29_a_addrRef_0 &strcmp_const_29_a ?+8 ; relsq tmp2 strcmp_const_29_a 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step4_addrRef_0 &sym0_step4 ?+8 ; relsq tmp sym0_step4 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_29_REVERT_ADDR ; lblsq tmp2 CONST_-1 STRCMP_CONST_29_REVERT_ADDR
&tmp &CONST_-1 &JNZ_58_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_58_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_58_END ; lblsq ZERO ZERO JNZ_58_END
; label JNZ_58_REVERT_AND_JUMP
:JNZ_58_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_29_REVERT_ADDR ; lblsq ZERO ZERO STRCMP_CONST_29_REVERT_ADDR
; label JNZ_58_END
# MSQ_END 2 jne
; var strcmp_const_29_len 0
# MSQ_START 2 mov strcmp_const_29_len strcmp_const_29_a tmp
:JNZ_58_END &tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :strcmp_const_29_a_addrRef_1 &strcmp_const_29_a ?+8 ; relsq tmp strcmp_const_29_a 1
&strcmp_const_29_len &strcmp_const_29_len ?+8 ; relsq strcmp_const_29_len strcmp_const_29_len 1
&strcmp_const_29_len &tmp ?+8 ; relsq strcmp_const_29_len tmp 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr strcmp_const_29_a 8
&strcmp_const_29_a_addrRef_0 &CONST_8 ?+8 ; relsq strcmp_const_29_a_addrRef_0 CONST_8 1
&strcmp_const_29_a_addrRef_1 &CONST_8 ?+8 ; relsq strcmp_const_29_a_addrRef_1 CONST_8 1
&strcmp_const_29_a_addrRef_2 &CONST_8 ?+8 ; relsq strcmp_const_29_a_addrRef_2 CONST_8 1
# MSQ_END 2 decaddr
# MSQ_START 2 decaddr sym0_step4 8
&sym0_step4_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_0 CONST_8 1
&sym0_step4_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_1 CONST_8 1
&sym0_step4_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_2 CONST_8 1
&sym0_step4_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_3 CONST_8 1
# MSQ_END 2 decaddr
; addr strcmp_const_29_aStr 0
; addr strcmp_const_29_bStr 0
# MSQ_START 2 setaddr strcmp_const_29_aStr strcmp_const_29_a tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_29_aStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_29_aStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_29_a_addrRef_2 &strcmp_const_29_a ?+8 ; relsq tmp strcmp_const_29_a 1
&strcmp_const_29_aStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_29_aStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
# MSQ_START 2 setaddr strcmp_const_29_bStr sym0_step4 tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &strcmp_const_29_bStr_addrRef_0 ?+8 ; relsq tmp2 strcmp_const_29_bStr_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :sym0_step4_addrRef_1 &sym0_step4 ?+8 ; relsq tmp sym0_step4 1
&strcmp_const_29_bStr_addrRef_0 &tmp ?+8 ; relsq strcmp_const_29_bStr_addrRef_0 tmp 1
# MSQ_END 2 setaddr
; label STRCMP_CONST_29_LOOP
# MSQ_START 2 decleq strcmp_const_29_len 0 STEP4_LABEL_FOUND_SYMBOL
:STRCMP_CONST_29_LOOP &strcmp_const_29_len &CONST_0 &STEP4_LABEL_FOUND_SYMBOL ; lblsq strcmp_const_29_len CONST_0 STEP4_LABEL_FOUND_SYMBOL
# MSQ_END 2 decleq
# MSQ_START 2 dec strcmp_const_29_len 1
&strcmp_const_29_len &CONST_1 ?+8 ; relsq strcmp_const_29_len CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 jne strcmp_const_29_aStr strcmp_const_29_bStr STRCMP_CONST_29_END tmp tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :strcmp_const_29_aStr_addrRef_0 &strcmp_const_29_aStr ?+8 ; relsq tmp2 strcmp_const_29_aStr 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
&tmp :strcmp_const_29_bStr_addrRef_0 &strcmp_const_29_bStr ?+8 ; relsq tmp strcmp_const_29_bStr 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
&tmp2 &CONST_-1 &STRCMP_CONST_29_END ; lblsq tmp2 CONST_-1 STRCMP_CONST_29_END
&tmp &CONST_-1 &JNZ_59_REVERT_AND_JUMP ; lblsq tmp CONST_-1 JNZ_59_REVERT_AND_JUMP
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &JNZ_59_END ; lblsq ZERO ZERO JNZ_59_END
; label JNZ_59_REVERT_AND_JUMP
:JNZ_59_REVERT_AND_JUMP &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
&ZERO &ZERO &STRCMP_CONST_29_END ; lblsq ZERO ZERO STRCMP_CONST_29_END
; label JNZ_59_END
# MSQ_END 2 jne
# MSQ_START 2 incaddr strcmp_const_29_aStr 8
:JNZ_59_END &strcmp_const_29_aStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_29_aStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 incaddr strcmp_const_29_bStr 8
&strcmp_const_29_bStr_addrRef_0 &CONST_-8 ?+8 ; relsq strcmp_const_29_bStr_addrRef_0 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 lbljmp STRCMP_CONST_29_LOOP
&ZERO &ZERO &STRCMP_CONST_29_LOOP ; lblsq ZERO ZERO STRCMP_CONST_29_LOOP
# MSQ_END 2 lbljmp
; label STRCMP_CONST_29_REVERT_ADDR
# MSQ_START 2 decaddr sym0_step4 8
:STRCMP_CONST_29_REVERT_ADDR &sym0_step4_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_0 CONST_8 1
&sym0_step4_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_1 CONST_8 1
&sym0_step4_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_2 CONST_8 1
&sym0_step4_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_3 CONST_8 1
# MSQ_END 2 decaddr
; label STRCMP_CONST_29_END
# MSQ_END 1 strcmp_const
# MSQ_START 1 incaddr symbols_it2_step4 30
:STRCMP_CONST_29_END &symbols_it2_step4_addrRef_0 &CONST_-30 ?+8 ; relsq symbols_it2_step4_addrRef_0 CONST_-30 1
&symbols_it2_step4_addrRef_1 &CONST_-30 ?+8 ; relsq symbols_it2_step4_addrRef_1 CONST_-30 1
&symbols_it2_step4_addrRef_2 &CONST_-30 ?+8 ; relsq symbols_it2_step4_addrRef_2 CONST_-30 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_5_LOOP
&ZERO &ZERO &FIND_ITEM_IN_BUF_WITH_STR_KEY_5_LOOP ; lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_5_LOOP
# MSQ_END 1 lbljmp
; label FIND_ITEM_IN_BUF_WITH_STR_KEY_5_NO_MATCH
# MSQ_END 0 find_item_in_buf_with_str_key

# MSQ_START 0 puts STEP4_LABEL_MISSING_SYMBOL tmp tmp2
; addr puts_21_str 0
# MSQ_START 1 setaddr puts_21_str STEP4_LABEL_MISSING_SYMBOL tmp tmp2
# MSQ_START 2 mov tmp puts_21_str_addrRef_0 tmp2
:FIND_ITEM_IN_BUF_WITH_STR_KEY_5_NO_MATCH &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_21_str_addrRef_0 ?+8 ; relsq tmp2 puts_21_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP4_LABEL_MISSING_SYMBOL
&tmp :STEP4_LABEL_MISSING_SYMBOL_addrRef_0 &STEP4_LABEL_MISSING_SYMBOL ?+8 ; relsq tmp STEP4_LABEL_MISSING_SYMBOL 1
# MSQ_END 2 sub
&puts_21_str_addrRef_0 &tmp ?+8 ; relsq puts_21_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_21_len 0
# MSQ_START 1 incaddr STEP4_LABEL_MISSING_SYMBOL 8
&STEP4_LABEL_MISSING_SYMBOL_addrRef_0 &CONST_-8 ?+8 ; relsq STEP4_LABEL_MISSING_SYMBOL_addrRef_0 CONST_-8 1
&STEP4_LABEL_MISSING_SYMBOL_addrRef_1 &CONST_-8 ?+8 ; relsq STEP4_LABEL_MISSING_SYMBOL_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_21_len STEP4_LABEL_MISSING_SYMBOL tmp
# MSQ_START 2 movneg tmp STEP4_LABEL_MISSING_SYMBOL
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP4_LABEL_MISSING_SYMBOL_addrRef_1 &STEP4_LABEL_MISSING_SYMBOL ?+8 ; relsq tmp STEP4_LABEL_MISSING_SYMBOL 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_21_len tmp
&puts_21_len &puts_21_len ?+8 ; relsq puts_21_len puts_21_len 1
&puts_21_len &tmp ?+8 ; relsq puts_21_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP4_LABEL_MISSING_SYMBOL 8
&STEP4_LABEL_MISSING_SYMBOL_addrRef_0 &CONST_8 ?+8 ; relsq STEP4_LABEL_MISSING_SYMBOL_addrRef_0 CONST_8 1
&STEP4_LABEL_MISSING_SYMBOL_addrRef_1 &CONST_8 ?+8 ; relsq STEP4_LABEL_MISSING_SYMBOL_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_21_LOOP
# MSQ_START 1 decleq puts_21_len 0 PUTS_21_END
:PUTS_21_LOOP &puts_21_len &CONST_0 &PUTS_21_END ; lblsq puts_21_len CONST_0 PUTS_21_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_21_len 1
&puts_21_len &CONST_1 ?+8 ; relsq puts_21_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_21_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_21_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_21_str_addrRef_0 &puts_21_str ?+8 ; relsq tmp puts_21_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_21_str 8
&puts_21_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_21_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_21_LOOP
&ZERO &ZERO &PUTS_21_LOOP ; lblsq ZERO ZERO PUTS_21_LOOP
# MSQ_END 1 lbljmp
; label PUTS_21_END
# MSQ_END 0 puts
# MSQ_START 0 putchar SPACE tmp
:PUTS_21_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp SPACE
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SPACE
&tmp &SPACE ?+8 ; relsq tmp SPACE 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 puts sym0_step4 tmp tmp2
; addr puts_22_str 0
# MSQ_START 1 setaddr puts_22_str sym0_step4 tmp tmp2
# MSQ_START 2 mov tmp puts_22_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_22_str_addrRef_0 ?+8 ; relsq tmp2 puts_22_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp sym0_step4
&tmp :sym0_step4_addrRef_2 &sym0_step4 ?+8 ; relsq tmp sym0_step4 1
# MSQ_END 2 sub
&puts_22_str_addrRef_0 &tmp ?+8 ; relsq puts_22_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_22_len 0
# MSQ_START 1 incaddr sym0_step4 8
&sym0_step4_addrRef_0 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_0 CONST_-8 1
&sym0_step4_addrRef_1 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_1 CONST_-8 1
&sym0_step4_addrRef_2 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_2 CONST_-8 1
&sym0_step4_addrRef_3 &CONST_-8 ?+8 ; relsq sym0_step4_addrRef_3 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_22_len sym0_step4 tmp
# MSQ_START 2 movneg tmp sym0_step4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sym0_step4_addrRef_3 &sym0_step4 ?+8 ; relsq tmp sym0_step4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_22_len tmp
&puts_22_len &puts_22_len ?+8 ; relsq puts_22_len puts_22_len 1
&puts_22_len &tmp ?+8 ; relsq puts_22_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr sym0_step4 8
&sym0_step4_addrRef_0 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_0 CONST_8 1
&sym0_step4_addrRef_1 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_1 CONST_8 1
&sym0_step4_addrRef_2 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_2 CONST_8 1
&sym0_step4_addrRef_3 &CONST_8 ?+8 ; relsq sym0_step4_addrRef_3 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_22_LOOP
# MSQ_START 1 decleq puts_22_len 0 PUTS_22_END
:PUTS_22_LOOP &puts_22_len &CONST_0 &PUTS_22_END ; lblsq puts_22_len CONST_0 PUTS_22_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_22_len 1
&puts_22_len &CONST_1 ?+8 ; relsq puts_22_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_22_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_22_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_22_str_addrRef_0 &puts_22_str ?+8 ; relsq tmp puts_22_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_22_str 8
&puts_22_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_22_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_22_LOOP
&ZERO &ZERO &PUTS_22_LOOP ; lblsq ZERO ZERO PUTS_22_LOOP
# MSQ_END 1 lbljmp
; label PUTS_22_END
# MSQ_END 0 puts
# MSQ_START 0 lbljmp HALT
:PUTS_22_END &ZERO &ZERO &HALT ; lblsq ZERO ZERO HALT
# MSQ_END 0 lbljmp

; label STEP4_LABEL_FOUND_SYMBOL
# MSQ_START 0 incaddr symbols_it2_step4 18
:STEP4_LABEL_FOUND_SYMBOL &symbols_it2_step4_addrRef_0 &CONST_-18 ?+8 ; relsq symbols_it2_step4_addrRef_0 CONST_-18 1
&symbols_it2_step4_addrRef_1 &CONST_-18 ?+8 ; relsq symbols_it2_step4_addrRef_1 CONST_-18 1
&symbols_it2_step4_addrRef_2 &CONST_-18 ?+8 ; relsq symbols_it2_step4_addrRef_2 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 mov symbols_it2_step4 size_step4 tmp
# MSQ_START 1 movneg tmp size_step4
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp size_step4
&tmp &size_step4 ?+8 ; relsq tmp size_step4 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg symbols_it2_step4 tmp
# MSQ_START 2 zero symbols_it2_step4
:symbols_it2_step4_addrRef_0 &symbols_it2_step4 :symbols_it2_step4_addrRef_1 &symbols_it2_step4 ?+8 ; relsq symbols_it2_step4 symbols_it2_step4 1
# MSQ_END 2 zero
# MSQ_START 2 sub symbols_it2_step4 tmp
:symbols_it2_step4_addrRef_2 &symbols_it2_step4 &tmp ?+8 ; relsq symbols_it2_step4 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

# MSQ_START 0 incaddr curLine_step4 40
&curLine_step4_addrRef_0 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_0 CONST_-40 1
&curLine_step4_addrRef_1 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_1 CONST_-40 1
&curLine_step4_addrRef_2 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_2 CONST_-40 1
&curLine_step4_addrRef_3 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_3 CONST_-40 1
&curLine_step4_addrRef_4 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_4 CONST_-40 1
&curLine_step4_addrRef_5 &CONST_-40 ?+8 ; relsq curLine_step4_addrRef_5 CONST_-40 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp STEP4_LOOP
&ZERO &ZERO &STEP4_LOOP ; lblsq ZERO ZERO STEP4_LOOP
# MSQ_END 0 lbljmp

; label STEP4_END
# MSQ_START 0 puts STEP4_PRINT_PREFIX tmp tmp2
; addr puts_23_str 0
# MSQ_START 1 setaddr puts_23_str STEP4_PRINT_PREFIX tmp tmp2
# MSQ_START 2 mov tmp puts_23_str_addrRef_0 tmp2
:STEP4_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_23_str_addrRef_0 ?+8 ; relsq tmp2 puts_23_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP4_PRINT_PREFIX
&tmp :STEP4_PRINT_PREFIX_addrRef_0 &STEP4_PRINT_PREFIX ?+8 ; relsq tmp STEP4_PRINT_PREFIX 1
# MSQ_END 2 sub
&puts_23_str_addrRef_0 &tmp ?+8 ; relsq puts_23_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_23_len 0
# MSQ_START 1 incaddr STEP4_PRINT_PREFIX 8
&STEP4_PRINT_PREFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP4_PRINT_PREFIX_addrRef_0 CONST_-8 1
&STEP4_PRINT_PREFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP4_PRINT_PREFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_23_len STEP4_PRINT_PREFIX tmp
# MSQ_START 2 movneg tmp STEP4_PRINT_PREFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP4_PRINT_PREFIX_addrRef_1 &STEP4_PRINT_PREFIX ?+8 ; relsq tmp STEP4_PRINT_PREFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_23_len tmp
&puts_23_len &puts_23_len ?+8 ; relsq puts_23_len puts_23_len 1
&puts_23_len &tmp ?+8 ; relsq puts_23_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP4_PRINT_PREFIX 8
&STEP4_PRINT_PREFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP4_PRINT_PREFIX_addrRef_0 CONST_8 1
&STEP4_PRINT_PREFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP4_PRINT_PREFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_23_LOOP
# MSQ_START 1 decleq puts_23_len 0 PUTS_23_END
:PUTS_23_LOOP &puts_23_len &CONST_0 &PUTS_23_END ; lblsq puts_23_len CONST_0 PUTS_23_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_23_len 1
&puts_23_len &CONST_1 ?+8 ; relsq puts_23_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_23_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_23_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_23_str_addrRef_0 &puts_23_str ?+8 ; relsq tmp puts_23_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_23_str 8
&puts_23_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_23_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_23_LOOP
&ZERO &ZERO &PUTS_23_LOOP ; lblsq ZERO ZERO PUTS_23_LOOP
# MSQ_END 1 lbljmp
; label PUTS_23_END
# MSQ_END 0 puts
; addr sizeStr_step4 0
# MSQ_START 0 itoa sizeStr_step4 size_step4 tmp tmp2 tmp3
# MSQ_START 1 malloc_const tmp2 18 tmp3
# MSQ_START 2 malloc tmp2 CONST_18 tmp3
:PUTS_23_END &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_18 ?+8 ; relsq tmp3 CONST_18 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc
# MSQ_END 1 malloc_const
# MSQ_START 1 setaddr sizeStr_step4 tmp2 tmp3 tmp
# MSQ_START 2 mov tmp3 sizeStr_step4_addrRef_0 tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &sizeStr_step4_addrRef_0 ?+8 ; relsq tmp sizeStr_step4_addrRef_0 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp3 tmp2
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 sub
&sizeStr_step4_addrRef_0 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_0 tmp3 1
&sizeStr_step4_addrRef_1 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_1 tmp3 1
&sizeStr_step4_addrRef_2 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_2 tmp3 1
&sizeStr_step4_addrRef_3 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_3 tmp3 1
&sizeStr_step4_addrRef_4 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_4 tmp3 1
&sizeStr_step4_addrRef_5 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_5 tmp3 1
&sizeStr_step4_addrRef_6 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_6 tmp3 1
&sizeStr_step4_addrRef_7 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_7 tmp3 1
&sizeStr_step4_addrRef_8 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_8 tmp3 1
&sizeStr_step4_addrRef_9 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_9 tmp3 1
&sizeStr_step4_addrRef_10 &tmp3 ?+8 ; relsq sizeStr_step4_addrRef_10 tmp3 1
# MSQ_END 1 setaddr
# MSQ_START 1 alloc_str_const sizeStr_step4 a0 tmp3
# MSQ_START 2 malloc_const sizeStr_step4 a0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &FREE_START ?+8 ; relsq tmp3 FREE_START 1
:sizeStr_step4_addrRef_0 &sizeStr_step4 :sizeStr_step4_addrRef_1 &sizeStr_step4 ?+8 ; relsq sizeStr_step4 sizeStr_step4 1
:sizeStr_step4_addrRef_2 &sizeStr_step4 &tmp3 ?+8 ; relsq sizeStr_step4 tmp3 1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
&FREE_START &tmp3 ?+8 ; relsq FREE_START tmp3 1
# MSQ_END 2 malloc_const
# MSQ_START 2 incaddr sizeStr_step4 8
&sizeStr_step4_addrRef_0 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_0 CONST_-8 1
&sizeStr_step4_addrRef_1 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_1 CONST_-8 1
&sizeStr_step4_addrRef_2 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_2 CONST_-8 1
&sizeStr_step4_addrRef_3 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_3 CONST_-8 1
&sizeStr_step4_addrRef_4 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_4 CONST_-8 1
&sizeStr_step4_addrRef_5 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_5 CONST_-8 1
&sizeStr_step4_addrRef_6 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_6 CONST_-8 1
&sizeStr_step4_addrRef_7 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_7 CONST_-8 1
&sizeStr_step4_addrRef_8 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_8 CONST_-8 1
&sizeStr_step4_addrRef_9 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_9 CONST_-8 1
&sizeStr_step4_addrRef_10 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 zero sizeStr_step4
:sizeStr_step4_addrRef_3 &sizeStr_step4 :sizeStr_step4_addrRef_4 &sizeStr_step4 ?+8 ; relsq sizeStr_step4 sizeStr_step4 1
# MSQ_END 2 zero
# MSQ_START 2 incaddr sizeStr_step4 8
&sizeStr_step4_addrRef_0 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_0 CONST_-8 1
&sizeStr_step4_addrRef_1 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_1 CONST_-8 1
&sizeStr_step4_addrRef_2 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_2 CONST_-8 1
&sizeStr_step4_addrRef_3 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_3 CONST_-8 1
&sizeStr_step4_addrRef_4 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_4 CONST_-8 1
&sizeStr_step4_addrRef_5 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_5 CONST_-8 1
&sizeStr_step4_addrRef_6 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_6 CONST_-8 1
&sizeStr_step4_addrRef_7 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_7 CONST_-8 1
&sizeStr_step4_addrRef_8 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_8 CONST_-8 1
&sizeStr_step4_addrRef_9 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_9 CONST_-8 1
&sizeStr_step4_addrRef_10 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_10 CONST_-8 1
# MSQ_END 2 incaddr
# MSQ_START 2 mov sizeStr_step4 CONST_A0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &CONST_A0 ?+8 ; relsq tmp3 CONST_A0 1
:sizeStr_step4_addrRef_5 &sizeStr_step4 :sizeStr_step4_addrRef_6 &sizeStr_step4 ?+8 ; relsq sizeStr_step4 sizeStr_step4 1
:sizeStr_step4_addrRef_7 &sizeStr_step4 &tmp3 ?+8 ; relsq sizeStr_step4 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 decaddr sizeStr_step4 10
&sizeStr_step4_addrRef_0 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_0 CONST_10 1
&sizeStr_step4_addrRef_1 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_1 CONST_10 1
&sizeStr_step4_addrRef_2 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_2 CONST_10 1
&sizeStr_step4_addrRef_3 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_3 CONST_10 1
&sizeStr_step4_addrRef_4 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_4 CONST_10 1
&sizeStr_step4_addrRef_5 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_5 CONST_10 1
&sizeStr_step4_addrRef_6 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_6 CONST_10 1
&sizeStr_step4_addrRef_7 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_7 CONST_10 1
&sizeStr_step4_addrRef_8 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_8 CONST_10 1
&sizeStr_step4_addrRef_9 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_9 CONST_10 1
&sizeStr_step4_addrRef_10 &CONST_10 ?+8 ; relsq sizeStr_step4_addrRef_10 CONST_10 1
# MSQ_END 2 decaddr
# MSQ_END 1 alloc_str_const
; addr itoa_8_retBuf 0
# MSQ_START 1 setaddr itoa_8_retBuf sizeStr_step4 tmp2 tmp3
# MSQ_START 2 mov tmp2 itoa_8_retBuf_addrRef_0 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_8_retBuf_addrRef_0 ?+8 ; relsq tmp3 itoa_8_retBuf_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp2 sizeStr_step4
&tmp2 :sizeStr_step4_addrRef_8 &sizeStr_step4 ?+8 ; relsq tmp2 sizeStr_step4 1
# MSQ_END 2 sub
&itoa_8_retBuf_addrRef_0 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_0 tmp2 1
&itoa_8_retBuf_addrRef_1 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_1 tmp2 1
&itoa_8_retBuf_addrRef_2 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_2 tmp2 1
&itoa_8_retBuf_addrRef_3 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_3 tmp2 1
&itoa_8_retBuf_addrRef_4 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_4 tmp2 1
&itoa_8_retBuf_addrRef_5 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_5 tmp2 1
&itoa_8_retBuf_addrRef_6 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_6 tmp2 1
&itoa_8_retBuf_addrRef_7 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_7 tmp2 1
&itoa_8_retBuf_addrRef_8 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_8 tmp2 1
&itoa_8_retBuf_addrRef_9 &tmp2 ?+8 ; relsq itoa_8_retBuf_addrRef_9 tmp2 1
# MSQ_END 1 setaddr
; addr itoa_8_retLength 0
# MSQ_START 1 copyaddr itoa_8_retLength sizeStr_step4 tmp2 tmp3
# MSQ_START 2 setaddr itoa_8_retLength sizeStr_step4_addrRef_0 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &itoa_8_retLength_addrRef_0 ?+8 ; relsq tmp3 itoa_8_retLength_addrRef_0 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &sizeStr_step4_addrRef_0 ?+8 ; relsq tmp2 sizeStr_step4_addrRef_0 1
&itoa_8_retLength_addrRef_0 &tmp2 ?+8 ; relsq itoa_8_retLength_addrRef_0 tmp2 1
&itoa_8_retLength_addrRef_1 &tmp2 ?+8 ; relsq itoa_8_retLength_addrRef_1 tmp2 1
&itoa_8_retLength_addrRef_2 &tmp2 ?+8 ; relsq itoa_8_retLength_addrRef_2 tmp2 1
# MSQ_END 2 setaddr
# MSQ_END 1 copyaddr
# MSQ_START 1 incaddr itoa_8_retLength 8
&itoa_8_retLength_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_8_retLength_addrRef_0 CONST_-8 1
&itoa_8_retLength_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_8_retLength_addrRef_1 CONST_-8 1
&itoa_8_retLength_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_8_retLength_addrRef_2 CONST_-8 1
# MSQ_END 1 incaddr
; var itoa_8_noDigits 0
# MSQ_START 1 set itoa_8_noDigits 1
# MSQ_START 2 zero itoa_8_noDigits
&itoa_8_noDigits &itoa_8_noDigits ?+8 ; relsq itoa_8_noDigits itoa_8_noDigits 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_8_noDigits 1
&itoa_8_noDigits &CONST_-1 ?+8 ; relsq itoa_8_noDigits CONST_-1 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 mov tmp size_step4 tmp2
# MSQ_START 2 movneg tmp2 size_step4
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &size_step4 ?+8 ; relsq tmp2 size_step4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var itoa_8_isNeg 0
# MSQ_START 1 zero itoa_8_isNeg
# MSQ_START 2 sub itoa_8_isNeg itoa_8_isNeg
&itoa_8_isNeg &itoa_8_isNeg ?+8 ; relsq itoa_8_isNeg itoa_8_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp ITOA_8_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO ITOA_8_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &ITOA_8_IS_NEG ; lblsq tmp2 ZERO ITOA_8_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 jz tmp ITOA_8_IS_ZERO tmp2
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_40_END
&tmp2 &CONST_-1 &JZ_40_END ; lblsq tmp2 CONST_-1 JZ_40_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_40_REVERT_A
&tmp &CONST_-1 &JZ_40_REVERT_A ; lblsq tmp CONST_-1 JZ_40_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_8_IS_ZERO
&ZERO &ZERO &ITOA_8_IS_ZERO ; lblsq ZERO ZERO ITOA_8_IS_ZERO
# MSQ_END 2 lbljmp
; label JZ_40_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_40_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_40_END
# MSQ_END 1 jz
# MSQ_START 1 lbljmp ITOA_8_LOOP
:JZ_40_END &ZERO &ZERO &ITOA_8_LOOP ; lblsq ZERO ZERO ITOA_8_LOOP
# MSQ_END 1 lbljmp
; label ITOA_8_IS_ZERO
# MSQ_START 1 set itoa_8_retBuf 30
# MSQ_START 2 zero itoa_8_retBuf
:ITOA_8_IS_ZERO :itoa_8_retBuf_addrRef_0 &itoa_8_retBuf :itoa_8_retBuf_addrRef_1 &itoa_8_retBuf ?+8 ; relsq itoa_8_retBuf itoa_8_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_8_retBuf 30
:itoa_8_retBuf_addrRef_2 &itoa_8_retBuf &CONST_-30 ?+8 ; relsq itoa_8_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 inc itoa_8_retLength 1
# MSQ_START 2 dec itoa_8_retLength -1
:itoa_8_retLength_addrRef_0 &itoa_8_retLength &CONST_-1 ?+8 ; relsq itoa_8_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_8_END
&ZERO &ZERO &ITOA_8_END ; lblsq ZERO ZERO ITOA_8_END
# MSQ_END 1 lbljmp
; label ITOA_8_IS_NEG
# MSQ_START 1 inc itoa_8_isNeg 1
# MSQ_START 2 dec itoa_8_isNeg -1
:ITOA_8_IS_NEG &itoa_8_isNeg &CONST_-1 ?+8 ; relsq itoa_8_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 set itoa_8_retBuf 2d
# MSQ_START 2 zero itoa_8_retBuf
:itoa_8_retBuf_addrRef_3 &itoa_8_retBuf :itoa_8_retBuf_addrRef_4 &itoa_8_retBuf ?+8 ; relsq itoa_8_retBuf itoa_8_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_8_retBuf 2d
:itoa_8_retBuf_addrRef_5 &itoa_8_retBuf &CONST_-2D ?+8 ; relsq itoa_8_retBuf CONST_-2D 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 incaddr itoa_8_retBuf 8
&itoa_8_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_0 CONST_-8 1
&itoa_8_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_1 CONST_-8 1
&itoa_8_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_2 CONST_-8 1
&itoa_8_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_3 CONST_-8 1
&itoa_8_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_4 CONST_-8 1
&itoa_8_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_5 CONST_-8 1
&itoa_8_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_6 CONST_-8 1
&itoa_8_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_7 CONST_-8 1
&itoa_8_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_8 CONST_-8 1
&itoa_8_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_8_retLength 1
# MSQ_START 2 dec itoa_8_retLength -1
:itoa_8_retLength_addrRef_1 &itoa_8_retLength &CONST_-1 ?+8 ; relsq itoa_8_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 lbljmp ITOA_8_LOOP
&ZERO &ZERO &ITOA_8_LOOP ; lblsq ZERO ZERO ITOA_8_LOOP
# MSQ_END 1 lbljmp
; label ITOA_8_SUBBERS
:ITOA_8_SUBBERS 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000 ; raw 0de0b6b3a7640000 016345785d8a0000 002386f26fc10000 00038d7ea4c68000 00005af3107a4000 000009184e72a000 000000e8d4a51000 000000174876e800 00000002540be400 000000003b9aca00 0000000005f5e100 0000000000989680 00000000000f4240 00000000000186a0 0000000000002710 00000000000003e8 0000000000000064 000000000000000a 0000000000000001 0000000000000000
; label ITOA_8_LOOP
# MSQ_START 1 jz ITOA_8_SUBBERS ITOA_8_REVERT_SUBBERS tmp2
# MSQ_START 2 movneg tmp2 ITOA_8_SUBBERS
:ITOA_8_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :ITOA_8_SUBBERS_addrRef_0 &ITOA_8_SUBBERS ?+8 ; relsq tmp2 ITOA_8_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_41_END
&tmp2 &CONST_-1 &JZ_41_END ; lblsq tmp2 CONST_-1 JZ_41_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq ITOA_8_SUBBERS 1 JZ_41_REVERT_A
:ITOA_8_SUBBERS_addrRef_1 &ITOA_8_SUBBERS &CONST_-1 &JZ_41_REVERT_A ; lblsq ITOA_8_SUBBERS CONST_-1 JZ_41_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec ITOA_8_SUBBERS 1
:ITOA_8_SUBBERS_addrRef_2 &ITOA_8_SUBBERS &CONST_1 ?+8 ; relsq ITOA_8_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_8_REVERT_SUBBERS
&ZERO &ZERO &ITOA_8_REVERT_SUBBERS ; lblsq ZERO ZERO ITOA_8_REVERT_SUBBERS
# MSQ_END 2 lbljmp
; label JZ_41_REVERT_A
# MSQ_START 2 dec ITOA_8_SUBBERS 1
:JZ_41_REVERT_A :ITOA_8_SUBBERS_addrRef_3 &ITOA_8_SUBBERS &CONST_1 ?+8 ; relsq ITOA_8_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_41_END
# MSQ_END 1 jz
; var itoa_8_digitVal 0
# MSQ_START 1 zero itoa_8_digitVal
# MSQ_START 2 sub itoa_8_digitVal itoa_8_digitVal
:JZ_41_END &itoa_8_digitVal &itoa_8_digitVal ?+8 ; relsq itoa_8_digitVal itoa_8_digitVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label ITOA_8_SUBTRACT_A
# MSQ_START 1 jl tmp ITOA_8_SUBBERS ITOA_8_HANDLE_DIGIT tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:ITOA_8_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :ITOA_8_SUBBERS_addrRef_4 &ITOA_8_SUBBERS &ITOA_8_HANDLE_DIGIT ; lblsq tmp2 ITOA_8_SUBBERS ITOA_8_HANDLE_DIGIT
# MSQ_END 1 jl
# MSQ_START 1 inc itoa_8_digitVal 1
# MSQ_START 2 dec itoa_8_digitVal -1
&itoa_8_digitVal &CONST_-1 ?+8 ; relsq itoa_8_digitVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp ITOA_8_SUBBERS
&tmp :ITOA_8_SUBBERS_addrRef_5 &ITOA_8_SUBBERS ?+8 ; relsq tmp ITOA_8_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp ITOA_8_SUBTRACT_A
&ZERO &ZERO &ITOA_8_SUBTRACT_A ; lblsq ZERO ZERO ITOA_8_SUBTRACT_A
# MSQ_END 1 lbljmp
; label ITOA_8_HANDLE_DIGIT
# MSQ_START 1 jz itoa_8_noDigits ITOA_8_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_8_noDigits
:ITOA_8_HANDLE_DIGIT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_8_noDigits ?+8 ; relsq tmp2 itoa_8_noDigits 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_42_END
&tmp2 &CONST_-1 &JZ_42_END ; lblsq tmp2 CONST_-1 JZ_42_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_8_noDigits 1 JZ_42_REVERT_A
&itoa_8_noDigits &CONST_-1 &JZ_42_REVERT_A ; lblsq itoa_8_noDigits CONST_-1 JZ_42_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_8_noDigits 1
&itoa_8_noDigits &CONST_1 ?+8 ; relsq itoa_8_noDigits CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_8_PRINT_DIGIT
&ZERO &ZERO &ITOA_8_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_8_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_42_REVERT_A
# MSQ_START 2 dec itoa_8_noDigits 1
:JZ_42_REVERT_A &itoa_8_noDigits &CONST_1 ?+8 ; relsq itoa_8_noDigits CONST_1 1
# MSQ_END 2 dec
; label JZ_42_END
# MSQ_END 1 jz
# MSQ_START 1 jz itoa_8_digitVal ITOA_8_DONT_PRINT_DIGIT tmp2
# MSQ_START 2 movneg tmp2 itoa_8_digitVal
:JZ_42_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_8_digitVal ?+8 ; relsq tmp2 itoa_8_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_43_END
&tmp2 &CONST_-1 &JZ_43_END ; lblsq tmp2 CONST_-1 JZ_43_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq itoa_8_digitVal 1 JZ_43_REVERT_A
&itoa_8_digitVal &CONST_-1 &JZ_43_REVERT_A ; lblsq itoa_8_digitVal CONST_-1 JZ_43_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec itoa_8_digitVal 1
&itoa_8_digitVal &CONST_1 ?+8 ; relsq itoa_8_digitVal CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp ITOA_8_DONT_PRINT_DIGIT
&ZERO &ZERO &ITOA_8_DONT_PRINT_DIGIT ; lblsq ZERO ZERO ITOA_8_DONT_PRINT_DIGIT
# MSQ_END 2 lbljmp
; label JZ_43_REVERT_A
# MSQ_START 2 dec itoa_8_digitVal 1
:JZ_43_REVERT_A &itoa_8_digitVal &CONST_1 ?+8 ; relsq itoa_8_digitVal CONST_1 1
# MSQ_END 2 dec
; label JZ_43_END
# MSQ_END 1 jz
; label ITOA_8_PRINT_DIGIT
# MSQ_START 1 zero itoa_8_noDigits
# MSQ_START 2 sub itoa_8_noDigits itoa_8_noDigits
:JZ_43_END :ITOA_8_PRINT_DIGIT &itoa_8_noDigits &itoa_8_noDigits ?+8 ; relsq itoa_8_noDigits itoa_8_noDigits 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 set itoa_8_retBuf 30
# MSQ_START 2 zero itoa_8_retBuf
:itoa_8_retBuf_addrRef_6 &itoa_8_retBuf :itoa_8_retBuf_addrRef_7 &itoa_8_retBuf ?+8 ; relsq itoa_8_retBuf itoa_8_retBuf 1
# MSQ_END 2 zero
# MSQ_START 2 inc itoa_8_retBuf 30
:itoa_8_retBuf_addrRef_8 &itoa_8_retBuf &CONST_-30 ?+8 ; relsq itoa_8_retBuf CONST_-30 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 add itoa_8_retBuf itoa_8_digitVal tmp2
# MSQ_START 2 movneg tmp2 itoa_8_digitVal
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &itoa_8_digitVal ?+8 ; relsq tmp2 itoa_8_digitVal 1
# MSQ_END 2 movneg
# MSQ_START 2 sub itoa_8_retBuf tmp2
:itoa_8_retBuf_addrRef_9 &itoa_8_retBuf &tmp2 ?+8 ; relsq itoa_8_retBuf tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 add
# MSQ_START 1 incaddr itoa_8_retBuf 8
&itoa_8_retBuf_addrRef_0 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_0 CONST_-8 1
&itoa_8_retBuf_addrRef_1 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_1 CONST_-8 1
&itoa_8_retBuf_addrRef_2 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_2 CONST_-8 1
&itoa_8_retBuf_addrRef_3 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_3 CONST_-8 1
&itoa_8_retBuf_addrRef_4 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_4 CONST_-8 1
&itoa_8_retBuf_addrRef_5 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_5 CONST_-8 1
&itoa_8_retBuf_addrRef_6 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_6 CONST_-8 1
&itoa_8_retBuf_addrRef_7 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_7 CONST_-8 1
&itoa_8_retBuf_addrRef_8 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_8 CONST_-8 1
&itoa_8_retBuf_addrRef_9 &CONST_-8 ?+8 ; relsq itoa_8_retBuf_addrRef_9 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 inc itoa_8_retLength 1
# MSQ_START 2 dec itoa_8_retLength -1
:itoa_8_retLength_addrRef_2 &itoa_8_retLength &CONST_-1 ?+8 ; relsq itoa_8_retLength CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
; label ITOA_8_DONT_PRINT_DIGIT
# MSQ_START 1 incaddr ITOA_8_SUBBERS 8
:ITOA_8_DONT_PRINT_DIGIT &ITOA_8_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_0 CONST_-8 1
&ITOA_8_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_1 CONST_-8 1
&ITOA_8_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_2 CONST_-8 1
&ITOA_8_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_3 CONST_-8 1
&ITOA_8_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_4 CONST_-8 1
&ITOA_8_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp ITOA_8_LOOP
&ZERO &ZERO &ITOA_8_LOOP ; lblsq ZERO ZERO ITOA_8_LOOP
# MSQ_END 1 lbljmp
; label ITOA_8_REVERT_SUBBERS
# MSQ_START 1 decaddr ITOA_8_SUBBERS 98
:ITOA_8_REVERT_SUBBERS &ITOA_8_SUBBERS_addrRef_0 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_0 CONST_98 1
&ITOA_8_SUBBERS_addrRef_1 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_1 CONST_98 1
&ITOA_8_SUBBERS_addrRef_2 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_2 CONST_98 1
&ITOA_8_SUBBERS_addrRef_3 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_3 CONST_98 1
&ITOA_8_SUBBERS_addrRef_4 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_4 CONST_98 1
&ITOA_8_SUBBERS_addrRef_5 &CONST_98 ?+8 ; relsq ITOA_8_SUBBERS_addrRef_5 CONST_98 1
# MSQ_END 1 decaddr
; label ITOA_8_END
# MSQ_END 0 itoa
# MSQ_START 0 puts sizeStr_step4 tmp tmp2
; addr puts_24_str 0
# MSQ_START 1 setaddr puts_24_str sizeStr_step4 tmp tmp2
# MSQ_START 2 mov tmp puts_24_str_addrRef_0 tmp2
:ITOA_8_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_24_str_addrRef_0 ?+8 ; relsq tmp2 puts_24_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp sizeStr_step4
&tmp :sizeStr_step4_addrRef_9 &sizeStr_step4 ?+8 ; relsq tmp sizeStr_step4 1
# MSQ_END 2 sub
&puts_24_str_addrRef_0 &tmp ?+8 ; relsq puts_24_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_24_len 0
# MSQ_START 1 incaddr sizeStr_step4 8
&sizeStr_step4_addrRef_0 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_0 CONST_-8 1
&sizeStr_step4_addrRef_1 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_1 CONST_-8 1
&sizeStr_step4_addrRef_2 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_2 CONST_-8 1
&sizeStr_step4_addrRef_3 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_3 CONST_-8 1
&sizeStr_step4_addrRef_4 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_4 CONST_-8 1
&sizeStr_step4_addrRef_5 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_5 CONST_-8 1
&sizeStr_step4_addrRef_6 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_6 CONST_-8 1
&sizeStr_step4_addrRef_7 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_7 CONST_-8 1
&sizeStr_step4_addrRef_8 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_8 CONST_-8 1
&sizeStr_step4_addrRef_9 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_9 CONST_-8 1
&sizeStr_step4_addrRef_10 &CONST_-8 ?+8 ; relsq sizeStr_step4_addrRef_10 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_24_len sizeStr_step4 tmp
# MSQ_START 2 movneg tmp sizeStr_step4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :sizeStr_step4_addrRef_10 &sizeStr_step4 ?+8 ; relsq tmp sizeStr_step4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_24_len tmp
&puts_24_len &puts_24_len ?+8 ; relsq puts_24_len puts_24_len 1
&puts_24_len &tmp ?+8 ; relsq puts_24_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr sizeStr_step4 8
&sizeStr_step4_addrRef_0 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_0 CONST_8 1
&sizeStr_step4_addrRef_1 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_1 CONST_8 1
&sizeStr_step4_addrRef_2 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_2 CONST_8 1
&sizeStr_step4_addrRef_3 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_3 CONST_8 1
&sizeStr_step4_addrRef_4 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_4 CONST_8 1
&sizeStr_step4_addrRef_5 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_5 CONST_8 1
&sizeStr_step4_addrRef_6 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_6 CONST_8 1
&sizeStr_step4_addrRef_7 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_7 CONST_8 1
&sizeStr_step4_addrRef_8 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_8 CONST_8 1
&sizeStr_step4_addrRef_9 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_9 CONST_8 1
&sizeStr_step4_addrRef_10 &CONST_8 ?+8 ; relsq sizeStr_step4_addrRef_10 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_24_LOOP
# MSQ_START 1 decleq puts_24_len 0 PUTS_24_END
:PUTS_24_LOOP &puts_24_len &CONST_0 &PUTS_24_END ; lblsq puts_24_len CONST_0 PUTS_24_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_24_len 1
&puts_24_len &CONST_1 ?+8 ; relsq puts_24_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_24_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_24_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_24_str_addrRef_0 &puts_24_str ?+8 ; relsq tmp puts_24_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_24_str 8
&puts_24_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_24_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_24_LOOP
&ZERO &ZERO &PUTS_24_LOOP ; lblsq ZERO ZERO PUTS_24_LOOP
# MSQ_END 1 lbljmp
; label PUTS_24_END
# MSQ_END 0 puts
# MSQ_START 0 puts STEP4_PRINT_SUFFIX tmp tmp2
; addr puts_25_str 0
# MSQ_START 1 setaddr puts_25_str STEP4_PRINT_SUFFIX tmp tmp2
# MSQ_START 2 mov tmp puts_25_str_addrRef_0 tmp2
:PUTS_24_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_25_str_addrRef_0 ?+8 ; relsq tmp2 puts_25_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp STEP4_PRINT_SUFFIX
&tmp :STEP4_PRINT_SUFFIX_addrRef_0 &STEP4_PRINT_SUFFIX ?+8 ; relsq tmp STEP4_PRINT_SUFFIX 1
# MSQ_END 2 sub
&puts_25_str_addrRef_0 &tmp ?+8 ; relsq puts_25_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_25_len 0
# MSQ_START 1 incaddr STEP4_PRINT_SUFFIX 8
&STEP4_PRINT_SUFFIX_addrRef_0 &CONST_-8 ?+8 ; relsq STEP4_PRINT_SUFFIX_addrRef_0 CONST_-8 1
&STEP4_PRINT_SUFFIX_addrRef_1 &CONST_-8 ?+8 ; relsq STEP4_PRINT_SUFFIX_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_25_len STEP4_PRINT_SUFFIX tmp
# MSQ_START 2 movneg tmp STEP4_PRINT_SUFFIX
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :STEP4_PRINT_SUFFIX_addrRef_1 &STEP4_PRINT_SUFFIX ?+8 ; relsq tmp STEP4_PRINT_SUFFIX 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_25_len tmp
&puts_25_len &puts_25_len ?+8 ; relsq puts_25_len puts_25_len 1
&puts_25_len &tmp ?+8 ; relsq puts_25_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr STEP4_PRINT_SUFFIX 8
&STEP4_PRINT_SUFFIX_addrRef_0 &CONST_8 ?+8 ; relsq STEP4_PRINT_SUFFIX_addrRef_0 CONST_8 1
&STEP4_PRINT_SUFFIX_addrRef_1 &CONST_8 ?+8 ; relsq STEP4_PRINT_SUFFIX_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_25_LOOP
# MSQ_START 1 decleq puts_25_len 0 PUTS_25_END
:PUTS_25_LOOP &puts_25_len &CONST_0 &PUTS_25_END ; lblsq puts_25_len CONST_0 PUTS_25_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_25_len 1
&puts_25_len &CONST_1 ?+8 ; relsq puts_25_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_25_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_25_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_25_str_addrRef_0 &puts_25_str ?+8 ; relsq tmp puts_25_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_25_str 8
&puts_25_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_25_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_25_LOOP
&ZERO &ZERO &PUTS_25_LOOP ; lblsq ZERO ZERO PUTS_25_LOOP
# MSQ_END 1 lbljmp
; label PUTS_25_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_25_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar


# 5. Assign addresses to variables
; label STEP5_START
; addr symbolsCur_dbg 0
# MSQ_START 0 setaddr symbolsCur_dbg symbolsBegin tmp tmp2
# MSQ_START 1 mov tmp symbolsCur_dbg_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 symbolsCur_dbg_addrRef_0
:STEP5_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &symbolsCur_dbg_addrRef_0 ?+8 ; relsq tmp2 symbolsCur_dbg_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp symbolsBegin
&tmp &symbolsBegin ?+8 ; relsq tmp symbolsBegin 1
# MSQ_END 1 sub
&symbolsCur_dbg_addrRef_0 &tmp ?+8 ; relsq symbolsCur_dbg_addrRef_0 tmp 1
&symbolsCur_dbg_addrRef_1 &tmp ?+8 ; relsq symbolsCur_dbg_addrRef_1 tmp 1
&symbolsCur_dbg_addrRef_2 &tmp ?+8 ; relsq symbolsCur_dbg_addrRef_2 tmp 1
&symbolsCur_dbg_addrRef_3 &tmp ?+8 ; relsq symbolsCur_dbg_addrRef_3 tmp 1
&symbolsCur_dbg_addrRef_4 &tmp ?+8 ; relsq symbolsCur_dbg_addrRef_4 tmp 1
# MSQ_END 0 setaddr
; var symbolsLeft 0
# MSQ_START 0 mov symbolsLeft symbolsLen tmp
# MSQ_START 1 movneg tmp symbolsLen
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp symbolsLen
&tmp &symbolsLen ?+8 ; relsq tmp symbolsLen 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg symbolsLeft tmp
# MSQ_START 2 zero symbolsLeft
&symbolsLeft &symbolsLeft ?+8 ; relsq symbolsLeft symbolsLeft 1
# MSQ_END 2 zero
# MSQ_START 2 sub symbolsLeft tmp
&symbolsLeft &tmp ?+8 ; relsq symbolsLeft tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label DBG_LOOP
# MSQ_START 0 decleq symbolsLeft 0 DBG_LINES
:DBG_LOOP &symbolsLeft &CONST_0 &DBG_LINES ; lblsq symbolsLeft CONST_0 DBG_LINES
# MSQ_END 0 decleq
# MSQ_START 0 dec symbolsLeft 1
&symbolsLeft &CONST_1 ?+8 ; relsq symbolsLeft CONST_1 1
# MSQ_END 0 dec

# MSQ_START 0 puts SYMBOL_PART_1 tmp tmp2
; addr puts_26_str 0
# MSQ_START 1 setaddr puts_26_str SYMBOL_PART_1 tmp tmp2
# MSQ_START 2 mov tmp puts_26_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_26_str_addrRef_0 ?+8 ; relsq tmp2 puts_26_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SYMBOL_PART_1
&tmp :SYMBOL_PART_1_addrRef_0 &SYMBOL_PART_1 ?+8 ; relsq tmp SYMBOL_PART_1 1
# MSQ_END 2 sub
&puts_26_str_addrRef_0 &tmp ?+8 ; relsq puts_26_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_26_len 0
# MSQ_START 1 incaddr SYMBOL_PART_1 8
&SYMBOL_PART_1_addrRef_0 &CONST_-8 ?+8 ; relsq SYMBOL_PART_1_addrRef_0 CONST_-8 1
&SYMBOL_PART_1_addrRef_1 &CONST_-8 ?+8 ; relsq SYMBOL_PART_1_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_26_len SYMBOL_PART_1 tmp
# MSQ_START 2 movneg tmp SYMBOL_PART_1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :SYMBOL_PART_1_addrRef_1 &SYMBOL_PART_1 ?+8 ; relsq tmp SYMBOL_PART_1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_26_len tmp
&puts_26_len &puts_26_len ?+8 ; relsq puts_26_len puts_26_len 1
&puts_26_len &tmp ?+8 ; relsq puts_26_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr SYMBOL_PART_1 8
&SYMBOL_PART_1_addrRef_0 &CONST_8 ?+8 ; relsq SYMBOL_PART_1_addrRef_0 CONST_8 1
&SYMBOL_PART_1_addrRef_1 &CONST_8 ?+8 ; relsq SYMBOL_PART_1_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_26_LOOP
# MSQ_START 1 decleq puts_26_len 0 PUTS_26_END
:PUTS_26_LOOP &puts_26_len &CONST_0 &PUTS_26_END ; lblsq puts_26_len CONST_0 PUTS_26_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_26_len 1
&puts_26_len &CONST_1 ?+8 ; relsq puts_26_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_26_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_26_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_26_str_addrRef_0 &puts_26_str ?+8 ; relsq tmp puts_26_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_26_str 8
&puts_26_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_26_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_26_LOOP
&ZERO &ZERO &PUTS_26_LOOP ; lblsq ZERO ZERO PUTS_26_LOOP
# MSQ_END 1 lbljmp
; label PUTS_26_END
# MSQ_END 0 puts
# MSQ_START 0 puts symbolsCur_dbg tmp tmp2
; addr puts_27_str 0
# MSQ_START 1 setaddr puts_27_str symbolsCur_dbg tmp tmp2
# MSQ_START 2 mov tmp puts_27_str_addrRef_0 tmp2
:PUTS_26_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_27_str_addrRef_0 ?+8 ; relsq tmp2 puts_27_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp symbolsCur_dbg
&tmp :symbolsCur_dbg_addrRef_0 &symbolsCur_dbg ?+8 ; relsq tmp symbolsCur_dbg 1
# MSQ_END 2 sub
&puts_27_str_addrRef_0 &tmp ?+8 ; relsq puts_27_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_27_len 0
# MSQ_START 1 incaddr symbolsCur_dbg 8
&symbolsCur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_-8 1
&symbolsCur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_-8 1
&symbolsCur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_-8 1
&symbolsCur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_-8 1
&symbolsCur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_27_len symbolsCur_dbg tmp
# MSQ_START 2 movneg tmp symbolsCur_dbg
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :symbolsCur_dbg_addrRef_1 &symbolsCur_dbg ?+8 ; relsq tmp symbolsCur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_27_len tmp
&puts_27_len &puts_27_len ?+8 ; relsq puts_27_len puts_27_len 1
&puts_27_len &tmp ?+8 ; relsq puts_27_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr symbolsCur_dbg 8
&symbolsCur_dbg_addrRef_0 &CONST_8 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_8 1
&symbolsCur_dbg_addrRef_1 &CONST_8 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_8 1
&symbolsCur_dbg_addrRef_2 &CONST_8 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_8 1
&symbolsCur_dbg_addrRef_3 &CONST_8 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_8 1
&symbolsCur_dbg_addrRef_4 &CONST_8 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_27_LOOP
# MSQ_START 1 decleq puts_27_len 0 PUTS_27_END
:PUTS_27_LOOP &puts_27_len &CONST_0 &PUTS_27_END ; lblsq puts_27_len CONST_0 PUTS_27_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_27_len 1
&puts_27_len &CONST_1 ?+8 ; relsq puts_27_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_27_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_27_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_27_str_addrRef_0 &puts_27_str ?+8 ; relsq tmp puts_27_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_27_str 8
&puts_27_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_27_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_27_LOOP
&ZERO &ZERO &PUTS_27_LOOP ; lblsq ZERO ZERO PUTS_27_LOOP
# MSQ_END 1 lbljmp
; label PUTS_27_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_27_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr symbolsCur_dbg 18
&symbolsCur_dbg_addrRef_0 &CONST_-18 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_-18 1
&symbolsCur_dbg_addrRef_1 &CONST_-18 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_-18 1
&symbolsCur_dbg_addrRef_2 &CONST_-18 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_-18 1
&symbolsCur_dbg_addrRef_3 &CONST_-18 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_-18 1
&symbolsCur_dbg_addrRef_4 &CONST_-18 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts SYMBOL_PART_2 tmp tmp2
; addr puts_28_str 0
# MSQ_START 1 setaddr puts_28_str SYMBOL_PART_2 tmp tmp2
# MSQ_START 2 mov tmp puts_28_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_28_str_addrRef_0 ?+8 ; relsq tmp2 puts_28_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SYMBOL_PART_2
&tmp :SYMBOL_PART_2_addrRef_0 &SYMBOL_PART_2 ?+8 ; relsq tmp SYMBOL_PART_2 1
# MSQ_END 2 sub
&puts_28_str_addrRef_0 &tmp ?+8 ; relsq puts_28_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_28_len 0
# MSQ_START 1 incaddr SYMBOL_PART_2 8
&SYMBOL_PART_2_addrRef_0 &CONST_-8 ?+8 ; relsq SYMBOL_PART_2_addrRef_0 CONST_-8 1
&SYMBOL_PART_2_addrRef_1 &CONST_-8 ?+8 ; relsq SYMBOL_PART_2_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_28_len SYMBOL_PART_2 tmp
# MSQ_START 2 movneg tmp SYMBOL_PART_2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :SYMBOL_PART_2_addrRef_1 &SYMBOL_PART_2 ?+8 ; relsq tmp SYMBOL_PART_2 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_28_len tmp
&puts_28_len &puts_28_len ?+8 ; relsq puts_28_len puts_28_len 1
&puts_28_len &tmp ?+8 ; relsq puts_28_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr SYMBOL_PART_2 8
&SYMBOL_PART_2_addrRef_0 &CONST_8 ?+8 ; relsq SYMBOL_PART_2_addrRef_0 CONST_8 1
&SYMBOL_PART_2_addrRef_1 &CONST_8 ?+8 ; relsq SYMBOL_PART_2_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_28_LOOP
# MSQ_START 1 decleq puts_28_len 0 PUTS_28_END
:PUTS_28_LOOP &puts_28_len &CONST_0 &PUTS_28_END ; lblsq puts_28_len CONST_0 PUTS_28_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_28_len 1
&puts_28_len &CONST_1 ?+8 ; relsq puts_28_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_28_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_28_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_28_str_addrRef_0 &puts_28_str ?+8 ; relsq tmp puts_28_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_28_str 8
&puts_28_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_28_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_28_LOOP
&ZERO &ZERO &PUTS_28_LOOP ; lblsq ZERO ZERO PUTS_28_LOOP
# MSQ_END 1 lbljmp
; label PUTS_28_END
# MSQ_END 0 puts
# MSQ_START 0 print_qword symbolsCur_dbg tmp tmp2 tmp3
# MSQ_START 1 mov tmp symbolsCur_dbg tmp2
# MSQ_START 2 movneg tmp2 symbolsCur_dbg
:PUTS_28_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :symbolsCur_dbg_addrRef_2 &symbolsCur_dbg ?+8 ; relsq tmp2 symbolsCur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var print_qword_0_isNeg 0
# MSQ_START 1 zero print_qword_0_isNeg
# MSQ_START 2 sub print_qword_0_isNeg print_qword_0_isNeg
&print_qword_0_isNeg &print_qword_0_isNeg ?+8 ; relsq print_qword_0_isNeg print_qword_0_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp PRINT_QWORD_0_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO PRINT_QWORD_0_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &PRINT_QWORD_0_IS_NEG ; lblsq tmp2 ZERO PRINT_QWORD_0_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp PRINT_QWORD_0_LOOP
&ZERO &ZERO &PRINT_QWORD_0_LOOP ; lblsq ZERO ZERO PRINT_QWORD_0_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_0_IS_NEG
# MSQ_START 1 inc print_qword_0_isNeg 1
# MSQ_START 2 dec print_qword_0_isNeg -1
:PRINT_QWORD_0_IS_NEG &print_qword_0_isNeg &CONST_-1 ?+8 ; relsq print_qword_0_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 lbljmp PRINT_QWORD_0_LOOP
&ZERO &ZERO &PRINT_QWORD_0_LOOP ; lblsq ZERO ZERO PRINT_QWORD_0_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_0_SUBBERS
:PRINT_QWORD_0_SUBBERS 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000 ; raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
; label PRINT_QWORD_0_LOOP
# MSQ_START 1 jz PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_END tmp2
# MSQ_START 2 movneg tmp2 PRINT_QWORD_0_SUBBERS
:PRINT_QWORD_0_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :PRINT_QWORD_0_SUBBERS_addrRef_0 &PRINT_QWORD_0_SUBBERS ?+8 ; relsq tmp2 PRINT_QWORD_0_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_44_END
&tmp2 &CONST_-1 &JZ_44_END ; lblsq tmp2 CONST_-1 JZ_44_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq PRINT_QWORD_0_SUBBERS 1 JZ_44_REVERT_A
:PRINT_QWORD_0_SUBBERS_addrRef_1 &PRINT_QWORD_0_SUBBERS &CONST_-1 &JZ_44_REVERT_A ; lblsq PRINT_QWORD_0_SUBBERS CONST_-1 JZ_44_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec PRINT_QWORD_0_SUBBERS 1
:PRINT_QWORD_0_SUBBERS_addrRef_2 &PRINT_QWORD_0_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_0_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_0_END
&ZERO &ZERO &PRINT_QWORD_0_END ; lblsq ZERO ZERO PRINT_QWORD_0_END
# MSQ_END 2 lbljmp
; label JZ_44_REVERT_A
# MSQ_START 2 dec PRINT_QWORD_0_SUBBERS 1
:JZ_44_REVERT_A :PRINT_QWORD_0_SUBBERS_addrRef_3 &PRINT_QWORD_0_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_0_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_44_END
# MSQ_END 1 jz
; var print_qword_0_nibbleVal 0
# MSQ_START 1 zero print_qword_0_nibbleVal
# MSQ_START 2 sub print_qword_0_nibbleVal print_qword_0_nibbleVal
:JZ_44_END &print_qword_0_nibbleVal &print_qword_0_nibbleVal ?+8 ; relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label PRINT_QWORD_0_SUBTRACT_A
# MSQ_START 1 jl tmp PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_HANDLE_NIBBLE tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:PRINT_QWORD_0_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :PRINT_QWORD_0_SUBBERS_addrRef_4 &PRINT_QWORD_0_SUBBERS &PRINT_QWORD_0_HANDLE_NIBBLE ; lblsq tmp2 PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_HANDLE_NIBBLE
# MSQ_END 1 jl
# MSQ_START 1 inc print_qword_0_nibbleVal 1
# MSQ_START 2 dec print_qword_0_nibbleVal -1
&print_qword_0_nibbleVal &CONST_-1 ?+8 ; relsq print_qword_0_nibbleVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp PRINT_QWORD_0_SUBBERS
&tmp :PRINT_QWORD_0_SUBBERS_addrRef_5 &PRINT_QWORD_0_SUBBERS ?+8 ; relsq tmp PRINT_QWORD_0_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_0_SUBTRACT_A
&ZERO &ZERO &PRINT_QWORD_0_SUBTRACT_A ; lblsq ZERO ZERO PRINT_QWORD_0_SUBTRACT_A
# MSQ_END 1 lbljmp
; label PRINT_QWORD_0_HANDLE_NIBBLE
# MSQ_START 1 jz tmp PRINT_QWORD_0_HANDLE_LOW_NIBBLE tmp2
# MSQ_START 2 movneg tmp2 tmp
:PRINT_QWORD_0_HANDLE_NIBBLE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_45_END
&tmp2 &CONST_-1 &JZ_45_END ; lblsq tmp2 CONST_-1 JZ_45_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_45_REVERT_A
&tmp &CONST_-1 &JZ_45_REVERT_A ; lblsq tmp CONST_-1 JZ_45_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_0_HANDLE_LOW_NIBBLE
&ZERO &ZERO &PRINT_QWORD_0_HANDLE_LOW_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_0_HANDLE_LOW_NIBBLE
# MSQ_END 2 lbljmp
; label JZ_45_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_45_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_45_END
# MSQ_END 1 jz
# MSQ_START 1 decleq print_qword_0_isNeg 0 PRINT_QWORD_0_PRINT_NIBBLE
:JZ_45_END &print_qword_0_isNeg &CONST_0 &PRINT_QWORD_0_PRINT_NIBBLE ; lblsq print_qword_0_isNeg CONST_0 PRINT_QWORD_0_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_0_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_0_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_0_nibbleVal ?+8 ; relsq tmp3 print_qword_0_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_0_nibbleVal f
# MSQ_START 2 zero print_qword_0_nibbleVal
&print_qword_0_nibbleVal &print_qword_0_nibbleVal ?+8 ; relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_0_nibbleVal f
&print_qword_0_nibbleVal &CONST_-F ?+8 ; relsq print_qword_0_nibbleVal CONST_-F 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_0_nibbleVal tmp2
&print_qword_0_nibbleVal &tmp2 ?+8 ; relsq print_qword_0_nibbleVal tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_0_PRINT_NIBBLE
&ZERO &ZERO &PRINT_QWORD_0_PRINT_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_0_PRINT_NIBBLE
# MSQ_END 1 lbljmp
; label PRINT_QWORD_0_HANDLE_LOW_NIBBLE
# MSQ_START 1 decleq print_qword_0_isNeg 0 PRINT_QWORD_0_PRINT_NIBBLE
:PRINT_QWORD_0_HANDLE_LOW_NIBBLE &print_qword_0_isNeg &CONST_0 &PRINT_QWORD_0_PRINT_NIBBLE ; lblsq print_qword_0_isNeg CONST_0 PRINT_QWORD_0_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 decleq print_qword_0_nibbleVal 0 PRINT_QWORD_0_PRINT_NIBBLE
&print_qword_0_nibbleVal &CONST_0 &PRINT_QWORD_0_PRINT_NIBBLE ; lblsq print_qword_0_nibbleVal CONST_0 PRINT_QWORD_0_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_0_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_0_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_0_nibbleVal ?+8 ; relsq tmp3 print_qword_0_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_0_nibbleVal 10
# MSQ_START 2 zero print_qword_0_nibbleVal
&print_qword_0_nibbleVal &print_qword_0_nibbleVal ?+8 ; relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_0_nibbleVal 10
&print_qword_0_nibbleVal &CONST_-10 ?+8 ; relsq print_qword_0_nibbleVal CONST_-10 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_0_nibbleVal tmp2
&print_qword_0_nibbleVal &tmp2 ?+8 ; relsq print_qword_0_nibbleVal tmp2 1
# MSQ_END 1 sub
; label PRINT_QWORD_0_PRINT_NIBBLE
# MSQ_START 1 print_nibble print_qword_0_nibbleVal tmp2 tmp3
# MSQ_START 2 lbljmp PRINT_NIBBLE_0_START
:PRINT_QWORD_0_PRINT_NIBBLE &ZERO &ZERO &PRINT_NIBBLE_0_START ; lblsq ZERO ZERO PRINT_NIBBLE_0_START
# MSQ_END 2 lbljmp
; label PRINT_NIBBLE_0_HEX_CHARSET
# MSQ_START 2 raw_chars 0123456789abcdef
:PRINT_NIBBLE_0_HEX_CHARSET 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066 ; raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
# MSQ_END 2 raw_chars
; label PRINT_NIBBLE_0_START
# MSQ_START 2 movneg tmp2 print_qword_0_nibbleVal
:PRINT_NIBBLE_0_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &print_qword_0_nibbleVal ?+8 ; relsq tmp2 print_qword_0_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 mul_8 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mul_8
&PRINT_NIBBLE_0_HEX_CHARSET_addrRef_0 &tmp2 ?+8 ; relsq PRINT_NIBBLE_0_HEX_CHARSET_addrRef_0 tmp2 1
# MSQ_START 2 putchar PRINT_NIBBLE_0_HEX_CHARSET tmp3
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 :PRINT_NIBBLE_0_HEX_CHARSET_addrRef_0 &PRINT_NIBBLE_0_HEX_CHARSET ?+8 ; relsq tmp3 PRINT_NIBBLE_0_HEX_CHARSET 1
&tmp3 &CONST_1 ?+8 ; relsq tmp3 CONST_1 1
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp3 ?+8 ; relsq SERIAL_OUT tmp3 1
# MSQ_END 2 putchar
# MSQ_START 2 movneg tmp3 tmp2
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 movneg
&PRINT_NIBBLE_0_HEX_CHARSET_addrRef_0 &tmp3 ?+8 ; relsq PRINT_NIBBLE_0_HEX_CHARSET_addrRef_0 tmp3 1
# MSQ_END 1 print_nibble
# MSQ_START 1 incaddr PRINT_QWORD_0_SUBBERS 8
&PRINT_QWORD_0_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_0 CONST_-8 1
&PRINT_QWORD_0_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_1 CONST_-8 1
&PRINT_QWORD_0_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_2 CONST_-8 1
&PRINT_QWORD_0_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_3 CONST_-8 1
&PRINT_QWORD_0_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_4 CONST_-8 1
&PRINT_QWORD_0_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PRINT_QWORD_0_LOOP
&ZERO &ZERO &PRINT_QWORD_0_LOOP ; lblsq ZERO ZERO PRINT_QWORD_0_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_0_END
# MSQ_START 1 decaddr PRINT_QWORD_0_SUBBERS 80
:PRINT_QWORD_0_END &PRINT_QWORD_0_SUBBERS_addrRef_0 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_0 CONST_80 1
&PRINT_QWORD_0_SUBBERS_addrRef_1 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_1 CONST_80 1
&PRINT_QWORD_0_SUBBERS_addrRef_2 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_2 CONST_80 1
&PRINT_QWORD_0_SUBBERS_addrRef_3 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_3 CONST_80 1
&PRINT_QWORD_0_SUBBERS_addrRef_4 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_4 CONST_80 1
&PRINT_QWORD_0_SUBBERS_addrRef_5 &CONST_80 ?+8 ; relsq PRINT_QWORD_0_SUBBERS_addrRef_5 CONST_80 1
# MSQ_END 1 decaddr
# MSQ_END 0 print_qword
# MSQ_START 0 putchar LINE_FEED tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr symbolsCur_dbg 8
&symbolsCur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_-8 1
&symbolsCur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_-8 1
&symbolsCur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_-8 1
&symbolsCur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_-8 1
&symbolsCur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts SYMBOL_PART_3 tmp tmp2
; addr puts_29_str 0
# MSQ_START 1 setaddr puts_29_str SYMBOL_PART_3 tmp tmp2
# MSQ_START 2 mov tmp puts_29_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_29_str_addrRef_0 ?+8 ; relsq tmp2 puts_29_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SYMBOL_PART_3
&tmp :SYMBOL_PART_3_addrRef_0 &SYMBOL_PART_3 ?+8 ; relsq tmp SYMBOL_PART_3 1
# MSQ_END 2 sub
&puts_29_str_addrRef_0 &tmp ?+8 ; relsq puts_29_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_29_len 0
# MSQ_START 1 incaddr SYMBOL_PART_3 8
&SYMBOL_PART_3_addrRef_0 &CONST_-8 ?+8 ; relsq SYMBOL_PART_3_addrRef_0 CONST_-8 1
&SYMBOL_PART_3_addrRef_1 &CONST_-8 ?+8 ; relsq SYMBOL_PART_3_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_29_len SYMBOL_PART_3 tmp
# MSQ_START 2 movneg tmp SYMBOL_PART_3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :SYMBOL_PART_3_addrRef_1 &SYMBOL_PART_3 ?+8 ; relsq tmp SYMBOL_PART_3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_29_len tmp
&puts_29_len &puts_29_len ?+8 ; relsq puts_29_len puts_29_len 1
&puts_29_len &tmp ?+8 ; relsq puts_29_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr SYMBOL_PART_3 8
&SYMBOL_PART_3_addrRef_0 &CONST_8 ?+8 ; relsq SYMBOL_PART_3_addrRef_0 CONST_8 1
&SYMBOL_PART_3_addrRef_1 &CONST_8 ?+8 ; relsq SYMBOL_PART_3_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_29_LOOP
# MSQ_START 1 decleq puts_29_len 0 PUTS_29_END
:PUTS_29_LOOP &puts_29_len &CONST_0 &PUTS_29_END ; lblsq puts_29_len CONST_0 PUTS_29_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_29_len 1
&puts_29_len &CONST_1 ?+8 ; relsq puts_29_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_29_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_29_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_29_str_addrRef_0 &puts_29_str ?+8 ; relsq tmp puts_29_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_29_str 8
&puts_29_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_29_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_29_LOOP
&ZERO &ZERO &PUTS_29_LOOP ; lblsq ZERO ZERO PUTS_29_LOOP
# MSQ_END 1 lbljmp
; label PUTS_29_END
# MSQ_END 0 puts
# MSQ_START 0 print_qword symbolsCur_dbg tmp tmp2 tmp3
# MSQ_START 1 mov tmp symbolsCur_dbg tmp2
# MSQ_START 2 movneg tmp2 symbolsCur_dbg
:PUTS_29_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :symbolsCur_dbg_addrRef_3 &symbolsCur_dbg ?+8 ; relsq tmp2 symbolsCur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var print_qword_1_isNeg 0
# MSQ_START 1 zero print_qword_1_isNeg
# MSQ_START 2 sub print_qword_1_isNeg print_qword_1_isNeg
&print_qword_1_isNeg &print_qword_1_isNeg ?+8 ; relsq print_qword_1_isNeg print_qword_1_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp PRINT_QWORD_1_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO PRINT_QWORD_1_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &PRINT_QWORD_1_IS_NEG ; lblsq tmp2 ZERO PRINT_QWORD_1_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp PRINT_QWORD_1_LOOP
&ZERO &ZERO &PRINT_QWORD_1_LOOP ; lblsq ZERO ZERO PRINT_QWORD_1_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_1_IS_NEG
# MSQ_START 1 inc print_qword_1_isNeg 1
# MSQ_START 2 dec print_qword_1_isNeg -1
:PRINT_QWORD_1_IS_NEG &print_qword_1_isNeg &CONST_-1 ?+8 ; relsq print_qword_1_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 lbljmp PRINT_QWORD_1_LOOP
&ZERO &ZERO &PRINT_QWORD_1_LOOP ; lblsq ZERO ZERO PRINT_QWORD_1_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_1_SUBBERS
:PRINT_QWORD_1_SUBBERS 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000 ; raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
; label PRINT_QWORD_1_LOOP
# MSQ_START 1 jz PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_END tmp2
# MSQ_START 2 movneg tmp2 PRINT_QWORD_1_SUBBERS
:PRINT_QWORD_1_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :PRINT_QWORD_1_SUBBERS_addrRef_0 &PRINT_QWORD_1_SUBBERS ?+8 ; relsq tmp2 PRINT_QWORD_1_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_46_END
&tmp2 &CONST_-1 &JZ_46_END ; lblsq tmp2 CONST_-1 JZ_46_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq PRINT_QWORD_1_SUBBERS 1 JZ_46_REVERT_A
:PRINT_QWORD_1_SUBBERS_addrRef_1 &PRINT_QWORD_1_SUBBERS &CONST_-1 &JZ_46_REVERT_A ; lblsq PRINT_QWORD_1_SUBBERS CONST_-1 JZ_46_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec PRINT_QWORD_1_SUBBERS 1
:PRINT_QWORD_1_SUBBERS_addrRef_2 &PRINT_QWORD_1_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_1_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_1_END
&ZERO &ZERO &PRINT_QWORD_1_END ; lblsq ZERO ZERO PRINT_QWORD_1_END
# MSQ_END 2 lbljmp
; label JZ_46_REVERT_A
# MSQ_START 2 dec PRINT_QWORD_1_SUBBERS 1
:JZ_46_REVERT_A :PRINT_QWORD_1_SUBBERS_addrRef_3 &PRINT_QWORD_1_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_1_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_46_END
# MSQ_END 1 jz
; var print_qword_1_nibbleVal 0
# MSQ_START 1 zero print_qword_1_nibbleVal
# MSQ_START 2 sub print_qword_1_nibbleVal print_qword_1_nibbleVal
:JZ_46_END &print_qword_1_nibbleVal &print_qword_1_nibbleVal ?+8 ; relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label PRINT_QWORD_1_SUBTRACT_A
# MSQ_START 1 jl tmp PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_HANDLE_NIBBLE tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:PRINT_QWORD_1_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :PRINT_QWORD_1_SUBBERS_addrRef_4 &PRINT_QWORD_1_SUBBERS &PRINT_QWORD_1_HANDLE_NIBBLE ; lblsq tmp2 PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_HANDLE_NIBBLE
# MSQ_END 1 jl
# MSQ_START 1 inc print_qword_1_nibbleVal 1
# MSQ_START 2 dec print_qword_1_nibbleVal -1
&print_qword_1_nibbleVal &CONST_-1 ?+8 ; relsq print_qword_1_nibbleVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp PRINT_QWORD_1_SUBBERS
&tmp :PRINT_QWORD_1_SUBBERS_addrRef_5 &PRINT_QWORD_1_SUBBERS ?+8 ; relsq tmp PRINT_QWORD_1_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_1_SUBTRACT_A
&ZERO &ZERO &PRINT_QWORD_1_SUBTRACT_A ; lblsq ZERO ZERO PRINT_QWORD_1_SUBTRACT_A
# MSQ_END 1 lbljmp
; label PRINT_QWORD_1_HANDLE_NIBBLE
# MSQ_START 1 jz tmp PRINT_QWORD_1_HANDLE_LOW_NIBBLE tmp2
# MSQ_START 2 movneg tmp2 tmp
:PRINT_QWORD_1_HANDLE_NIBBLE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_47_END
&tmp2 &CONST_-1 &JZ_47_END ; lblsq tmp2 CONST_-1 JZ_47_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_47_REVERT_A
&tmp &CONST_-1 &JZ_47_REVERT_A ; lblsq tmp CONST_-1 JZ_47_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_1_HANDLE_LOW_NIBBLE
&ZERO &ZERO &PRINT_QWORD_1_HANDLE_LOW_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_1_HANDLE_LOW_NIBBLE
# MSQ_END 2 lbljmp
; label JZ_47_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_47_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_47_END
# MSQ_END 1 jz
# MSQ_START 1 decleq print_qword_1_isNeg 0 PRINT_QWORD_1_PRINT_NIBBLE
:JZ_47_END &print_qword_1_isNeg &CONST_0 &PRINT_QWORD_1_PRINT_NIBBLE ; lblsq print_qword_1_isNeg CONST_0 PRINT_QWORD_1_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_1_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_1_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_1_nibbleVal ?+8 ; relsq tmp3 print_qword_1_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_1_nibbleVal f
# MSQ_START 2 zero print_qword_1_nibbleVal
&print_qword_1_nibbleVal &print_qword_1_nibbleVal ?+8 ; relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_1_nibbleVal f
&print_qword_1_nibbleVal &CONST_-F ?+8 ; relsq print_qword_1_nibbleVal CONST_-F 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_1_nibbleVal tmp2
&print_qword_1_nibbleVal &tmp2 ?+8 ; relsq print_qword_1_nibbleVal tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_1_PRINT_NIBBLE
&ZERO &ZERO &PRINT_QWORD_1_PRINT_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_1_PRINT_NIBBLE
# MSQ_END 1 lbljmp
; label PRINT_QWORD_1_HANDLE_LOW_NIBBLE
# MSQ_START 1 decleq print_qword_1_isNeg 0 PRINT_QWORD_1_PRINT_NIBBLE
:PRINT_QWORD_1_HANDLE_LOW_NIBBLE &print_qword_1_isNeg &CONST_0 &PRINT_QWORD_1_PRINT_NIBBLE ; lblsq print_qword_1_isNeg CONST_0 PRINT_QWORD_1_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 decleq print_qword_1_nibbleVal 0 PRINT_QWORD_1_PRINT_NIBBLE
&print_qword_1_nibbleVal &CONST_0 &PRINT_QWORD_1_PRINT_NIBBLE ; lblsq print_qword_1_nibbleVal CONST_0 PRINT_QWORD_1_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_1_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_1_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_1_nibbleVal ?+8 ; relsq tmp3 print_qword_1_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_1_nibbleVal 10
# MSQ_START 2 zero print_qword_1_nibbleVal
&print_qword_1_nibbleVal &print_qword_1_nibbleVal ?+8 ; relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_1_nibbleVal 10
&print_qword_1_nibbleVal &CONST_-10 ?+8 ; relsq print_qword_1_nibbleVal CONST_-10 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_1_nibbleVal tmp2
&print_qword_1_nibbleVal &tmp2 ?+8 ; relsq print_qword_1_nibbleVal tmp2 1
# MSQ_END 1 sub
; label PRINT_QWORD_1_PRINT_NIBBLE
# MSQ_START 1 print_nibble print_qword_1_nibbleVal tmp2 tmp3
# MSQ_START 2 lbljmp PRINT_NIBBLE_1_START
:PRINT_QWORD_1_PRINT_NIBBLE &ZERO &ZERO &PRINT_NIBBLE_1_START ; lblsq ZERO ZERO PRINT_NIBBLE_1_START
# MSQ_END 2 lbljmp
; label PRINT_NIBBLE_1_HEX_CHARSET
# MSQ_START 2 raw_chars 0123456789abcdef
:PRINT_NIBBLE_1_HEX_CHARSET 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066 ; raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
# MSQ_END 2 raw_chars
; label PRINT_NIBBLE_1_START
# MSQ_START 2 movneg tmp2 print_qword_1_nibbleVal
:PRINT_NIBBLE_1_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &print_qword_1_nibbleVal ?+8 ; relsq tmp2 print_qword_1_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 mul_8 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mul_8
&PRINT_NIBBLE_1_HEX_CHARSET_addrRef_0 &tmp2 ?+8 ; relsq PRINT_NIBBLE_1_HEX_CHARSET_addrRef_0 tmp2 1
# MSQ_START 2 putchar PRINT_NIBBLE_1_HEX_CHARSET tmp3
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 :PRINT_NIBBLE_1_HEX_CHARSET_addrRef_0 &PRINT_NIBBLE_1_HEX_CHARSET ?+8 ; relsq tmp3 PRINT_NIBBLE_1_HEX_CHARSET 1
&tmp3 &CONST_1 ?+8 ; relsq tmp3 CONST_1 1
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp3 ?+8 ; relsq SERIAL_OUT tmp3 1
# MSQ_END 2 putchar
# MSQ_START 2 movneg tmp3 tmp2
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 movneg
&PRINT_NIBBLE_1_HEX_CHARSET_addrRef_0 &tmp3 ?+8 ; relsq PRINT_NIBBLE_1_HEX_CHARSET_addrRef_0 tmp3 1
# MSQ_END 1 print_nibble
# MSQ_START 1 incaddr PRINT_QWORD_1_SUBBERS 8
&PRINT_QWORD_1_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_0 CONST_-8 1
&PRINT_QWORD_1_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_1 CONST_-8 1
&PRINT_QWORD_1_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_2 CONST_-8 1
&PRINT_QWORD_1_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_3 CONST_-8 1
&PRINT_QWORD_1_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_4 CONST_-8 1
&PRINT_QWORD_1_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PRINT_QWORD_1_LOOP
&ZERO &ZERO &PRINT_QWORD_1_LOOP ; lblsq ZERO ZERO PRINT_QWORD_1_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_1_END
# MSQ_START 1 decaddr PRINT_QWORD_1_SUBBERS 80
:PRINT_QWORD_1_END &PRINT_QWORD_1_SUBBERS_addrRef_0 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_0 CONST_80 1
&PRINT_QWORD_1_SUBBERS_addrRef_1 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_1 CONST_80 1
&PRINT_QWORD_1_SUBBERS_addrRef_2 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_2 CONST_80 1
&PRINT_QWORD_1_SUBBERS_addrRef_3 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_3 CONST_80 1
&PRINT_QWORD_1_SUBBERS_addrRef_4 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_4 CONST_80 1
&PRINT_QWORD_1_SUBBERS_addrRef_5 &CONST_80 ?+8 ; relsq PRINT_QWORD_1_SUBBERS_addrRef_5 CONST_80 1
# MSQ_END 1 decaddr
# MSQ_END 0 print_qword
# MSQ_START 0 putchar LINE_FEED tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr symbolsCur_dbg 8
&symbolsCur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_-8 1
&symbolsCur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_-8 1
&symbolsCur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_-8 1
&symbolsCur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_-8 1
&symbolsCur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts SYMBOL_PART_4 tmp tmp2
; addr puts_30_str 0
# MSQ_START 1 setaddr puts_30_str SYMBOL_PART_4 tmp tmp2
# MSQ_START 2 mov tmp puts_30_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_30_str_addrRef_0 ?+8 ; relsq tmp2 puts_30_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp SYMBOL_PART_4
&tmp :SYMBOL_PART_4_addrRef_0 &SYMBOL_PART_4 ?+8 ; relsq tmp SYMBOL_PART_4 1
# MSQ_END 2 sub
&puts_30_str_addrRef_0 &tmp ?+8 ; relsq puts_30_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_30_len 0
# MSQ_START 1 incaddr SYMBOL_PART_4 8
&SYMBOL_PART_4_addrRef_0 &CONST_-8 ?+8 ; relsq SYMBOL_PART_4_addrRef_0 CONST_-8 1
&SYMBOL_PART_4_addrRef_1 &CONST_-8 ?+8 ; relsq SYMBOL_PART_4_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_30_len SYMBOL_PART_4 tmp
# MSQ_START 2 movneg tmp SYMBOL_PART_4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :SYMBOL_PART_4_addrRef_1 &SYMBOL_PART_4 ?+8 ; relsq tmp SYMBOL_PART_4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_30_len tmp
&puts_30_len &puts_30_len ?+8 ; relsq puts_30_len puts_30_len 1
&puts_30_len &tmp ?+8 ; relsq puts_30_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr SYMBOL_PART_4 8
&SYMBOL_PART_4_addrRef_0 &CONST_8 ?+8 ; relsq SYMBOL_PART_4_addrRef_0 CONST_8 1
&SYMBOL_PART_4_addrRef_1 &CONST_8 ?+8 ; relsq SYMBOL_PART_4_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_30_LOOP
# MSQ_START 1 decleq puts_30_len 0 PUTS_30_END
:PUTS_30_LOOP &puts_30_len &CONST_0 &PUTS_30_END ; lblsq puts_30_len CONST_0 PUTS_30_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_30_len 1
&puts_30_len &CONST_1 ?+8 ; relsq puts_30_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_30_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_30_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_30_str_addrRef_0 &puts_30_str ?+8 ; relsq tmp puts_30_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_30_str 8
&puts_30_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_30_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_30_LOOP
&ZERO &ZERO &PUTS_30_LOOP ; lblsq ZERO ZERO PUTS_30_LOOP
# MSQ_END 1 lbljmp
; label PUTS_30_END
# MSQ_END 0 puts
# MSQ_START 0 print_qword symbolsCur_dbg tmp tmp2 tmp3
# MSQ_START 1 mov tmp symbolsCur_dbg tmp2
# MSQ_START 2 movneg tmp2 symbolsCur_dbg
:PUTS_30_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :symbolsCur_dbg_addrRef_4 &symbolsCur_dbg ?+8 ; relsq tmp2 symbolsCur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var print_qword_2_isNeg 0
# MSQ_START 1 zero print_qword_2_isNeg
# MSQ_START 2 sub print_qword_2_isNeg print_qword_2_isNeg
&print_qword_2_isNeg &print_qword_2_isNeg ?+8 ; relsq print_qword_2_isNeg print_qword_2_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp PRINT_QWORD_2_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO PRINT_QWORD_2_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &PRINT_QWORD_2_IS_NEG ; lblsq tmp2 ZERO PRINT_QWORD_2_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp PRINT_QWORD_2_LOOP
&ZERO &ZERO &PRINT_QWORD_2_LOOP ; lblsq ZERO ZERO PRINT_QWORD_2_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_2_IS_NEG
# MSQ_START 1 inc print_qword_2_isNeg 1
# MSQ_START 2 dec print_qword_2_isNeg -1
:PRINT_QWORD_2_IS_NEG &print_qword_2_isNeg &CONST_-1 ?+8 ; relsq print_qword_2_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 lbljmp PRINT_QWORD_2_LOOP
&ZERO &ZERO &PRINT_QWORD_2_LOOP ; lblsq ZERO ZERO PRINT_QWORD_2_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_2_SUBBERS
:PRINT_QWORD_2_SUBBERS 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000 ; raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
; label PRINT_QWORD_2_LOOP
# MSQ_START 1 jz PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_END tmp2
# MSQ_START 2 movneg tmp2 PRINT_QWORD_2_SUBBERS
:PRINT_QWORD_2_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :PRINT_QWORD_2_SUBBERS_addrRef_0 &PRINT_QWORD_2_SUBBERS ?+8 ; relsq tmp2 PRINT_QWORD_2_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_48_END
&tmp2 &CONST_-1 &JZ_48_END ; lblsq tmp2 CONST_-1 JZ_48_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq PRINT_QWORD_2_SUBBERS 1 JZ_48_REVERT_A
:PRINT_QWORD_2_SUBBERS_addrRef_1 &PRINT_QWORD_2_SUBBERS &CONST_-1 &JZ_48_REVERT_A ; lblsq PRINT_QWORD_2_SUBBERS CONST_-1 JZ_48_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec PRINT_QWORD_2_SUBBERS 1
:PRINT_QWORD_2_SUBBERS_addrRef_2 &PRINT_QWORD_2_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_2_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_2_END
&ZERO &ZERO &PRINT_QWORD_2_END ; lblsq ZERO ZERO PRINT_QWORD_2_END
# MSQ_END 2 lbljmp
; label JZ_48_REVERT_A
# MSQ_START 2 dec PRINT_QWORD_2_SUBBERS 1
:JZ_48_REVERT_A :PRINT_QWORD_2_SUBBERS_addrRef_3 &PRINT_QWORD_2_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_2_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_48_END
# MSQ_END 1 jz
; var print_qword_2_nibbleVal 0
# MSQ_START 1 zero print_qword_2_nibbleVal
# MSQ_START 2 sub print_qword_2_nibbleVal print_qword_2_nibbleVal
:JZ_48_END &print_qword_2_nibbleVal &print_qword_2_nibbleVal ?+8 ; relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label PRINT_QWORD_2_SUBTRACT_A
# MSQ_START 1 jl tmp PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_HANDLE_NIBBLE tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:PRINT_QWORD_2_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :PRINT_QWORD_2_SUBBERS_addrRef_4 &PRINT_QWORD_2_SUBBERS &PRINT_QWORD_2_HANDLE_NIBBLE ; lblsq tmp2 PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_HANDLE_NIBBLE
# MSQ_END 1 jl
# MSQ_START 1 inc print_qword_2_nibbleVal 1
# MSQ_START 2 dec print_qword_2_nibbleVal -1
&print_qword_2_nibbleVal &CONST_-1 ?+8 ; relsq print_qword_2_nibbleVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp PRINT_QWORD_2_SUBBERS
&tmp :PRINT_QWORD_2_SUBBERS_addrRef_5 &PRINT_QWORD_2_SUBBERS ?+8 ; relsq tmp PRINT_QWORD_2_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_2_SUBTRACT_A
&ZERO &ZERO &PRINT_QWORD_2_SUBTRACT_A ; lblsq ZERO ZERO PRINT_QWORD_2_SUBTRACT_A
# MSQ_END 1 lbljmp
; label PRINT_QWORD_2_HANDLE_NIBBLE
# MSQ_START 1 jz tmp PRINT_QWORD_2_HANDLE_LOW_NIBBLE tmp2
# MSQ_START 2 movneg tmp2 tmp
:PRINT_QWORD_2_HANDLE_NIBBLE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_49_END
&tmp2 &CONST_-1 &JZ_49_END ; lblsq tmp2 CONST_-1 JZ_49_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_49_REVERT_A
&tmp &CONST_-1 &JZ_49_REVERT_A ; lblsq tmp CONST_-1 JZ_49_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_2_HANDLE_LOW_NIBBLE
&ZERO &ZERO &PRINT_QWORD_2_HANDLE_LOW_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_2_HANDLE_LOW_NIBBLE
# MSQ_END 2 lbljmp
; label JZ_49_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_49_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_49_END
# MSQ_END 1 jz
# MSQ_START 1 decleq print_qword_2_isNeg 0 PRINT_QWORD_2_PRINT_NIBBLE
:JZ_49_END &print_qword_2_isNeg &CONST_0 &PRINT_QWORD_2_PRINT_NIBBLE ; lblsq print_qword_2_isNeg CONST_0 PRINT_QWORD_2_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_2_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_2_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_2_nibbleVal ?+8 ; relsq tmp3 print_qword_2_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_2_nibbleVal f
# MSQ_START 2 zero print_qword_2_nibbleVal
&print_qword_2_nibbleVal &print_qword_2_nibbleVal ?+8 ; relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_2_nibbleVal f
&print_qword_2_nibbleVal &CONST_-F ?+8 ; relsq print_qword_2_nibbleVal CONST_-F 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_2_nibbleVal tmp2
&print_qword_2_nibbleVal &tmp2 ?+8 ; relsq print_qword_2_nibbleVal tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_2_PRINT_NIBBLE
&ZERO &ZERO &PRINT_QWORD_2_PRINT_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_2_PRINT_NIBBLE
# MSQ_END 1 lbljmp
; label PRINT_QWORD_2_HANDLE_LOW_NIBBLE
# MSQ_START 1 decleq print_qword_2_isNeg 0 PRINT_QWORD_2_PRINT_NIBBLE
:PRINT_QWORD_2_HANDLE_LOW_NIBBLE &print_qword_2_isNeg &CONST_0 &PRINT_QWORD_2_PRINT_NIBBLE ; lblsq print_qword_2_isNeg CONST_0 PRINT_QWORD_2_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 decleq print_qword_2_nibbleVal 0 PRINT_QWORD_2_PRINT_NIBBLE
&print_qword_2_nibbleVal &CONST_0 &PRINT_QWORD_2_PRINT_NIBBLE ; lblsq print_qword_2_nibbleVal CONST_0 PRINT_QWORD_2_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_2_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_2_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_2_nibbleVal ?+8 ; relsq tmp3 print_qword_2_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_2_nibbleVal 10
# MSQ_START 2 zero print_qword_2_nibbleVal
&print_qword_2_nibbleVal &print_qword_2_nibbleVal ?+8 ; relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_2_nibbleVal 10
&print_qword_2_nibbleVal &CONST_-10 ?+8 ; relsq print_qword_2_nibbleVal CONST_-10 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_2_nibbleVal tmp2
&print_qword_2_nibbleVal &tmp2 ?+8 ; relsq print_qword_2_nibbleVal tmp2 1
# MSQ_END 1 sub
; label PRINT_QWORD_2_PRINT_NIBBLE
# MSQ_START 1 print_nibble print_qword_2_nibbleVal tmp2 tmp3
# MSQ_START 2 lbljmp PRINT_NIBBLE_2_START
:PRINT_QWORD_2_PRINT_NIBBLE &ZERO &ZERO &PRINT_NIBBLE_2_START ; lblsq ZERO ZERO PRINT_NIBBLE_2_START
# MSQ_END 2 lbljmp
; label PRINT_NIBBLE_2_HEX_CHARSET
# MSQ_START 2 raw_chars 0123456789abcdef
:PRINT_NIBBLE_2_HEX_CHARSET 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066 ; raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
# MSQ_END 2 raw_chars
; label PRINT_NIBBLE_2_START
# MSQ_START 2 movneg tmp2 print_qword_2_nibbleVal
:PRINT_NIBBLE_2_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &print_qword_2_nibbleVal ?+8 ; relsq tmp2 print_qword_2_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 mul_8 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mul_8
&PRINT_NIBBLE_2_HEX_CHARSET_addrRef_0 &tmp2 ?+8 ; relsq PRINT_NIBBLE_2_HEX_CHARSET_addrRef_0 tmp2 1
# MSQ_START 2 putchar PRINT_NIBBLE_2_HEX_CHARSET tmp3
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 :PRINT_NIBBLE_2_HEX_CHARSET_addrRef_0 &PRINT_NIBBLE_2_HEX_CHARSET ?+8 ; relsq tmp3 PRINT_NIBBLE_2_HEX_CHARSET 1
&tmp3 &CONST_1 ?+8 ; relsq tmp3 CONST_1 1
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp3 ?+8 ; relsq SERIAL_OUT tmp3 1
# MSQ_END 2 putchar
# MSQ_START 2 movneg tmp3 tmp2
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 movneg
&PRINT_NIBBLE_2_HEX_CHARSET_addrRef_0 &tmp3 ?+8 ; relsq PRINT_NIBBLE_2_HEX_CHARSET_addrRef_0 tmp3 1
# MSQ_END 1 print_nibble
# MSQ_START 1 incaddr PRINT_QWORD_2_SUBBERS 8
&PRINT_QWORD_2_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_0 CONST_-8 1
&PRINT_QWORD_2_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_1 CONST_-8 1
&PRINT_QWORD_2_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_2 CONST_-8 1
&PRINT_QWORD_2_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_3 CONST_-8 1
&PRINT_QWORD_2_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_4 CONST_-8 1
&PRINT_QWORD_2_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PRINT_QWORD_2_LOOP
&ZERO &ZERO &PRINT_QWORD_2_LOOP ; lblsq ZERO ZERO PRINT_QWORD_2_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_2_END
# MSQ_START 1 decaddr PRINT_QWORD_2_SUBBERS 80
:PRINT_QWORD_2_END &PRINT_QWORD_2_SUBBERS_addrRef_0 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_0 CONST_80 1
&PRINT_QWORD_2_SUBBERS_addrRef_1 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_1 CONST_80 1
&PRINT_QWORD_2_SUBBERS_addrRef_2 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_2 CONST_80 1
&PRINT_QWORD_2_SUBBERS_addrRef_3 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_3 CONST_80 1
&PRINT_QWORD_2_SUBBERS_addrRef_4 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_4 CONST_80 1
&PRINT_QWORD_2_SUBBERS_addrRef_5 &CONST_80 ?+8 ; relsq PRINT_QWORD_2_SUBBERS_addrRef_5 CONST_80 1
# MSQ_END 1 decaddr
# MSQ_END 0 print_qword
# MSQ_START 0 putchar LINE_FEED tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr symbolsCur_dbg 8
&symbolsCur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_0 CONST_-8 1
&symbolsCur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_1 CONST_-8 1
&symbolsCur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_2 CONST_-8 1
&symbolsCur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_3 CONST_-8 1
&symbolsCur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq symbolsCur_dbg_addrRef_4 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp DBG_LOOP
&ZERO &ZERO &DBG_LOOP ; lblsq ZERO ZERO DBG_LOOP
# MSQ_END 0 lbljmp

; label DBG_LINES
; addr linesPass2Cur_dbg 0
# MSQ_START 0 setaddr linesPass2Cur_dbg linesPass2Begin tmp tmp2
# MSQ_START 1 mov tmp linesPass2Cur_dbg_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 linesPass2Cur_dbg_addrRef_0
:DBG_LINES &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &linesPass2Cur_dbg_addrRef_0 ?+8 ; relsq tmp2 linesPass2Cur_dbg_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp linesPass2Begin
&tmp &linesPass2Begin ?+8 ; relsq tmp linesPass2Begin 1
# MSQ_END 1 sub
&linesPass2Cur_dbg_addrRef_0 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 tmp 1
&linesPass2Cur_dbg_addrRef_1 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 tmp 1
&linesPass2Cur_dbg_addrRef_2 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 tmp 1
&linesPass2Cur_dbg_addrRef_3 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 tmp 1
&linesPass2Cur_dbg_addrRef_4 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 tmp 1
&linesPass2Cur_dbg_addrRef_5 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 tmp 1
&linesPass2Cur_dbg_addrRef_6 &tmp ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 tmp 1
# MSQ_END 0 setaddr
; var linesLeft_dbg 0
# MSQ_START 0 mov linesLeft_dbg linesPass2Len tmp
# MSQ_START 1 movneg tmp linesPass2Len
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp linesPass2Len
&tmp &linesPass2Len ?+8 ; relsq tmp linesPass2Len 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg linesLeft_dbg tmp
# MSQ_START 2 zero linesLeft_dbg
&linesLeft_dbg &linesLeft_dbg ?+8 ; relsq linesLeft_dbg linesLeft_dbg 1
# MSQ_END 2 zero
# MSQ_START 2 sub linesLeft_dbg tmp
&linesLeft_dbg &tmp ?+8 ; relsq linesLeft_dbg tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label DBG_LOOP_2
# MSQ_START 0 decleq linesLeft_dbg 0 HALT
:DBG_LOOP_2 &linesLeft_dbg &CONST_0 &HALT ; lblsq linesLeft_dbg CONST_0 HALT
# MSQ_END 0 decleq
# MSQ_START 0 dec linesLeft_dbg 1
&linesLeft_dbg &CONST_1 ?+8 ; relsq linesLeft_dbg CONST_1 1
# MSQ_END 0 dec

# MSQ_START 0 puts LINE_PART_1 tmp tmp2
; addr puts_31_str 0
# MSQ_START 1 setaddr puts_31_str LINE_PART_1 tmp tmp2
# MSQ_START 2 mov tmp puts_31_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_31_str_addrRef_0 ?+8 ; relsq tmp2 puts_31_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LINE_PART_1
&tmp :LINE_PART_1_addrRef_0 &LINE_PART_1 ?+8 ; relsq tmp LINE_PART_1 1
# MSQ_END 2 sub
&puts_31_str_addrRef_0 &tmp ?+8 ; relsq puts_31_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_31_len 0
# MSQ_START 1 incaddr LINE_PART_1 8
&LINE_PART_1_addrRef_0 &CONST_-8 ?+8 ; relsq LINE_PART_1_addrRef_0 CONST_-8 1
&LINE_PART_1_addrRef_1 &CONST_-8 ?+8 ; relsq LINE_PART_1_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_31_len LINE_PART_1 tmp
# MSQ_START 2 movneg tmp LINE_PART_1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :LINE_PART_1_addrRef_1 &LINE_PART_1 ?+8 ; relsq tmp LINE_PART_1 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_31_len tmp
&puts_31_len &puts_31_len ?+8 ; relsq puts_31_len puts_31_len 1
&puts_31_len &tmp ?+8 ; relsq puts_31_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr LINE_PART_1 8
&LINE_PART_1_addrRef_0 &CONST_8 ?+8 ; relsq LINE_PART_1_addrRef_0 CONST_8 1
&LINE_PART_1_addrRef_1 &CONST_8 ?+8 ; relsq LINE_PART_1_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_31_LOOP
# MSQ_START 1 decleq puts_31_len 0 PUTS_31_END
:PUTS_31_LOOP &puts_31_len &CONST_0 &PUTS_31_END ; lblsq puts_31_len CONST_0 PUTS_31_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_31_len 1
&puts_31_len &CONST_1 ?+8 ; relsq puts_31_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_31_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_31_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_31_str_addrRef_0 &puts_31_str ?+8 ; relsq tmp puts_31_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_31_str 8
&puts_31_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_31_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_31_LOOP
&ZERO &ZERO &PUTS_31_LOOP ; lblsq ZERO ZERO PUTS_31_LOOP
# MSQ_END 1 lbljmp
; label PUTS_31_END
# MSQ_END 0 puts
# MSQ_START 0 puts linesPass2Cur_dbg tmp tmp2
; addr puts_32_str 0
# MSQ_START 1 setaddr puts_32_str linesPass2Cur_dbg tmp tmp2
# MSQ_START 2 mov tmp puts_32_str_addrRef_0 tmp2
:PUTS_31_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_32_str_addrRef_0 ?+8 ; relsq tmp2 puts_32_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp linesPass2Cur_dbg
&tmp :linesPass2Cur_dbg_addrRef_0 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 2 sub
&puts_32_str_addrRef_0 &tmp ?+8 ; relsq puts_32_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_32_len 0
# MSQ_START 1 incaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_32_len linesPass2Cur_dbg tmp
# MSQ_START 2 movneg tmp linesPass2Cur_dbg
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :linesPass2Cur_dbg_addrRef_1 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_32_len tmp
&puts_32_len &puts_32_len ?+8 ; relsq puts_32_len puts_32_len 1
&puts_32_len &tmp ?+8 ; relsq puts_32_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_32_LOOP
# MSQ_START 1 decleq puts_32_len 0 PUTS_32_END
:PUTS_32_LOOP &puts_32_len &CONST_0 &PUTS_32_END ; lblsq puts_32_len CONST_0 PUTS_32_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_32_len 1
&puts_32_len &CONST_1 ?+8 ; relsq puts_32_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_32_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_32_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_32_str_addrRef_0 &puts_32_str ?+8 ; relsq tmp puts_32_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_32_str 8
&puts_32_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_32_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_32_LOOP
&ZERO &ZERO &PUTS_32_LOOP ; lblsq ZERO ZERO PUTS_32_LOOP
# MSQ_END 1 lbljmp
; label PUTS_32_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_32_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr linesPass2Cur_dbg 18
&linesPass2Cur_dbg_addrRef_0 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-18 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-18 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-18 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-18 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-18 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-18 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts LINE_PART_2 tmp tmp2
; addr puts_33_str 0
# MSQ_START 1 setaddr puts_33_str LINE_PART_2 tmp tmp2
# MSQ_START 2 mov tmp puts_33_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_33_str_addrRef_0 ?+8 ; relsq tmp2 puts_33_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LINE_PART_2
&tmp :LINE_PART_2_addrRef_0 &LINE_PART_2 ?+8 ; relsq tmp LINE_PART_2 1
# MSQ_END 2 sub
&puts_33_str_addrRef_0 &tmp ?+8 ; relsq puts_33_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_33_len 0
# MSQ_START 1 incaddr LINE_PART_2 8
&LINE_PART_2_addrRef_0 &CONST_-8 ?+8 ; relsq LINE_PART_2_addrRef_0 CONST_-8 1
&LINE_PART_2_addrRef_1 &CONST_-8 ?+8 ; relsq LINE_PART_2_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_33_len LINE_PART_2 tmp
# MSQ_START 2 movneg tmp LINE_PART_2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :LINE_PART_2_addrRef_1 &LINE_PART_2 ?+8 ; relsq tmp LINE_PART_2 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_33_len tmp
&puts_33_len &puts_33_len ?+8 ; relsq puts_33_len puts_33_len 1
&puts_33_len &tmp ?+8 ; relsq puts_33_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr LINE_PART_2 8
&LINE_PART_2_addrRef_0 &CONST_8 ?+8 ; relsq LINE_PART_2_addrRef_0 CONST_8 1
&LINE_PART_2_addrRef_1 &CONST_8 ?+8 ; relsq LINE_PART_2_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_33_LOOP
# MSQ_START 1 decleq puts_33_len 0 PUTS_33_END
:PUTS_33_LOOP &puts_33_len &CONST_0 &PUTS_33_END ; lblsq puts_33_len CONST_0 PUTS_33_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_33_len 1
&puts_33_len &CONST_1 ?+8 ; relsq puts_33_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_33_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_33_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_33_str_addrRef_0 &puts_33_str ?+8 ; relsq tmp puts_33_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_33_str 8
&puts_33_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_33_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_33_LOOP
&ZERO &ZERO &PUTS_33_LOOP ; lblsq ZERO ZERO PUTS_33_LOOP
# MSQ_END 1 lbljmp
; label PUTS_33_END
# MSQ_END 0 puts

; addr tokensBuf 0
# MSQ_START 0 setaddr tokensBuf linesPass2Cur_dbg tmp tmp2
# MSQ_START 1 mov tmp tokensBuf_addrRef_0 tmp2
# MSQ_START 2 movneg tmp2 tokensBuf_addrRef_0
:PUTS_33_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tokensBuf_addrRef_0 ?+8 ; relsq tmp2 tokensBuf_addrRef_0 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 sub tmp linesPass2Cur_dbg
&tmp :linesPass2Cur_dbg_addrRef_2 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 1 sub
&tokensBuf_addrRef_0 &tmp ?+8 ; relsq tokensBuf_addrRef_0 tmp 1
&tokensBuf_addrRef_1 &tmp ?+8 ; relsq tokensBuf_addrRef_1 tmp 1
# MSQ_END 0 setaddr
# MSQ_START 0 incaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-8 1
# MSQ_END 0 incaddr
; var tokenCount 0
# MSQ_START 0 mov tokenCount linesPass2Cur_dbg tmp
# MSQ_START 1 movneg tmp linesPass2Cur_dbg
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp linesPass2Cur_dbg
&tmp :linesPass2Cur_dbg_addrRef_3 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 movneg tokenCount tmp
# MSQ_START 2 zero tokenCount
&tokenCount &tokenCount ?+8 ; relsq tokenCount tokenCount 1
# MSQ_END 2 zero
# MSQ_START 2 sub tokenCount tmp
&tokenCount &tmp ?+8 ; relsq tokenCount tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 mov

; label TOKEN_PRINT_LOOP
# MSQ_START 0 decleq tokenCount 0 TOKEN_PRINT_END
:TOKEN_PRINT_LOOP &tokenCount &CONST_0 &TOKEN_PRINT_END ; lblsq tokenCount CONST_0 TOKEN_PRINT_END
# MSQ_END 0 decleq
# MSQ_START 0 dec tokenCount 1
&tokenCount &CONST_1 ?+8 ; relsq tokenCount CONST_1 1
# MSQ_END 0 dec
# MSQ_START 0 puts tokensBuf tmp tmp2
; addr puts_34_str 0
# MSQ_START 1 setaddr puts_34_str tokensBuf tmp tmp2
# MSQ_START 2 mov tmp puts_34_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_34_str_addrRef_0 ?+8 ; relsq tmp2 puts_34_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp tokensBuf
&tmp :tokensBuf_addrRef_0 &tokensBuf ?+8 ; relsq tmp tokensBuf 1
# MSQ_END 2 sub
&puts_34_str_addrRef_0 &tmp ?+8 ; relsq puts_34_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_34_len 0
# MSQ_START 1 incaddr tokensBuf 8
&tokensBuf_addrRef_0 &CONST_-8 ?+8 ; relsq tokensBuf_addrRef_0 CONST_-8 1
&tokensBuf_addrRef_1 &CONST_-8 ?+8 ; relsq tokensBuf_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_34_len tokensBuf tmp
# MSQ_START 2 movneg tmp tokensBuf
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :tokensBuf_addrRef_1 &tokensBuf ?+8 ; relsq tmp tokensBuf 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_34_len tmp
&puts_34_len &puts_34_len ?+8 ; relsq puts_34_len puts_34_len 1
&puts_34_len &tmp ?+8 ; relsq puts_34_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr tokensBuf 8
&tokensBuf_addrRef_0 &CONST_8 ?+8 ; relsq tokensBuf_addrRef_0 CONST_8 1
&tokensBuf_addrRef_1 &CONST_8 ?+8 ; relsq tokensBuf_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_34_LOOP
# MSQ_START 1 decleq puts_34_len 0 PUTS_34_END
:PUTS_34_LOOP &puts_34_len &CONST_0 &PUTS_34_END ; lblsq puts_34_len CONST_0 PUTS_34_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_34_len 1
&puts_34_len &CONST_1 ?+8 ; relsq puts_34_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_34_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_34_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_34_str_addrRef_0 &puts_34_str ?+8 ; relsq tmp puts_34_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_34_str 8
&puts_34_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_34_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_34_LOOP
&ZERO &ZERO &PUTS_34_LOOP ; lblsq ZERO ZERO PUTS_34_LOOP
# MSQ_END 1 lbljmp
; label PUTS_34_END
# MSQ_END 0 puts

# MSQ_START 0 set tmp 2c
# MSQ_START 1 zero tmp
# MSQ_START 2 sub tmp tmp
:PUTS_34_END &tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 inc tmp 2c
# MSQ_START 2 dec tmp -2c
&tmp &CONST_-2C ?+8 ; relsq tmp CONST_-2C 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_END 0 set
# MSQ_START 0 putchar tmp tmp2
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp2 tmp
# MSQ_START 2 zero tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp2 tmp
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp2 1
&tmp2 &CONST_1 ?+8 ; relsq tmp2 CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp2
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp2
0000000013ed27f0 &tmp2 ?+8 ; relsq SERIAL_OUT tmp2 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 putchar SPACE tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp SPACE
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp SPACE
&tmp &SPACE ?+8 ; relsq tmp SPACE 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 incaddr tokensBuf 18
&tokensBuf_addrRef_0 &CONST_-18 ?+8 ; relsq tokensBuf_addrRef_0 CONST_-18 1
&tokensBuf_addrRef_1 &CONST_-18 ?+8 ; relsq tokensBuf_addrRef_1 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 lbljmp TOKEN_PRINT_LOOP
&ZERO &ZERO &TOKEN_PRINT_LOOP ; lblsq ZERO ZERO TOKEN_PRINT_LOOP
# MSQ_END 0 lbljmp

; label TOKEN_PRINT_END
# MSQ_START 0 putchar LINE_FEED tmp
:TOKEN_PRINT_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar


# MSQ_START 0 incaddr linesPass2Cur_dbg 18
&linesPass2Cur_dbg_addrRef_0 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-18 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-18 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-18 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-18 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-18 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-18 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts LINE_PART_3 tmp tmp2
; addr puts_35_str 0
# MSQ_START 1 setaddr puts_35_str LINE_PART_3 tmp tmp2
# MSQ_START 2 mov tmp puts_35_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_35_str_addrRef_0 ?+8 ; relsq tmp2 puts_35_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LINE_PART_3
&tmp :LINE_PART_3_addrRef_0 &LINE_PART_3 ?+8 ; relsq tmp LINE_PART_3 1
# MSQ_END 2 sub
&puts_35_str_addrRef_0 &tmp ?+8 ; relsq puts_35_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_35_len 0
# MSQ_START 1 incaddr LINE_PART_3 8
&LINE_PART_3_addrRef_0 &CONST_-8 ?+8 ; relsq LINE_PART_3_addrRef_0 CONST_-8 1
&LINE_PART_3_addrRef_1 &CONST_-8 ?+8 ; relsq LINE_PART_3_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_35_len LINE_PART_3 tmp
# MSQ_START 2 movneg tmp LINE_PART_3
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :LINE_PART_3_addrRef_1 &LINE_PART_3 ?+8 ; relsq tmp LINE_PART_3 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_35_len tmp
&puts_35_len &puts_35_len ?+8 ; relsq puts_35_len puts_35_len 1
&puts_35_len &tmp ?+8 ; relsq puts_35_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr LINE_PART_3 8
&LINE_PART_3_addrRef_0 &CONST_8 ?+8 ; relsq LINE_PART_3_addrRef_0 CONST_8 1
&LINE_PART_3_addrRef_1 &CONST_8 ?+8 ; relsq LINE_PART_3_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_35_LOOP
# MSQ_START 1 decleq puts_35_len 0 PUTS_35_END
:PUTS_35_LOOP &puts_35_len &CONST_0 &PUTS_35_END ; lblsq puts_35_len CONST_0 PUTS_35_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_35_len 1
&puts_35_len &CONST_1 ?+8 ; relsq puts_35_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_35_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_35_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_35_str_addrRef_0 &puts_35_str ?+8 ; relsq tmp puts_35_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_35_str 8
&puts_35_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_35_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_35_LOOP
&ZERO &ZERO &PUTS_35_LOOP ; lblsq ZERO ZERO PUTS_35_LOOP
# MSQ_END 1 lbljmp
; label PUTS_35_END
# MSQ_END 0 puts
# MSQ_START 0 puts linesPass2Cur_dbg tmp tmp2
; addr puts_36_str 0
# MSQ_START 1 setaddr puts_36_str linesPass2Cur_dbg tmp tmp2
# MSQ_START 2 mov tmp puts_36_str_addrRef_0 tmp2
:PUTS_35_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_36_str_addrRef_0 ?+8 ; relsq tmp2 puts_36_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp linesPass2Cur_dbg
&tmp :linesPass2Cur_dbg_addrRef_4 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 2 sub
&puts_36_str_addrRef_0 &tmp ?+8 ; relsq puts_36_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_36_len 0
# MSQ_START 1 incaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_36_len linesPass2Cur_dbg tmp
# MSQ_START 2 movneg tmp linesPass2Cur_dbg
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :linesPass2Cur_dbg_addrRef_5 &linesPass2Cur_dbg ?+8 ; relsq tmp linesPass2Cur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_36_len tmp
&puts_36_len &puts_36_len ?+8 ; relsq puts_36_len puts_36_len 1
&puts_36_len &tmp ?+8 ; relsq puts_36_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_36_LOOP
# MSQ_START 1 decleq puts_36_len 0 PUTS_36_END
:PUTS_36_LOOP &puts_36_len &CONST_0 &PUTS_36_END ; lblsq puts_36_len CONST_0 PUTS_36_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_36_len 1
&puts_36_len &CONST_1 ?+8 ; relsq puts_36_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_36_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_36_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_36_str_addrRef_0 &puts_36_str ?+8 ; relsq tmp puts_36_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_36_str 8
&puts_36_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_36_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_36_LOOP
&ZERO &ZERO &PUTS_36_LOOP ; lblsq ZERO ZERO PUTS_36_LOOP
# MSQ_END 1 lbljmp
; label PUTS_36_END
# MSQ_END 0 puts
# MSQ_START 0 putchar LINE_FEED tmp
:PUTS_36_END 0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr linesPass2Cur_dbg 18
&linesPass2Cur_dbg_addrRef_0 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-18 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-18 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-18 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-18 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-18 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-18 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-18 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-18 1
# MSQ_END 0 incaddr
# MSQ_START 0 puts LINE_PART_4 tmp tmp2
; addr puts_37_str 0
# MSQ_START 1 setaddr puts_37_str LINE_PART_4 tmp tmp2
# MSQ_START 2 mov tmp puts_37_str_addrRef_0 tmp2
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &puts_37_str_addrRef_0 ?+8 ; relsq tmp2 puts_37_str_addrRef_0 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 sub tmp LINE_PART_4
&tmp :LINE_PART_4_addrRef_0 &LINE_PART_4 ?+8 ; relsq tmp LINE_PART_4 1
# MSQ_END 2 sub
&puts_37_str_addrRef_0 &tmp ?+8 ; relsq puts_37_str_addrRef_0 tmp 1
# MSQ_END 1 setaddr
; var puts_37_len 0
# MSQ_START 1 incaddr LINE_PART_4 8
&LINE_PART_4_addrRef_0 &CONST_-8 ?+8 ; relsq LINE_PART_4_addrRef_0 CONST_-8 1
&LINE_PART_4_addrRef_1 &CONST_-8 ?+8 ; relsq LINE_PART_4_addrRef_1 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 mov puts_37_len LINE_PART_4 tmp
# MSQ_START 2 movneg tmp LINE_PART_4
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :LINE_PART_4_addrRef_1 &LINE_PART_4 ?+8 ; relsq tmp LINE_PART_4 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg puts_37_len tmp
&puts_37_len &puts_37_len ?+8 ; relsq puts_37_len puts_37_len 1
&puts_37_len &tmp ?+8 ; relsq puts_37_len tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 decaddr LINE_PART_4 8
&LINE_PART_4_addrRef_0 &CONST_8 ?+8 ; relsq LINE_PART_4_addrRef_0 CONST_8 1
&LINE_PART_4_addrRef_1 &CONST_8 ?+8 ; relsq LINE_PART_4_addrRef_1 CONST_8 1
# MSQ_END 1 decaddr
; label PUTS_37_LOOP
# MSQ_START 1 decleq puts_37_len 0 PUTS_37_END
:PUTS_37_LOOP &puts_37_len &CONST_0 &PUTS_37_END ; lblsq puts_37_len CONST_0 PUTS_37_END
# MSQ_END 1 decleq
# MSQ_START 1 dec puts_37_len 1
&puts_37_len &CONST_1 ?+8 ; relsq puts_37_len CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 putchar puts_37_str tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 2 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 2 reljmp
# MSQ_START 2 movneg tmp puts_37_str
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp :puts_37_str_addrRef_0 &puts_37_str ?+8 ; relsq tmp puts_37_str 1
# MSQ_END 2 movneg
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 movneg SERIAL_OUT tmp
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 movneg
# MSQ_END 1 putchar
# MSQ_START 1 incaddr puts_37_str 8
&puts_37_str_addrRef_0 &CONST_-8 ?+8 ; relsq puts_37_str_addrRef_0 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PUTS_37_LOOP
&ZERO &ZERO &PUTS_37_LOOP ; lblsq ZERO ZERO PUTS_37_LOOP
# MSQ_END 1 lbljmp
; label PUTS_37_END
# MSQ_END 0 puts
# MSQ_START 0 print_qword linesPass2Cur_dbg tmp tmp2 tmp3
# MSQ_START 1 mov tmp linesPass2Cur_dbg tmp2
# MSQ_START 2 movneg tmp2 linesPass2Cur_dbg
:PUTS_37_END &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :linesPass2Cur_dbg_addrRef_6 &linesPass2Cur_dbg ?+8 ; relsq tmp2 linesPass2Cur_dbg 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp tmp2
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
; var print_qword_3_isNeg 0
# MSQ_START 1 zero print_qword_3_isNeg
# MSQ_START 2 sub print_qword_3_isNeg print_qword_3_isNeg
&print_qword_3_isNeg &print_qword_3_isNeg ?+8 ; relsq print_qword_3_isNeg print_qword_3_isNeg 1
# MSQ_END 2 sub
# MSQ_END 1 zero
# MSQ_START 1 jn tmp PRINT_QWORD_3_IS_NEG tmp2 tmp3
# MSQ_START 2 jl tmp ZERO PRINT_QWORD_3_IS_NEG tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
&tmp2 &ZERO &PRINT_QWORD_3_IS_NEG ; lblsq tmp2 ZERO PRINT_QWORD_3_IS_NEG
# MSQ_END 2 jl
# MSQ_END 1 jn
# MSQ_START 1 lbljmp PRINT_QWORD_3_LOOP
&ZERO &ZERO &PRINT_QWORD_3_LOOP ; lblsq ZERO ZERO PRINT_QWORD_3_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_3_IS_NEG
# MSQ_START 1 inc print_qword_3_isNeg 1
# MSQ_START 2 dec print_qword_3_isNeg -1
:PRINT_QWORD_3_IS_NEG &print_qword_3_isNeg &CONST_-1 ?+8 ; relsq print_qword_3_isNeg CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 neg tmp tmp2 tmp3
# MSQ_START 2 movneg tmp2 tmp
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 mov tmp tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp3 ?+8 ; relsq tmp tmp3 1
# MSQ_END 2 mov
# MSQ_END 1 neg
# MSQ_START 1 lbljmp PRINT_QWORD_3_LOOP
&ZERO &ZERO &PRINT_QWORD_3_LOOP ; lblsq ZERO ZERO PRINT_QWORD_3_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_3_SUBBERS
:PRINT_QWORD_3_SUBBERS 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000 ; raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
; label PRINT_QWORD_3_LOOP
# MSQ_START 1 jz PRINT_QWORD_3_SUBBERS PRINT_QWORD_3_END tmp2
# MSQ_START 2 movneg tmp2 PRINT_QWORD_3_SUBBERS
:PRINT_QWORD_3_LOOP &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 :PRINT_QWORD_3_SUBBERS_addrRef_0 &PRINT_QWORD_3_SUBBERS ?+8 ; relsq tmp2 PRINT_QWORD_3_SUBBERS 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_50_END
&tmp2 &CONST_-1 &JZ_50_END ; lblsq tmp2 CONST_-1 JZ_50_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq PRINT_QWORD_3_SUBBERS 1 JZ_50_REVERT_A
:PRINT_QWORD_3_SUBBERS_addrRef_1 &PRINT_QWORD_3_SUBBERS &CONST_-1 &JZ_50_REVERT_A ; lblsq PRINT_QWORD_3_SUBBERS CONST_-1 JZ_50_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec PRINT_QWORD_3_SUBBERS 1
:PRINT_QWORD_3_SUBBERS_addrRef_2 &PRINT_QWORD_3_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_3_SUBBERS CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_3_END
&ZERO &ZERO &PRINT_QWORD_3_END ; lblsq ZERO ZERO PRINT_QWORD_3_END
# MSQ_END 2 lbljmp
; label JZ_50_REVERT_A
# MSQ_START 2 dec PRINT_QWORD_3_SUBBERS 1
:JZ_50_REVERT_A :PRINT_QWORD_3_SUBBERS_addrRef_3 &PRINT_QWORD_3_SUBBERS &CONST_1 ?+8 ; relsq PRINT_QWORD_3_SUBBERS CONST_1 1
# MSQ_END 2 dec
; label JZ_50_END
# MSQ_END 1 jz
; var print_qword_3_nibbleVal 0
# MSQ_START 1 zero print_qword_3_nibbleVal
# MSQ_START 2 sub print_qword_3_nibbleVal print_qword_3_nibbleVal
:JZ_50_END &print_qword_3_nibbleVal &print_qword_3_nibbleVal ?+8 ; relsq print_qword_3_nibbleVal print_qword_3_nibbleVal 1
# MSQ_END 2 sub
# MSQ_END 1 zero
; label PRINT_QWORD_3_SUBTRACT_A
# MSQ_START 1 jl tmp PRINT_QWORD_3_SUBBERS PRINT_QWORD_3_HANDLE_NIBBLE tmp2 tmp3
# MSQ_START 2 mov tmp2 tmp tmp3
:PRINT_QWORD_3_SUBTRACT_A &tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp ?+8 ; relsq tmp3 tmp 1
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mov
# MSQ_START 2 inc tmp2 1
&tmp2 &CONST_-1 ?+8 ; relsq tmp2 CONST_-1 1
# MSQ_END 2 inc
&tmp2 :PRINT_QWORD_3_SUBBERS_addrRef_4 &PRINT_QWORD_3_SUBBERS &PRINT_QWORD_3_HANDLE_NIBBLE ; lblsq tmp2 PRINT_QWORD_3_SUBBERS PRINT_QWORD_3_HANDLE_NIBBLE
# MSQ_END 1 jl
# MSQ_START 1 inc print_qword_3_nibbleVal 1
# MSQ_START 2 dec print_qword_3_nibbleVal -1
&print_qword_3_nibbleVal &CONST_-1 ?+8 ; relsq print_qword_3_nibbleVal CONST_-1 1
# MSQ_END 2 dec
# MSQ_END 1 inc
# MSQ_START 1 sub tmp PRINT_QWORD_3_SUBBERS
&tmp :PRINT_QWORD_3_SUBBERS_addrRef_5 &PRINT_QWORD_3_SUBBERS ?+8 ; relsq tmp PRINT_QWORD_3_SUBBERS 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_3_SUBTRACT_A
&ZERO &ZERO &PRINT_QWORD_3_SUBTRACT_A ; lblsq ZERO ZERO PRINT_QWORD_3_SUBTRACT_A
# MSQ_END 1 lbljmp
; label PRINT_QWORD_3_HANDLE_NIBBLE
# MSQ_START 1 jz tmp PRINT_QWORD_3_HANDLE_LOW_NIBBLE tmp2
# MSQ_START 2 movneg tmp2 tmp
:PRINT_QWORD_3_HANDLE_NIBBLE &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp ?+8 ; relsq tmp2 tmp 1
# MSQ_END 2 movneg
# MSQ_START 2 incleq tmp2 1 JZ_51_END
&tmp2 &CONST_-1 &JZ_51_END ; lblsq tmp2 CONST_-1 JZ_51_END
# MSQ_END 2 incleq
# MSQ_START 2 incleq tmp 1 JZ_51_REVERT_A
&tmp &CONST_-1 &JZ_51_REVERT_A ; lblsq tmp CONST_-1 JZ_51_REVERT_A
# MSQ_END 2 incleq
# MSQ_START 2 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
# MSQ_START 2 lbljmp PRINT_QWORD_3_HANDLE_LOW_NIBBLE
&ZERO &ZERO &PRINT_QWORD_3_HANDLE_LOW_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_3_HANDLE_LOW_NIBBLE
# MSQ_END 2 lbljmp
; label JZ_51_REVERT_A
# MSQ_START 2 dec tmp 1
:JZ_51_REVERT_A &tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 2 dec
; label JZ_51_END
# MSQ_END 1 jz
# MSQ_START 1 decleq print_qword_3_isNeg 0 PRINT_QWORD_3_PRINT_NIBBLE
:JZ_51_END &print_qword_3_isNeg &CONST_0 &PRINT_QWORD_3_PRINT_NIBBLE ; lblsq print_qword_3_isNeg CONST_0 PRINT_QWORD_3_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_3_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_3_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_3_nibbleVal ?+8 ; relsq tmp3 print_qword_3_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_3_nibbleVal f
# MSQ_START 2 zero print_qword_3_nibbleVal
&print_qword_3_nibbleVal &print_qword_3_nibbleVal ?+8 ; relsq print_qword_3_nibbleVal print_qword_3_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_3_nibbleVal f
&print_qword_3_nibbleVal &CONST_-F ?+8 ; relsq print_qword_3_nibbleVal CONST_-F 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_3_nibbleVal tmp2
&print_qword_3_nibbleVal &tmp2 ?+8 ; relsq print_qword_3_nibbleVal tmp2 1
# MSQ_END 1 sub
# MSQ_START 1 lbljmp PRINT_QWORD_3_PRINT_NIBBLE
&ZERO &ZERO &PRINT_QWORD_3_PRINT_NIBBLE ; lblsq ZERO ZERO PRINT_QWORD_3_PRINT_NIBBLE
# MSQ_END 1 lbljmp
; label PRINT_QWORD_3_HANDLE_LOW_NIBBLE
# MSQ_START 1 decleq print_qword_3_isNeg 0 PRINT_QWORD_3_PRINT_NIBBLE
:PRINT_QWORD_3_HANDLE_LOW_NIBBLE &print_qword_3_isNeg &CONST_0 &PRINT_QWORD_3_PRINT_NIBBLE ; lblsq print_qword_3_isNeg CONST_0 PRINT_QWORD_3_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 decleq print_qword_3_nibbleVal 0 PRINT_QWORD_3_PRINT_NIBBLE
&print_qword_3_nibbleVal &CONST_0 &PRINT_QWORD_3_PRINT_NIBBLE ; lblsq print_qword_3_nibbleVal CONST_0 PRINT_QWORD_3_PRINT_NIBBLE
# MSQ_END 1 decleq
# MSQ_START 1 mov tmp2 print_qword_3_nibbleVal tmp3
# MSQ_START 2 movneg tmp3 print_qword_3_nibbleVal
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &print_qword_3_nibbleVal ?+8 ; relsq tmp3 print_qword_3_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 movneg tmp2 tmp3
&tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 movneg
# MSQ_END 1 mov
# MSQ_START 1 set print_qword_3_nibbleVal 10
# MSQ_START 2 zero print_qword_3_nibbleVal
&print_qword_3_nibbleVal &print_qword_3_nibbleVal ?+8 ; relsq print_qword_3_nibbleVal print_qword_3_nibbleVal 1
# MSQ_END 2 zero
# MSQ_START 2 inc print_qword_3_nibbleVal 10
&print_qword_3_nibbleVal &CONST_-10 ?+8 ; relsq print_qword_3_nibbleVal CONST_-10 1
# MSQ_END 2 inc
# MSQ_END 1 set
# MSQ_START 1 sub print_qword_3_nibbleVal tmp2
&print_qword_3_nibbleVal &tmp2 ?+8 ; relsq print_qword_3_nibbleVal tmp2 1
# MSQ_END 1 sub
; label PRINT_QWORD_3_PRINT_NIBBLE
# MSQ_START 1 print_nibble print_qword_3_nibbleVal tmp2 tmp3
# MSQ_START 2 lbljmp PRINT_NIBBLE_3_START
:PRINT_QWORD_3_PRINT_NIBBLE &ZERO &ZERO &PRINT_NIBBLE_3_START ; lblsq ZERO ZERO PRINT_NIBBLE_3_START
# MSQ_END 2 lbljmp
; label PRINT_NIBBLE_3_HEX_CHARSET
# MSQ_START 2 raw_chars 0123456789abcdef
:PRINT_NIBBLE_3_HEX_CHARSET 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066 ; raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
# MSQ_END 2 raw_chars
; label PRINT_NIBBLE_3_START
# MSQ_START 2 movneg tmp2 print_qword_3_nibbleVal
:PRINT_NIBBLE_3_START &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 &print_qword_3_nibbleVal ?+8 ; relsq tmp2 print_qword_3_nibbleVal 1
# MSQ_END 2 movneg
# MSQ_START 2 mul_8 tmp2 tmp3
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
&tmp2 &tmp3 ?+8 ; relsq tmp2 tmp3 1
# MSQ_END 2 mul_8
&PRINT_NIBBLE_3_HEX_CHARSET_addrRef_0 &tmp2 ?+8 ; relsq PRINT_NIBBLE_3_HEX_CHARSET_addrRef_0 tmp2 1
# MSQ_START 2 putchar PRINT_NIBBLE_3_HEX_CHARSET tmp3
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 :PRINT_NIBBLE_3_HEX_CHARSET_addrRef_0 &PRINT_NIBBLE_3_HEX_CHARSET ?+8 ; relsq tmp3 PRINT_NIBBLE_3_HEX_CHARSET 1
&tmp3 &CONST_1 ?+8 ; relsq tmp3 CONST_1 1
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
0000000013ed27f0 &tmp3 ?+8 ; relsq SERIAL_OUT tmp3 1
# MSQ_END 2 putchar
# MSQ_START 2 movneg tmp3 tmp2
&tmp3 &tmp3 ?+8 ; relsq tmp3 tmp3 1
&tmp3 &tmp2 ?+8 ; relsq tmp3 tmp2 1
# MSQ_END 2 movneg
&PRINT_NIBBLE_3_HEX_CHARSET_addrRef_0 &tmp3 ?+8 ; relsq PRINT_NIBBLE_3_HEX_CHARSET_addrRef_0 tmp3 1
# MSQ_END 1 print_nibble
# MSQ_START 1 incaddr PRINT_QWORD_3_SUBBERS 8
&PRINT_QWORD_3_SUBBERS_addrRef_0 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_0 CONST_-8 1
&PRINT_QWORD_3_SUBBERS_addrRef_1 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_1 CONST_-8 1
&PRINT_QWORD_3_SUBBERS_addrRef_2 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_2 CONST_-8 1
&PRINT_QWORD_3_SUBBERS_addrRef_3 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_3 CONST_-8 1
&PRINT_QWORD_3_SUBBERS_addrRef_4 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_4 CONST_-8 1
&PRINT_QWORD_3_SUBBERS_addrRef_5 &CONST_-8 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_5 CONST_-8 1
# MSQ_END 1 incaddr
# MSQ_START 1 lbljmp PRINT_QWORD_3_LOOP
&ZERO &ZERO &PRINT_QWORD_3_LOOP ; lblsq ZERO ZERO PRINT_QWORD_3_LOOP
# MSQ_END 1 lbljmp
; label PRINT_QWORD_3_END
# MSQ_START 1 decaddr PRINT_QWORD_3_SUBBERS 80
:PRINT_QWORD_3_END &PRINT_QWORD_3_SUBBERS_addrRef_0 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_0 CONST_80 1
&PRINT_QWORD_3_SUBBERS_addrRef_1 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_1 CONST_80 1
&PRINT_QWORD_3_SUBBERS_addrRef_2 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_2 CONST_80 1
&PRINT_QWORD_3_SUBBERS_addrRef_3 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_3 CONST_80 1
&PRINT_QWORD_3_SUBBERS_addrRef_4 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_4 CONST_80 1
&PRINT_QWORD_3_SUBBERS_addrRef_5 &CONST_80 ?+8 ; relsq PRINT_QWORD_3_SUBBERS_addrRef_5 CONST_80 1
# MSQ_END 1 decaddr
# MSQ_END 0 print_qword
# MSQ_START 0 putchar LINE_FEED tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar

# MSQ_START 0 incaddr linesPass2Cur_dbg 8
&linesPass2Cur_dbg_addrRef_0 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_0 CONST_-8 1
&linesPass2Cur_dbg_addrRef_1 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_1 CONST_-8 1
&linesPass2Cur_dbg_addrRef_2 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_2 CONST_-8 1
&linesPass2Cur_dbg_addrRef_3 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_3 CONST_-8 1
&linesPass2Cur_dbg_addrRef_4 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_4 CONST_-8 1
&linesPass2Cur_dbg_addrRef_5 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_5 CONST_-8 1
&linesPass2Cur_dbg_addrRef_6 &CONST_-8 ?+8 ; relsq linesPass2Cur_dbg_addrRef_6 CONST_-8 1
# MSQ_END 0 incaddr
# MSQ_START 0 putchar LINE_FEED tmp
0000000013ed27f0 &ZERO ?+20 ; relsq SERIAL_OUT ZERO 2
# MSQ_START 1 reljmp -1
&ZERO &ZERO ?-28 ; relsq ZERO ZERO -1
# MSQ_END 1 reljmp
# MSQ_START 1 movneg tmp LINE_FEED
# MSQ_START 2 zero tmp
&tmp &tmp ?+8 ; relsq tmp tmp 1
# MSQ_END 2 zero
# MSQ_START 2 sub tmp LINE_FEED
&tmp &LINE_FEED ?+8 ; relsq tmp LINE_FEED 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_START 1 dec tmp 1
&tmp &CONST_1 ?+8 ; relsq tmp CONST_1 1
# MSQ_END 1 dec
# MSQ_START 1 movneg SERIAL_OUT tmp
# MSQ_START 2 zero SERIAL_OUT
0000000013ed27f0 0000000013ed27f0 ?+8 ; relsq SERIAL_OUT SERIAL_OUT 1
# MSQ_END 2 zero
# MSQ_START 2 sub SERIAL_OUT tmp
0000000013ed27f0 &tmp ?+8 ; relsq SERIAL_OUT tmp 1
# MSQ_END 2 sub
# MSQ_END 1 movneg
# MSQ_END 0 putchar
# MSQ_START 0 lbljmp DBG_LOOP_2
&ZERO &ZERO &DBG_LOOP_2 ; lblsq ZERO ZERO DBG_LOOP_2
# MSQ_END 0 lbljmp

; label HALT
# MSQ_START 0 halt tmp tmp2
# MSQ_START 1 set_safe CPU_CONTROL_START 2 tmp tmp2
# MSQ_START 2 mov tmp CPU_CONTROL_START tmp2
:HALT &tmp2 &tmp2 ?+8 ; relsq tmp2 tmp2 1
&tmp2 0000000013ee0000 ?+8 ; relsq tmp2 CPU_CONTROL_START 1
&tmp &tmp ?+8 ; relsq tmp tmp 1
&tmp &tmp2 ?+8 ; relsq tmp tmp2 1
# MSQ_END 2 mov
# MSQ_START 2 dec tmp 2
&tmp &CONST_2 ?+8 ; relsq tmp CONST_2 1
# MSQ_END 2 dec
# MSQ_START 2 sub CPU_CONTROL_START tmp
0000000013ee0000 &tmp ?+8 ; relsq CPU_CONTROL_START tmp 1
# MSQ_END 2 sub
# MSQ_END 1 set_safe
&ZERO &ZERO ?-10 ; relsq ZERO ZERO 0
# MSQ_END 0 halt


# MSQ_START 0 def_string HEX_HEADER # hex
; label HEX_HEADER_BUF
# MSQ_START 1 raw_chars # hex
:HEX_HEADER_BUF 0000000000000023 0000000000000020 0000000000000068 0000000000000065 0000000000000078 ; raw 0000000000000023 0000000000000020 0000000000000068 0000000000000065 0000000000000078
# MSQ_END 1 raw_chars
; label HEX_HEADER
:HEX_HEADER &HEX_HEADER_BUF ; raw_ref HEX_HEADER_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string
# Notice the single space
# MSQ_START 0 def_string EMPTY_STRING 
; label EMPTY_STRING_BUF
# MSQ_START 1 raw_chars 
# This is an empty string
# MSQ_END 1 raw_chars
; label EMPTY_STRING
:EMPTY_STRING_BUF :EMPTY_STRING &EMPTY_STRING_BUF ; raw_ref EMPTY_STRING_BUF
0000000000000000 0000000000000000 ; raw 0000000000000000 0000000000000000
# MSQ_END 0 def_string
# MSQ_START 0 def_string NEWLINE newline
; label NEWLINE_BUF
# MSQ_START 1 raw_chars newline
:NEWLINE_BUF 000000000000006e 0000000000000065 0000000000000077 000000000000006c 0000000000000069 000000000000006e 0000000000000065 ; raw 000000000000006e 0000000000000065 0000000000000077 000000000000006c 0000000000000069 000000000000006e 0000000000000065
# MSQ_END 1 raw_chars
; label NEWLINE
:NEWLINE &NEWLINE_BUF ; raw_ref NEWLINE_BUF
0000000000000007 0000000000000038 ; raw 0000000000000007 0000000000000038
# MSQ_END 0 def_string
# MSQ_START 0 def_string REM rem
; label REM_BUF
# MSQ_START 1 raw_chars rem
:REM_BUF 0000000000000072 0000000000000065 000000000000006d ; raw 0000000000000072 0000000000000065 000000000000006d
# MSQ_END 1 raw_chars
; label REM
:REM &REM_BUF ; raw_ref REM_BUF
0000000000000003 0000000000000018 ; raw 0000000000000003 0000000000000018
# MSQ_END 0 def_string
# MSQ_START 0 def_string END end
; label END_BUF
# MSQ_START 1 raw_chars end
:END_BUF 0000000000000065 000000000000006e 0000000000000064 ; raw 0000000000000065 000000000000006e 0000000000000064
# MSQ_END 1 raw_chars
; label END
:END &END_BUF ; raw_ref END_BUF
0000000000000003 0000000000000018 ; raw 0000000000000003 0000000000000018
# MSQ_END 0 def_string

# MSQ_START 0 def_string VAR var
; label VAR_BUF
# MSQ_START 1 raw_chars var
:VAR_BUF 0000000000000076 0000000000000061 0000000000000072 ; raw 0000000000000076 0000000000000061 0000000000000072
# MSQ_END 1 raw_chars
; label VAR
:VAR &VAR_BUF ; raw_ref VAR_BUF
0000000000000003 0000000000000018 ; raw 0000000000000003 0000000000000018
# MSQ_END 0 def_string
# MSQ_START 0 def_string LABEL label
; label LABEL_BUF
# MSQ_START 1 raw_chars label
:LABEL_BUF 000000000000006c 0000000000000061 0000000000000062 0000000000000065 000000000000006c ; raw 000000000000006c 0000000000000061 0000000000000062 0000000000000065 000000000000006c
# MSQ_END 1 raw_chars
; label LABEL
:LABEL &LABEL_BUF ; raw_ref LABEL_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string
# MSQ_START 0 def_string ADDR addr
; label ADDR_BUF
# MSQ_START 1 raw_chars addr
:ADDR_BUF 0000000000000061 0000000000000064 0000000000000064 0000000000000072 ; raw 0000000000000061 0000000000000064 0000000000000064 0000000000000072
# MSQ_END 1 raw_chars
; label ADDR
:ADDR &ADDR_BUF ; raw_ref ADDR_BUF
0000000000000004 0000000000000020 ; raw 0000000000000004 0000000000000020
# MSQ_END 0 def_string

# MSQ_START 0 def_string ABSSQ abssq
; label ABSSQ_BUF
# MSQ_START 1 raw_chars abssq
:ABSSQ_BUF 0000000000000061 0000000000000062 0000000000000073 0000000000000073 0000000000000071 ; raw 0000000000000061 0000000000000062 0000000000000073 0000000000000073 0000000000000071
# MSQ_END 1 raw_chars
; label ABSSQ
:ABSSQ &ABSSQ_BUF ; raw_ref ABSSQ_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string
# MSQ_START 0 def_string RELSQ relsq
; label RELSQ_BUF
# MSQ_START 1 raw_chars relsq
:RELSQ_BUF 0000000000000072 0000000000000065 000000000000006c 0000000000000073 0000000000000071 ; raw 0000000000000072 0000000000000065 000000000000006c 0000000000000073 0000000000000071
# MSQ_END 1 raw_chars
; label RELSQ
:RELSQ &RELSQ_BUF ; raw_ref RELSQ_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string
# MSQ_START 0 def_string LBLSQ lblsq
; label LBLSQ_BUF
# MSQ_START 1 raw_chars lblsq
:LBLSQ_BUF 000000000000006c 0000000000000062 000000000000006c 0000000000000073 0000000000000071 ; raw 000000000000006c 0000000000000062 000000000000006c 0000000000000073 0000000000000071
# MSQ_END 1 raw_chars
; label LBLSQ
:LBLSQ &LBLSQ_BUF ; raw_ref LBLSQ_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string
# MSQ_START 0 def_string SUBADDR subaddr
; label SUBADDR_BUF
# MSQ_START 1 raw_chars subaddr
:SUBADDR_BUF 0000000000000073 0000000000000075 0000000000000062 0000000000000061 0000000000000064 0000000000000064 0000000000000072 ; raw 0000000000000073 0000000000000075 0000000000000062 0000000000000061 0000000000000064 0000000000000064 0000000000000072
# MSQ_END 1 raw_chars
; label SUBADDR
:SUBADDR &SUBADDR_BUF ; raw_ref SUBADDR_BUF
0000000000000007 0000000000000038 ; raw 0000000000000007 0000000000000038
# MSQ_END 0 def_string
# MSQ_START 0 def_string ZEROADDR zeroaddr
; label ZEROADDR_BUF
# MSQ_START 1 raw_chars zeroaddr
:ZEROADDR_BUF 000000000000007a 0000000000000065 0000000000000072 000000000000006f 0000000000000061 0000000000000064 0000000000000064 0000000000000072 ; raw 000000000000007a 0000000000000065 0000000000000072 000000000000006f 0000000000000061 0000000000000064 0000000000000064 0000000000000072
# MSQ_END 1 raw_chars
; label ZEROADDR
:ZEROADDR &ZEROADDR_BUF ; raw_ref ZEROADDR_BUF
0000000000000008 0000000000000040 ; raw 0000000000000008 0000000000000040
# MSQ_END 0 def_string
# MSQ_START 0 def_string RAW raw
; label RAW_BUF
# MSQ_START 1 raw_chars raw
:RAW_BUF 0000000000000072 0000000000000061 0000000000000077 ; raw 0000000000000072 0000000000000061 0000000000000077
# MSQ_END 1 raw_chars
; label RAW
:RAW &RAW_BUF ; raw_ref RAW_BUF
0000000000000003 0000000000000018 ; raw 0000000000000003 0000000000000018
# MSQ_END 0 def_string
# MSQ_START 0 def_string RAW_REF raw_ref
; label RAW_REF_BUF
# MSQ_START 1 raw_chars raw_ref
:RAW_REF_BUF 0000000000000072 0000000000000061 0000000000000077 000000000000005f 0000000000000072 0000000000000065 0000000000000066 ; raw 0000000000000072 0000000000000061 0000000000000077 000000000000005f 0000000000000072 0000000000000065 0000000000000066
# MSQ_END 1 raw_chars
; label RAW_REF
:RAW_REF &RAW_REF_BUF ; raw_ref RAW_REF_BUF
0000000000000007 0000000000000038 ; raw 0000000000000007 0000000000000038
# MSQ_END 0 def_string
# MSQ_START 0 def_string ADDRREF _addrRef_
; label ADDRREF_BUF
# MSQ_START 1 raw_chars _addrRef_
:ADDRREF_BUF 000000000000005f 0000000000000061 0000000000000064 0000000000000064 0000000000000072 0000000000000052 0000000000000065 0000000000000066 000000000000005f ; raw 000000000000005f 0000000000000061 0000000000000064 0000000000000064 0000000000000072 0000000000000052 0000000000000065 0000000000000066 000000000000005f
# MSQ_END 1 raw_chars
; label ADDRREF
:ADDRREF &ADDRREF_BUF ; raw_ref ADDRREF_BUF
0000000000000009 0000000000000048 ; raw 0000000000000009 0000000000000048
# MSQ_END 0 def_string

# MSQ_START 0 def_string ONE 1
; label ONE_BUF
# MSQ_START 1 raw_chars 1
:ONE_BUF 0000000000000031 ; raw 0000000000000031
# MSQ_END 1 raw_chars
; label ONE
:ONE &ONE_BUF ; raw_ref ONE_BUF
0000000000000001 0000000000000008 ; raw 0000000000000001 0000000000000008
# MSQ_END 0 def_string

# MSQ_START 0 def_string LINE_PART_1 inst: 
; label LINE_PART_1_BUF
# MSQ_START 1 raw_chars inst: 
:LINE_PART_1_BUF 0000000000000069 000000000000006e 0000000000000073 0000000000000074 000000000000003a 0000000000000020 ; raw 0000000000000069 000000000000006e 0000000000000073 0000000000000074 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label LINE_PART_1
:LINE_PART_1 &LINE_PART_1_BUF ; raw_ref LINE_PART_1_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string
# MSQ_START 0 def_string LINE_PART_2 tokens: 
; label LINE_PART_2_BUF
# MSQ_START 1 raw_chars tokens: 
:LINE_PART_2_BUF 0000000000000074 000000000000006f 000000000000006b 0000000000000065 000000000000006e 0000000000000073 000000000000003a 0000000000000020 ; raw 0000000000000074 000000000000006f 000000000000006b 0000000000000065 000000000000006e 0000000000000073 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label LINE_PART_2
:LINE_PART_2 &LINE_PART_2_BUF ; raw_ref LINE_PART_2_BUF
0000000000000008 0000000000000040 ; raw 0000000000000008 0000000000000040
# MSQ_END 0 def_string
# MSQ_START 0 def_string LINE_PART_3 comment: 
; label LINE_PART_3_BUF
# MSQ_START 1 raw_chars comment: 
:LINE_PART_3_BUF 0000000000000063 000000000000006f 000000000000006d 000000000000006d 0000000000000065 000000000000006e 0000000000000074 000000000000003a 0000000000000020 ; raw 0000000000000063 000000000000006f 000000000000006d 000000000000006d 0000000000000065 000000000000006e 0000000000000074 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label LINE_PART_3
:LINE_PART_3 &LINE_PART_3_BUF ; raw_ref LINE_PART_3_BUF
0000000000000009 0000000000000048 ; raw 0000000000000009 0000000000000048
# MSQ_END 0 def_string
# MSQ_START 0 def_string LINE_PART_4 offset: 
; label LINE_PART_4_BUF
# MSQ_START 1 raw_chars offset: 
:LINE_PART_4_BUF 000000000000006f 0000000000000066 0000000000000066 0000000000000073 0000000000000065 0000000000000074 000000000000003a 0000000000000020 ; raw 000000000000006f 0000000000000066 0000000000000066 0000000000000073 0000000000000065 0000000000000074 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label LINE_PART_4
:LINE_PART_4 &LINE_PART_4_BUF ; raw_ref LINE_PART_4_BUF
0000000000000008 0000000000000040 ; raw 0000000000000008 0000000000000040
# MSQ_END 0 def_string

# MSQ_START 0 def_string SYMBOL_PART_1 name: 
; label SYMBOL_PART_1_BUF
# MSQ_START 1 raw_chars name: 
:SYMBOL_PART_1_BUF 000000000000006e 0000000000000061 000000000000006d 0000000000000065 000000000000003a 0000000000000020 ; raw 000000000000006e 0000000000000061 000000000000006d 0000000000000065 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label SYMBOL_PART_1
:SYMBOL_PART_1 &SYMBOL_PART_1_BUF ; raw_ref SYMBOL_PART_1_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string
# MSQ_START 0 def_string SYMBOL_PART_2 addr: 
; label SYMBOL_PART_2_BUF
# MSQ_START 1 raw_chars addr: 
:SYMBOL_PART_2_BUF 0000000000000061 0000000000000064 0000000000000064 0000000000000072 000000000000003a 0000000000000020 ; raw 0000000000000061 0000000000000064 0000000000000064 0000000000000072 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label SYMBOL_PART_2
:SYMBOL_PART_2 &SYMBOL_PART_2_BUF ; raw_ref SYMBOL_PART_2_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string
# MSQ_START 0 def_string SYMBOL_PART_3 refCount: 
; label SYMBOL_PART_3_BUF
# MSQ_START 1 raw_chars refCount: 
:SYMBOL_PART_3_BUF 0000000000000072 0000000000000065 0000000000000066 0000000000000043 000000000000006f 0000000000000075 000000000000006e 0000000000000074 000000000000003a 0000000000000020 ; raw 0000000000000072 0000000000000065 0000000000000066 0000000000000043 000000000000006f 0000000000000075 000000000000006e 0000000000000074 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label SYMBOL_PART_3
:SYMBOL_PART_3 &SYMBOL_PART_3_BUF ; raw_ref SYMBOL_PART_3_BUF
000000000000000a 0000000000000050 ; raw 000000000000000a 0000000000000050
# MSQ_END 0 def_string
# MSQ_START 0 def_string SYMBOL_PART_4 val: 
; label SYMBOL_PART_4_BUF
# MSQ_START 1 raw_chars val: 
:SYMBOL_PART_4_BUF 0000000000000076 0000000000000061 000000000000006c 000000000000003a 0000000000000020 ; raw 0000000000000076 0000000000000061 000000000000006c 000000000000003a 0000000000000020
# MSQ_END 1 raw_chars
; label SYMBOL_PART_4
:SYMBOL_PART_4 &SYMBOL_PART_4_BUF ; raw_ref SYMBOL_PART_4_BUF
0000000000000005 0000000000000028 ; raw 0000000000000005 0000000000000028
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP3_MISSING_SYMBOL STEP3_MISSING_SYMBOL
; label STEP3_MISSING_SYMBOL_BUF
# MSQ_START 1 raw_chars STEP3_MISSING_SYMBOL
:STEP3_MISSING_SYMBOL_BUF 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000033 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c ; raw 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000033 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c
# MSQ_END 1 raw_chars
; label STEP3_MISSING_SYMBOL
:STEP3_MISSING_SYMBOL &STEP3_MISSING_SYMBOL_BUF ; raw_ref STEP3_MISSING_SYMBOL_BUF
0000000000000014 00000000000000a0 ; raw 0000000000000014 00000000000000a0
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP4_LABEL_MISSING_SYMBOL STEP4_LABEL_MISSING_SYMBOL
; label STEP4_LABEL_MISSING_SYMBOL_BUF
# MSQ_START 1 raw_chars STEP4_LABEL_MISSING_SYMBOL
:STEP4_LABEL_MISSING_SYMBOL_BUF 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000034 000000000000005f 000000000000004c 0000000000000041 0000000000000042 0000000000000045 000000000000004c 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c ; raw 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000034 000000000000005f 000000000000004c 0000000000000041 0000000000000042 0000000000000045 000000000000004c 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c
# MSQ_END 1 raw_chars
; label STEP4_LABEL_MISSING_SYMBOL
:STEP4_LABEL_MISSING_SYMBOL &STEP4_LABEL_MISSING_SYMBOL_BUF ; raw_ref STEP4_LABEL_MISSING_SYMBOL_BUF
000000000000001a 00000000000000d0 ; raw 000000000000001a 00000000000000d0
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP4_SQ_MISSING_SYMBOL STEP4_SQ_MISSING_SYMBOL
; label STEP4_SQ_MISSING_SYMBOL_BUF
# MSQ_START 1 raw_chars STEP4_SQ_MISSING_SYMBOL
:STEP4_SQ_MISSING_SYMBOL_BUF 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000034 000000000000005f 0000000000000053 0000000000000051 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c ; raw 0000000000000053 0000000000000054 0000000000000045 0000000000000050 0000000000000034 000000000000005f 0000000000000053 0000000000000051 000000000000005f 000000000000004d 0000000000000049 0000000000000053 0000000000000053 0000000000000049 000000000000004e 0000000000000047 000000000000005f 0000000000000053 0000000000000059 000000000000004d 0000000000000042 000000000000004f 000000000000004c
# MSQ_END 1 raw_chars
; label STEP4_SQ_MISSING_SYMBOL
:STEP4_SQ_MISSING_SYMBOL &STEP4_SQ_MISSING_SYMBOL_BUF ; raw_ref STEP4_SQ_MISSING_SYMBOL_BUF
0000000000000017 00000000000000b8 ; raw 0000000000000017 00000000000000b8
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP0_PRINT_PREFIX # Step 0: Processed 
; label STEP0_PRINT_PREFIX_BUF
# MSQ_START 1 raw_chars # Step 0: Processed 
:STEP0_PRINT_PREFIX_BUF 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000030 000000000000003a 0000000000000020 0000000000000050 0000000000000072 000000000000006f 0000000000000063 0000000000000065 0000000000000073 0000000000000073 0000000000000065 0000000000000064 0000000000000020 ; raw 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000030 000000000000003a 0000000000000020 0000000000000050 0000000000000072 000000000000006f 0000000000000063 0000000000000065 0000000000000073 0000000000000073 0000000000000065 0000000000000064 0000000000000020
# MSQ_END 1 raw_chars
; label STEP0_PRINT_PREFIX
:STEP0_PRINT_PREFIX &STEP0_PRINT_PREFIX_BUF ; raw_ref STEP0_PRINT_PREFIX_BUF
0000000000000014 00000000000000a0 ; raw 0000000000000014 00000000000000a0
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP0_PRINT_SUFFIX  lines
; label STEP0_PRINT_SUFFIX_BUF
# MSQ_START 1 raw_chars  lines
:STEP0_PRINT_SUFFIX_BUF 0000000000000020 000000000000006c 0000000000000069 000000000000006e 0000000000000065 0000000000000073 ; raw 0000000000000020 000000000000006c 0000000000000069 000000000000006e 0000000000000065 0000000000000073
# MSQ_END 1 raw_chars
; label STEP0_PRINT_SUFFIX
:STEP0_PRINT_SUFFIX &STEP0_PRINT_SUFFIX_BUF ; raw_ref STEP0_PRINT_SUFFIX_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP1_PRINT_PREFIX # Step 1: Found 
; label STEP1_PRINT_PREFIX_BUF
# MSQ_START 1 raw_chars # Step 1: Found 
:STEP1_PRINT_PREFIX_BUF 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000031 000000000000003a 0000000000000020 0000000000000046 000000000000006f 0000000000000075 000000000000006e 0000000000000064 0000000000000020 ; raw 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000031 000000000000003a 0000000000000020 0000000000000046 000000000000006f 0000000000000075 000000000000006e 0000000000000064 0000000000000020
# MSQ_END 1 raw_chars
; label STEP1_PRINT_PREFIX
:STEP1_PRINT_PREFIX &STEP1_PRINT_PREFIX_BUF ; raw_ref STEP1_PRINT_PREFIX_BUF
0000000000000010 0000000000000080 ; raw 0000000000000010 0000000000000080
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP1_PRINT_SUFFIX  symbols
; label STEP1_PRINT_SUFFIX_BUF
# MSQ_START 1 raw_chars  symbols
:STEP1_PRINT_SUFFIX_BUF 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073 ; raw 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073
# MSQ_END 1 raw_chars
; label STEP1_PRINT_SUFFIX
:STEP1_PRINT_SUFFIX &STEP1_PRINT_SUFFIX_BUF ; raw_ref STEP1_PRINT_SUFFIX_BUF
0000000000000008 0000000000000040 ; raw 0000000000000008 0000000000000040
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP2_PRINT_PREFIX # Step 2: Now with 
; label STEP2_PRINT_PREFIX_BUF
# MSQ_START 1 raw_chars # Step 2: Now with 
:STEP2_PRINT_PREFIX_BUF 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000032 000000000000003a 0000000000000020 000000000000004e 000000000000006f 0000000000000077 0000000000000020 0000000000000077 0000000000000069 0000000000000074 0000000000000068 0000000000000020 ; raw 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000032 000000000000003a 0000000000000020 000000000000004e 000000000000006f 0000000000000077 0000000000000020 0000000000000077 0000000000000069 0000000000000074 0000000000000068 0000000000000020
# MSQ_END 1 raw_chars
; label STEP2_PRINT_PREFIX
:STEP2_PRINT_PREFIX &STEP2_PRINT_PREFIX_BUF ; raw_ref STEP2_PRINT_PREFIX_BUF
0000000000000013 0000000000000098 ; raw 0000000000000013 0000000000000098
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP2_PRINT_MIDDLE  symbols and 
; label STEP2_PRINT_MIDDLE_BUF
# MSQ_START 1 raw_chars  symbols and 
:STEP2_PRINT_MIDDLE_BUF 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073 0000000000000020 0000000000000061 000000000000006e 0000000000000064 0000000000000020 ; raw 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073 0000000000000020 0000000000000061 000000000000006e 0000000000000064 0000000000000020
# MSQ_END 1 raw_chars
; label STEP2_PRINT_MIDDLE
:STEP2_PRINT_MIDDLE &STEP2_PRINT_MIDDLE_BUF ; raw_ref STEP2_PRINT_MIDDLE_BUF
000000000000000d 0000000000000068 ; raw 000000000000000d 0000000000000068
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP2_PRINT_SUFFIX  references
; label STEP2_PRINT_SUFFIX_BUF
# MSQ_START 1 raw_chars  references
:STEP2_PRINT_SUFFIX_BUF 0000000000000020 0000000000000072 0000000000000065 0000000000000066 0000000000000065 0000000000000072 0000000000000065 000000000000006e 0000000000000063 0000000000000065 0000000000000073 ; raw 0000000000000020 0000000000000072 0000000000000065 0000000000000066 0000000000000065 0000000000000072 0000000000000065 000000000000006e 0000000000000063 0000000000000065 0000000000000073
# MSQ_END 1 raw_chars
; label STEP2_PRINT_SUFFIX
:STEP2_PRINT_SUFFIX &STEP2_PRINT_SUFFIX_BUF ; raw_ref STEP2_PRINT_SUFFIX_BUF
000000000000000b 0000000000000058 ; raw 000000000000000b 0000000000000058
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP3_PRINT_PREFIX # Step 3: Now with 
; label STEP3_PRINT_PREFIX_BUF
# MSQ_START 1 raw_chars # Step 3: Now with 
:STEP3_PRINT_PREFIX_BUF 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000033 000000000000003a 0000000000000020 000000000000004e 000000000000006f 0000000000000077 0000000000000020 0000000000000077 0000000000000069 0000000000000074 0000000000000068 0000000000000020 ; raw 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000033 000000000000003a 0000000000000020 000000000000004e 000000000000006f 0000000000000077 0000000000000020 0000000000000077 0000000000000069 0000000000000074 0000000000000068 0000000000000020
# MSQ_END 1 raw_chars
; label STEP3_PRINT_PREFIX
:STEP3_PRINT_PREFIX &STEP3_PRINT_PREFIX_BUF ; raw_ref STEP3_PRINT_PREFIX_BUF
0000000000000013 0000000000000098 ; raw 0000000000000013 0000000000000098
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP3_PRINT_MIDDLE  symbols and 
; label STEP3_PRINT_MIDDLE_BUF
# MSQ_START 1 raw_chars  symbols and 
:STEP3_PRINT_MIDDLE_BUF 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073 0000000000000020 0000000000000061 000000000000006e 0000000000000064 0000000000000020 ; raw 0000000000000020 0000000000000073 0000000000000079 000000000000006d 0000000000000062 000000000000006f 000000000000006c 0000000000000073 0000000000000020 0000000000000061 000000000000006e 0000000000000064 0000000000000020
# MSQ_END 1 raw_chars
; label STEP3_PRINT_MIDDLE
:STEP3_PRINT_MIDDLE &STEP3_PRINT_MIDDLE_BUF ; raw_ref STEP3_PRINT_MIDDLE_BUF
000000000000000d 0000000000000068 ; raw 000000000000000d 0000000000000068
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP3_PRINT_SUFFIX  lines
; label STEP3_PRINT_SUFFIX_BUF
# MSQ_START 1 raw_chars  lines
:STEP3_PRINT_SUFFIX_BUF 0000000000000020 000000000000006c 0000000000000069 000000000000006e 0000000000000065 0000000000000073 ; raw 0000000000000020 000000000000006c 0000000000000069 000000000000006e 0000000000000065 0000000000000073
# MSQ_END 1 raw_chars
; label STEP3_PRINT_SUFFIX
:STEP3_PRINT_SUFFIX &STEP3_PRINT_SUFFIX_BUF ; raw_ref STEP3_PRINT_SUFFIX_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string

# MSQ_START 0 def_string STEP4_PRINT_PREFIX # Step 4: Current size is 
; label STEP4_PRINT_PREFIX_BUF
# MSQ_START 1 raw_chars # Step 4: Current size is 
:STEP4_PRINT_PREFIX_BUF 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000034 000000000000003a 0000000000000020 0000000000000043 0000000000000075 0000000000000072 0000000000000072 0000000000000065 000000000000006e 0000000000000074 0000000000000020 0000000000000073 0000000000000069 000000000000007a 0000000000000065 0000000000000020 0000000000000069 0000000000000073 0000000000000020 ; raw 0000000000000023 0000000000000020 0000000000000053 0000000000000074 0000000000000065 0000000000000070 0000000000000020 0000000000000034 000000000000003a 0000000000000020 0000000000000043 0000000000000075 0000000000000072 0000000000000072 0000000000000065 000000000000006e 0000000000000074 0000000000000020 0000000000000073 0000000000000069 000000000000007a 0000000000000065 0000000000000020 0000000000000069 0000000000000073 0000000000000020
# MSQ_END 1 raw_chars
; label STEP4_PRINT_PREFIX
:STEP4_PRINT_PREFIX &STEP4_PRINT_PREFIX_BUF ; raw_ref STEP4_PRINT_PREFIX_BUF
000000000000001a 00000000000000d0 ; raw 000000000000001a 00000000000000d0
# MSQ_END 0 def_string
# MSQ_START 0 def_string STEP4_PRINT_SUFFIX  bytes
; label STEP4_PRINT_SUFFIX_BUF
# MSQ_START 1 raw_chars  bytes
:STEP4_PRINT_SUFFIX_BUF 0000000000000020 0000000000000062 0000000000000079 0000000000000074 0000000000000065 0000000000000073 ; raw 0000000000000020 0000000000000062 0000000000000079 0000000000000074 0000000000000065 0000000000000073
# MSQ_END 1 raw_chars
; label STEP4_PRINT_SUFFIX
:STEP4_PRINT_SUFFIX &STEP4_PRINT_SUFFIX_BUF ; raw_ref STEP4_PRINT_SUFFIX_BUF
0000000000000006 0000000000000030 ; raw 0000000000000006 0000000000000030
# MSQ_END 0 def_string

# WA for `assert sym.val is not None` errors
# MSQ_START 0 inc inst_step3 0
# MSQ_START 1 dec inst_step3 0
:inst_step3_addrRef_0 &inst_step3 &CONST_0 ?+8 ; relsq inst_step3 CONST_0 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 inc sym1_step3 0
# MSQ_START 1 dec sym1_step3 0
:sym1_step3_addrRef_0 &sym1_step3 &CONST_0 ?+8 ; relsq sym1_step3 CONST_0 1
# MSQ_END 1 dec
# MSQ_END 0 inc
# MSQ_START 0 inc curTokens_step3 0
# MSQ_START 1 dec curTokens_step3 0
:curTokens_step3_addrRef_0 &curTokens_step3 &CONST_0 ?+8 ; relsq curTokens_step3 CONST_0 1
# MSQ_END 1 dec
# MSQ_END 0 inc
&ONE_addrRef_0 &ZERO ?+8 ; relsq ONE_addrRef_0 ZERO 1
# MSQ_START 0 inc ONE 0
# MSQ_START 1 dec ONE 0
:ONE_addrRef_0 &ONE &CONST_0 ?+8 ; relsq ONE CONST_0 1
# MSQ_END 1 dec
# MSQ_END 0 inc


; var CONST_-1 -1
; var CONST_30 30
; var CONST_-8 -8
; var CONST_8 8
; var CONST_0 0
; var CONST_1 1
; var CONST_-30 -30
; var CONST_50 50
; var CONST_10 10
; var CONST_20 20
; var CONST_D d
; var CONST_A a
; var CONST_-18 -18
; var CONST_300 300
; var CONST_18 18
; var CONST_1000 1000
; var CONST_400 400
; var CONST_-10 -10
; var CONST_-20 -20
; var CONST_A0 a0
; var CONST_-2D -2d
; var CONST_98 98
; var CONST_-58 -58
; var CONST_2C 2c
; var CONST_2F 2f
; var CONST_7 7
; var CONST_9 9
; var CONST_6 6
; var CONST_1A 1a
; var CONST_28 28
; var CONST_58 58
; var CONST_-40 -40
; var CONST_48 48
; var CONST_-3 -3
; var CONST_-50 -50
; var CONST_2 2
; var CONST_-38 -38
; var CONST_-F -f
; var CONST_80 80
; var CONST_-2C -2c

:tmp 0000000000000000 ; raw 0000000000000000 # tmp
:tmp2 0000000000000000 ; raw 0000000000000000 # tmp2
:tmp3 0000000000000000 ; raw 0000000000000000 # tmp3
:FREE_START 0000000001000000 ; raw 0000000001000000 # FREE_START
:LINE_FEED 000000000000000a ; raw 000000000000000a # LINE_FEED
:SPACE 0000000000000020 ; raw 0000000000000020 # SPACE
:SYM_VAL_PLACEHOLDER 130b197121c2627d ; raw 130b197121c2627d # SYM_VAL_PLACEHOLDER
:LF 000000000000000a ; raw 000000000000000a # LF
:hex_version 0000000000000000 ; raw 0000000000000000 # hex_version
:puts_0_len 0000000000000000 ; raw 0000000000000000 # puts_0_len
:linesPass1Begin 0000000000100000 ; raw 0000000000100000 # linesPass1Begin
:linesPass1Len 0000000000000000 ; raw 0000000000000000 # linesPass1Len
:inp_token_allow_empty_0_len 0000000000000000 ; raw 0000000000000000 # inp_token_allow_empty_0_len
:strcmp_const_0_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_0_len
:strcmp_const_1_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_1_len
:strcmp_const_2_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_2_len
:inp_line_0_len 0000000000000000 ; raw 0000000000000000 # inp_line_0_len
:str_split_0_charsLeft 0000000000000000 ; raw 0000000000000000 # str_split_0_charsLeft
:str_split_0_partCount 0000000000000000 ; raw 0000000000000000 # str_split_0_partCount
:str_split_0_partLen 0000000000000000 ; raw 0000000000000000 # str_split_0_partLen
:str_split_0_curChar 0000000000000000 ; raw 0000000000000000 # str_split_0_curChar
:strcpy_0_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_0_strLen
:inp_line_1_len 0000000000000000 ; raw 0000000000000000 # inp_line_1_len
:puts_1_len 0000000000000000 ; raw 0000000000000000 # puts_1_len
:itoa_0_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_0_noDigits
:itoa_0_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_0_isNeg
:itoa_0_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_0_digitVal
:puts_2_len 0000000000000000 ; raw 0000000000000000 # puts_2_len
:puts_3_len 0000000000000000 ; raw 0000000000000000 # puts_3_len
:symbolsBegin 0000000000400000 ; raw 0000000000400000 # symbolsBegin
:symbolsLen 0000000000000000 ; raw 0000000000000000 # symbolsLen
:linesLeft 0000000000000000 ; raw 0000000000000000 # linesLeft
:strcmp_const_3_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_3_len
:strcmp_const_4_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_4_len
:strcmp_const_5_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_5_len
:strcpy_1_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_1_strLen
:strcmp_const_6_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_6_len
:from_hex_0_strLen 0000000000000000 ; raw 0000000000000000 # from_hex_0_strLen
:from_hex_0_isNeg 0000000000000000 ; raw 0000000000000000 # from_hex_0_isNeg
:from_hex_0_val 0000000000000000 ; raw 0000000000000000 # from_hex_0_val
:strcmp_const_7_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_7_len
:from_hex_1_strLen 0000000000000000 ; raw 0000000000000000 # from_hex_1_strLen
:from_hex_1_isNeg 0000000000000000 ; raw 0000000000000000 # from_hex_1_isNeg
:from_hex_1_val 0000000000000000 ; raw 0000000000000000 # from_hex_1_val
:puts_4_len 0000000000000000 ; raw 0000000000000000 # puts_4_len
:itoa_1_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_1_noDigits
:itoa_1_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_1_isNeg
:itoa_1_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_1_digitVal
:puts_5_len 0000000000000000 ; raw 0000000000000000 # puts_5_len
:puts_6_len 0000000000000000 ; raw 0000000000000000 # puts_6_len
:totalRefCount 0000000000000000 ; raw 0000000000000000 # totalRefCount
:find_item_in_buf_with_str_key_0_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_0_elmsLeft
:strcmp_const_8_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_8_len
:memcpy_0_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_0_numLeft
:strcmp_const_9_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_9_len
:strcmp_const_10_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_10_len
:strcmp_const_11_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_11_len
:strcmp_const_12_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_12_len
:strcmp_const_13_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_13_len
:strcmp_const_14_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_14_len
:tokensCount 0000000000000000 ; raw 0000000000000000 # tokensCount
:puts_7_len 0000000000000000 ; raw 0000000000000000 # puts_7_len
:itoa_2_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_2_noDigits
:itoa_2_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_2_isNeg
:itoa_2_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_2_digitVal
:puts_8_len 0000000000000000 ; raw 0000000000000000 # puts_8_len
:puts_9_len 0000000000000000 ; raw 0000000000000000 # puts_9_len
:itoa_3_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_3_noDigits
:itoa_3_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_3_isNeg
:itoa_3_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_3_digitVal
:puts_10_len 0000000000000000 ; raw 0000000000000000 # puts_10_len
:puts_11_len 0000000000000000 ; raw 0000000000000000 # puts_11_len
:addrSymbolsBegin 0000000000600000 ; raw 0000000000600000 # addrSymbolsBegin
:addrSymbolsLen 0000000000000000 ; raw 0000000000000000 # addrSymbolsLen
:linesPass2Begin 0000000000700000 ; raw 0000000000700000 # linesPass2Begin
:linesPass2Len 0000000000000000 ; raw 0000000000000000 # linesPass2Len
:strcmp_const_15_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_15_len
:strcmp_const_16_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_16_len
:memcpy_1_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_1_numLeft
:find_item_in_buf_with_str_key_1_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_1_elmsLeft
:strcmp_const_17_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_17_len
:memcpy_2_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_2_numLeft
:strcat_0_aLength 0000000000000000 ; raw 0000000000000000 # strcat_0_aLength
:strcat_0_retLength 0000000000000000 ; raw 0000000000000000 # strcat_0_retLength
:strcpy_2_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_2_strLen
:strcpy_3_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_3_strLen
:refCount_step3 0000000000000000 ; raw 0000000000000000 # refCount_step3
:nextId_step3 0000000000000000 ; raw 0000000000000000 # nextId_step3
:find_item_in_buf_with_str_key_2_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_2_elmsLeft
:strcmp_const_18_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_18_len
:puts_12_len 0000000000000000 ; raw 0000000000000000 # puts_12_len
:puts_13_len 0000000000000000 ; raw 0000000000000000 # puts_13_len
:itoa_4_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_4_noDigits
:itoa_4_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_4_isNeg
:itoa_4_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_4_digitVal
:strcat_1_aLength 0000000000000000 ; raw 0000000000000000 # strcat_1_aLength
:strcat_1_retLength 0000000000000000 ; raw 0000000000000000 # strcat_1_retLength
:strcpy_4_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_4_strLen
:strcpy_5_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_5_strLen
:memcpy_3_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_3_numLeft
:memcpy_4_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_4_numLeft
:strcmp_const_19_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_19_len
:memcpy_5_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_5_numLeft
:memcpy_6_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_6_numLeft
:memcpy_7_numLeft 0000000000000000 ; raw 0000000000000000 # memcpy_7_numLeft
:puts_14_len 0000000000000000 ; raw 0000000000000000 # puts_14_len
:itoa_5_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_5_noDigits
:itoa_5_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_5_isNeg
:itoa_5_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_5_digitVal
:puts_15_len 0000000000000000 ; raw 0000000000000000 # puts_15_len
:puts_16_len 0000000000000000 ; raw 0000000000000000 # puts_16_len
:itoa_6_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_6_noDigits
:itoa_6_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_6_isNeg
:itoa_6_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_6_digitVal
:puts_17_len 0000000000000000 ; raw 0000000000000000 # puts_17_len
:puts_18_len 0000000000000000 ; raw 0000000000000000 # puts_18_len
:size_step4 0000000000000000 ; raw 0000000000000000 # size_step4
:strcmp_const_20_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_20_len
:strcmp_const_21_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_21_len
:strcmp_const_22_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_22_len
:strcmp_const_23_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_23_len
:strcmp_const_24_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_24_len
:strcmp_const_25_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_25_len
:sq_i_step4 fffffffffffffffe ; raw fffffffffffffffe # sq_i_step4
:strcmp_const_26_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_26_len
:find_item_in_buf_with_str_key_3_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_3_elmsLeft
:strcmp_const_27_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_27_len
:strcat_2_aLength 0000000000000000 ; raw 0000000000000000 # strcat_2_aLength
:strcat_2_retLength 0000000000000000 ; raw 0000000000000000 # strcat_2_retLength
:strcpy_6_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_6_strLen
:strcpy_7_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_7_strLen
:itoa_7_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_7_noDigits
:itoa_7_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_7_isNeg
:itoa_7_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_7_digitVal
:strcat_3_aLength 0000000000000000 ; raw 0000000000000000 # strcat_3_aLength
:strcat_3_retLength 0000000000000000 ; raw 0000000000000000 # strcat_3_retLength
:strcpy_8_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_8_strLen
:strcpy_9_strLen 0000000000000000 ; raw 0000000000000000 # strcpy_9_strLen
:find_item_in_buf_with_str_key_4_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_4_elmsLeft
:strcmp_const_28_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_28_len
:puts_19_len 0000000000000000 ; raw 0000000000000000 # puts_19_len
:puts_20_len 0000000000000000 ; raw 0000000000000000 # puts_20_len
:find_item_in_buf_with_str_key_5_elmsLeft 0000000000000000 ; raw 0000000000000000 # find_item_in_buf_with_str_key_5_elmsLeft
:strcmp_const_29_len 0000000000000000 ; raw 0000000000000000 # strcmp_const_29_len
:puts_21_len 0000000000000000 ; raw 0000000000000000 # puts_21_len
:puts_22_len 0000000000000000 ; raw 0000000000000000 # puts_22_len
:puts_23_len 0000000000000000 ; raw 0000000000000000 # puts_23_len
:itoa_8_noDigits 0000000000000000 ; raw 0000000000000000 # itoa_8_noDigits
:itoa_8_isNeg 0000000000000000 ; raw 0000000000000000 # itoa_8_isNeg
:itoa_8_digitVal 0000000000000000 ; raw 0000000000000000 # itoa_8_digitVal
:puts_24_len 0000000000000000 ; raw 0000000000000000 # puts_24_len
:puts_25_len 0000000000000000 ; raw 0000000000000000 # puts_25_len
:symbolsLeft 0000000000000000 ; raw 0000000000000000 # symbolsLeft
:puts_26_len 0000000000000000 ; raw 0000000000000000 # puts_26_len
:puts_27_len 0000000000000000 ; raw 0000000000000000 # puts_27_len
:puts_28_len 0000000000000000 ; raw 0000000000000000 # puts_28_len
:print_qword_0_isNeg 0000000000000000 ; raw 0000000000000000 # print_qword_0_isNeg
:print_qword_0_nibbleVal 0000000000000000 ; raw 0000000000000000 # print_qword_0_nibbleVal
:puts_29_len 0000000000000000 ; raw 0000000000000000 # puts_29_len
:print_qword_1_isNeg 0000000000000000 ; raw 0000000000000000 # print_qword_1_isNeg
:print_qword_1_nibbleVal 0000000000000000 ; raw 0000000000000000 # print_qword_1_nibbleVal
:puts_30_len 0000000000000000 ; raw 0000000000000000 # puts_30_len
:print_qword_2_isNeg 0000000000000000 ; raw 0000000000000000 # print_qword_2_isNeg
:print_qword_2_nibbleVal 0000000000000000 ; raw 0000000000000000 # print_qword_2_nibbleVal
:linesLeft_dbg 0000000000000000 ; raw 0000000000000000 # linesLeft_dbg
:puts_31_len 0000000000000000 ; raw 0000000000000000 # puts_31_len
:puts_32_len 0000000000000000 ; raw 0000000000000000 # puts_32_len
:puts_33_len 0000000000000000 ; raw 0000000000000000 # puts_33_len
:tokenCount 0000000000000000 ; raw 0000000000000000 # tokenCount
:puts_34_len 0000000000000000 ; raw 0000000000000000 # puts_34_len
:puts_35_len 0000000000000000 ; raw 0000000000000000 # puts_35_len
:puts_36_len 0000000000000000 ; raw 0000000000000000 # puts_36_len
:puts_37_len 0000000000000000 ; raw 0000000000000000 # puts_37_len
:print_qword_3_isNeg 0000000000000000 ; raw 0000000000000000 # print_qword_3_isNeg
:print_qword_3_nibbleVal 0000000000000000 ; raw 0000000000000000 # print_qword_3_nibbleVal
:CONST_-1 ffffffffffffffff ; raw ffffffffffffffff # CONST_-1
:CONST_30 0000000000000030 ; raw 0000000000000030 # CONST_30
:CONST_-8 fffffffffffffff8 ; raw fffffffffffffff8 # CONST_-8
:CONST_8 0000000000000008 ; raw 0000000000000008 # CONST_8
:CONST_0 0000000000000000 ; raw 0000000000000000 # CONST_0
:CONST_1 0000000000000001 ; raw 0000000000000001 # CONST_1
:CONST_-30 ffffffffffffffd0 ; raw ffffffffffffffd0 # CONST_-30
:CONST_50 0000000000000050 ; raw 0000000000000050 # CONST_50
:CONST_10 0000000000000010 ; raw 0000000000000010 # CONST_10
:CONST_20 0000000000000020 ; raw 0000000000000020 # CONST_20
:CONST_D 000000000000000d ; raw 000000000000000d # CONST_D
:CONST_A 000000000000000a ; raw 000000000000000a # CONST_A
:CONST_-18 ffffffffffffffe8 ; raw ffffffffffffffe8 # CONST_-18
:CONST_300 0000000000000300 ; raw 0000000000000300 # CONST_300
:CONST_18 0000000000000018 ; raw 0000000000000018 # CONST_18
:CONST_1000 0000000000001000 ; raw 0000000000001000 # CONST_1000
:CONST_400 0000000000000400 ; raw 0000000000000400 # CONST_400
:CONST_-10 fffffffffffffff0 ; raw fffffffffffffff0 # CONST_-10
:CONST_-20 ffffffffffffffe0 ; raw ffffffffffffffe0 # CONST_-20
:CONST_A0 00000000000000a0 ; raw 00000000000000a0 # CONST_A0
:CONST_-2D ffffffffffffffd3 ; raw ffffffffffffffd3 # CONST_-2D
:CONST_98 0000000000000098 ; raw 0000000000000098 # CONST_98
:CONST_-58 ffffffffffffffa8 ; raw ffffffffffffffa8 # CONST_-58
:CONST_2C 000000000000002c ; raw 000000000000002c # CONST_2C
:CONST_2F 000000000000002f ; raw 000000000000002f # CONST_2F
:CONST_7 0000000000000007 ; raw 0000000000000007 # CONST_7
:CONST_9 0000000000000009 ; raw 0000000000000009 # CONST_9
:CONST_6 0000000000000006 ; raw 0000000000000006 # CONST_6
:CONST_1A 000000000000001a ; raw 000000000000001a # CONST_1A
:CONST_28 0000000000000028 ; raw 0000000000000028 # CONST_28
:CONST_58 0000000000000058 ; raw 0000000000000058 # CONST_58
:CONST_-40 ffffffffffffffc0 ; raw ffffffffffffffc0 # CONST_-40
:CONST_48 0000000000000048 ; raw 0000000000000048 # CONST_48
:CONST_-3 fffffffffffffffd ; raw fffffffffffffffd # CONST_-3
:CONST_-50 ffffffffffffffb0 ; raw ffffffffffffffb0 # CONST_-50
:CONST_2 0000000000000002 ; raw 0000000000000002 # CONST_2
:CONST_-38 ffffffffffffffc8 ; raw ffffffffffffffc8 # CONST_-38
:CONST_-F fffffffffffffff1 ; raw fffffffffffffff1 # CONST_-F
:CONST_80 0000000000000080 ; raw 0000000000000080 # CONST_80
:CONST_-2C ffffffffffffffd4 ; raw ffffffffffffffd4 # CONST_-2C
~
