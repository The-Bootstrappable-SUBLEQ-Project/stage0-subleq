rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Constants
addr ZERO 0
var tmp 0
var tmp2 0
var tmp3 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
addr CPU_CONTROL_START 13EE0000
var FREE_START 1000000
var LINE_FEED a
var SPACE 20
rem Generated from https://www.random.org/colors/hex
rem F to whoever is unlucky enough to use this number in their lsq, which is about a 1 / 3.4e38 chance
var SYM_VAL_PLACEHOLDER 130b197121c2627e
lblsq ZERO ZERO EP

label EP
var LF a

var hex_version 0

rem Start getchar tmp tmp2
rem set tmp2 1
relsq tmp2 tmp2 1
relsq tmp2 CONST_-1 1
relsq tmp2 SERIAL_IN 2
rem reljmp -1
relsq ZERO ZERO -1
rem zero SERIAL_IN
relsq SERIAL_IN SERIAL_IN 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End getchar

relsq tmp CONST_30 1

rem Start mov hex_version tmp tmp2
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem movneg hex_version tmp2
relsq hex_version hex_version 1
relsq hex_version tmp2 1
rem End mov


rem Print the header

rem Start puts HEX_HEADER tmp tmp2
addr puts_0_str 0

rem Start setaddr puts_0_str HEX_HEADER tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_0_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp HEX_HEADER 1
subaddr puts_0_str tmp
rem End setaddr

var puts_0_len 0 
rem incaddr HEX_HEADER 8
subaddr HEX_HEADER CONST_-8

rem Start mov puts_0_len HEX_HEADER tmp
relsq tmp tmp 1
relsq tmp HEX_HEADER 1
relsq puts_0_len puts_0_len 1
relsq puts_0_len tmp 1
rem End mov

rem decaddr HEX_HEADER 8
subaddr HEX_HEADER CONST_8
label PUTS_0_LOOP
rem decleq puts_0_len 0 PUTS_0_END
lblsq puts_0_len CONST_0 PUTS_0_END
rem dec puts_0_len 1
relsq puts_0_len CONST_1 1

rem Start putchar puts_0_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_0_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_0_str 8
subaddr puts_0_str CONST_-8
rem lbljmp PUTS_0_LOOP
lblsq ZERO ZERO PUTS_0_LOOP
label PUTS_0_END
rem End puts

relsq hex_version CONST_-30 1

rem Start putchar hex_version tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp hex_version
relsq tmp tmp 1
relsq tmp hex_version 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

relsq hex_version CONST_30 1

rem Start putchar LF tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp LF
relsq tmp tmp 1
relsq tmp LF 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar


rem 0. Parse file into lines
rem A Line is made of four components, adding to a total of 0x58 bytes:
rem 0x0 String containing the instruction
rem 0x18 Array containing the tokens
rem 0x38 String containing the comment
rem 0x50 The offset of the line in the assembled program
var linesPass1Begin 100000
addr linesPass1Cur 100000
var linesPass1Len 0

label STEP0_INPUT_INST

rem Start alloc_str linesPass1Cur 100 tmp

rem Start malloc_const linesPass1Cur 100 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur linesPass1Cur 1
relsq linesPass1Cur tmp 1
relsq tmp tmp 1
relsq tmp CONST_100 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur 8
subaddr linesPass1Cur CONST_-8
rem zero linesPass1Cur
relsq linesPass1Cur linesPass1Cur 1
rem incaddr linesPass1Cur 8
subaddr linesPass1Cur CONST_-8

rem Start mov linesPass1Cur CONST_100 tmp
relsq tmp tmp 1
relsq tmp CONST_100 1
relsq linesPass1Cur linesPass1Cur 1
relsq linesPass1Cur tmp 1
rem End mov

rem decaddr linesPass1Cur 10
subaddr linesPass1Cur CONST_10
rem End alloc_str


rem Start inp_token_allow_empty linesPass1Cur tmp tmp2
addr inp_token_allow_empty_0_str 0

rem Start setaddr inp_token_allow_empty_0_str linesPass1Cur tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_allow_empty_0_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur 1
subaddr inp_token_allow_empty_0_str tmp
rem End setaddr

var inp_token_allow_empty_0_len 0
rem zero inp_token_allow_empty_0_len
relsq inp_token_allow_empty_0_len inp_token_allow_empty_0_len 1
label INP_TOKEN_ALLOW_EMPTY_0_LOOP

rem Start getchar inp_token_allow_empty_0_str tmp
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
relsq ZERO ZERO -1
relsq SERIAL_IN SERIAL_IN 1
relsq inp_token_allow_empty_0_str inp_token_allow_empty_0_str 1
relsq inp_token_allow_empty_0_str tmp 1
rem End getchar


rem Start jeq_const inp_token_allow_empty_0_str 20 INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_allow_empty_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_20 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_0_END
lblsq tmp CONST_-1 JZ_0_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
label JZ_0_REVERT_A
relsq tmp CONST_1 1
label JZ_0_END
rem End jeq_const


rem Start jeq_const inp_token_allow_empty_0_str d INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_allow_empty_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_D 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_1_END
lblsq tmp CONST_-1 JZ_1_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
label JZ_1_REVERT_A
relsq tmp CONST_1 1
label JZ_1_END
rem End jeq_const


rem Start jeq_const inp_token_allow_empty_0_str a INP_TOKEN_ALLOW_EMPTY_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_token_allow_empty_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_A 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_2_END
lblsq tmp CONST_-1 JZ_2_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_TERM
label JZ_2_REVERT_A
relsq tmp CONST_1 1
label JZ_2_END
rem End jeq_const

rem inc inp_token_allow_empty_0_len 1
relsq inp_token_allow_empty_0_len CONST_-1 1
rem incaddr inp_token_allow_empty_0_str 8
subaddr inp_token_allow_empty_0_str CONST_-8
rem lbljmp INP_TOKEN_ALLOW_EMPTY_0_LOOP
lblsq ZERO ZERO INP_TOKEN_ALLOW_EMPTY_0_LOOP
label INP_TOKEN_ALLOW_EMPTY_0_TERM
rem incaddr linesPass1Cur 8
subaddr linesPass1Cur CONST_-8

rem Start mov linesPass1Cur inp_token_allow_empty_0_len tmp
relsq tmp tmp 1
relsq tmp inp_token_allow_empty_0_len 1
relsq linesPass1Cur linesPass1Cur 1
relsq linesPass1Cur tmp 1
rem End mov

rem decaddr linesPass1Cur 8
subaddr linesPass1Cur CONST_8
rem End inp_token_allow_empty

relsq linesPass1Len CONST_-1 1


rem Start strcmp_const linesPass1Cur EMPTY_STRING STEP0_HANDLE_NEWLINE tmp tmp2
addr strcmp_const_0_a 0
rem copyaddr strcmp_const_0_a linesPass1Cur tmp tmp2

rem Start setaddr strcmp_const_0_a linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr strcmp_const_0_a tmp
rem End setaddr

rem incaddr strcmp_const_0_a 8
subaddr strcmp_const_0_a CONST_-8
rem incaddr EMPTY_STRING 8
subaddr EMPTY_STRING CONST_-8

rem Start jne strcmp_const_0_a EMPTY_STRING STRCMP_CONST_0_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_0_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp EMPTY_STRING
relsq tmp EMPTY_STRING 1

rem Start jnz tmp STRCMP_CONST_0_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_0_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_0_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_0_END
label JNZ_0_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_0_REVERT_ADDR
label JNZ_0_END
rem End jnz

rem End jne

var strcmp_const_0_len 0

rem Start mov strcmp_const_0_len strcmp_const_0_a tmp
rem movneg tmp strcmp_const_0_a
relsq tmp tmp 1
relsq tmp strcmp_const_0_a 1
rem movneg strcmp_const_0_len tmp
relsq strcmp_const_0_len strcmp_const_0_len 1
relsq strcmp_const_0_len tmp 1
rem End mov

rem decaddr strcmp_const_0_a 8
subaddr strcmp_const_0_a CONST_8
rem decaddr EMPTY_STRING 8
subaddr EMPTY_STRING CONST_8
addr strcmp_const_0_aStr 0
addr strcmp_const_0_bStr 0

rem Start setaddr strcmp_const_0_aStr strcmp_const_0_a tmp tmp2

rem Start mov tmp strcmp_const_0_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_0_a
relsq tmp strcmp_const_0_a 1
subaddr strcmp_const_0_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_0_bStr EMPTY_STRING tmp tmp2

rem Start mov tmp strcmp_const_0_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp EMPTY_STRING
relsq tmp EMPTY_STRING 1
subaddr strcmp_const_0_bStr tmp
rem End setaddr

label STRCMP_CONST_0_LOOP
rem decleq strcmp_const_0_len 0 STEP0_HANDLE_NEWLINE
lblsq strcmp_const_0_len CONST_0 STEP0_HANDLE_NEWLINE
rem dec strcmp_const_0_len 1
relsq strcmp_const_0_len CONST_1 1

rem Start jne strcmp_const_0_aStr strcmp_const_0_bStr STRCMP_CONST_0_END tmp tmp2

rem Start mov tmp strcmp_const_0_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_0_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_0_bStr
relsq tmp strcmp_const_0_bStr 1

rem Start jnz tmp STRCMP_CONST_0_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_0_END
lblsq tmp CONST_-1 JNZ_1_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_1_END
label JNZ_1_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_0_END
label JNZ_1_END
rem End jnz

rem End jne

rem incaddr strcmp_const_0_aStr 8
subaddr strcmp_const_0_aStr CONST_-8
rem incaddr strcmp_const_0_bStr 8
subaddr strcmp_const_0_bStr CONST_-8
rem lbljmp STRCMP_CONST_0_LOOP
lblsq ZERO ZERO STRCMP_CONST_0_LOOP
label STRCMP_CONST_0_REVERT_ADDR
rem decaddr EMPTY_STRING 8
subaddr EMPTY_STRING CONST_8
label STRCMP_CONST_0_END
rem End strcmp_const


rem Start strcmp_const linesPass1Cur REM STEP0_HANDLE_REM tmp tmp2
addr strcmp_const_1_a 0
rem copyaddr strcmp_const_1_a linesPass1Cur tmp tmp2

rem Start setaddr strcmp_const_1_a linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_1_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr strcmp_const_1_a tmp
rem End setaddr

rem incaddr strcmp_const_1_a 8
subaddr strcmp_const_1_a CONST_-8
rem incaddr REM 8
subaddr REM CONST_-8

rem Start jne strcmp_const_1_a REM STRCMP_CONST_1_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_1_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_1_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp REM
relsq tmp REM 1

rem Start jnz tmp STRCMP_CONST_1_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_1_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_2_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_2_END
label JNZ_2_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_1_REVERT_ADDR
label JNZ_2_END
rem End jnz

rem End jne

var strcmp_const_1_len 0

rem Start mov strcmp_const_1_len strcmp_const_1_a tmp
rem movneg tmp strcmp_const_1_a
relsq tmp tmp 1
relsq tmp strcmp_const_1_a 1
rem movneg strcmp_const_1_len tmp
relsq strcmp_const_1_len strcmp_const_1_len 1
relsq strcmp_const_1_len tmp 1
rem End mov

rem decaddr strcmp_const_1_a 8
subaddr strcmp_const_1_a CONST_8
rem decaddr REM 8
subaddr REM CONST_8
addr strcmp_const_1_aStr 0
addr strcmp_const_1_bStr 0

rem Start setaddr strcmp_const_1_aStr strcmp_const_1_a tmp tmp2

rem Start mov tmp strcmp_const_1_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_1_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_1_a
relsq tmp strcmp_const_1_a 1
subaddr strcmp_const_1_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_1_bStr REM tmp tmp2

rem Start mov tmp strcmp_const_1_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_1_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp REM
relsq tmp REM 1
subaddr strcmp_const_1_bStr tmp
rem End setaddr

label STRCMP_CONST_1_LOOP
rem decleq strcmp_const_1_len 0 STEP0_HANDLE_REM
lblsq strcmp_const_1_len CONST_0 STEP0_HANDLE_REM
rem dec strcmp_const_1_len 1
relsq strcmp_const_1_len CONST_1 1

rem Start jne strcmp_const_1_aStr strcmp_const_1_bStr STRCMP_CONST_1_END tmp tmp2

rem Start mov tmp strcmp_const_1_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_1_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_1_bStr
relsq tmp strcmp_const_1_bStr 1

rem Start jnz tmp STRCMP_CONST_1_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_1_END
lblsq tmp CONST_-1 JNZ_3_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_3_END
label JNZ_3_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_1_END
label JNZ_3_END
rem End jnz

rem End jne

rem incaddr strcmp_const_1_aStr 8
subaddr strcmp_const_1_aStr CONST_-8
rem incaddr strcmp_const_1_bStr 8
subaddr strcmp_const_1_bStr CONST_-8
rem lbljmp STRCMP_CONST_1_LOOP
lblsq ZERO ZERO STRCMP_CONST_1_LOOP
label STRCMP_CONST_1_REVERT_ADDR
rem decaddr REM 8
subaddr REM CONST_8
label STRCMP_CONST_1_END
rem End strcmp_const


rem Start strcmp_const linesPass1Cur END STEP1_START tmp tmp2
addr strcmp_const_2_a 0
rem copyaddr strcmp_const_2_a linesPass1Cur tmp tmp2

rem Start setaddr strcmp_const_2_a linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_2_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr strcmp_const_2_a tmp
rem End setaddr

rem incaddr strcmp_const_2_a 8
subaddr strcmp_const_2_a CONST_-8
rem incaddr END 8
subaddr END CONST_-8

rem Start jne strcmp_const_2_a END STRCMP_CONST_2_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_2_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_2_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp END
relsq tmp END 1

rem Start jnz tmp STRCMP_CONST_2_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_2_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_4_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_4_END
label JNZ_4_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_2_REVERT_ADDR
label JNZ_4_END
rem End jnz

rem End jne

var strcmp_const_2_len 0

rem Start mov strcmp_const_2_len strcmp_const_2_a tmp
rem movneg tmp strcmp_const_2_a
relsq tmp tmp 1
relsq tmp strcmp_const_2_a 1
rem movneg strcmp_const_2_len tmp
relsq strcmp_const_2_len strcmp_const_2_len 1
relsq strcmp_const_2_len tmp 1
rem End mov

rem decaddr strcmp_const_2_a 8
subaddr strcmp_const_2_a CONST_8
rem decaddr END 8
subaddr END CONST_8
addr strcmp_const_2_aStr 0
addr strcmp_const_2_bStr 0

rem Start setaddr strcmp_const_2_aStr strcmp_const_2_a tmp tmp2

rem Start mov tmp strcmp_const_2_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_2_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_2_a
relsq tmp strcmp_const_2_a 1
subaddr strcmp_const_2_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_2_bStr END tmp tmp2

rem Start mov tmp strcmp_const_2_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_2_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp END
relsq tmp END 1
subaddr strcmp_const_2_bStr tmp
rem End setaddr

label STRCMP_CONST_2_LOOP
rem decleq strcmp_const_2_len 0 STEP1_START
lblsq strcmp_const_2_len CONST_0 STEP1_START
rem dec strcmp_const_2_len 1
relsq strcmp_const_2_len CONST_1 1

rem Start jne strcmp_const_2_aStr strcmp_const_2_bStr STRCMP_CONST_2_END tmp tmp2

rem Start mov tmp strcmp_const_2_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_2_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_2_bStr
relsq tmp strcmp_const_2_bStr 1

rem Start jnz tmp STRCMP_CONST_2_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_2_END
lblsq tmp CONST_-1 JNZ_5_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_5_END
label JNZ_5_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_2_END
label JNZ_5_END
rem End jnz

rem End jne

rem incaddr strcmp_const_2_aStr 8
subaddr strcmp_const_2_aStr CONST_-8
rem incaddr strcmp_const_2_bStr 8
subaddr strcmp_const_2_bStr CONST_-8
rem lbljmp STRCMP_CONST_2_LOOP
lblsq ZERO ZERO STRCMP_CONST_2_LOOP
label STRCMP_CONST_2_REVERT_ADDR
rem decaddr END 8
subaddr END CONST_8
label STRCMP_CONST_2_END
rem End strcmp_const



rem Handle other instructions
addr linesPass1Cur_other 0
rem copyaddr linesPass1Cur_other linesPass1Cur tmp tmp2

rem Start setaddr linesPass1Cur_other linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_other_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr linesPass1Cur_other tmp
rem End setaddr

subaddr linesPass1Cur_other CONST_-18

rem Start alloc_array linesPass1Cur_other 18 20 tmp

rem Start malloc_const linesPass1Cur_other 300 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
relsq tmp tmp 1
relsq tmp CONST_300 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8
rem zero linesPass1Cur_other
relsq linesPass1Cur_other linesPass1Cur_other 1
rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8

rem Start mov linesPass1Cur_other CONST_18 tmp
relsq tmp tmp 1
relsq tmp CONST_18 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
rem End mov

rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8

rem Start mov linesPass1Cur_other CONST_300 tmp
relsq tmp tmp 1
relsq tmp CONST_300 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
rem End mov

rem decaddr linesPass1Cur_other 18
subaddr linesPass1Cur_other CONST_18
rem End alloc_array



rem Start malloc_const tmp 18 tmp2
relsq tmp2 tmp2 1
relsq tmp2 FREE_START 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp2 tmp2 1
relsq tmp2 CONST_18 1
relsq FREE_START tmp2 1
rem End malloc_const

addr tmpStr 0

rem Start setaddr tmpStr tmp tmp2 tmp3

rem Start mov tmp2 tmpStr_addrRef_0 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmpStr_addrRef_0 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem sub tmp2 tmp
relsq tmp2 tmp 1
subaddr tmpStr tmp2
rem End setaddr


rem Start alloc_str tmpStr 1000 tmp

rem Start malloc_const tmpStr 1000 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq tmpStr tmpStr 1
relsq tmpStr tmp 1
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr tmpStr 8
subaddr tmpStr CONST_-8
rem zero tmpStr
relsq tmpStr tmpStr 1
rem incaddr tmpStr 8
subaddr tmpStr CONST_-8

rem Start mov tmpStr CONST_1000 tmp
relsq tmp tmp 1
relsq tmp CONST_1000 1
relsq tmpStr tmpStr 1
relsq tmpStr tmp 1
rem End mov

rem decaddr tmpStr 10
subaddr tmpStr CONST_10
rem End alloc_str


rem Start inp_line tmpStr tmp tmp2
addr inp_line_0_str 0

rem Start setaddr inp_line_0_str tmpStr tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_0_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp tmpStr 1
subaddr inp_line_0_str tmp
rem End setaddr

var inp_line_0_len 0
rem zero inp_line_0_len
relsq inp_line_0_len inp_line_0_len 1
label INP_LINE_0_LOOP

rem Start getchar inp_line_0_str tmp
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
relsq ZERO ZERO -1
relsq SERIAL_IN SERIAL_IN 1
relsq inp_line_0_str inp_line_0_str 1
relsq inp_line_0_str tmp 1
rem End getchar


rem Start jeq_const inp_line_0_str d INP_LINE_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_D 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_3_END
lblsq tmp CONST_-1 JZ_3_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_LINE_0_TERM
label JZ_3_REVERT_A
relsq tmp CONST_1 1
label JZ_3_END
rem End jeq_const


rem Start jeq_const inp_line_0_str a INP_LINE_0_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_0_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_A 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_4_END
lblsq tmp CONST_-1 JZ_4_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_LINE_0_TERM
label JZ_4_REVERT_A
relsq tmp CONST_1 1
label JZ_4_END
rem End jeq_const

rem inc inp_line_0_len 1
relsq inp_line_0_len CONST_-1 1
rem incaddr inp_line_0_str 8
subaddr inp_line_0_str CONST_-8
rem lbljmp INP_LINE_0_LOOP
lblsq ZERO ZERO INP_LINE_0_LOOP
label INP_LINE_0_TERM
rem incaddr tmpStr 8
subaddr tmpStr CONST_-8

rem Start mov tmpStr inp_line_0_len tmp
relsq tmp tmp 1
relsq tmp inp_line_0_len 1
relsq tmpStr tmpStr 1
relsq tmpStr tmp 1
rem End mov

rem decaddr tmpStr 8
subaddr tmpStr CONST_8
rem End inp_line


rem Start str_split linesPass1Cur_other tmpStr SPACE 800 tmp tmp2
addr str_split_0_aBuf 0

rem Start setaddr str_split_0_aBuf linesPass1Cur_other tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 str_split_0_aBuf_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_other 1
subaddr str_split_0_aBuf tmp
rem End setaddr

addr str_split_0_strBuf 0

rem Start setaddr str_split_0_strBuf tmpStr tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 str_split_0_strBuf_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp tmpStr 1
subaddr str_split_0_strBuf tmp
rem End setaddr

var str_split_0_charsLeft 0
rem incaddr tmpStr 8
subaddr tmpStr CONST_-8

rem Start mov str_split_0_charsLeft tmpStr tmp
relsq tmp tmp 1
relsq tmp tmpStr 1
relsq str_split_0_charsLeft str_split_0_charsLeft 1
relsq str_split_0_charsLeft tmp 1
rem End mov

rem decaddr tmpStr 8
subaddr tmpStr CONST_8
var str_split_0_partCount 0
rem zero str_split_0_partCount
relsq str_split_0_partCount str_split_0_partCount 1
label STR_SPLIT_0_PART_LOOP
lblsq str_split_0_charsLeft CONST_0 STR_SPLIT_0_END_SPLIT

rem Start alloc_str str_split_0_aBuf 800 tmp

rem Start malloc_const str_split_0_aBuf 800 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq str_split_0_aBuf str_split_0_aBuf 1
relsq str_split_0_aBuf tmp 1
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq FREE_START tmp 1
rem End malloc_const

subaddr str_split_0_aBuf CONST_-8
relsq str_split_0_aBuf str_split_0_aBuf 1
subaddr str_split_0_aBuf CONST_-8
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq str_split_0_aBuf str_split_0_aBuf 1
relsq str_split_0_aBuf tmp 1
subaddr str_split_0_aBuf CONST_10
rem End alloc_str

rem inc str_split_0_partCount 1
relsq str_split_0_partCount CONST_-1 1
var str_split_0_partLen 0
rem zero str_split_0_partLen
relsq str_split_0_partLen str_split_0_partLen 1
addr str_split_0_partBuf 0

rem Start setaddr str_split_0_partBuf str_split_0_aBuf tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 str_split_0_partBuf_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp str_split_0_aBuf 1
subaddr str_split_0_partBuf tmp
rem End setaddr

label STR_SPLIT_0_CHAR_LOOP
lblsq str_split_0_charsLeft CONST_0 STR_SPLIT_0_END_PART
rem dec str_split_0_charsLeft 1
relsq str_split_0_charsLeft CONST_1 1
var str_split_0_curChar 0

rem Start mov str_split_0_curChar str_split_0_strBuf tmp
relsq tmp tmp 1
relsq tmp str_split_0_strBuf 1
relsq str_split_0_curChar str_split_0_curChar 1
relsq str_split_0_curChar tmp 1
rem End mov

rem incaddr str_split_0_strBuf 8
subaddr str_split_0_strBuf CONST_-8

rem Start jeq str_split_0_curChar SPACE STR_SPLIT_0_END_PART tmp tmp2

rem Start mov tmp str_split_0_curChar tmp2
relsq tmp2 tmp2 1
relsq tmp2 str_split_0_curChar 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp SPACE
relsq tmp SPACE 1

rem Start jz tmp STR_SPLIT_0_END_PART tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_5_END
lblsq tmp CONST_-1 JZ_5_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO STR_SPLIT_0_END_PART
label JZ_5_REVERT_A
relsq tmp CONST_1 1
label JZ_5_END
rem End jz

rem End jeq


rem Start mov str_split_0_partBuf str_split_0_curChar tmp
relsq tmp tmp 1
relsq tmp str_split_0_curChar 1
relsq str_split_0_partBuf str_split_0_partBuf 1
relsq str_split_0_partBuf tmp 1
rem End mov

rem incaddr str_split_0_partBuf 8
subaddr str_split_0_partBuf CONST_-8
rem inc str_split_0_partLen 1
relsq str_split_0_partLen CONST_-1 1
rem lbljmp STR_SPLIT_0_CHAR_LOOP
lblsq ZERO ZERO STR_SPLIT_0_CHAR_LOOP
label STR_SPLIT_0_END_PART
rem incaddr str_split_0_aBuf 8
subaddr str_split_0_aBuf CONST_-8

rem Start mov str_split_0_aBuf str_split_0_partLen tmp
relsq tmp tmp 1
relsq tmp str_split_0_partLen 1
relsq str_split_0_aBuf str_split_0_aBuf 1
relsq str_split_0_aBuf tmp 1
rem End mov

rem incaddr str_split_0_aBuf 10
subaddr str_split_0_aBuf CONST_-10
rem lbljmp STR_SPLIT_0_PART_LOOP
lblsq ZERO ZERO STR_SPLIT_0_PART_LOOP
label STR_SPLIT_0_END_SPLIT
rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8

rem Start mov linesPass1Cur_other str_split_0_partCount tmp
relsq tmp tmp 1
relsq tmp str_split_0_partCount 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
rem End mov

rem decaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_8
rem End str_split


subaddr linesPass1Cur_other CONST_-20

rem Start alloc_str linesPass1Cur_other 0 tmp

rem Start malloc_const linesPass1Cur_other 0 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8
rem zero linesPass1Cur_other
relsq linesPass1Cur_other linesPass1Cur_other 1
rem incaddr linesPass1Cur_other 8
subaddr linesPass1Cur_other CONST_-8

rem Start mov linesPass1Cur_other CONST_0 tmp
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq linesPass1Cur_other linesPass1Cur_other 1
relsq linesPass1Cur_other tmp 1
rem End mov

rem decaddr linesPass1Cur_other 10
subaddr linesPass1Cur_other CONST_10
rem End alloc_str


subaddr linesPass1Cur_other CONST_-18
relsq linesPass1Cur_other linesPass1Cur_other 1

subaddr linesPass1Cur_other CONST_-8
rem copyaddr linesPass1Cur linesPass1Cur_other tmp tmp2

rem Start setaddr linesPass1Cur linesPass1Cur_other_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_other_addrRef_0 1
subaddr linesPass1Cur tmp
rem End setaddr

lblsq ZERO ZERO STEP0_INPUT_INST


label STEP0_HANDLE_NEWLINE
addr linesPass1Cur_newline 0
rem copyaddr linesPass1Cur_newline linesPass1Cur tmp tmp2

rem Start setaddr linesPass1Cur_newline linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_newline_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr linesPass1Cur_newline tmp
rem End setaddr


rem Start strcpy linesPass1Cur_newline NEWLINE tmp tmp2
addr strcpy_0_strA 0

rem Start setaddr strcpy_0_strA linesPass1Cur_newline tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcpy_0_strA_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_newline 1
subaddr strcpy_0_strA tmp
rem End setaddr

addr strcpy_0_strB 0

rem Start setaddr strcpy_0_strB NEWLINE tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcpy_0_strB_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp NEWLINE 1
subaddr strcpy_0_strB tmp
rem End setaddr

rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8
rem incaddr NEWLINE 8
subaddr NEWLINE CONST_-8

rem Start mov linesPass1Cur_newline NEWLINE tmp
relsq tmp tmp 1
relsq tmp NEWLINE 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
rem End mov

var strcpy_0_strLen 0

rem Start mov strcpy_0_strLen NEWLINE tmp
relsq tmp tmp 1
relsq tmp NEWLINE 1
relsq strcpy_0_strLen strcpy_0_strLen 1
relsq strcpy_0_strLen tmp 1
rem End mov

rem decaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_8
rem decaddr NEWLINE 8
subaddr NEWLINE CONST_8
label STRCPY_0_LOOP
rem decleq strcpy_0_strLen 0 STRCPY_0_END
lblsq strcpy_0_strLen CONST_0 STRCPY_0_END
rem dec strcpy_0_strLen 1
relsq strcpy_0_strLen CONST_1 1

rem Start mov strcpy_0_strA strcpy_0_strB tmp
relsq tmp tmp 1
relsq tmp strcpy_0_strB 1
relsq strcpy_0_strA strcpy_0_strA 1
relsq strcpy_0_strA tmp 1
rem End mov

rem incaddr strcpy_0_strA 8
subaddr strcpy_0_strA CONST_-8
rem incaddr strcpy_0_strB 8
subaddr strcpy_0_strB CONST_-8
rem lbljmp STRCPY_0_LOOP
lblsq ZERO ZERO STRCPY_0_LOOP
label STRCPY_0_END
rem End strcpy


subaddr linesPass1Cur_newline CONST_-18

rem Start alloc_array linesPass1Cur_newline 18 0 tmp

rem Start malloc_const linesPass1Cur_newline 0 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8
rem zero linesPass1Cur_newline
relsq linesPass1Cur_newline linesPass1Cur_newline 1
rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8

rem Start mov linesPass1Cur_newline CONST_18 tmp
relsq tmp tmp 1
relsq tmp CONST_18 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
rem End mov

rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8

rem Start mov linesPass1Cur_newline CONST_0 tmp
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
rem End mov

rem decaddr linesPass1Cur_newline 18
subaddr linesPass1Cur_newline CONST_18
rem End alloc_array


subaddr linesPass1Cur_newline CONST_-20

rem Start alloc_str linesPass1Cur_newline 0 tmp

rem Start malloc_const linesPass1Cur_newline 0 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8
rem zero linesPass1Cur_newline
relsq linesPass1Cur_newline linesPass1Cur_newline 1
rem incaddr linesPass1Cur_newline 8
subaddr linesPass1Cur_newline CONST_-8

rem Start mov linesPass1Cur_newline CONST_0 tmp
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq linesPass1Cur_newline linesPass1Cur_newline 1
relsq linesPass1Cur_newline tmp 1
rem End mov

rem decaddr linesPass1Cur_newline 10
subaddr linesPass1Cur_newline CONST_10
rem End alloc_str


subaddr linesPass1Cur_newline CONST_-18
relsq linesPass1Cur_newline linesPass1Cur_newline 1

subaddr linesPass1Cur_newline CONST_-8
rem copyaddr linesPass1Cur linesPass1Cur_newline tmp tmp2

rem Start setaddr linesPass1Cur linesPass1Cur_newline_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_newline_addrRef_0 1
subaddr linesPass1Cur tmp
rem End setaddr

lblsq ZERO ZERO STEP0_INPUT_INST


label STEP0_HANDLE_REM
addr linesPass1Cur_rem 0
rem copyaddr linesPass1Cur_rem linesPass1Cur tmp tmp2

rem Start setaddr linesPass1Cur_rem linesPass1Cur_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_rem_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_addrRef_0 1
subaddr linesPass1Cur_rem tmp
rem End setaddr

subaddr linesPass1Cur_rem CONST_-18

rem Start alloc_array linesPass1Cur_rem 18 0 tmp

rem Start malloc_const linesPass1Cur_rem 0 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8
rem zero linesPass1Cur_rem
relsq linesPass1Cur_rem linesPass1Cur_rem 1
rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8

rem Start mov linesPass1Cur_rem CONST_18 tmp
relsq tmp tmp 1
relsq tmp CONST_18 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
rem End mov

rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8

rem Start mov linesPass1Cur_rem CONST_0 tmp
relsq tmp tmp 1
relsq tmp CONST_0 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
rem End mov

rem decaddr linesPass1Cur_rem 18
subaddr linesPass1Cur_rem CONST_18
rem End alloc_array


subaddr linesPass1Cur_rem CONST_-20

rem Start alloc_str linesPass1Cur_rem 800 tmp

rem Start malloc_const linesPass1Cur_rem 800 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8
rem zero linesPass1Cur_rem
relsq linesPass1Cur_rem linesPass1Cur_rem 1
rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8

rem Start mov linesPass1Cur_rem CONST_800 tmp
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
rem End mov

rem decaddr linesPass1Cur_rem 10
subaddr linesPass1Cur_rem CONST_10
rem End alloc_str


rem Start inp_line linesPass1Cur_rem tmp tmp2
addr inp_line_1_str 0

rem Start setaddr inp_line_1_str linesPass1Cur_rem tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_1_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_rem 1
subaddr inp_line_1_str tmp
rem End setaddr

var inp_line_1_len 0
rem zero inp_line_1_len
relsq inp_line_1_len inp_line_1_len 1
label INP_LINE_1_LOOP

rem Start getchar inp_line_1_str tmp
relsq tmp tmp 1
relsq tmp CONST_-1 1
relsq tmp SERIAL_IN 2
relsq ZERO ZERO -1
relsq SERIAL_IN SERIAL_IN 1
relsq inp_line_1_str inp_line_1_str 1
relsq inp_line_1_str tmp 1
rem End getchar


rem Start jeq_const inp_line_1_str d INP_LINE_1_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_1_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_D 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_6_END
lblsq tmp CONST_-1 JZ_6_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_LINE_1_TERM
label JZ_6_REVERT_A
relsq tmp CONST_1 1
label JZ_6_END
rem End jeq_const


rem Start jeq_const inp_line_1_str a INP_LINE_1_TERM tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 inp_line_1_str 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_A 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 JZ_7_END
lblsq tmp CONST_-1 JZ_7_REVERT_A
relsq tmp CONST_1 1
lblsq ZERO ZERO INP_LINE_1_TERM
label JZ_7_REVERT_A
relsq tmp CONST_1 1
label JZ_7_END
rem End jeq_const

rem inc inp_line_1_len 1
relsq inp_line_1_len CONST_-1 1
rem incaddr inp_line_1_str 8
subaddr inp_line_1_str CONST_-8
rem lbljmp INP_LINE_1_LOOP
lblsq ZERO ZERO INP_LINE_1_LOOP
label INP_LINE_1_TERM
rem incaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_-8

rem Start mov linesPass1Cur_rem inp_line_1_len tmp
relsq tmp tmp 1
relsq tmp inp_line_1_len 1
relsq linesPass1Cur_rem linesPass1Cur_rem 1
relsq linesPass1Cur_rem tmp 1
rem End mov

rem decaddr linesPass1Cur_rem 8
subaddr linesPass1Cur_rem CONST_8
rem End inp_line


subaddr linesPass1Cur_rem CONST_-18
relsq linesPass1Cur_rem linesPass1Cur_rem 1

subaddr linesPass1Cur_rem CONST_-8
rem copyaddr linesPass1Cur linesPass1Cur_rem tmp tmp2

rem Start setaddr linesPass1Cur linesPass1Cur_rem_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 linesPass1Cur_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp linesPass1Cur_rem_addrRef_0 1
subaddr linesPass1Cur tmp
rem End setaddr

lblsq ZERO ZERO STEP0_INPUT_INST


rem 1. Find symbols
label STEP1_START
rem A Symbol is made of four components, adding to a total of 0x30 bytes:
rem 0x0 String containing the name of the symbol
rem 0x18 The address of the symbol (ffffffffffffffff if None)
rem 0x20 The reference count of the symbol
rem 0x28 The default value of the symbol (SYM_VAL_PLACEHOLDER if None)
var symbolsBegin 200000
var symbolsLen 0

addr curLine 0

rem Start setaddr curLine linesPass1Begin tmp tmp2

rem Start mov tmp curLine_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 curLine_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp linesPass1Begin
relsq tmp linesPass1Begin 1
subaddr curLine tmp
rem End setaddr

var linesLeft 0

rem Start mov linesLeft linesPass1Len tmp
rem movneg tmp linesPass1Len
relsq tmp tmp 1
relsq tmp linesPass1Len 1
rem movneg linesLeft tmp
relsq linesLeft linesLeft 1
relsq linesLeft tmp 1
rem End mov


label STEP1_LOOP
lblsq linesLeft CONST_0 STEP2_START
relsq linesLeft CONST_1 1


rem Start strcmp_const curLine VAR STEP1_CREATE_SYMBOL tmp tmp2
addr strcmp_const_3_a 0
rem copyaddr strcmp_const_3_a curLine tmp tmp2

rem Start setaddr strcmp_const_3_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_3_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_3_a tmp
rem End setaddr

rem incaddr strcmp_const_3_a 8
subaddr strcmp_const_3_a CONST_-8
rem incaddr VAR 8
subaddr VAR CONST_-8

rem Start jne strcmp_const_3_a VAR STRCMP_CONST_3_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_3_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_3_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp VAR
relsq tmp VAR 1

rem Start jnz tmp STRCMP_CONST_3_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_3_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_6_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_6_END
label JNZ_6_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_3_REVERT_ADDR
label JNZ_6_END
rem End jnz

rem End jne

var strcmp_const_3_len 0

rem Start mov strcmp_const_3_len strcmp_const_3_a tmp
rem movneg tmp strcmp_const_3_a
relsq tmp tmp 1
relsq tmp strcmp_const_3_a 1
rem movneg strcmp_const_3_len tmp
relsq strcmp_const_3_len strcmp_const_3_len 1
relsq strcmp_const_3_len tmp 1
rem End mov

rem decaddr strcmp_const_3_a 8
subaddr strcmp_const_3_a CONST_8
rem decaddr VAR 8
subaddr VAR CONST_8
addr strcmp_const_3_aStr 0
addr strcmp_const_3_bStr 0

rem Start setaddr strcmp_const_3_aStr strcmp_const_3_a tmp tmp2

rem Start mov tmp strcmp_const_3_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_3_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_3_a
relsq tmp strcmp_const_3_a 1
subaddr strcmp_const_3_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_3_bStr VAR tmp tmp2

rem Start mov tmp strcmp_const_3_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_3_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp VAR
relsq tmp VAR 1
subaddr strcmp_const_3_bStr tmp
rem End setaddr

label STRCMP_CONST_3_LOOP
rem decleq strcmp_const_3_len 0 STEP1_CREATE_SYMBOL
lblsq strcmp_const_3_len CONST_0 STEP1_CREATE_SYMBOL
rem dec strcmp_const_3_len 1
relsq strcmp_const_3_len CONST_1 1

rem Start jne strcmp_const_3_aStr strcmp_const_3_bStr STRCMP_CONST_3_END tmp tmp2

rem Start mov tmp strcmp_const_3_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_3_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_3_bStr
relsq tmp strcmp_const_3_bStr 1

rem Start jnz tmp STRCMP_CONST_3_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_3_END
lblsq tmp CONST_-1 JNZ_7_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_7_END
label JNZ_7_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_3_END
label JNZ_7_END
rem End jnz

rem End jne

rem incaddr strcmp_const_3_aStr 8
subaddr strcmp_const_3_aStr CONST_-8
rem incaddr strcmp_const_3_bStr 8
subaddr strcmp_const_3_bStr CONST_-8
rem lbljmp STRCMP_CONST_3_LOOP
lblsq ZERO ZERO STRCMP_CONST_3_LOOP
label STRCMP_CONST_3_REVERT_ADDR
rem decaddr VAR 8
subaddr VAR CONST_8
label STRCMP_CONST_3_END
rem End strcmp_const


rem Start strcmp_const curLine LABEL STEP1_CREATE_SYMBOL tmp tmp2
addr strcmp_const_4_a 0
rem copyaddr strcmp_const_4_a curLine tmp tmp2

rem Start setaddr strcmp_const_4_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_4_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_4_a tmp
rem End setaddr

rem incaddr strcmp_const_4_a 8
subaddr strcmp_const_4_a CONST_-8
rem incaddr LABEL 8
subaddr LABEL CONST_-8

rem Start jne strcmp_const_4_a LABEL STRCMP_CONST_4_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_4_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_4_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LABEL
relsq tmp LABEL 1

rem Start jnz tmp STRCMP_CONST_4_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_4_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_8_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_8_END
label JNZ_8_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_4_REVERT_ADDR
label JNZ_8_END
rem End jnz

rem End jne

var strcmp_const_4_len 0

rem Start mov strcmp_const_4_len strcmp_const_4_a tmp
rem movneg tmp strcmp_const_4_a
relsq tmp tmp 1
relsq tmp strcmp_const_4_a 1
rem movneg strcmp_const_4_len tmp
relsq strcmp_const_4_len strcmp_const_4_len 1
relsq strcmp_const_4_len tmp 1
rem End mov

rem decaddr strcmp_const_4_a 8
subaddr strcmp_const_4_a CONST_8
rem decaddr LABEL 8
subaddr LABEL CONST_8
addr strcmp_const_4_aStr 0
addr strcmp_const_4_bStr 0

rem Start setaddr strcmp_const_4_aStr strcmp_const_4_a tmp tmp2

rem Start mov tmp strcmp_const_4_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_4_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_4_a
relsq tmp strcmp_const_4_a 1
subaddr strcmp_const_4_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_4_bStr LABEL tmp tmp2

rem Start mov tmp strcmp_const_4_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_4_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LABEL
relsq tmp LABEL 1
subaddr strcmp_const_4_bStr tmp
rem End setaddr

label STRCMP_CONST_4_LOOP
rem decleq strcmp_const_4_len 0 STEP1_CREATE_SYMBOL
lblsq strcmp_const_4_len CONST_0 STEP1_CREATE_SYMBOL
rem dec strcmp_const_4_len 1
relsq strcmp_const_4_len CONST_1 1

rem Start jne strcmp_const_4_aStr strcmp_const_4_bStr STRCMP_CONST_4_END tmp tmp2

rem Start mov tmp strcmp_const_4_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_4_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_4_bStr
relsq tmp strcmp_const_4_bStr 1

rem Start jnz tmp STRCMP_CONST_4_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_4_END
lblsq tmp CONST_-1 JNZ_9_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_9_END
label JNZ_9_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_4_END
label JNZ_9_END
rem End jnz

rem End jne

rem incaddr strcmp_const_4_aStr 8
subaddr strcmp_const_4_aStr CONST_-8
rem incaddr strcmp_const_4_bStr 8
subaddr strcmp_const_4_bStr CONST_-8
rem lbljmp STRCMP_CONST_4_LOOP
lblsq ZERO ZERO STRCMP_CONST_4_LOOP
label STRCMP_CONST_4_REVERT_ADDR
rem decaddr LABEL 8
subaddr LABEL CONST_8
label STRCMP_CONST_4_END
rem End strcmp_const


rem Start strcmp_const curLine ADDR STEP1_CREATE_SYMBOL tmp tmp2
addr strcmp_const_5_a 0
rem copyaddr strcmp_const_5_a curLine tmp tmp2

rem Start setaddr strcmp_const_5_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_5_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_5_a tmp
rem End setaddr

rem incaddr strcmp_const_5_a 8
subaddr strcmp_const_5_a CONST_-8
rem incaddr ADDR 8
subaddr ADDR CONST_-8

rem Start jne strcmp_const_5_a ADDR STRCMP_CONST_5_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_5_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_5_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ADDR
relsq tmp ADDR 1

rem Start jnz tmp STRCMP_CONST_5_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_5_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_10_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_10_END
label JNZ_10_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_5_REVERT_ADDR
label JNZ_10_END
rem End jnz

rem End jne

var strcmp_const_5_len 0

rem Start mov strcmp_const_5_len strcmp_const_5_a tmp
rem movneg tmp strcmp_const_5_a
relsq tmp tmp 1
relsq tmp strcmp_const_5_a 1
rem movneg strcmp_const_5_len tmp
relsq strcmp_const_5_len strcmp_const_5_len 1
relsq strcmp_const_5_len tmp 1
rem End mov

rem decaddr strcmp_const_5_a 8
subaddr strcmp_const_5_a CONST_8
rem decaddr ADDR 8
subaddr ADDR CONST_8
addr strcmp_const_5_aStr 0
addr strcmp_const_5_bStr 0

rem Start setaddr strcmp_const_5_aStr strcmp_const_5_a tmp tmp2

rem Start mov tmp strcmp_const_5_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_5_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_5_a
relsq tmp strcmp_const_5_a 1
subaddr strcmp_const_5_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_5_bStr ADDR tmp tmp2

rem Start mov tmp strcmp_const_5_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_5_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ADDR
relsq tmp ADDR 1
subaddr strcmp_const_5_bStr tmp
rem End setaddr

label STRCMP_CONST_5_LOOP
rem decleq strcmp_const_5_len 0 STEP1_CREATE_SYMBOL
lblsq strcmp_const_5_len CONST_0 STEP1_CREATE_SYMBOL
rem dec strcmp_const_5_len 1
relsq strcmp_const_5_len CONST_1 1

rem Start jne strcmp_const_5_aStr strcmp_const_5_bStr STRCMP_CONST_5_END tmp tmp2

rem Start mov tmp strcmp_const_5_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_5_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_5_bStr
relsq tmp strcmp_const_5_bStr 1

rem Start jnz tmp STRCMP_CONST_5_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_5_END
lblsq tmp CONST_-1 JNZ_11_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_11_END
label JNZ_11_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_5_END
label JNZ_11_END
rem End jnz

rem End jne

rem incaddr strcmp_const_5_aStr 8
subaddr strcmp_const_5_aStr CONST_-8
rem incaddr strcmp_const_5_bStr 8
subaddr strcmp_const_5_bStr CONST_-8
rem lbljmp STRCMP_CONST_5_LOOP
lblsq ZERO ZERO STRCMP_CONST_5_LOOP
label STRCMP_CONST_5_REVERT_ADDR
rem decaddr ADDR 8
subaddr ADDR CONST_8
label STRCMP_CONST_5_END
rem End strcmp_const

subaddr curLine CONST_-58
lblsq ZERO ZERO STEP1_LOOP

label STEP1_CREATE_SYMBOL
rem Set the symbol name
subaddr curLine CONST_-18
addr curTokens_step1 0

rem Start setaddr curTokens_step1 curLine tmp tmp2

rem Start mov tmp curTokens_step1_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 curTokens_step1_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp curLine
relsq tmp curLine 1
subaddr curTokens_step1 tmp
rem End setaddr

subaddr curLine CONST_18

addr symbolsCur_step1 200000

rem Start alloc_str symbolsCur_step1 800 tmp

rem Start malloc_const symbolsCur_step1 800 tmp
relsq tmp tmp 1
relsq tmp FREE_START 1
relsq symbolsCur_step1 symbolsCur_step1 1
relsq symbolsCur_step1 tmp 1
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq FREE_START tmp 1
rem End malloc_const

rem incaddr symbolsCur_step1 8
subaddr symbolsCur_step1 CONST_-8
rem zero symbolsCur_step1
relsq symbolsCur_step1 symbolsCur_step1 1
rem incaddr symbolsCur_step1 8
subaddr symbolsCur_step1 CONST_-8

rem Start mov symbolsCur_step1 CONST_800 tmp
relsq tmp tmp 1
relsq tmp CONST_800 1
relsq symbolsCur_step1 symbolsCur_step1 1
relsq symbolsCur_step1 tmp 1
rem End mov

rem decaddr symbolsCur_step1 10
subaddr symbolsCur_step1 CONST_10
rem End alloc_str


rem Start strcpy symbolsCur_step1 curTokens_step1 tmp tmp2
addr strcpy_1_strA 0

rem Start setaddr strcpy_1_strA symbolsCur_step1 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcpy_1_strA_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp symbolsCur_step1 1
subaddr strcpy_1_strA tmp
rem End setaddr

addr strcpy_1_strB 0

rem Start setaddr strcpy_1_strB curTokens_step1 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcpy_1_strB_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curTokens_step1 1
subaddr strcpy_1_strB tmp
rem End setaddr

rem incaddr symbolsCur_step1 8
subaddr symbolsCur_step1 CONST_-8
rem incaddr curTokens_step1 8
subaddr curTokens_step1 CONST_-8

rem Start mov symbolsCur_step1 curTokens_step1 tmp
relsq tmp tmp 1
relsq tmp curTokens_step1 1
relsq symbolsCur_step1 symbolsCur_step1 1
relsq symbolsCur_step1 tmp 1
rem End mov

var strcpy_1_strLen 0

rem Start mov strcpy_1_strLen curTokens_step1 tmp
relsq tmp tmp 1
relsq tmp curTokens_step1 1
relsq strcpy_1_strLen strcpy_1_strLen 1
relsq strcpy_1_strLen tmp 1
rem End mov

rem decaddr symbolsCur_step1 8
subaddr symbolsCur_step1 CONST_8
rem decaddr curTokens_step1 8
subaddr curTokens_step1 CONST_8
label STRCPY_1_LOOP
rem decleq strcpy_1_strLen 0 STRCPY_1_END
lblsq strcpy_1_strLen CONST_0 STRCPY_1_END
rem dec strcpy_1_strLen 1
relsq strcpy_1_strLen CONST_1 1

rem Start mov strcpy_1_strA strcpy_1_strB tmp
relsq tmp tmp 1
relsq tmp strcpy_1_strB 1
relsq strcpy_1_strA strcpy_1_strA 1
relsq strcpy_1_strA tmp 1
rem End mov

rem incaddr strcpy_1_strA 8
subaddr strcpy_1_strA CONST_-8
rem incaddr strcpy_1_strB 8
subaddr strcpy_1_strB CONST_-8
rem lbljmp STRCPY_1_LOOP
lblsq ZERO ZERO STRCPY_1_LOOP
label STRCPY_1_END
rem End strcpy

subaddr curTokens_step1 CONST_-18

rem Set the symbol address
subaddr symbolsCur_step1 CONST_-18
rem set symbolsCur_step1 -1
relsq symbolsCur_step1 symbolsCur_step1 1
relsq symbolsCur_step1 CONST_1 1

rem Start strcmp_const curLine ADDR STEP1_SET_ADDRESS tmp tmp2
addr strcmp_const_6_a 0
rem copyaddr strcmp_const_6_a curLine tmp tmp2

rem Start setaddr strcmp_const_6_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_6_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_6_a tmp
rem End setaddr

rem incaddr strcmp_const_6_a 8
subaddr strcmp_const_6_a CONST_-8
rem incaddr ADDR 8
subaddr ADDR CONST_-8

rem Start jne strcmp_const_6_a ADDR STRCMP_CONST_6_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_6_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_6_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ADDR
relsq tmp ADDR 1

rem Start jnz tmp STRCMP_CONST_6_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_6_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_12_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_12_END
label JNZ_12_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_6_REVERT_ADDR
label JNZ_12_END
rem End jnz

rem End jne

var strcmp_const_6_len 0

rem Start mov strcmp_const_6_len strcmp_const_6_a tmp
rem movneg tmp strcmp_const_6_a
relsq tmp tmp 1
relsq tmp strcmp_const_6_a 1
rem movneg strcmp_const_6_len tmp
relsq strcmp_const_6_len strcmp_const_6_len 1
relsq strcmp_const_6_len tmp 1
rem End mov

rem decaddr strcmp_const_6_a 8
subaddr strcmp_const_6_a CONST_8
rem decaddr ADDR 8
subaddr ADDR CONST_8
addr strcmp_const_6_aStr 0
addr strcmp_const_6_bStr 0

rem Start setaddr strcmp_const_6_aStr strcmp_const_6_a tmp tmp2

rem Start mov tmp strcmp_const_6_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_6_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_6_a
relsq tmp strcmp_const_6_a 1
subaddr strcmp_const_6_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_6_bStr ADDR tmp tmp2

rem Start mov tmp strcmp_const_6_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_6_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ADDR
relsq tmp ADDR 1
subaddr strcmp_const_6_bStr tmp
rem End setaddr

label STRCMP_CONST_6_LOOP
rem decleq strcmp_const_6_len 0 STEP1_SET_ADDRESS
lblsq strcmp_const_6_len CONST_0 STEP1_SET_ADDRESS
rem dec strcmp_const_6_len 1
relsq strcmp_const_6_len CONST_1 1

rem Start jne strcmp_const_6_aStr strcmp_const_6_bStr STRCMP_CONST_6_END tmp tmp2

rem Start mov tmp strcmp_const_6_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_6_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_6_bStr
relsq tmp strcmp_const_6_bStr 1

rem Start jnz tmp STRCMP_CONST_6_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_6_END
lblsq tmp CONST_-1 JNZ_13_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_13_END
label JNZ_13_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_6_END
label JNZ_13_END
rem End jnz

rem End jne

rem incaddr strcmp_const_6_aStr 8
subaddr strcmp_const_6_aStr CONST_-8
rem incaddr strcmp_const_6_bStr 8
subaddr strcmp_const_6_bStr CONST_-8
rem lbljmp STRCMP_CONST_6_LOOP
lblsq ZERO ZERO STRCMP_CONST_6_LOOP
label STRCMP_CONST_6_REVERT_ADDR
rem decaddr ADDR 8
subaddr ADDR CONST_8
label STRCMP_CONST_6_END
rem End strcmp_const

lblsq ZERO ZERO STEP1_HANDLE_REFCOUNT

label STEP1_SET_ADDRESS

rem Start from_hex symbolsCur_step1 curTokens_step1 tmp tmp2
addr from_hex_0_a 0
rem copyaddr from_hex_0_a symbolsCur_step1 tmp tmp2

rem Start setaddr from_hex_0_a symbolsCur_step1_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 from_hex_0_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp symbolsCur_step1_addrRef_0 1
subaddr from_hex_0_a tmp
rem End setaddr

rem zero from_hex_0_a
rem sub from_hex_0_a from_hex_0_a
relsq from_hex_0_a from_hex_0_a 1
addr from_hex_0_strBuf 0

rem Start setaddr from_hex_0_strBuf curTokens_step1 tmp tmp2

rem Start mov tmp from_hex_0_strBuf_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 from_hex_0_strBuf_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp curTokens_step1
relsq tmp curTokens_step1 1
subaddr from_hex_0_strBuf tmp
rem End setaddr

var from_hex_0_strLen 0
rem incaddr curTokens_step1 8
subaddr curTokens_step1 CONST_-8

rem Start mov from_hex_0_strLen curTokens_step1 tmp
rem movneg tmp curTokens_step1
relsq tmp tmp 1
relsq tmp curTokens_step1 1
rem movneg from_hex_0_strLen tmp
relsq from_hex_0_strLen from_hex_0_strLen 1
relsq from_hex_0_strLen tmp 1
rem End mov

rem decaddr curTokens_step1 8
subaddr curTokens_step1 CONST_8
var from_hex_0_isNeg 0
rem zero from_hex_0_isNeg
rem sub from_hex_0_isNeg from_hex_0_isNeg
relsq from_hex_0_isNeg from_hex_0_isNeg 1

rem Start mov tmp from_hex_0_strBuf tmp2
rem movneg tmp2 from_hex_0_strBuf
relsq tmp2 tmp2 1
relsq tmp2 from_hex_0_strBuf 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem decleq tmp 2c FROM_HEX_0_LOOP
lblsq tmp CONST_2C FROM_HEX_0_LOOP
rem decleq tmp 1 FROM_HEX_0_NEG_SIGN
lblsq tmp CONST_1 FROM_HEX_0_NEG_SIGN
rem lbljmp FROM_HEX_0_LOOP
lblsq ZERO ZERO FROM_HEX_0_LOOP
label FROM_HEX_0_NEG_SIGN
rem inc from_hex_0_isNeg 1
rem dec from_hex_0_isNeg -1
relsq from_hex_0_isNeg CONST_-1 1
rem dec from_hex_0_strLen 1
relsq from_hex_0_strLen CONST_1 1
rem incaddr from_hex_0_strBuf 8
subaddr from_hex_0_strBuf CONST_-8
label FROM_HEX_0_LOOP
rem decleq from_hex_0_strLen 0 FROM_HEX_0_NEGATE
lblsq from_hex_0_strLen CONST_0 FROM_HEX_0_NEGATE
rem dec from_hex_0_strLen 1
relsq from_hex_0_strLen CONST_1 1

rem Start mov tmp from_hex_0_strBuf tmp2
rem movneg tmp2 from_hex_0_strBuf
relsq tmp2 tmp2 1
relsq tmp2 from_hex_0_strBuf 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem incaddr from_hex_0_strBuf 8
subaddr from_hex_0_strBuf CONST_-8
var from_hex_0_val 0
rem zero from_hex_0_val
rem sub from_hex_0_val from_hex_0_val
relsq from_hex_0_val from_hex_0_val 1
rem dec tmp 2f
relsq tmp CONST_2F 1
rem movneg from_hex_0_val tmp
rem zero from_hex_0_val
relsq from_hex_0_val from_hex_0_val 1
rem sub from_hex_0_val tmp
relsq from_hex_0_val tmp 1
rem inc from_hex_0_val 1
rem dec from_hex_0_val -1
relsq from_hex_0_val CONST_-1 1
rem decleq tmp a FROM_HEX_0_WRITE
lblsq tmp CONST_A FROM_HEX_0_WRITE
rem dec tmp 7
relsq tmp CONST_7 1
rem movneg from_hex_0_val tmp
rem zero from_hex_0_val
relsq from_hex_0_val from_hex_0_val 1
rem sub from_hex_0_val tmp
relsq from_hex_0_val tmp 1
rem dec from_hex_0_val 9
relsq from_hex_0_val CONST_9 1
rem decleq tmp 6 FROM_HEX_0_WRITE
lblsq tmp CONST_6 FROM_HEX_0_WRITE
rem dec tmp 1a
relsq tmp CONST_1A 1
rem movneg from_hex_0_val tmp
rem zero from_hex_0_val
relsq from_hex_0_val from_hex_0_val 1
rem sub from_hex_0_val tmp
relsq from_hex_0_val tmp 1
rem dec from_hex_0_val 9
relsq from_hex_0_val CONST_9 1
label FROM_HEX_0_WRITE

rem Start mul_16 from_hex_0_a tmp
rem zero tmp
relsq tmp tmp 1
rem sub tmp from_hex_0_a
relsq tmp from_hex_0_a 1
rem sub tmp from_hex_0_a
relsq tmp from_hex_0_a 1
rem sub tmp from_hex_0_a
relsq tmp from_hex_0_a 1
rem sub tmp from_hex_0_a
relsq tmp from_hex_0_a 1
rem sub tmp from_hex_0_a
relsq tmp from_hex_0_a 1
rem sub from_hex_0_a tmp
relsq from_hex_0_a tmp 1
rem sub from_hex_0_a tmp
relsq from_hex_0_a tmp 1
rem sub from_hex_0_a tmp
relsq from_hex_0_a tmp 1
rem End mul_16

rem sub from_hex_0_a from_hex_0_val
relsq from_hex_0_a from_hex_0_val 1
rem lbljmp FROM_HEX_0_LOOP
lblsq ZERO ZERO FROM_HEX_0_LOOP
label FROM_HEX_0_NEGATE
rem decleq from_hex_0_isNeg 0 FROM_HEX_0_END
lblsq from_hex_0_isNeg CONST_0 FROM_HEX_0_END

rem Start neg from_hex_0_a tmp tmp2
rem movneg tmp from_hex_0_a
relsq tmp tmp 1
relsq tmp from_hex_0_a 1

rem Start mov from_hex_0_a tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
relsq from_hex_0_a from_hex_0_a 1
relsq from_hex_0_a tmp2 1
rem End mov

rem End neg

label FROM_HEX_0_END
rem End from_hex


label STEP1_HANDLE_REFCOUNT
subaddr symbolsCur_step1 CONST_-8
relsq symbolsCur_step1 symbolsCur_step1 1

label STEP1_HANDLE_VALUE
subaddr symbolsCur_step1 CONST_-8

rem Start mov symbolsCur_step1 SYM_VAL_PLACEHOLDER tmp
rem movneg tmp SYM_VAL_PLACEHOLDER
relsq tmp tmp 1
relsq tmp SYM_VAL_PLACEHOLDER 1
rem movneg symbolsCur_step1 tmp
relsq symbolsCur_step1 symbolsCur_step1 1
relsq symbolsCur_step1 tmp 1
rem End mov


rem Start strcmp_const curLine VAR STEP1_SET_VALUE tmp tmp2
addr strcmp_const_7_a 0
rem copyaddr strcmp_const_7_a curLine tmp tmp2

rem Start setaddr strcmp_const_7_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_7_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_7_a tmp
rem End setaddr

rem incaddr strcmp_const_7_a 8
subaddr strcmp_const_7_a CONST_-8
rem incaddr VAR 8
subaddr VAR CONST_-8

rem Start jne strcmp_const_7_a VAR STRCMP_CONST_7_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_7_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_7_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp VAR
relsq tmp VAR 1

rem Start jnz tmp STRCMP_CONST_7_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_7_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_14_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_14_END
label JNZ_14_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_7_REVERT_ADDR
label JNZ_14_END
rem End jnz

rem End jne

var strcmp_const_7_len 0

rem Start mov strcmp_const_7_len strcmp_const_7_a tmp
rem movneg tmp strcmp_const_7_a
relsq tmp tmp 1
relsq tmp strcmp_const_7_a 1
rem movneg strcmp_const_7_len tmp
relsq strcmp_const_7_len strcmp_const_7_len 1
relsq strcmp_const_7_len tmp 1
rem End mov

rem decaddr strcmp_const_7_a 8
subaddr strcmp_const_7_a CONST_8
rem decaddr VAR 8
subaddr VAR CONST_8
addr strcmp_const_7_aStr 0
addr strcmp_const_7_bStr 0

rem Start setaddr strcmp_const_7_aStr strcmp_const_7_a tmp tmp2

rem Start mov tmp strcmp_const_7_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_7_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_7_a
relsq tmp strcmp_const_7_a 1
subaddr strcmp_const_7_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_7_bStr VAR tmp tmp2

rem Start mov tmp strcmp_const_7_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_7_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp VAR
relsq tmp VAR 1
subaddr strcmp_const_7_bStr tmp
rem End setaddr

label STRCMP_CONST_7_LOOP
rem decleq strcmp_const_7_len 0 STEP1_SET_VALUE
lblsq strcmp_const_7_len CONST_0 STEP1_SET_VALUE
rem dec strcmp_const_7_len 1
relsq strcmp_const_7_len CONST_1 1

rem Start jne strcmp_const_7_aStr strcmp_const_7_bStr STRCMP_CONST_7_END tmp tmp2

rem Start mov tmp strcmp_const_7_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_7_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_7_bStr
relsq tmp strcmp_const_7_bStr 1

rem Start jnz tmp STRCMP_CONST_7_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_7_END
lblsq tmp CONST_-1 JNZ_15_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_15_END
label JNZ_15_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_7_END
label JNZ_15_END
rem End jnz

rem End jne

rem incaddr strcmp_const_7_aStr 8
subaddr strcmp_const_7_aStr CONST_-8
rem incaddr strcmp_const_7_bStr 8
subaddr strcmp_const_7_bStr CONST_-8
rem lbljmp STRCMP_CONST_7_LOOP
lblsq ZERO ZERO STRCMP_CONST_7_LOOP
label STRCMP_CONST_7_REVERT_ADDR
rem decaddr VAR 8
subaddr VAR CONST_8
label STRCMP_CONST_7_END
rem End strcmp_const

lblsq ZERO ZERO STEP1_END

label STEP1_SET_VALUE

rem Start from_hex symbolsCur_step1 curTokens_step1 tmp tmp2
addr from_hex_1_a 0
rem copyaddr from_hex_1_a symbolsCur_step1 tmp tmp2

rem Start setaddr from_hex_1_a symbolsCur_step1_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 from_hex_1_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp symbolsCur_step1_addrRef_0 1
subaddr from_hex_1_a tmp
rem End setaddr

rem zero from_hex_1_a
rem sub from_hex_1_a from_hex_1_a
relsq from_hex_1_a from_hex_1_a 1
addr from_hex_1_strBuf 0

rem Start setaddr from_hex_1_strBuf curTokens_step1 tmp tmp2

rem Start mov tmp from_hex_1_strBuf_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 from_hex_1_strBuf_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp curTokens_step1
relsq tmp curTokens_step1 1
subaddr from_hex_1_strBuf tmp
rem End setaddr

var from_hex_1_strLen 0
rem incaddr curTokens_step1 8
subaddr curTokens_step1 CONST_-8

rem Start mov from_hex_1_strLen curTokens_step1 tmp
rem movneg tmp curTokens_step1
relsq tmp tmp 1
relsq tmp curTokens_step1 1
rem movneg from_hex_1_strLen tmp
relsq from_hex_1_strLen from_hex_1_strLen 1
relsq from_hex_1_strLen tmp 1
rem End mov

rem decaddr curTokens_step1 8
subaddr curTokens_step1 CONST_8
var from_hex_1_isNeg 0
rem zero from_hex_1_isNeg
rem sub from_hex_1_isNeg from_hex_1_isNeg
relsq from_hex_1_isNeg from_hex_1_isNeg 1

rem Start mov tmp from_hex_1_strBuf tmp2
rem movneg tmp2 from_hex_1_strBuf
relsq tmp2 tmp2 1
relsq tmp2 from_hex_1_strBuf 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem decleq tmp 2c FROM_HEX_1_LOOP
lblsq tmp CONST_2C FROM_HEX_1_LOOP
rem decleq tmp 1 FROM_HEX_1_NEG_SIGN
lblsq tmp CONST_1 FROM_HEX_1_NEG_SIGN
rem lbljmp FROM_HEX_1_LOOP
lblsq ZERO ZERO FROM_HEX_1_LOOP
label FROM_HEX_1_NEG_SIGN
rem inc from_hex_1_isNeg 1
rem dec from_hex_1_isNeg -1
relsq from_hex_1_isNeg CONST_-1 1
rem dec from_hex_1_strLen 1
relsq from_hex_1_strLen CONST_1 1
rem incaddr from_hex_1_strBuf 8
subaddr from_hex_1_strBuf CONST_-8
label FROM_HEX_1_LOOP
rem decleq from_hex_1_strLen 0 FROM_HEX_1_NEGATE
lblsq from_hex_1_strLen CONST_0 FROM_HEX_1_NEGATE
rem dec from_hex_1_strLen 1
relsq from_hex_1_strLen CONST_1 1

rem Start mov tmp from_hex_1_strBuf tmp2
rem movneg tmp2 from_hex_1_strBuf
relsq tmp2 tmp2 1
relsq tmp2 from_hex_1_strBuf 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem incaddr from_hex_1_strBuf 8
subaddr from_hex_1_strBuf CONST_-8
var from_hex_1_val 0
rem zero from_hex_1_val
rem sub from_hex_1_val from_hex_1_val
relsq from_hex_1_val from_hex_1_val 1
rem dec tmp 2f
relsq tmp CONST_2F 1
rem movneg from_hex_1_val tmp
rem zero from_hex_1_val
relsq from_hex_1_val from_hex_1_val 1
rem sub from_hex_1_val tmp
relsq from_hex_1_val tmp 1
rem inc from_hex_1_val 1
rem dec from_hex_1_val -1
relsq from_hex_1_val CONST_-1 1
rem decleq tmp a FROM_HEX_1_WRITE
lblsq tmp CONST_A FROM_HEX_1_WRITE
rem dec tmp 7
relsq tmp CONST_7 1
rem movneg from_hex_1_val tmp
rem zero from_hex_1_val
relsq from_hex_1_val from_hex_1_val 1
rem sub from_hex_1_val tmp
relsq from_hex_1_val tmp 1
rem dec from_hex_1_val 9
relsq from_hex_1_val CONST_9 1
rem decleq tmp 6 FROM_HEX_1_WRITE
lblsq tmp CONST_6 FROM_HEX_1_WRITE
rem dec tmp 1a
relsq tmp CONST_1A 1
rem movneg from_hex_1_val tmp
rem zero from_hex_1_val
relsq from_hex_1_val from_hex_1_val 1
rem sub from_hex_1_val tmp
relsq from_hex_1_val tmp 1
rem dec from_hex_1_val 9
relsq from_hex_1_val CONST_9 1
label FROM_HEX_1_WRITE

rem Start mul_16 from_hex_1_a tmp
rem zero tmp
relsq tmp tmp 1
rem sub tmp from_hex_1_a
relsq tmp from_hex_1_a 1
rem sub tmp from_hex_1_a
relsq tmp from_hex_1_a 1
rem sub tmp from_hex_1_a
relsq tmp from_hex_1_a 1
rem sub tmp from_hex_1_a
relsq tmp from_hex_1_a 1
rem sub tmp from_hex_1_a
relsq tmp from_hex_1_a 1
rem sub from_hex_1_a tmp
relsq from_hex_1_a tmp 1
rem sub from_hex_1_a tmp
relsq from_hex_1_a tmp 1
rem sub from_hex_1_a tmp
relsq from_hex_1_a tmp 1
rem End mul_16

rem sub from_hex_1_a from_hex_1_val
relsq from_hex_1_a from_hex_1_val 1
rem lbljmp FROM_HEX_1_LOOP
lblsq ZERO ZERO FROM_HEX_1_LOOP
label FROM_HEX_1_NEGATE
rem decleq from_hex_1_isNeg 0 FROM_HEX_1_END
lblsq from_hex_1_isNeg CONST_0 FROM_HEX_1_END

rem Start neg from_hex_1_a tmp tmp2
rem movneg tmp from_hex_1_a
relsq tmp tmp 1
relsq tmp from_hex_1_a 1

rem Start mov from_hex_1_a tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
relsq from_hex_1_a from_hex_1_a 1
relsq from_hex_1_a tmp2 1
rem End mov

rem End neg

label FROM_HEX_1_END
rem End from_hex


label STEP1_END
subaddr curLine CONST_-58
subaddr symbolsCur_step1 CONST_-8
relsq symbolsLen CONST_-1 1
lblsq ZERO ZERO STEP1_LOOP


rem 2. Count symbol references (Pass 1)
label STEP2_START

rem Start setaddr curLine linesPass1Begin tmp tmp2

rem Start mov tmp curLine_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 curLine_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp linesPass1Begin
relsq tmp linesPass1Begin 1
subaddr curLine tmp
rem End setaddr


rem Start mov linesLeft linesPass1Len tmp
rem movneg tmp linesPass1Len
relsq tmp tmp 1
relsq tmp linesPass1Len 1
rem movneg linesLeft tmp
relsq linesLeft linesLeft 1
relsq linesLeft tmp 1
rem End mov


label STEP2_LOOP
lblsq linesLeft CONST_0 STEP3_START
relsq linesLeft CONST_1 1

subaddr curLine CONST_-18

rem Start setaddr incRefCount_key curLine tmp tmp2

rem Start mov tmp incRefCount_key_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 incRefCount_key_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp curLine
relsq tmp curLine 1
subaddr incRefCount_key tmp
rem End setaddr

subaddr curLine CONST_18


rem Start strcmp_const curLine ABSSQ STEP2_HANDLE_SQ tmp tmp2
addr strcmp_const_8_a 0
rem copyaddr strcmp_const_8_a curLine tmp tmp2

rem Start setaddr strcmp_const_8_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_8_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_8_a tmp
rem End setaddr

rem incaddr strcmp_const_8_a 8
subaddr strcmp_const_8_a CONST_-8
rem incaddr ABSSQ 8
subaddr ABSSQ CONST_-8

rem Start jne strcmp_const_8_a ABSSQ STRCMP_CONST_8_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_8_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_8_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ABSSQ
relsq tmp ABSSQ 1

rem Start jnz tmp STRCMP_CONST_8_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_8_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_16_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_16_END
label JNZ_16_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_8_REVERT_ADDR
label JNZ_16_END
rem End jnz

rem End jne

var strcmp_const_8_len 0

rem Start mov strcmp_const_8_len strcmp_const_8_a tmp
rem movneg tmp strcmp_const_8_a
relsq tmp tmp 1
relsq tmp strcmp_const_8_a 1
rem movneg strcmp_const_8_len tmp
relsq strcmp_const_8_len strcmp_const_8_len 1
relsq strcmp_const_8_len tmp 1
rem End mov

rem decaddr strcmp_const_8_a 8
subaddr strcmp_const_8_a CONST_8
rem decaddr ABSSQ 8
subaddr ABSSQ CONST_8
addr strcmp_const_8_aStr 0
addr strcmp_const_8_bStr 0

rem Start setaddr strcmp_const_8_aStr strcmp_const_8_a tmp tmp2

rem Start mov tmp strcmp_const_8_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_8_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_8_a
relsq tmp strcmp_const_8_a 1
subaddr strcmp_const_8_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_8_bStr ABSSQ tmp tmp2

rem Start mov tmp strcmp_const_8_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_8_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp ABSSQ
relsq tmp ABSSQ 1
subaddr strcmp_const_8_bStr tmp
rem End setaddr

label STRCMP_CONST_8_LOOP
rem decleq strcmp_const_8_len 0 STEP2_HANDLE_SQ
lblsq strcmp_const_8_len CONST_0 STEP2_HANDLE_SQ
rem dec strcmp_const_8_len 1
relsq strcmp_const_8_len CONST_1 1

rem Start jne strcmp_const_8_aStr strcmp_const_8_bStr STRCMP_CONST_8_END tmp tmp2

rem Start mov tmp strcmp_const_8_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_8_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_8_bStr
relsq tmp strcmp_const_8_bStr 1

rem Start jnz tmp STRCMP_CONST_8_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_8_END
lblsq tmp CONST_-1 JNZ_17_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_17_END
label JNZ_17_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_8_END
label JNZ_17_END
rem End jnz

rem End jne

rem incaddr strcmp_const_8_aStr 8
subaddr strcmp_const_8_aStr CONST_-8
rem incaddr strcmp_const_8_bStr 8
subaddr strcmp_const_8_bStr CONST_-8
rem lbljmp STRCMP_CONST_8_LOOP
lblsq ZERO ZERO STRCMP_CONST_8_LOOP
label STRCMP_CONST_8_REVERT_ADDR
rem decaddr ABSSQ 8
subaddr ABSSQ CONST_8
label STRCMP_CONST_8_END
rem End strcmp_const


rem Start strcmp_const curLine RELSQ STEP2_HANDLE_SQ tmp tmp2
addr strcmp_const_9_a 0
rem copyaddr strcmp_const_9_a curLine tmp tmp2

rem Start setaddr strcmp_const_9_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_9_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_9_a tmp
rem End setaddr

rem incaddr strcmp_const_9_a 8
subaddr strcmp_const_9_a CONST_-8
rem incaddr RELSQ 8
subaddr RELSQ CONST_-8

rem Start jne strcmp_const_9_a RELSQ STRCMP_CONST_9_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_9_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_9_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp RELSQ
relsq tmp RELSQ 1

rem Start jnz tmp STRCMP_CONST_9_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_9_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_18_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_18_END
label JNZ_18_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_9_REVERT_ADDR
label JNZ_18_END
rem End jnz

rem End jne

var strcmp_const_9_len 0

rem Start mov strcmp_const_9_len strcmp_const_9_a tmp
rem movneg tmp strcmp_const_9_a
relsq tmp tmp 1
relsq tmp strcmp_const_9_a 1
rem movneg strcmp_const_9_len tmp
relsq strcmp_const_9_len strcmp_const_9_len 1
relsq strcmp_const_9_len tmp 1
rem End mov

rem decaddr strcmp_const_9_a 8
subaddr strcmp_const_9_a CONST_8
rem decaddr RELSQ 8
subaddr RELSQ CONST_8
addr strcmp_const_9_aStr 0
addr strcmp_const_9_bStr 0

rem Start setaddr strcmp_const_9_aStr strcmp_const_9_a tmp tmp2

rem Start mov tmp strcmp_const_9_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_9_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_9_a
relsq tmp strcmp_const_9_a 1
subaddr strcmp_const_9_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_9_bStr RELSQ tmp tmp2

rem Start mov tmp strcmp_const_9_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_9_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp RELSQ
relsq tmp RELSQ 1
subaddr strcmp_const_9_bStr tmp
rem End setaddr

label STRCMP_CONST_9_LOOP
rem decleq strcmp_const_9_len 0 STEP2_HANDLE_SQ
lblsq strcmp_const_9_len CONST_0 STEP2_HANDLE_SQ
rem dec strcmp_const_9_len 1
relsq strcmp_const_9_len CONST_1 1

rem Start jne strcmp_const_9_aStr strcmp_const_9_bStr STRCMP_CONST_9_END tmp tmp2

rem Start mov tmp strcmp_const_9_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_9_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_9_bStr
relsq tmp strcmp_const_9_bStr 1

rem Start jnz tmp STRCMP_CONST_9_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_9_END
lblsq tmp CONST_-1 JNZ_19_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_19_END
label JNZ_19_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_9_END
label JNZ_19_END
rem End jnz

rem End jne

rem incaddr strcmp_const_9_aStr 8
subaddr strcmp_const_9_aStr CONST_-8
rem incaddr strcmp_const_9_bStr 8
subaddr strcmp_const_9_bStr CONST_-8
rem lbljmp STRCMP_CONST_9_LOOP
lblsq ZERO ZERO STRCMP_CONST_9_LOOP
label STRCMP_CONST_9_REVERT_ADDR
rem decaddr RELSQ 8
subaddr RELSQ CONST_8
label STRCMP_CONST_9_END
rem End strcmp_const


rem Start strcmp_const curLine LBLSQ STEP2_HANDLE_SQ tmp tmp2
addr strcmp_const_10_a 0
rem copyaddr strcmp_const_10_a curLine tmp tmp2

rem Start setaddr strcmp_const_10_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_10_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_10_a tmp
rem End setaddr

rem incaddr strcmp_const_10_a 8
subaddr strcmp_const_10_a CONST_-8
rem incaddr LBLSQ 8
subaddr LBLSQ CONST_-8

rem Start jne strcmp_const_10_a LBLSQ STRCMP_CONST_10_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_10_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_10_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LBLSQ
relsq tmp LBLSQ 1

rem Start jnz tmp STRCMP_CONST_10_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_10_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_20_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_20_END
label JNZ_20_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_10_REVERT_ADDR
label JNZ_20_END
rem End jnz

rem End jne

var strcmp_const_10_len 0

rem Start mov strcmp_const_10_len strcmp_const_10_a tmp
rem movneg tmp strcmp_const_10_a
relsq tmp tmp 1
relsq tmp strcmp_const_10_a 1
rem movneg strcmp_const_10_len tmp
relsq strcmp_const_10_len strcmp_const_10_len 1
relsq strcmp_const_10_len tmp 1
rem End mov

rem decaddr strcmp_const_10_a 8
subaddr strcmp_const_10_a CONST_8
rem decaddr LBLSQ 8
subaddr LBLSQ CONST_8
addr strcmp_const_10_aStr 0
addr strcmp_const_10_bStr 0

rem Start setaddr strcmp_const_10_aStr strcmp_const_10_a tmp tmp2

rem Start mov tmp strcmp_const_10_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_10_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_10_a
relsq tmp strcmp_const_10_a 1
subaddr strcmp_const_10_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_10_bStr LBLSQ tmp tmp2

rem Start mov tmp strcmp_const_10_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_10_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LBLSQ
relsq tmp LBLSQ 1
subaddr strcmp_const_10_bStr tmp
rem End setaddr

label STRCMP_CONST_10_LOOP
rem decleq strcmp_const_10_len 0 STEP2_HANDLE_SQ
lblsq strcmp_const_10_len CONST_0 STEP2_HANDLE_SQ
rem dec strcmp_const_10_len 1
relsq strcmp_const_10_len CONST_1 1

rem Start jne strcmp_const_10_aStr strcmp_const_10_bStr STRCMP_CONST_10_END tmp tmp2

rem Start mov tmp strcmp_const_10_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_10_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_10_bStr
relsq tmp strcmp_const_10_bStr 1

rem Start jnz tmp STRCMP_CONST_10_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_10_END
lblsq tmp CONST_-1 JNZ_21_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_21_END
label JNZ_21_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_10_END
label JNZ_21_END
rem End jnz

rem End jne

rem incaddr strcmp_const_10_aStr 8
subaddr strcmp_const_10_aStr CONST_-8
rem incaddr strcmp_const_10_bStr 8
subaddr strcmp_const_10_bStr CONST_-8
rem lbljmp STRCMP_CONST_10_LOOP
lblsq ZERO ZERO STRCMP_CONST_10_LOOP
label STRCMP_CONST_10_REVERT_ADDR
rem decaddr LBLSQ 8
subaddr LBLSQ CONST_8
label STRCMP_CONST_10_END
rem End strcmp_const


rem Start strcmp_const curLine SUBADDR STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
addr strcmp_const_11_a 0
rem copyaddr strcmp_const_11_a curLine tmp tmp2

rem Start setaddr strcmp_const_11_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_11_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_11_a tmp
rem End setaddr

rem incaddr strcmp_const_11_a 8
subaddr strcmp_const_11_a CONST_-8
rem incaddr SUBADDR 8
subaddr SUBADDR CONST_-8

rem Start jne strcmp_const_11_a SUBADDR STRCMP_CONST_11_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_11_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_11_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp SUBADDR
relsq tmp SUBADDR 1

rem Start jnz tmp STRCMP_CONST_11_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_11_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_22_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_22_END
label JNZ_22_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_11_REVERT_ADDR
label JNZ_22_END
rem End jnz

rem End jne

var strcmp_const_11_len 0

rem Start mov strcmp_const_11_len strcmp_const_11_a tmp
rem movneg tmp strcmp_const_11_a
relsq tmp tmp 1
relsq tmp strcmp_const_11_a 1
rem movneg strcmp_const_11_len tmp
relsq strcmp_const_11_len strcmp_const_11_len 1
relsq strcmp_const_11_len tmp 1
rem End mov

rem decaddr strcmp_const_11_a 8
subaddr strcmp_const_11_a CONST_8
rem decaddr SUBADDR 8
subaddr SUBADDR CONST_8
addr strcmp_const_11_aStr 0
addr strcmp_const_11_bStr 0

rem Start setaddr strcmp_const_11_aStr strcmp_const_11_a tmp tmp2

rem Start mov tmp strcmp_const_11_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_11_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_11_a
relsq tmp strcmp_const_11_a 1
subaddr strcmp_const_11_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_11_bStr SUBADDR tmp tmp2

rem Start mov tmp strcmp_const_11_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_11_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp SUBADDR
relsq tmp SUBADDR 1
subaddr strcmp_const_11_bStr tmp
rem End setaddr

label STRCMP_CONST_11_LOOP
rem decleq strcmp_const_11_len 0 STEP2_HANDLE_LBLSQ_SUBADDR
lblsq strcmp_const_11_len CONST_0 STEP2_HANDLE_LBLSQ_SUBADDR
rem dec strcmp_const_11_len 1
relsq strcmp_const_11_len CONST_1 1

rem Start jne strcmp_const_11_aStr strcmp_const_11_bStr STRCMP_CONST_11_END tmp tmp2

rem Start mov tmp strcmp_const_11_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_11_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_11_bStr
relsq tmp strcmp_const_11_bStr 1

rem Start jnz tmp STRCMP_CONST_11_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_11_END
lblsq tmp CONST_-1 JNZ_23_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_23_END
label JNZ_23_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_11_END
label JNZ_23_END
rem End jnz

rem End jne

rem incaddr strcmp_const_11_aStr 8
subaddr strcmp_const_11_aStr CONST_-8
rem incaddr strcmp_const_11_bStr 8
subaddr strcmp_const_11_bStr CONST_-8
rem lbljmp STRCMP_CONST_11_LOOP
lblsq ZERO ZERO STRCMP_CONST_11_LOOP
label STRCMP_CONST_11_REVERT_ADDR
rem decaddr SUBADDR 8
subaddr SUBADDR CONST_8
label STRCMP_CONST_11_END
rem End strcmp_const


rem Start strcmp_const curLine RAW_REF STEP2_HANDLE_RAW_REF tmp tmp2
addr strcmp_const_12_a 0
rem copyaddr strcmp_const_12_a curLine tmp tmp2

rem Start setaddr strcmp_const_12_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_12_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_12_a tmp
rem End setaddr

rem incaddr strcmp_const_12_a 8
subaddr strcmp_const_12_a CONST_-8
rem incaddr RAW_REF 8
subaddr RAW_REF CONST_-8

rem Start jne strcmp_const_12_a RAW_REF STRCMP_CONST_12_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_12_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_12_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp RAW_REF
relsq tmp RAW_REF 1

rem Start jnz tmp STRCMP_CONST_12_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_12_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_24_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_24_END
label JNZ_24_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_12_REVERT_ADDR
label JNZ_24_END
rem End jnz

rem End jne

var strcmp_const_12_len 0

rem Start mov strcmp_const_12_len strcmp_const_12_a tmp
rem movneg tmp strcmp_const_12_a
relsq tmp tmp 1
relsq tmp strcmp_const_12_a 1
rem movneg strcmp_const_12_len tmp
relsq strcmp_const_12_len strcmp_const_12_len 1
relsq strcmp_const_12_len tmp 1
rem End mov

rem decaddr strcmp_const_12_a 8
subaddr strcmp_const_12_a CONST_8
rem decaddr RAW_REF 8
subaddr RAW_REF CONST_8
addr strcmp_const_12_aStr 0
addr strcmp_const_12_bStr 0

rem Start setaddr strcmp_const_12_aStr strcmp_const_12_a tmp tmp2

rem Start mov tmp strcmp_const_12_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_12_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_12_a
relsq tmp strcmp_const_12_a 1
subaddr strcmp_const_12_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_12_bStr RAW_REF tmp tmp2

rem Start mov tmp strcmp_const_12_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_12_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp RAW_REF
relsq tmp RAW_REF 1
subaddr strcmp_const_12_bStr tmp
rem End setaddr

label STRCMP_CONST_12_LOOP
rem decleq strcmp_const_12_len 0 STEP2_HANDLE_RAW_REF
lblsq strcmp_const_12_len CONST_0 STEP2_HANDLE_RAW_REF
rem dec strcmp_const_12_len 1
relsq strcmp_const_12_len CONST_1 1

rem Start jne strcmp_const_12_aStr strcmp_const_12_bStr STRCMP_CONST_12_END tmp tmp2

rem Start mov tmp strcmp_const_12_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_12_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_12_bStr
relsq tmp strcmp_const_12_bStr 1

rem Start jnz tmp STRCMP_CONST_12_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_12_END
lblsq tmp CONST_-1 JNZ_25_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_25_END
label JNZ_25_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_12_END
label JNZ_25_END
rem End jnz

rem End jne

rem incaddr strcmp_const_12_aStr 8
subaddr strcmp_const_12_aStr CONST_-8
rem incaddr strcmp_const_12_bStr 8
subaddr strcmp_const_12_bStr CONST_-8
rem lbljmp STRCMP_CONST_12_LOOP
lblsq ZERO ZERO STRCMP_CONST_12_LOOP
label STRCMP_CONST_12_REVERT_ADDR
rem decaddr RAW_REF 8
subaddr RAW_REF CONST_8
label STRCMP_CONST_12_END
rem End strcmp_const

lblsq ZERO ZERO STEP2_END


label incRefCount
addr incRefCount_key 0
addr incRefCount_it 0

rem Start setaddr incRefCount_it symbolsBegin tmp tmp2

rem Start mov tmp incRefCount_it_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 incRefCount_it_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp symbolsBegin
relsq tmp symbolsBegin 1
subaddr incRefCount_it tmp
rem End setaddr


rem Start find_item_in_buf_with_str_key incRefCount_it incRefCount_key 30 symbolsLen incRefCount_doInc tmp tmp2
var find_item_in_buf_with_str_key_0_elmsLeft 0

rem Start mov find_item_in_buf_with_str_key_0_elmsLeft symbolsLen tmp
rem movneg tmp symbolsLen
relsq tmp tmp 1
relsq tmp symbolsLen 1
rem movneg find_item_in_buf_with_str_key_0_elmsLeft tmp
relsq find_item_in_buf_with_str_key_0_elmsLeft find_item_in_buf_with_str_key_0_elmsLeft 1
relsq find_item_in_buf_with_str_key_0_elmsLeft tmp 1
rem End mov

label FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
rem decleq find_item_in_buf_with_str_key_0_elmsLeft 0 FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
lblsq find_item_in_buf_with_str_key_0_elmsLeft CONST_0 FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
rem dec find_item_in_buf_with_str_key_0_elmsLeft 1
relsq find_item_in_buf_with_str_key_0_elmsLeft CONST_1 1

rem Start strcmp_const incRefCount_it incRefCount_key incRefCount_doInc tmp tmp2
addr strcmp_const_13_a 0
rem copyaddr strcmp_const_13_a incRefCount_it tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_13_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp incRefCount_it_addrRef_0 1
subaddr strcmp_const_13_a tmp
rem incaddr strcmp_const_13_a 8
subaddr strcmp_const_13_a CONST_-8
rem incaddr incRefCount_key 8
subaddr incRefCount_key CONST_-8

rem Start jne strcmp_const_13_a incRefCount_key STRCMP_CONST_13_REVERT_ADDR tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_13_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp incRefCount_key 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_13_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_26_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_26_END
label JNZ_26_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_13_REVERT_ADDR
label JNZ_26_END
rem End jne

var strcmp_const_13_len 0

rem Start mov strcmp_const_13_len strcmp_const_13_a tmp
relsq tmp tmp 1
relsq tmp strcmp_const_13_a 1
relsq strcmp_const_13_len strcmp_const_13_len 1
relsq strcmp_const_13_len tmp 1
rem End mov

rem decaddr strcmp_const_13_a 8
subaddr strcmp_const_13_a CONST_8
rem decaddr incRefCount_key 8
subaddr incRefCount_key CONST_8
addr strcmp_const_13_aStr 0
addr strcmp_const_13_bStr 0

rem Start setaddr strcmp_const_13_aStr strcmp_const_13_a tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_13_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp strcmp_const_13_a 1
subaddr strcmp_const_13_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_13_bStr incRefCount_key tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_13_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp incRefCount_key 1
subaddr strcmp_const_13_bStr tmp
rem End setaddr

label STRCMP_CONST_13_LOOP
rem decleq strcmp_const_13_len 0 incRefCount_doInc
lblsq strcmp_const_13_len CONST_0 incRefCount_doInc
rem dec strcmp_const_13_len 1
relsq strcmp_const_13_len CONST_1 1

rem Start jne strcmp_const_13_aStr strcmp_const_13_bStr STRCMP_CONST_13_END tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_13_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp strcmp_const_13_bStr 1
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_13_END
lblsq tmp CONST_-1 JNZ_27_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_27_END
label JNZ_27_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_13_END
label JNZ_27_END
rem End jne

rem incaddr strcmp_const_13_aStr 8
subaddr strcmp_const_13_aStr CONST_-8
rem incaddr strcmp_const_13_bStr 8
subaddr strcmp_const_13_bStr CONST_-8
rem lbljmp STRCMP_CONST_13_LOOP
lblsq ZERO ZERO STRCMP_CONST_13_LOOP
label STRCMP_CONST_13_REVERT_ADDR
rem decaddr incRefCount_key 8
subaddr incRefCount_key CONST_8
label STRCMP_CONST_13_END
rem End strcmp_const

rem incaddr incRefCount_it 30
subaddr incRefCount_it CONST_-30
rem lbljmp FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
lblsq ZERO ZERO FIND_ITEM_IN_BUF_WITH_STR_KEY_0_LOOP
label FIND_ITEM_IN_BUF_WITH_STR_KEY_0_NO_MATCH
rem End find_item_in_buf_with_str_key


rem No match. Create a new symbol instead
rem memcpy_const incRefCount_it incRefCount_key 18 tmp tmp2

rem Start memcpy incRefCount_it incRefCount_key CONST_18 tmp tmp2
addr memcpy_0_dst 0
addr memcpy_0_src 0
relsq tmp2 tmp2 1
relsq tmp2 memcpy_0_dst_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp incRefCount_it_addrRef_0 1
subaddr memcpy_0_dst tmp
relsq tmp2 tmp2 1
relsq tmp2 memcpy_0_src_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp incRefCount_key_addrRef_0 1
subaddr memcpy_0_src tmp
var memcpy_0_numLeft 0
relsq tmp tmp 1
relsq tmp CONST_18 1
relsq memcpy_0_numLeft memcpy_0_numLeft 1
relsq memcpy_0_numLeft tmp 1
label MEMCPY_0_LOOP
lblsq memcpy_0_numLeft CONST_0 MEMCPY_0_END
relsq memcpy_0_numLeft CONST_8 1
relsq tmp tmp 1
relsq tmp memcpy_0_src 1
relsq memcpy_0_dst memcpy_0_dst 1
relsq memcpy_0_dst tmp 1
subaddr memcpy_0_dst CONST_-8
subaddr memcpy_0_src CONST_-8
lblsq ZERO ZERO MEMCPY_0_LOOP
label MEMCPY_0_END
rem End memcpy

subaddr incRefCount_it CONST_-18
rem set incRefCount_it -1
relsq incRefCount_it incRefCount_it 1
relsq incRefCount_it CONST_1 1
subaddr incRefCount_it CONST_-8
relsq incRefCount_it incRefCount_it 1
subaddr incRefCount_it CONST_-8

rem Start mov incRefCount_it SYM_VAL_PLACEHOLDER tmp
rem movneg tmp SYM_VAL_PLACEHOLDER
relsq tmp tmp 1
relsq tmp SYM_VAL_PLACEHOLDER 1
rem movneg incRefCount_it tmp
relsq incRefCount_it incRefCount_it 1
relsq incRefCount_it tmp 1
rem End mov

subaddr incRefCount_it CONST_28
relsq symbolsLen CONST_-1 1

label incRefCount_doInc
subaddr incRefCount_it CONST_-20
relsq incRefCount_it CONST_-1 1
rem ret incRefCount
raw 0000000000000000 0000000000000000
label incRefCount_retAddr
raw 0000000000000000


label STEP2_HANDLE_SQ
rem call incRefCount tmp

rem Start mov incRefCount_retAddr incRefCount_retPosAddr_0 tmp
relsq tmp tmp 1
relsq tmp incRefCount_retPosAddr_0 1
relsq incRefCount_retAddr incRefCount_retAddr 1
relsq incRefCount_retAddr tmp 1
rem End mov

rem lbljmp incRefCount
lblsq ZERO ZERO incRefCount
label incRefCount_retPosAddr_0
raw_ref incRefCount_retPos_0
label incRefCount_retPos_0

subaddr incRefCount_key CONST_-18
rem call incRefCount tmp

rem Start mov incRefCount_retAddr incRefCount_retPosAddr_1 tmp
relsq tmp tmp 1
relsq tmp incRefCount_retPosAddr_1 1
relsq incRefCount_retAddr incRefCount_retAddr 1
relsq incRefCount_retAddr tmp 1
rem End mov

rem lbljmp incRefCount
lblsq ZERO ZERO incRefCount
label incRefCount_retPosAddr_1
raw_ref incRefCount_retPos_1
label incRefCount_retPos_1


rem Start strcmp_const curLine LBLSQ STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
addr strcmp_const_14_a 0
rem copyaddr strcmp_const_14_a curLine tmp tmp2

rem Start setaddr strcmp_const_14_a curLine_addrRef_0 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_14_a_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp curLine_addrRef_0 1
subaddr strcmp_const_14_a tmp
rem End setaddr

rem incaddr strcmp_const_14_a 8
subaddr strcmp_const_14_a CONST_-8
rem incaddr LBLSQ 8
subaddr LBLSQ CONST_-8

rem Start jne strcmp_const_14_a LBLSQ STRCMP_CONST_14_REVERT_ADDR tmp tmp2

rem Start mov tmp strcmp_const_14_a tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_14_a 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LBLSQ
relsq tmp LBLSQ 1

rem Start jnz tmp STRCMP_CONST_14_REVERT_ADDR tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_14_REVERT_ADDR
lblsq tmp CONST_-1 JNZ_28_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_28_END
label JNZ_28_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_14_REVERT_ADDR
label JNZ_28_END
rem End jnz

rem End jne

var strcmp_const_14_len 0

rem Start mov strcmp_const_14_len strcmp_const_14_a tmp
rem movneg tmp strcmp_const_14_a
relsq tmp tmp 1
relsq tmp strcmp_const_14_a 1
rem movneg strcmp_const_14_len tmp
relsq strcmp_const_14_len strcmp_const_14_len 1
relsq strcmp_const_14_len tmp 1
rem End mov

rem decaddr strcmp_const_14_a 8
subaddr strcmp_const_14_a CONST_8
rem decaddr LBLSQ 8
subaddr LBLSQ CONST_8
addr strcmp_const_14_aStr 0
addr strcmp_const_14_bStr 0

rem Start setaddr strcmp_const_14_aStr strcmp_const_14_a tmp tmp2

rem Start mov tmp strcmp_const_14_aStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_14_aStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_14_a
relsq tmp strcmp_const_14_a 1
subaddr strcmp_const_14_aStr tmp
rem End setaddr


rem Start setaddr strcmp_const_14_bStr LBLSQ tmp tmp2

rem Start mov tmp strcmp_const_14_bStr_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_14_bStr_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp LBLSQ
relsq tmp LBLSQ 1
subaddr strcmp_const_14_bStr tmp
rem End setaddr

label STRCMP_CONST_14_LOOP
rem decleq strcmp_const_14_len 0 STEP2_HANDLE_LBLSQ_SUBADDR
lblsq strcmp_const_14_len CONST_0 STEP2_HANDLE_LBLSQ_SUBADDR
rem dec strcmp_const_14_len 1
relsq strcmp_const_14_len CONST_1 1

rem Start jne strcmp_const_14_aStr strcmp_const_14_bStr STRCMP_CONST_14_END tmp tmp2

rem Start mov tmp strcmp_const_14_aStr tmp2
relsq tmp2 tmp2 1
relsq tmp2 strcmp_const_14_aStr 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp strcmp_const_14_bStr
relsq tmp strcmp_const_14_bStr 1

rem Start jnz tmp STRCMP_CONST_14_END tmp2
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
lblsq tmp2 CONST_-1 STRCMP_CONST_14_END
lblsq tmp CONST_-1 JNZ_29_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO JNZ_29_END
label JNZ_29_REVERT_AND_JUMP
relsq tmp CONST_1 1
lblsq ZERO ZERO STRCMP_CONST_14_END
label JNZ_29_END
rem End jnz

rem End jne

rem incaddr strcmp_const_14_aStr 8
subaddr strcmp_const_14_aStr CONST_-8
rem incaddr strcmp_const_14_bStr 8
subaddr strcmp_const_14_bStr CONST_-8
rem lbljmp STRCMP_CONST_14_LOOP
lblsq ZERO ZERO STRCMP_CONST_14_LOOP
label STRCMP_CONST_14_REVERT_ADDR
rem decaddr LBLSQ 8
subaddr LBLSQ CONST_8
label STRCMP_CONST_14_END
rem End strcmp_const

lblsq ZERO ZERO STEP2_END


label STEP2_HANDLE_LBLSQ_SUBADDR
subaddr incRefCount_key CONST_-18
rem call incRefCount tmp

rem Start mov incRefCount_retAddr incRefCount_retPosAddr_2 tmp
relsq tmp tmp 1
relsq tmp incRefCount_retPosAddr_2 1
relsq incRefCount_retAddr incRefCount_retAddr 1
relsq incRefCount_retAddr tmp 1
rem End mov

rem lbljmp incRefCount
lblsq ZERO ZERO incRefCount
label incRefCount_retPosAddr_2
raw_ref incRefCount_retPos_2
label incRefCount_retPos_2
lblsq ZERO ZERO STEP2_END


label STEP2_HANDLE_RAW_REF
subaddr curLine CONST_-20
var tokensCount 0

rem Start mov tokensCount curLine tmp
rem movneg tmp curLine
relsq tmp tmp 1
relsq tmp curLine 1
rem movneg tokensCount tmp
relsq tokensCount tokensCount 1
relsq tokensCount tmp 1
rem End mov

subaddr curLine CONST_20

label STEP2_RAW_REF_LOOP
lblsq tokensCount CONST_0 STEP2_END
relsq tokensCount CONST_1 1
rem call incRefCount tmp

rem Start mov incRefCount_retAddr incRefCount_retPosAddr_3 tmp
relsq tmp tmp 1
relsq tmp incRefCount_retPosAddr_3 1
relsq incRefCount_retAddr incRefCount_retAddr 1
relsq incRefCount_retAddr tmp 1
rem End mov

rem lbljmp incRefCount
lblsq ZERO ZERO incRefCount
label incRefCount_retPosAddr_3
raw_ref incRefCount_retPos_3
label incRefCount_retPos_3
subaddr incRefCount_key CONST_-18
lblsq ZERO ZERO STEP2_RAW_REF_LOOP


label STEP2_END
subaddr curLine CONST_-58
lblsq ZERO ZERO STEP2_LOOP


rem 3. Create subaddr/zeroaddr stubs
label STEP3_START

addr symbolsCur_step3 0

rem Start setaddr symbolsCur_step3 symbolsBegin tmp tmp2

rem Start mov tmp symbolsCur_step3_addrRef_0 tmp2
relsq tmp2 tmp2 1
relsq tmp2 symbolsCur_step3_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

rem sub tmp symbolsBegin
relsq tmp symbolsBegin 1
subaddr symbolsCur_step3 tmp
rem End setaddr

var symbolsLeft 0

rem Start mov symbolsLeft symbolsLen tmp
rem movneg tmp symbolsLen
relsq tmp tmp 1
relsq tmp symbolsLen 1
rem movneg symbolsLeft tmp
relsq symbolsLeft symbolsLeft 1
relsq symbolsLeft tmp 1
rem End mov


label LOOP
lblsq symbolsLeft CONST_0 HALT
relsq symbolsLeft CONST_1 1


rem Start puts SYMBOL_PART_1 tmp tmp2
addr puts_1_str 0

rem Start setaddr puts_1_str SYMBOL_PART_1 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_1_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp SYMBOL_PART_1 1
subaddr puts_1_str tmp
rem End setaddr

var puts_1_len 0 
rem incaddr SYMBOL_PART_1 8
subaddr SYMBOL_PART_1 CONST_-8

rem Start mov puts_1_len SYMBOL_PART_1 tmp
relsq tmp tmp 1
relsq tmp SYMBOL_PART_1 1
relsq puts_1_len puts_1_len 1
relsq puts_1_len tmp 1
rem End mov

rem decaddr SYMBOL_PART_1 8
subaddr SYMBOL_PART_1 CONST_8
label PUTS_1_LOOP
rem decleq puts_1_len 0 PUTS_1_END
lblsq puts_1_len CONST_0 PUTS_1_END
rem dec puts_1_len 1
relsq puts_1_len CONST_1 1

rem Start putchar puts_1_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_1_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_1_str 8
subaddr puts_1_str CONST_-8
rem lbljmp PUTS_1_LOOP
lblsq ZERO ZERO PUTS_1_LOOP
label PUTS_1_END
rem End puts


rem Start puts symbolsCur_step3 tmp tmp2
addr puts_2_str 0

rem Start setaddr puts_2_str symbolsCur_step3 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_2_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp symbolsCur_step3 1
subaddr puts_2_str tmp
rem End setaddr

var puts_2_len 0 
rem incaddr symbolsCur_step3 8
subaddr symbolsCur_step3 CONST_-8

rem Start mov puts_2_len symbolsCur_step3 tmp
relsq tmp tmp 1
relsq tmp symbolsCur_step3 1
relsq puts_2_len puts_2_len 1
relsq puts_2_len tmp 1
rem End mov

rem decaddr symbolsCur_step3 8
subaddr symbolsCur_step3 CONST_8
label PUTS_2_LOOP
rem decleq puts_2_len 0 PUTS_2_END
lblsq puts_2_len CONST_0 PUTS_2_END
rem dec puts_2_len 1
relsq puts_2_len CONST_1 1

rem Start putchar puts_2_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_2_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_2_str 8
subaddr puts_2_str CONST_-8
rem lbljmp PUTS_2_LOOP
lblsq ZERO ZERO PUTS_2_LOOP
label PUTS_2_END
rem End puts


rem Start putchar LINE_FEED tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp LINE_FEED
relsq tmp tmp 1
relsq tmp LINE_FEED 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar


subaddr symbolsCur_step3 CONST_-18

rem Start puts SYMBOL_PART_2 tmp tmp2
addr puts_3_str 0

rem Start setaddr puts_3_str SYMBOL_PART_2 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_3_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp SYMBOL_PART_2 1
subaddr puts_3_str tmp
rem End setaddr

var puts_3_len 0 
rem incaddr SYMBOL_PART_2 8
subaddr SYMBOL_PART_2 CONST_-8

rem Start mov puts_3_len SYMBOL_PART_2 tmp
relsq tmp tmp 1
relsq tmp SYMBOL_PART_2 1
relsq puts_3_len puts_3_len 1
relsq puts_3_len tmp 1
rem End mov

rem decaddr SYMBOL_PART_2 8
subaddr SYMBOL_PART_2 CONST_8
label PUTS_3_LOOP
rem decleq puts_3_len 0 PUTS_3_END
lblsq puts_3_len CONST_0 PUTS_3_END
rem dec puts_3_len 1
relsq puts_3_len CONST_1 1

rem Start putchar puts_3_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_3_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_3_str 8
subaddr puts_3_str CONST_-8
rem lbljmp PUTS_3_LOOP
lblsq ZERO ZERO PUTS_3_LOOP
label PUTS_3_END
rem End puts


rem Start print_qword symbolsCur_step3 tmp tmp2 tmp3

rem Start mov tmp symbolsCur_step3 tmp2
rem movneg tmp2 symbolsCur_step3
relsq tmp2 tmp2 1
relsq tmp2 symbolsCur_step3 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

var print_qword_0_isNeg 0
rem zero print_qword_0_isNeg
rem sub print_qword_0_isNeg print_qword_0_isNeg
relsq print_qword_0_isNeg print_qword_0_isNeg 1
rem jn tmp PRINT_QWORD_0_IS_NEG tmp2 tmp3

rem Start jl tmp ZERO PRINT_QWORD_0_IS_NEG tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 CONST_-1 1
lblsq tmp2 ZERO PRINT_QWORD_0_IS_NEG
rem End jl

rem lbljmp PRINT_QWORD_0_LOOP
lblsq ZERO ZERO PRINT_QWORD_0_LOOP
label PRINT_QWORD_0_IS_NEG
rem inc print_qword_0_isNeg 1
rem dec print_qword_0_isNeg -1
relsq print_qword_0_isNeg CONST_-1 1

rem Start neg tmp tmp2 tmp3
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1

rem Start mov tmp tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp tmp 1
relsq tmp tmp3 1
rem End mov

rem End neg

rem lbljmp PRINT_QWORD_0_LOOP
lblsq ZERO ZERO PRINT_QWORD_0_LOOP
label PRINT_QWORD_0_SUBBERS
raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
label PRINT_QWORD_0_LOOP

rem Start jz PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_END tmp2
rem movneg tmp2 PRINT_QWORD_0_SUBBERS
relsq tmp2 tmp2 1
relsq tmp2 PRINT_QWORD_0_SUBBERS 1
rem incleq tmp2 1 JZ_8_END
lblsq tmp2 CONST_-1 JZ_8_END
rem incleq PRINT_QWORD_0_SUBBERS 1 JZ_8_REVERT_A
lblsq PRINT_QWORD_0_SUBBERS CONST_-1 JZ_8_REVERT_A
rem dec PRINT_QWORD_0_SUBBERS 1
relsq PRINT_QWORD_0_SUBBERS CONST_1 1
rem lbljmp PRINT_QWORD_0_END
lblsq ZERO ZERO PRINT_QWORD_0_END
label JZ_8_REVERT_A
rem dec PRINT_QWORD_0_SUBBERS 1
relsq PRINT_QWORD_0_SUBBERS CONST_1 1
label JZ_8_END
rem End jz

var print_qword_0_nibbleVal 0
rem zero print_qword_0_nibbleVal
rem sub print_qword_0_nibbleVal print_qword_0_nibbleVal
relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
label PRINT_QWORD_0_SUBTRACT_A

rem Start jl tmp PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_HANDLE_NIBBLE tmp2 tmp3

rem Start mov tmp2 tmp tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem inc tmp2 1
relsq tmp2 CONST_-1 1
lblsq tmp2 PRINT_QWORD_0_SUBBERS PRINT_QWORD_0_HANDLE_NIBBLE
rem End jl

rem inc print_qword_0_nibbleVal 1
rem dec print_qword_0_nibbleVal -1
relsq print_qword_0_nibbleVal CONST_-1 1
rem sub tmp PRINT_QWORD_0_SUBBERS
relsq tmp PRINT_QWORD_0_SUBBERS 1
rem lbljmp PRINT_QWORD_0_SUBTRACT_A
lblsq ZERO ZERO PRINT_QWORD_0_SUBTRACT_A
label PRINT_QWORD_0_HANDLE_NIBBLE

rem Start jz tmp PRINT_QWORD_0_HANDLE_LOW_NIBBLE tmp2
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem incleq tmp2 1 JZ_9_END
lblsq tmp2 CONST_-1 JZ_9_END
rem incleq tmp 1 JZ_9_REVERT_A
lblsq tmp CONST_-1 JZ_9_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
rem lbljmp PRINT_QWORD_0_HANDLE_LOW_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_0_HANDLE_LOW_NIBBLE
label JZ_9_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
label JZ_9_END
rem End jz

lblsq print_qword_0_isNeg CONST_0 PRINT_QWORD_0_PRINT_NIBBLE

rem Start mov tmp2 print_qword_0_nibbleVal tmp3
rem movneg tmp3 print_qword_0_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_0_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_0_nibbleVal f
rem zero print_qword_0_nibbleVal
relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
rem inc print_qword_0_nibbleVal f
relsq print_qword_0_nibbleVal CONST_-F 1
rem sub print_qword_0_nibbleVal tmp2
relsq print_qword_0_nibbleVal tmp2 1
rem lbljmp PRINT_QWORD_0_PRINT_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_0_PRINT_NIBBLE
label PRINT_QWORD_0_HANDLE_LOW_NIBBLE
rem decleq print_qword_0_isNeg 0 PRINT_QWORD_0_PRINT_NIBBLE
lblsq print_qword_0_isNeg CONST_0 PRINT_QWORD_0_PRINT_NIBBLE
rem decleq print_qword_0_nibbleVal 0 PRINT_QWORD_0_PRINT_NIBBLE
lblsq print_qword_0_nibbleVal CONST_0 PRINT_QWORD_0_PRINT_NIBBLE

rem Start mov tmp2 print_qword_0_nibbleVal tmp3
rem movneg tmp3 print_qword_0_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_0_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_0_nibbleVal 10
rem zero print_qword_0_nibbleVal
relsq print_qword_0_nibbleVal print_qword_0_nibbleVal 1
rem inc print_qword_0_nibbleVal 10
relsq print_qword_0_nibbleVal CONST_-10 1
rem sub print_qword_0_nibbleVal tmp2
relsq print_qword_0_nibbleVal tmp2 1
label PRINT_QWORD_0_PRINT_NIBBLE

rem Start print_nibble print_qword_0_nibbleVal tmp2 tmp3
rem lbljmp PRINT_NIBBLE_0_START
lblsq ZERO ZERO PRINT_NIBBLE_0_START
label PRINT_NIBBLE_0_HEX_CHARSET
rem raw_chars 0123456789abcdef
raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
label PRINT_NIBBLE_0_START
rem movneg tmp2 print_qword_0_nibbleVal
relsq tmp2 tmp2 1
relsq tmp2 print_qword_0_nibbleVal 1

rem Start mul_8 tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
rem End mul_8

subaddr PRINT_NIBBLE_0_HEX_CHARSET tmp2

rem Start putchar PRINT_NIBBLE_0_HEX_CHARSET tmp3
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp3 tmp3 1
relsq tmp3 PRINT_NIBBLE_0_HEX_CHARSET 1
relsq tmp3 CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp3 1
rem End putchar

rem movneg tmp3 tmp2
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
subaddr PRINT_NIBBLE_0_HEX_CHARSET tmp3
rem End print_nibble

rem incaddr PRINT_QWORD_0_SUBBERS 8
subaddr PRINT_QWORD_0_SUBBERS CONST_-8
rem lbljmp PRINT_QWORD_0_LOOP
lblsq ZERO ZERO PRINT_QWORD_0_LOOP
label PRINT_QWORD_0_END
rem decaddr PRINT_QWORD_0_SUBBERS 80
subaddr PRINT_QWORD_0_SUBBERS CONST_80
rem End print_qword


rem Start putchar LINE_FEED tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp LINE_FEED
relsq tmp tmp 1
relsq tmp LINE_FEED 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar


subaddr symbolsCur_step3 CONST_-8

rem Start puts SYMBOL_PART_3 tmp tmp2
addr puts_4_str 0

rem Start setaddr puts_4_str SYMBOL_PART_3 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_4_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp SYMBOL_PART_3 1
subaddr puts_4_str tmp
rem End setaddr

var puts_4_len 0 
rem incaddr SYMBOL_PART_3 8
subaddr SYMBOL_PART_3 CONST_-8

rem Start mov puts_4_len SYMBOL_PART_3 tmp
relsq tmp tmp 1
relsq tmp SYMBOL_PART_3 1
relsq puts_4_len puts_4_len 1
relsq puts_4_len tmp 1
rem End mov

rem decaddr SYMBOL_PART_3 8
subaddr SYMBOL_PART_3 CONST_8
label PUTS_4_LOOP
rem decleq puts_4_len 0 PUTS_4_END
lblsq puts_4_len CONST_0 PUTS_4_END
rem dec puts_4_len 1
relsq puts_4_len CONST_1 1

rem Start putchar puts_4_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_4_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_4_str 8
subaddr puts_4_str CONST_-8
rem lbljmp PUTS_4_LOOP
lblsq ZERO ZERO PUTS_4_LOOP
label PUTS_4_END
rem End puts


rem Start print_qword symbolsCur_step3 tmp tmp2 tmp3

rem Start mov tmp symbolsCur_step3 tmp2
rem movneg tmp2 symbolsCur_step3
relsq tmp2 tmp2 1
relsq tmp2 symbolsCur_step3 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

var print_qword_1_isNeg 0
rem zero print_qword_1_isNeg
rem sub print_qword_1_isNeg print_qword_1_isNeg
relsq print_qword_1_isNeg print_qword_1_isNeg 1
rem jn tmp PRINT_QWORD_1_IS_NEG tmp2 tmp3

rem Start jl tmp ZERO PRINT_QWORD_1_IS_NEG tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 CONST_-1 1
lblsq tmp2 ZERO PRINT_QWORD_1_IS_NEG
rem End jl

rem lbljmp PRINT_QWORD_1_LOOP
lblsq ZERO ZERO PRINT_QWORD_1_LOOP
label PRINT_QWORD_1_IS_NEG
rem inc print_qword_1_isNeg 1
rem dec print_qword_1_isNeg -1
relsq print_qword_1_isNeg CONST_-1 1

rem Start neg tmp tmp2 tmp3
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1

rem Start mov tmp tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp tmp 1
relsq tmp tmp3 1
rem End mov

rem End neg

rem lbljmp PRINT_QWORD_1_LOOP
lblsq ZERO ZERO PRINT_QWORD_1_LOOP
label PRINT_QWORD_1_SUBBERS
raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
label PRINT_QWORD_1_LOOP

rem Start jz PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_END tmp2
rem movneg tmp2 PRINT_QWORD_1_SUBBERS
relsq tmp2 tmp2 1
relsq tmp2 PRINT_QWORD_1_SUBBERS 1
rem incleq tmp2 1 JZ_10_END
lblsq tmp2 CONST_-1 JZ_10_END
rem incleq PRINT_QWORD_1_SUBBERS 1 JZ_10_REVERT_A
lblsq PRINT_QWORD_1_SUBBERS CONST_-1 JZ_10_REVERT_A
rem dec PRINT_QWORD_1_SUBBERS 1
relsq PRINT_QWORD_1_SUBBERS CONST_1 1
rem lbljmp PRINT_QWORD_1_END
lblsq ZERO ZERO PRINT_QWORD_1_END
label JZ_10_REVERT_A
rem dec PRINT_QWORD_1_SUBBERS 1
relsq PRINT_QWORD_1_SUBBERS CONST_1 1
label JZ_10_END
rem End jz

var print_qword_1_nibbleVal 0
rem zero print_qword_1_nibbleVal
rem sub print_qword_1_nibbleVal print_qword_1_nibbleVal
relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
label PRINT_QWORD_1_SUBTRACT_A

rem Start jl tmp PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_HANDLE_NIBBLE tmp2 tmp3

rem Start mov tmp2 tmp tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem inc tmp2 1
relsq tmp2 CONST_-1 1
lblsq tmp2 PRINT_QWORD_1_SUBBERS PRINT_QWORD_1_HANDLE_NIBBLE
rem End jl

rem inc print_qword_1_nibbleVal 1
rem dec print_qword_1_nibbleVal -1
relsq print_qword_1_nibbleVal CONST_-1 1
rem sub tmp PRINT_QWORD_1_SUBBERS
relsq tmp PRINT_QWORD_1_SUBBERS 1
rem lbljmp PRINT_QWORD_1_SUBTRACT_A
lblsq ZERO ZERO PRINT_QWORD_1_SUBTRACT_A
label PRINT_QWORD_1_HANDLE_NIBBLE

rem Start jz tmp PRINT_QWORD_1_HANDLE_LOW_NIBBLE tmp2
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem incleq tmp2 1 JZ_11_END
lblsq tmp2 CONST_-1 JZ_11_END
rem incleq tmp 1 JZ_11_REVERT_A
lblsq tmp CONST_-1 JZ_11_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
rem lbljmp PRINT_QWORD_1_HANDLE_LOW_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_1_HANDLE_LOW_NIBBLE
label JZ_11_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
label JZ_11_END
rem End jz

lblsq print_qword_1_isNeg CONST_0 PRINT_QWORD_1_PRINT_NIBBLE

rem Start mov tmp2 print_qword_1_nibbleVal tmp3
rem movneg tmp3 print_qword_1_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_1_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_1_nibbleVal f
rem zero print_qword_1_nibbleVal
relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
rem inc print_qword_1_nibbleVal f
relsq print_qword_1_nibbleVal CONST_-F 1
rem sub print_qword_1_nibbleVal tmp2
relsq print_qword_1_nibbleVal tmp2 1
rem lbljmp PRINT_QWORD_1_PRINT_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_1_PRINT_NIBBLE
label PRINT_QWORD_1_HANDLE_LOW_NIBBLE
rem decleq print_qword_1_isNeg 0 PRINT_QWORD_1_PRINT_NIBBLE
lblsq print_qword_1_isNeg CONST_0 PRINT_QWORD_1_PRINT_NIBBLE
rem decleq print_qword_1_nibbleVal 0 PRINT_QWORD_1_PRINT_NIBBLE
lblsq print_qword_1_nibbleVal CONST_0 PRINT_QWORD_1_PRINT_NIBBLE

rem Start mov tmp2 print_qword_1_nibbleVal tmp3
rem movneg tmp3 print_qword_1_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_1_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_1_nibbleVal 10
rem zero print_qword_1_nibbleVal
relsq print_qword_1_nibbleVal print_qword_1_nibbleVal 1
rem inc print_qword_1_nibbleVal 10
relsq print_qword_1_nibbleVal CONST_-10 1
rem sub print_qword_1_nibbleVal tmp2
relsq print_qword_1_nibbleVal tmp2 1
label PRINT_QWORD_1_PRINT_NIBBLE

rem Start print_nibble print_qword_1_nibbleVal tmp2 tmp3
rem lbljmp PRINT_NIBBLE_1_START
lblsq ZERO ZERO PRINT_NIBBLE_1_START
label PRINT_NIBBLE_1_HEX_CHARSET
rem raw_chars 0123456789abcdef
raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
label PRINT_NIBBLE_1_START
rem movneg tmp2 print_qword_1_nibbleVal
relsq tmp2 tmp2 1
relsq tmp2 print_qword_1_nibbleVal 1

rem Start mul_8 tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
rem End mul_8

subaddr PRINT_NIBBLE_1_HEX_CHARSET tmp2

rem Start putchar PRINT_NIBBLE_1_HEX_CHARSET tmp3
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp3 tmp3 1
relsq tmp3 PRINT_NIBBLE_1_HEX_CHARSET 1
relsq tmp3 CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp3 1
rem End putchar

rem movneg tmp3 tmp2
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
subaddr PRINT_NIBBLE_1_HEX_CHARSET tmp3
rem End print_nibble

rem incaddr PRINT_QWORD_1_SUBBERS 8
subaddr PRINT_QWORD_1_SUBBERS CONST_-8
rem lbljmp PRINT_QWORD_1_LOOP
lblsq ZERO ZERO PRINT_QWORD_1_LOOP
label PRINT_QWORD_1_END
rem decaddr PRINT_QWORD_1_SUBBERS 80
subaddr PRINT_QWORD_1_SUBBERS CONST_80
rem End print_qword


rem Start putchar LINE_FEED tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp LINE_FEED
relsq tmp tmp 1
relsq tmp LINE_FEED 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar


subaddr symbolsCur_step3 CONST_-8

rem Start puts SYMBOL_PART_4 tmp tmp2
addr puts_5_str 0

rem Start setaddr puts_5_str SYMBOL_PART_4 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 puts_5_str_addrRef_0 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp SYMBOL_PART_4 1
subaddr puts_5_str tmp
rem End setaddr

var puts_5_len 0 
rem incaddr SYMBOL_PART_4 8
subaddr SYMBOL_PART_4 CONST_-8

rem Start mov puts_5_len SYMBOL_PART_4 tmp
relsq tmp tmp 1
relsq tmp SYMBOL_PART_4 1
relsq puts_5_len puts_5_len 1
relsq puts_5_len tmp 1
rem End mov

rem decaddr SYMBOL_PART_4 8
subaddr SYMBOL_PART_4 CONST_8
label PUTS_5_LOOP
rem decleq puts_5_len 0 PUTS_5_END
lblsq puts_5_len CONST_0 PUTS_5_END
rem dec puts_5_len 1
relsq puts_5_len CONST_1 1

rem Start putchar puts_5_str tmp
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp tmp 1
relsq tmp puts_5_str 1
relsq tmp CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar

rem incaddr puts_5_str 8
subaddr puts_5_str CONST_-8
rem lbljmp PUTS_5_LOOP
lblsq ZERO ZERO PUTS_5_LOOP
label PUTS_5_END
rem End puts


rem Start print_qword symbolsCur_step3 tmp tmp2 tmp3

rem Start mov tmp symbolsCur_step3 tmp2
rem movneg tmp2 symbolsCur_step3
relsq tmp2 tmp2 1
relsq tmp2 symbolsCur_step3 1
rem movneg tmp tmp2
relsq tmp tmp 1
relsq tmp tmp2 1
rem End mov

var print_qword_2_isNeg 0
rem zero print_qword_2_isNeg
rem sub print_qword_2_isNeg print_qword_2_isNeg
relsq print_qword_2_isNeg print_qword_2_isNeg 1
rem jn tmp PRINT_QWORD_2_IS_NEG tmp2 tmp3

rem Start jl tmp ZERO PRINT_QWORD_2_IS_NEG tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 CONST_-1 1
lblsq tmp2 ZERO PRINT_QWORD_2_IS_NEG
rem End jl

rem lbljmp PRINT_QWORD_2_LOOP
lblsq ZERO ZERO PRINT_QWORD_2_LOOP
label PRINT_QWORD_2_IS_NEG
rem inc print_qword_2_isNeg 1
rem dec print_qword_2_isNeg -1
relsq print_qword_2_isNeg CONST_-1 1

rem Start neg tmp tmp2 tmp3
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1

rem Start mov tmp tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp tmp 1
relsq tmp tmp3 1
rem End mov

rem End neg

rem lbljmp PRINT_QWORD_2_LOOP
lblsq ZERO ZERO PRINT_QWORD_2_LOOP
label PRINT_QWORD_2_SUBBERS
raw 1000000000000000 0100000000000000 0010000000000000 0001000000000000 0000100000000000 0000010000000000 0000001000000000 0000000100000000 0000000010000000 0000000001000000 0000000000100000 0000000000010000 0000000000001000 0000000000000100 0000000000000010 0000000000000001 0000000000000000
label PRINT_QWORD_2_LOOP

rem Start jz PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_END tmp2
rem movneg tmp2 PRINT_QWORD_2_SUBBERS
relsq tmp2 tmp2 1
relsq tmp2 PRINT_QWORD_2_SUBBERS 1
rem incleq tmp2 1 JZ_12_END
lblsq tmp2 CONST_-1 JZ_12_END
rem incleq PRINT_QWORD_2_SUBBERS 1 JZ_12_REVERT_A
lblsq PRINT_QWORD_2_SUBBERS CONST_-1 JZ_12_REVERT_A
rem dec PRINT_QWORD_2_SUBBERS 1
relsq PRINT_QWORD_2_SUBBERS CONST_1 1
rem lbljmp PRINT_QWORD_2_END
lblsq ZERO ZERO PRINT_QWORD_2_END
label JZ_12_REVERT_A
rem dec PRINT_QWORD_2_SUBBERS 1
relsq PRINT_QWORD_2_SUBBERS CONST_1 1
label JZ_12_END
rem End jz

var print_qword_2_nibbleVal 0
rem zero print_qword_2_nibbleVal
rem sub print_qword_2_nibbleVal print_qword_2_nibbleVal
relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
label PRINT_QWORD_2_SUBTRACT_A

rem Start jl tmp PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_HANDLE_NIBBLE tmp2 tmp3

rem Start mov tmp2 tmp tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp 1
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem inc tmp2 1
relsq tmp2 CONST_-1 1
lblsq tmp2 PRINT_QWORD_2_SUBBERS PRINT_QWORD_2_HANDLE_NIBBLE
rem End jl

rem inc print_qword_2_nibbleVal 1
rem dec print_qword_2_nibbleVal -1
relsq print_qword_2_nibbleVal CONST_-1 1
rem sub tmp PRINT_QWORD_2_SUBBERS
relsq tmp PRINT_QWORD_2_SUBBERS 1
rem lbljmp PRINT_QWORD_2_SUBTRACT_A
lblsq ZERO ZERO PRINT_QWORD_2_SUBTRACT_A
label PRINT_QWORD_2_HANDLE_NIBBLE

rem Start jz tmp PRINT_QWORD_2_HANDLE_LOW_NIBBLE tmp2
rem movneg tmp2 tmp
relsq tmp2 tmp2 1
relsq tmp2 tmp 1
rem incleq tmp2 1 JZ_13_END
lblsq tmp2 CONST_-1 JZ_13_END
rem incleq tmp 1 JZ_13_REVERT_A
lblsq tmp CONST_-1 JZ_13_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
rem lbljmp PRINT_QWORD_2_HANDLE_LOW_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_2_HANDLE_LOW_NIBBLE
label JZ_13_REVERT_A
rem dec tmp 1
relsq tmp CONST_1 1
label JZ_13_END
rem End jz

lblsq print_qword_2_isNeg CONST_0 PRINT_QWORD_2_PRINT_NIBBLE

rem Start mov tmp2 print_qword_2_nibbleVal tmp3
rem movneg tmp3 print_qword_2_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_2_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_2_nibbleVal f
rem zero print_qword_2_nibbleVal
relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
rem inc print_qword_2_nibbleVal f
relsq print_qword_2_nibbleVal CONST_-F 1
rem sub print_qword_2_nibbleVal tmp2
relsq print_qword_2_nibbleVal tmp2 1
rem lbljmp PRINT_QWORD_2_PRINT_NIBBLE
lblsq ZERO ZERO PRINT_QWORD_2_PRINT_NIBBLE
label PRINT_QWORD_2_HANDLE_LOW_NIBBLE
rem decleq print_qword_2_isNeg 0 PRINT_QWORD_2_PRINT_NIBBLE
lblsq print_qword_2_isNeg CONST_0 PRINT_QWORD_2_PRINT_NIBBLE
rem decleq print_qword_2_nibbleVal 0 PRINT_QWORD_2_PRINT_NIBBLE
lblsq print_qword_2_nibbleVal CONST_0 PRINT_QWORD_2_PRINT_NIBBLE

rem Start mov tmp2 print_qword_2_nibbleVal tmp3
rem movneg tmp3 print_qword_2_nibbleVal
relsq tmp3 tmp3 1
relsq tmp3 print_qword_2_nibbleVal 1
rem movneg tmp2 tmp3
relsq tmp2 tmp2 1
relsq tmp2 tmp3 1
rem End mov

rem set print_qword_2_nibbleVal 10
rem zero print_qword_2_nibbleVal
relsq print_qword_2_nibbleVal print_qword_2_nibbleVal 1
rem inc print_qword_2_nibbleVal 10
relsq print_qword_2_nibbleVal CONST_-10 1
rem sub print_qword_2_nibbleVal tmp2
relsq print_qword_2_nibbleVal tmp2 1
label PRINT_QWORD_2_PRINT_NIBBLE

rem Start print_nibble print_qword_2_nibbleVal tmp2 tmp3
rem lbljmp PRINT_NIBBLE_2_START
lblsq ZERO ZERO PRINT_NIBBLE_2_START
label PRINT_NIBBLE_2_HEX_CHARSET
rem raw_chars 0123456789abcdef
raw 0000000000000030 0000000000000031 0000000000000032 0000000000000033 0000000000000034 0000000000000035 0000000000000036 0000000000000037 0000000000000038 0000000000000039 0000000000000061 0000000000000062 0000000000000063 0000000000000064 0000000000000065 0000000000000066
label PRINT_NIBBLE_2_START
rem movneg tmp2 print_qword_2_nibbleVal
relsq tmp2 tmp2 1
relsq tmp2 print_qword_2_nibbleVal 1

rem Start mul_8 tmp2 tmp3
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
relsq tmp2 tmp3 1
rem End mul_8

subaddr PRINT_NIBBLE_2_HEX_CHARSET tmp2

rem Start putchar PRINT_NIBBLE_2_HEX_CHARSET tmp3
relsq SERIAL_OUT ZERO 2
relsq ZERO ZERO -1
relsq tmp3 tmp3 1
relsq tmp3 PRINT_NIBBLE_2_HEX_CHARSET 1
relsq tmp3 CONST_1 1
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp3 1
rem End putchar

rem movneg tmp3 tmp2
relsq tmp3 tmp3 1
relsq tmp3 tmp2 1
subaddr PRINT_NIBBLE_2_HEX_CHARSET tmp3
rem End print_nibble

rem incaddr PRINT_QWORD_2_SUBBERS 8
subaddr PRINT_QWORD_2_SUBBERS CONST_-8
rem lbljmp PRINT_QWORD_2_LOOP
lblsq ZERO ZERO PRINT_QWORD_2_LOOP
label PRINT_QWORD_2_END
rem decaddr PRINT_QWORD_2_SUBBERS 80
subaddr PRINT_QWORD_2_SUBBERS CONST_80
rem End print_qword


rem Start putchar LINE_FEED tmp
relsq SERIAL_OUT ZERO 2
rem reljmp -1
relsq ZERO ZERO -1
rem movneg tmp LINE_FEED
relsq tmp tmp 1
relsq tmp LINE_FEED 1
rem dec tmp 1
relsq tmp CONST_1 1
rem movneg SERIAL_OUT tmp
relsq SERIAL_OUT SERIAL_OUT 1
relsq SERIAL_OUT tmp 1
rem End putchar


subaddr symbolsCur_step3 CONST_-8
lblsq ZERO ZERO LOOP

label HALT

rem Start halt tmp tmp2

rem Start set_safe CPU_CONTROL_START 2 tmp tmp2
relsq tmp2 tmp2 1
relsq tmp2 CPU_CONTROL_START 1
relsq tmp tmp 1
relsq tmp tmp2 1
relsq tmp CONST_2 1
relsq CPU_CONTROL_START tmp 1
rem End set_safe

relsq ZERO ZERO 0



rem Start def_string HEX_HEADER # hex
label HEX_HEADER_BUF
raw 0000000000000023 0000000000000020 0000000000000068 0000000000000065 0000000000000078
label HEX_HEADER
raw_ref HEX_HEADER_BUF
raw 0000000000000005 0000000000000028
rem Notice the single space

rem Start def_string EMPTY_STRING 
label EMPTY_STRING_BUF
rem This is an empty string
label EMPTY_STRING
raw_ref EMPTY_STRING_BUF
raw 0000000000000000 0000000000000000

rem Start def_string NEWLINE newline
label NEWLINE_BUF
raw 000000000000006e 0000000000000065 0000000000000077 000000000000006c 0000000000000069 000000000000006e 0000000000000065
label NEWLINE
raw_ref NEWLINE_BUF
raw 0000000000000007 0000000000000038

rem Start def_string REM rem
label REM_BUF
raw 0000000000000072 0000000000000065 000000000000006d
label REM
raw_ref REM_BUF
raw 0000000000000003 0000000000000018

rem Start def_string END end
label END_BUF
raw 0000000000000065 000000000000006e 0000000000000064
label END
raw_ref END_BUF
raw 0000000000000003 0000000000000018


rem Start def_string VAR var
label VAR_BUF
raw 0000000000000076 0000000000000061 0000000000000072
label VAR
raw_ref VAR_BUF
raw 0000000000000003 0000000000000018

rem Start def_string LABEL label
label LABEL_BUF
raw 000000000000006c 0000000000000061 0000000000000062 0000000000000065 000000000000006c
label LABEL
raw_ref LABEL_BUF
raw 0000000000000005 0000000000000028

rem Start def_string ADDR addr
label ADDR_BUF
raw 0000000000000061 0000000000000064 0000000000000064 0000000000000072
label ADDR
raw_ref ADDR_BUF
raw 0000000000000004 0000000000000020


rem Start def_string ABSSQ abssq
label ABSSQ_BUF
raw 0000000000000061 0000000000000062 0000000000000073 0000000000000073 0000000000000071
label ABSSQ
raw_ref ABSSQ_BUF
raw 0000000000000005 0000000000000028

rem Start def_string RELSQ relsq
label RELSQ_BUF
raw 0000000000000072 0000000000000065 000000000000006c 0000000000000073 0000000000000071
label RELSQ
raw_ref RELSQ_BUF
raw 0000000000000005 0000000000000028

rem Start def_string LBLSQ lblsq
label LBLSQ_BUF
raw 000000000000006c 0000000000000062 000000000000006c 0000000000000073 0000000000000071
label LBLSQ
raw_ref LBLSQ_BUF
raw 0000000000000005 0000000000000028

rem Start def_string SUBADDR subaddr
label SUBADDR_BUF
raw 0000000000000073 0000000000000075 0000000000000062 0000000000000061 0000000000000064 0000000000000064 0000000000000072
label SUBADDR
raw_ref SUBADDR_BUF
raw 0000000000000007 0000000000000038

rem Start def_string RAW_REF raw_ref
label RAW_REF_BUF
raw 0000000000000072 0000000000000061 0000000000000077 000000000000005f 0000000000000072 0000000000000065 0000000000000066
label RAW_REF
raw_ref RAW_REF_BUF
raw 0000000000000007 0000000000000038

rem def_string LINE_PART_1 inst: 
rem def_string LINE_PART_2 tokens: 
rem def_string LINE_PART_3 comment: 
rem def_string LINE_PART_4 offset: 


rem Start def_string SYMBOL_PART_1 name: 
label SYMBOL_PART_1_BUF
raw 000000000000006e 0000000000000061 000000000000006d 0000000000000065 000000000000003a 0000000000000020
label SYMBOL_PART_1
raw_ref SYMBOL_PART_1_BUF
raw 0000000000000006 0000000000000030

rem Start def_string SYMBOL_PART_2 addr: 
label SYMBOL_PART_2_BUF
raw 0000000000000061 0000000000000064 0000000000000064 0000000000000072 000000000000003a 0000000000000020
label SYMBOL_PART_2
raw_ref SYMBOL_PART_2_BUF
raw 0000000000000006 0000000000000030

rem Start def_string SYMBOL_PART_3 refCount: 
label SYMBOL_PART_3_BUF
raw 0000000000000072 0000000000000065 0000000000000066 0000000000000043 000000000000006f 0000000000000075 000000000000006e 0000000000000074 000000000000003a 0000000000000020
label SYMBOL_PART_3
raw_ref SYMBOL_PART_3_BUF
raw 000000000000000a 0000000000000050

rem Start def_string SYMBOL_PART_4 val: 
label SYMBOL_PART_4_BUF
raw 0000000000000076 0000000000000061 000000000000006c 000000000000003a 0000000000000020
label SYMBOL_PART_4
raw_ref SYMBOL_PART_4_BUF
raw 0000000000000005 0000000000000028

var CONST_-1 -1
var CONST_30 30
var CONST_-8 -8
var CONST_8 8
var CONST_0 0
var CONST_1 1
var CONST_-30 -30
var CONST_100 100
var CONST_10 10
var CONST_20 20
var CONST_D d
var CONST_A a
var CONST_-18 -18
var CONST_300 300
var CONST_18 18
var CONST_1000 1000
var CONST_800 800
var CONST_-10 -10
var CONST_-20 -20
var CONST_-58 -58
var CONST_2C 2c
var CONST_2F 2f
var CONST_7 7
var CONST_9 9
var CONST_6 6
var CONST_1A 1a
var CONST_28 28
var CONST_-F -f
var CONST_80 80
var CONST_2 2

end
