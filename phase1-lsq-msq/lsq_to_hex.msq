rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Constants
addr ZERO 0
var tmp 0
var tmp2 0
var tmp3 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
addr CPU_CONTROL_START 13EE0000
var FREE_START 1000000
var LINE_FEED a
var SPACE 20
lblsq ZERO ZERO EP

label EP
var LF a

var hex_version 0
getchar tmp tmp2
dec tmp 30
mov hex_version tmp tmp2

rem Print the header
puts HEX_HEADER tmp
inc hex_version 30
putchar hex_version tmp
dec hex_version 30
putchar LF tmp

rem 0. Parse file into lines
rem A Line is made of four components, adding to a total of 0x58 bytes:
rem 0x0 String containing the instruction
rem 0x18 Array containing the tokens
rem 0x38 String containing the comment
rem 0x50 The offset of the line in the assembled program
var linesPass1Begin 100000
addr linesPass1Cur 100000
var linesPass1Len 0

label STEP0_INPUT_INST
alloc_str linesPass1Cur 100 tmp
inp_token_allow_empty linesPass1Cur tmp tmp2
inc linesPass1Len 1

strcmp_const linesPass1Cur EMPTY_STRING STEP0_HANDLE_NEWLINE tmp tmp2
strcmp_const linesPass1Cur REM STEP0_HANDLE_REM tmp tmp2
strcmp_const linesPass1Cur END STEP1_START tmp tmp2


rem Handle other instructions
incaddr linesPass1Cur 18
alloc_array linesPass1Cur 18 20 tmp

malloc_const tmp 18 tmp2
addr tmpStr 0
setaddr tmpStr tmp tmp2
alloc_str tmpStr 1000 tmp
inp_line tmpStr tmp tmp2
str_split linesPass1Cur tmpStr SPACE 800 tmp tmp2

incaddr linesPass1Cur 20
alloc_str linesPass1Cur 0 tmp

incaddr linesPass1Cur 18
zero linesPass1Cur

incaddr linesPass1Cur 8
lbljmp STEP0_INPUT_INST


label STEP0_HANDLE_NEWLINE
strcpy linesPass1Cur NEWLINE tmp

incaddr linesPass1Cur 18
alloc_array linesPass1Cur 18 0 tmp

incaddr linesPass1Cur 20
alloc_str linesPass1Cur 0 tmp

incaddr linesPass1Cur 18
zero linesPass1Cur

incaddr linesPass1Cur 8
lbljmp STEP0_INPUT_INST


label STEP0_HANDLE_REM
incaddr linesPass1Cur 18
alloc_array linesPass1Cur 18 0 tmp

incaddr linesPass1Cur 20
alloc_str linesPass1Cur 800 tmp
inp_line linesPass1Cur tmp tmp2

incaddr linesPass1Cur 18
zero linesPass1Cur

incaddr linesPass1Cur 8
lbljmp STEP0_INPUT_INST


rem 1. Find symbols
label STEP1_START
rem A Symbol is made of four components, adding to a total of 0x30 bytes:
rem 0x0 String containing the name of the symbol
rem 0x18 The address of the symbol
rem 0x20 The reference count of the symbol
rem 0x28 The default value of the symbol
var symbolsBegin 200000
addr symbolsCur 200000
var symbolsLen 0

addr curLine 0
setaddr curLine linesPass1Begin tmp
var linesLeft 0
mov linesLeft linesPass1Len tmp

label STEP1_LOOP
decleq linesLeft 0 STEP2_START
dec linesLeft 1

strcmp_const curLine VAR STEP1_CREATE_SYMBOL tmp tmp2
strcmp_const curLine LABEL STEP1_CREATE_SYMBOL tmp tmp2
strcmp_const curLine ADDR STEP1_CREATE_SYMBOL tmp tmp2
incaddr curLine 58
lbljmp STEP1_LOOP

label STEP1_CREATE_SYMBOL
rem Set the symbol name
incaddr curLine 18
addr curTokens 0
setaddr curTokens curLine tmp
decaddr curLine 18

alloc_str symbolsCur 800 tmp
strcpy symbolsCur curTokens tmp
incaddr curTokens 18

rem Set the symbol address
incaddr symbolsCur 18
set symbolsCur -1
strcmp_const curLine ADDR STEP1_SET_ADDRESS tmp tmp2
lbljmp STEP1_HANDLE_REFCOUNT

label STEP1_SET_ADDRESS
from_hex symbolsCur curTokens tmp tmp2

label STEP1_HANDLE_REFCOUNT
incaddr symbolsCur 8
zero symbolsCur

label STEP1_HANDLE_VALUE
incaddr symbolsCur 8
zero symbolsCur
strcmp_const curLine VAR STEP1_SET_VALUE tmp tmp2
lbljmp STEP1_END

label STEP1_SET_VALUE
from_hex symbolsCur curTokens tmp tmp2

label STEP1_END
incaddr curLine 58
incaddr symbolsCur 8
inc symbolsLen 1
lbljmp STEP1_LOOP


rem 2. Count symbol references (Pass 1)
label STEP2_START
setaddr curLine linesPass1Begin tmp
mov linesLeft linesPass1Len tmp

label STEP2_LOOP
decleq linesLeft 0 STEP3_START
dec linesLeft 1

incaddr curLine 18
setaddr curTokens curLine tmp
decaddr curLine 18

strcmp_const curLine ABSSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine RELSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine LBLSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine SUBADDR STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
strcmp_const curLine RAW_REF STEP2_HANDLE_RAW_REF tmp tmp2
lbljmp STEP2_END


label STEP2_HANDLE_SQ
addr it 0

setaddr it symbolsBegin tmp
find_item_in_buf_with_str_key it curTokens 30 tmp tmp2
incaddr it 20
inc it 1

incaddr curTokens 18
setaddr it symbolsBegin tmp
find_item_in_buf_with_str_key it curTokens 30 tmp tmp2
incaddr it 20
inc it 1

strcmp_const curLine LBLSQ STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
lbljmp STEP2_END


label STEP2_HANDLE_LBLSQ_SUBADDR
incaddr curTokens 18
setaddr it symbolsBegin tmp
find_item_in_buf_with_str_key it curTokens 30 tmp tmp2
incaddr it 20
inc it 1
lbljmp STEP2_END


label STEP2_HANDLE_RAW_REF
incaddr curLine 20
var tokensCount 0
mov tokensCount curLine tmp
decaddr curLine 20

label STEP2_RAW_REF_LOOP
decleq tokensCount 0 STEP2_END
dec tokensCount 1

setaddr it symbolsBegin tmp
find_item_in_buf_with_str_key it curTokens 30 tmp tmp2
incaddr it 20
inc it 1
incaddr curTokens 18
lbljmp STEP2_RAW_REF_LOOP


label STEP2_END
incaddr curLine 58
lbljmp STEP2_LOOP


rem 3. Create subaddr/zeroaddr stubs
label STEP3_START

setaddr symbolsCur symbolsBegin tmp
var symbolsLeft 0
mov symbolsLeft symbolsLen tmp

label LOOP
decleq symbolsLeft 0 HALT
dec symbolsLeft 1

puts SYMBOL_PART_1 tmp
puts symbolsCur tmp
putchar LINE_FEED tmp

incaddr symbolsCur 18
puts SYMBOL_PART_2 tmp
print_qword symbolsCur tmp tmp2 tmp3
putchar LINE_FEED tmp

incaddr symbolsCur 8
puts SYMBOL_PART_3 tmp
print_qword symbolsCur tmp tmp2 tmp3
putchar LINE_FEED tmp

incaddr symbolsCur 8
puts SYMBOL_PART_4 tmp
print_qword symbolsCur tmp tmp2 tmp3
putchar LINE_FEED tmp

incaddr symbolsCur 8
lbljmp LOOP

label HALT
halt tmp tmp2


def_string HEX_HEADER # hex
rem Notice the single space
def_string EMPTY_STRING 
def_string NEWLINE newline
def_string REM rem
def_string END end

def_string VAR var
def_string LABEL label
def_string ADDR addr

def_string ABSSQ abssq
def_string RELSQ relsq
def_string LBLSQ lblsq
def_string SUBADDR subaddr
def_string RAW_REF raw_ref

rem def_string LINE_PART_1 inst: 
rem def_string LINE_PART_2 tokens: 
rem def_string LINE_PART_3 comment: 
rem def_string LINE_PART_4 offset: 

def_string SYMBOL_PART_1 name: 
def_string SYMBOL_PART_2 addr: 
def_string SYMBOL_PART_3 refCount: 
def_string SYMBOL_PART_4 val: 