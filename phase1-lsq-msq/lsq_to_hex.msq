rem Copyright (C) 2022 NyanCatTW1
rem This file is part of stage0-subleq.
rem 
rem stage0-subleq is free software: you can redistribute it and/or modify
rem it under the terms of the GNU General Public License as published by
rem the Free Software Foundation, either version 3 of the License, or
rem (at your option) any later version.
rem 
rem stage0-subleq is distributed in the hope that it will be useful,
rem but WITHOUT ANY WARRANTY; without even the implied warranty of
rem MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
rem GNU General Public License for more details.
rem 
rem You should have received a copy of the GNU General Public License
rem along with stage0-subleq.  If not, see <http://www.gnu.org/licenses/>.

rem Constants
addr ZERO 0
var tmp 0
var tmp2 0
var tmp3 0
var tmp4 0
addr SERIAL_IN 13ED27E8
addr SERIAL_OUT 13ED27F0
addr CPU_CONTROL_START 13EE0000
var FREE_START 1000000
var LINE_FEED a
var SPACE 20
var ADDR_VAL_PLACEHOLDER -1

lblsq ZERO ZERO EP

label EP

rem Generated from https://www.random.org/colors/hex
rem F to whoever is unlucky enough to use this number in their lsq
var SYM_VAL_PLACEHOLDER 130b197121c2627d
rem Dirty, hopefully temporary hack to ensure it can build itself
inc SYM_VAL_PLACEHOLDER 1

var LF a

var hex_version 0
getchar tmp tmp2
dec tmp 30
mov hex_version tmp tmp2

rem Print the header
puts HEX_HEADER tmp tmp2
inc hex_version 30
putchar hex_version tmp
dec hex_version 30
putchar LF tmp


rem 0. Parse file into lines
rem A Line is made of four components, adding to a total of 0x58 bytes:
rem 0x0 String containing the instruction
rem 0x18 Array containing the tokens
rem 0x38 String containing the comment
rem 0x50 The offset of the line in the assembled program
var linesPass1Begin 100000
var linesPass1Len 0
addr curLine_step0 0
setaddr curLine_step0 linesPass1Begin tmp tmp2

label STEP0_INPUT_INST
alloc_str_const curLine_step0 50 tmp
inp_token_allow_empty curLine_step0 tmp tmp2
inc linesPass1Len 1

strcmp_const curLine_step0 EMPTY_STRING STEP0_HANDLE_NEWLINE tmp tmp2
strcmp_const curLine_step0 REM STEP0_HANDLE_REM tmp tmp2
strcmp_const curLine_step0 END STEP0_END tmp tmp2


rem Handle other instructions
addr curLine_step0_other 0
copyaddr curLine_step0_other curLine_step0 tmp tmp2
incaddr curLine_step0_other 18
alloc_array curLine_step0_other 18 20 tmp

malloc_const tmp 18 tmp2
addr tmpStr 0
setaddr tmpStr tmp tmp2 tmp3
alloc_str_const tmpStr 1000 tmp
inp_line tmpStr tmp tmp2
str_split curLine_step0_other tmpStr SPACE 400 tmp tmp2

incaddr curLine_step0_other 20
alloc_str_const curLine_step0_other 0 tmp

incaddr curLine_step0_other 18
zero curLine_step0_other

incaddr curLine_step0_other 8
copyaddr curLine_step0 curLine_step0_other tmp tmp2
lbljmp STEP0_INPUT_INST


label STEP0_HANDLE_NEWLINE
addr curLine_step0_newline 0
copyaddr curLine_step0_newline curLine_step0 tmp tmp2
strcpy curLine_step0_newline NEWLINE tmp tmp2

incaddr curLine_step0_newline 18
alloc_array curLine_step0_newline 18 0 tmp

incaddr curLine_step0_newline 20
alloc_str_const curLine_step0_newline 0 tmp

incaddr curLine_step0_newline 18
zero curLine_step0_newline

incaddr curLine_step0_newline 8
copyaddr curLine_step0 curLine_step0_newline tmp tmp2
lbljmp STEP0_INPUT_INST


label STEP0_HANDLE_REM
addr curLine_step0_rem 0
copyaddr curLine_step0_rem curLine_step0 tmp tmp2
incaddr curLine_step0_rem 18
alloc_array curLine_step0_rem 18 0 tmp

incaddr curLine_step0_rem 20
alloc_str_const curLine_step0_rem 1000 tmp
inp_line curLine_step0_rem tmp tmp2

incaddr curLine_step0_rem 18
zero curLine_step0_rem

incaddr curLine_step0_rem 8
copyaddr curLine_step0 curLine_step0_rem tmp tmp2
lbljmp STEP0_INPUT_INST

label STEP0_END
puts STEP0_PRINT_PREFIX tmp tmp2
addr lineCountPrint_step0 0
itoa lineCountPrint_step0 linesPass1Len tmp tmp2 tmp3
puts lineCountPrint_step0 tmp tmp2
puts STEP0_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp

rem 1. Find symbols
label STEP1_START
rem A Symbol is made of four components, adding to a total of 0x30 bytes:
rem 0x0 String containing the name of the symbol
rem 0x18 The address of the symbol (ADDR_VAL_PLACEHOLDER if None)
rem 0x20 The reference count of the symbol
rem 0x28 The default value of the symbol (SYM_VAL_PLACEHOLDER if None)
var symbolsBegin 400000
var symbolsLen 0

addr symbolsCur_step1 0
setaddr symbolsCur_step1 symbolsBegin tmp tmp2

addr curLine_step1 0
setaddr curLine_step1 linesPass1Begin tmp tmp2
var linesLeft 0
mov linesLeft linesPass1Len tmp

label STEP1_LOOP
decleq linesLeft 0 STEP1_END
dec linesLeft 1

strcmp_const curLine_step1 VAR STEP1_CREATE_SYMBOL tmp tmp2
strcmp_const curLine_step1 LABEL STEP1_CREATE_SYMBOL tmp tmp2
strcmp_const curLine_step1 ADDR STEP1_CREATE_SYMBOL tmp tmp2
incaddr curLine_step1 58
lbljmp STEP1_LOOP

label STEP1_CREATE_SYMBOL
rem Set the symbol name
incaddr curLine_step1 18
addr curTokens_step1 0
setaddr curTokens_step1 curLine_step1 tmp tmp2
decaddr curLine_step1 18

alloc_str_const symbolsCur_step1 400 tmp
strcpy symbolsCur_step1 curTokens_step1 tmp tmp2
incaddr curTokens_step1 18

rem Handle the symbol address
incaddr symbolsCur_step1 18
mov symbolsCur_step1 ADDR_VAL_PLACEHOLDER tmp
strcmp_const curLine_step1 ADDR STEP1_SET_ADDRESS tmp tmp2
lbljmp STEP1_HANDLE_REFCOUNT

label STEP1_SET_ADDRESS
from_hex symbolsCur_step1 curTokens_step1 tmp tmp2

label STEP1_HANDLE_REFCOUNT
incaddr symbolsCur_step1 8
zero symbolsCur_step1

label STEP1_HANDLE_VALUE
incaddr symbolsCur_step1 8
mov symbolsCur_step1 SYM_VAL_PLACEHOLDER tmp
strcmp_const curLine_step1 VAR STEP1_SET_VALUE tmp tmp2
lbljmp STEP1_LOOP_END

label STEP1_SET_VALUE
from_hex symbolsCur_step1 curTokens_step1 tmp tmp2

label STEP1_LOOP_END
incaddr curLine_step1 58
incaddr symbolsCur_step1 8
inc symbolsLen 1
lbljmp STEP1_LOOP

label STEP1_END
puts STEP1_PRINT_PREFIX tmp tmp2
addr symbolCountPrint_step1 0
itoa symbolCountPrint_step1 symbolsLen tmp tmp2 tmp3
puts symbolCountPrint_step1 tmp tmp2
puts STEP1_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp
lbljmp STEP2_START


label incRefCount
var totalRefCount 0
addr incRefCount_key 0
addr incRefCount_it 0
setaddr incRefCount_it symbolsBegin tmp tmp2
find_item_in_buf_with_str_key incRefCount_it incRefCount_key 30 symbolsLen incRefCount_doInc tmp tmp2

rem No match. Create a new symbol instead
memcpy_const incRefCount_it incRefCount_key 18 tmp tmp2
incaddr incRefCount_it 18
set incRefCount_it -1
incaddr incRefCount_it 8
zero incRefCount_it
incaddr incRefCount_it 8
mov incRefCount_it SYM_VAL_PLACEHOLDER tmp
decaddr incRefCount_it 28
inc symbolsLen 1

label incRefCount_doInc
incaddr incRefCount_it 20
inc incRefCount_it 1
inc totalRefCount 1
ret incRefCount


rem 2. Count symbol references (Pass 1)
label STEP2_START
addr curLine_step2 0
setaddr curLine_step2 linesPass1Begin tmp tmp2
mov linesLeft linesPass1Len tmp

label STEP2_LOOP
decleq linesLeft 0 STEP2_END
dec linesLeft 1

incaddr curLine_step2 18
setaddr incRefCount_key curLine_step2 tmp tmp2
decaddr curLine_step2 18

strcmp_const curLine_step2 ABSSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine_step2 RELSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine_step2 LBLSQ STEP2_HANDLE_SQ tmp tmp2
strcmp_const curLine_step2 SUBADDR STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
strcmp_const curLine_step2 RAW_REF STEP2_HANDLE_RAW_REF tmp tmp2
lbljmp STEP2_LOOP_END

label STEP2_HANDLE_SQ
call incRefCount tmp

incaddr incRefCount_key 18
call incRefCount tmp

strcmp_const curLine_step2 LBLSQ STEP2_HANDLE_LBLSQ_SUBADDR tmp tmp2
lbljmp STEP2_LOOP_END


label STEP2_HANDLE_LBLSQ_SUBADDR
incaddr incRefCount_key 18
call incRefCount tmp
lbljmp STEP2_LOOP_END


label STEP2_HANDLE_RAW_REF
incaddr curLine_step2 20
var tokensCount 0
mov tokensCount curLine_step2 tmp
decaddr curLine_step2 20

label STEP2_RAW_REF_LOOP
decleq tokensCount 0 STEP2_LOOP_END
dec tokensCount 1
call incRefCount tmp
incaddr incRefCount_key 18
lbljmp STEP2_RAW_REF_LOOP


label STEP2_LOOP_END
incaddr curLine_step2 58
lbljmp STEP2_LOOP

label STEP2_END
puts STEP2_PRINT_PREFIX tmp tmp2
addr symbolCountPrint_step2 0
itoa symbolCountPrint_step2 symbolsLen tmp tmp2 tmp3
puts symbolCountPrint_step2 tmp tmp2
puts STEP2_PRINT_MIDDLE tmp tmp2
addr totalRefCountStr_step2 0
itoa totalRefCountStr_step2 totalRefCount tmp tmp2 tmp3
puts totalRefCountStr_step2 tmp tmp2
puts STEP2_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp

rem 3. Create subaddr/zeroaddr stubs
label STEP3_START

rem An item in addrSymbols is made of two components, adding to a total of 0x20 bytes:
rem 0x0 String containing the name of the symbol
rem 0x18 Next id to assign to an addrRef
var addrSymbolsBegin 500000
var addrSymbolsLen 0

var linesPass2Begin 600000
var linesPass2Len 0
addr curLinePass1_step3 0
setaddr curLinePass1_step3 linesPass1Begin tmp tmp2
addr curLinePass2_step3 0
setaddr curLinePass2_step3 linesPass2Begin tmp tmp2

label STEP3_LOOP
decleq linesPass1Len 0 STEP3_END
dec linesPass1Len 1

addr inst_step3 0
copyaddr inst_step3 curLinePass1_step3 tmp tmp2
strcmp_const inst_step3 SUBADDR STEP3_PROCESS tmp tmp2
strcmp_const inst_step3 ZEROADDR STEP3_PROCESS tmp tmp2

memcpy_const curLinePass2_step3 curLinePass1_step3 58 tmp tmp2
inc linesPass2Len 1
incaddr curLinePass1_step3 58
incaddr curLinePass2_step3 58
lbljmp STEP3_LOOP

label STEP3_PROCESS
rem Py: sym = lines[i].tokens[0]
addr sym0_step3 0
addr sym1_step3 0
incaddr curLinePass1_step3 18
setaddr sym0_step3 curLinePass1_step3 tmp tmp2
setaddr sym1_step3 curLinePass1_step3 tmp tmp2
incaddr sym1_step3 18
incaddr curLinePass1_step3 40

rem Py: addrSymbols[sym] = 0
addr addrSymbols_it_step3 0
setaddr addrSymbols_it_step3 addrSymbolsBegin tmp tmp2
find_item_in_buf_with_str_key addrSymbols_it_step3 sym0_step3 20 addrSymbolsLen STEP3_FOUND_ADDRSYMBOL tmp tmp2

rem No match. Create a new item instead
memcpy_const addrSymbols_it_step3 sym0_step3 18 tmp tmp2
incaddr addrSymbols_it_step3 18
zero addrSymbols_it_step3
decaddr addrSymbols_it_step3 18
inc addrSymbolsLen 1

rem Py: stubPrefix = f"{sym}_addrRef_"
label STEP3_FOUND_ADDRSYMBOL
rem Set stubPrefix_step3
addr stubPrefix_step3 0
strcat stubPrefix_step3 sym0_step3 ADDRREF tmp tmp2 tmp3

rem Find refCount
var refCount_step3 0
var nextId_step3 0
addr symbols_it_step3 0
setaddr symbols_it_step3 symbolsBegin tmp tmp2
find_item_in_buf_with_str_key symbols_it_step3 sym0_step3 30 symbolsLen STEP3_FOUND_SYMBOL tmp tmp2

puts STEP3_MISSING_SYMBOL tmp tmp2
putchar SPACE tmp
puts sym0_step3 tmp tmp2
lbljmp HALT

label STEP3_FOUND_SYMBOL
incaddr symbols_it_step3 20
mov refCount_step3 symbols_it_step3 tmp
zero nextId_step3

label STEP3_STUB_LOOP
decleq refCount_step3 0 STEP3_LOOP
dec refCount_step3 1

addr nextId_str_step3 0
itoa nextId_str_step3 nextId_step3 tmp tmp2 tmp3
addr stubSym_step3 0
strcat stubSym_step3 stubPrefix_step3 nextId_str_step3 tmp tmp2 tmp3

rem Py: Line("relsq", ...)
memcpy_const curLinePass2_step3 RELSQ 18 tmp tmp2
incaddr curLinePass2_step3 18
alloc_array curLinePass2_step3 18 3 tmp

rem Add the three tokens
addr curTokens_step3 0
setaddr curTokens_step3 curLinePass2_step3 tmp tmp2
memcpy_const curTokens_step3 stubSym_step3 18 tmp tmp2
incaddr curTokens_step3 18

strcmp_const inst_step3 SUBADDR STEP3_TOKEN2_SUBADDR tmp tmp2
label STEP3_TOKEN2_ZEROADDR
memcpy_const curTokens_step3 stubSym_step3 18 tmp tmp2
lbljmp STEP3_TOKEN3

label STEP3_TOKEN2_SUBADDR
memcpy_const curTokens_step3 sym1_step3 18 tmp tmp2

label STEP3_TOKEN3
incaddr curTokens_step3 18
memcpy_const curTokens_step3 ONE 18 tmp tmp2

incaddr curLinePass2_step3 8
set curLinePass2_step3 3

rem Handle comment and offset
incaddr curLinePass2_step3 18
alloc_str_const curLinePass2_step3 0 tmp
incaddr curLinePass2_step3 18
zero curLinePass2_step3
incaddr curLinePass2_step3 8

rem Py: incRefCount(f"{stubPrefix}{k}")
copyaddr incRefCount_key stubSym_step3 tmp tmp2
call incRefCount tmp

inc linesPass2Len 1
inc nextId_step3 1
lbljmp STEP3_STUB_LOOP

label STEP3_END
puts STEP3_PRINT_PREFIX tmp tmp2
addr symbolCountPrint_step3 0
itoa symbolCountPrint_step3 symbolsLen tmp tmp2 tmp3
puts symbolCountPrint_step3 tmp tmp2
puts STEP3_PRINT_MIDDLE tmp tmp2
addr lineCountPrint_step3 0
itoa lineCountPrint_step3 linesPass2Len tmp tmp2 tmp3
puts lineCountPrint_step3 tmp tmp2
puts STEP3_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp


rem 4. Find label+stub addresses
label STEP4_START
var size 0

addr curLine_step4 0
setaddr curLine_step4 linesPass2Begin tmp tmp2
mov linesLeft linesPass2Len tmp

label STEP4_LOOP
decleq linesLeft 0 STEP4_END
dec linesLeft 1

rem Py: line.offset = size
incaddr curLine_step4 50
mov curLine_step4 size tmp
decaddr curLine_step4 50

strcmp_const curLine_step4 ABSSQ STEP4_HANDLE_SQ tmp tmp2
strcmp_const curLine_step4 RELSQ STEP4_HANDLE_SQ tmp tmp2
strcmp_const curLine_step4 LBLSQ STEP4_HANDLE_SQ tmp tmp2

strcmp_const curLine_step4 RAW STEP4_HANDLE_RAW tmp tmp2
strcmp_const curLine_step4 RAW_REF STEP4_HANDLE_RAW tmp tmp2

strcmp_const curLine_step4 LABEL STEP4_HANDLE_LABEL tmp tmp2

incaddr curLine_step4 58
lbljmp STEP4_LOOP

label STEP4_HANDLE_SQ
var sq_i_step4 -2
set sq_i_step4 -2

addr curSym_step4 0
incaddr curLine_step4 18
setaddr curSym_step4 curLine_step4 tmp tmp2

label STEP4_HANDLE_SQ_LOOP
rem Jumps on first and second iterations
incleq sq_i_step4 1 STEP4_HANDLE_SQ_TOKEN
rem Jumps on third iteration
decleq sq_i_step4 1 STEP4_HANDLE_SQ_THIRD_TOKEN

incaddr curLine_step4 40
lbljmp STEP4_LOOP

label STEP4_HANDLE_SQ_THIRD_TOKEN
rem Ensure the fourth iteration exits
inc sq_i_step4 1

strcmp_const curLine_step4 LBLSQ STEP4_HANDLE_SQ_TOKEN tmp tmp2
lbljmp STEP4_HANDLE_SQ_INC_SIZE

rem Only run if `line.inst == "lblsq" or i < 2`
label STEP4_HANDLE_SQ_TOKEN
addr addrSymbols_it_step4 0
setaddr addrSymbols_it_step4 addrSymbolsBegin tmp tmp2
find_item_in_buf_with_str_key addrSymbols_it_step4 curSym_step4 20 addrSymbolsLen STEP4_SQ_FOUND_ADDRSYMBOL tmp tmp2
lbljmp STEP4_HANDLE_SQ_INC_SIZE

rem Only run if `sym in addrSymbols`
label STEP4_SQ_FOUND_ADDRSYMBOL
incaddr addrSymbols_it_step4 18

rem Py: stubSym = f"{sym}_addrRef_{addrSymbols[sym]}"
addr stubPrefix_step4 0
strcat stubPrefix_step4 curSym_step4 ADDRREF tmp tmp2 tmp3
addr nextId_str_step4 0
itoa nextId_str_step4 addrSymbols_it_step4 tmp tmp2 tmp3
addr stubSym_step4 0
strcat stubSym_step4 stubPrefix_step4 nextId_str_step4 tmp tmp2 tmp3

rem Py: symbols[stubSym].addr = size
addr symbols_it_step4 0
setaddr symbols_it_step4 symbolsBegin tmp tmp2
find_item_in_buf_with_str_key symbols_it_step4 stubSym_step4 30 symbolsLen STEP4_SQ_FOUND_SYMBOL tmp tmp2

puts STEP4_SQ_MISSING_SYMBOL tmp tmp2
putchar SPACE tmp
puts stubSym_step4 tmp tmp2
lbljmp HALT

label STEP4_SQ_FOUND_SYMBOL
incaddr symbols_it_step4 18
mov symbols_it_step4 size tmp

rem Py: addrSymbols[sym] += 1
inc addrSymbols_it_step4 1

label STEP4_HANDLE_SQ_INC_SIZE
inc size 8
incaddr curSym_step4 18
lbljmp STEP4_HANDLE_SQ_LOOP

label STEP4_HANDLE_RAW
rem Py: size += 8 * len(line.tokens)
incaddr curLine_step4 20
mov tmp curLine_step4 tmp2
mul_8 tmp tmp2
add size tmp tmp2

incaddr curLine_step4 38
lbljmp STEP4_LOOP

label STEP4_HANDLE_LABEL
rem Py: symbols[line.tokens[0]].addr = size
addr sym0_step4 0
incaddr curLine_step4 18
setaddr sym0_step4 curLine_step4 tmp tmp2

addr symbols_it2_step4 0
setaddr symbols_it2_step4 symbolsBegin tmp tmp2
find_item_in_buf_with_str_key symbols_it2_step4 sym0_step4 30 symbolsLen STEP4_LABEL_FOUND_SYMBOL tmp tmp2

puts STEP4_LABEL_MISSING_SYMBOL tmp tmp2
putchar SPACE tmp
puts sym0_step4 tmp tmp2
lbljmp HALT

label STEP4_LABEL_FOUND_SYMBOL
incaddr symbols_it2_step4 18
mov symbols_it2_step4 size tmp

incaddr curLine_step4 40
lbljmp STEP4_LOOP

label STEP4_END
puts STEP4_PRINT_PREFIX tmp tmp2
addr sizeStr_step4 0
itoa sizeStr_step4 size tmp tmp2 tmp3
puts sizeStr_step4 tmp tmp2
puts STEP4_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp


rem 5. Assign addresses to variables
addr curLinePass2_step5 0
copyaddr curLinePass2_step5 curLinePass2_step3 tmp tmp2

addr curSym_step5 0
setaddr curSym_step5 symbolsBegin tmp tmp2

var symsLeft_step5 0
mov symsLeft_step5 symbolsLen tmp
label STEP5_LOOP
decleq symsLeft_step5 0 STEP5_END
dec symsLeft_step5 1

rem Py: if sym.addr is None
incaddr curSym_step5 18
jeq curSym_step5 ADDR_VAL_PLACEHOLDER STEP5_CHECK_VALUE tmp tmp2
incaddr curSym_step5 18
lbljmp STEP5_LOOP

label STEP5_CHECK_VALUE
rem Py: sym.addr = size
mov curSym_step5 size tmp

rem Py: if sym.val is None:
incaddr curSym_step5 10
var curVal_step5 0
mov curVal_step5 curSym_step5 tmp
decaddr curSym_step5 28
jeq curVal_step5 SYM_VAL_PLACEHOLDER STEP5_VALUE_ERROR tmp tmp2

rem Py: Line("raw", ...)
memcpy_const curLinePass2_step5 RAW 18 tmp tmp2
incaddr curLinePass2_step5 18
alloc_array curLinePass2_step5 18 1 tmp

rem Add the token
addr curTokens_step5 0
setaddr curTokens_step5 curLinePass2_step5 tmp tmp2
addr qword_step5 0
to_qword qword_step5 curVal_step5 tmp tmp2 tmp3
memcpy_const curTokens_step5 qword_step5 18 tmp tmp2

incaddr curLinePass2_step5 8
set curLinePass2_step5 1

rem Handle comment and offset
incaddr curLinePass2_step5 18
memcpy_const curLinePass2_step5 curSym_step5 18 tmp tmp2
incaddr curLinePass2_step5 18
mov curLinePass2_step5 size tmp
incaddr curLinePass2_step5 8

inc linesPass2Len 1
inc size 8
incaddr curSym_step5 30
lbljmp STEP5_LOOP

label STEP5_VALUE_ERROR
puts STEP5_VALUE_IS_NONE tmp tmp2
putchar SPACE tmp
puts curSym_step5 tmp tmp2
lbljmp HALT

label STEP5_END
puts STEP5_PRINT_PREFIX tmp tmp2
addr sizeStr_step5 0
itoa sizeStr_step5 size tmp tmp2 tmp3
puts sizeStr_step5 tmp tmp2
puts STEP5_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp


label STEP6_START
var symsAtAddrStart 900000
addr curSymsArr_step6 0
setaddr curSymsArr_step6 symsAtAddrStart tmp tmp2
rem There are way more symbols at addr 0 than on others
alloc_array curSymsArr_step6 8 1000 tmp
incaddr curSymsArr_step6 20

var i_step6 0
mov i_step6 size tmp
label STEP6_ALLOC_LOOP
decleq i_step6 8 STEP6_ALLOC_LOOP_END
alloc_array curSymsArr_step6 8 10 tmp
incaddr curSymsArr_step6 20
lbljmp STEP6_ALLOC_LOOP

label STEP6_ALLOC_LOOP_END
addr curSym_step6 0
setaddr curSym_step6 symbolsBegin tmp tmp2

var symsLeft_step6 0
mov symsLeft_step6 symbolsLen tmp
label STEP6_SYMBOL_LOOP
decleq symsLeft_step6 0 STEP6_END
dec symsLeft_step6 1

incaddr curSym_step6 18
jl curSym_step6 size STEP6_ADD_SYMBOL tmp tmp2
incaddr curSym_step6 18
lbljmp STEP6_SYMBOL_LOOP

label STEP6_ADD_SYMBOL
setaddr curSymsArr_step6 symsAtAddrStart tmp tmp2
rem tmp = curSym_step6 * 4
mov tmp curSym_step6 tmp2
movneg tmp2 tmp
sub tmp tmp2
sub tmp tmp2
sub tmp tmp2
addaddr curSymsArr_step6 tmp tmp2

addr curSymsBuffer 0
setaddr curSymsBuffer curSymsArr_step6 tmp tmp2
incaddr curSymsArr_step6 8
mov tmp curSymsArr_step6 tmp2
mul_8 tmp tmp2
addaddr curSymsBuffer tmp tmp2
decaddr curSym_step6 18
getaddr curSymsBuffer curSym_step6 tmp
inc curSymsArr_step6 1

incaddr curSym_step6 30
lbljmp STEP6_SYMBOL_LOOP

label STEP6_END
puts STEP6_PRINT_PREFIX tmp tmp2
addr symbolCount_step6 0
setaddr symbolCount_step6 symsAtAddrStart tmp tmp2
incaddr symbolCount_step6 8

addr symbolCountStr_step6 0
itoa symbolCountStr_step6 symbolCount_step6 tmp tmp2 tmp3
puts symbolCountStr_step6 tmp tmp2
puts STEP6_PRINT_SUFFIX tmp tmp2
putchar LINE_FEED tmp


label STEP7_START
addr symbolsCur_dbg 0
setaddr symbolsCur_dbg symbolsBegin tmp tmp2
var symbolsLeft 0
mov symbolsLeft symbolsLen tmp

label DBG_LOOP
decleq symbolsLeft 0 DBG_LINES
dec symbolsLeft 1

puts SYMBOL_PART_1 tmp tmp2
puts symbolsCur_dbg tmp tmp2
putchar LINE_FEED tmp

incaddr symbolsCur_dbg 18
puts SYMBOL_PART_2 tmp tmp2
print_qword symbolsCur_dbg tmp tmp2 tmp3 tmp4
putchar LINE_FEED tmp

incaddr symbolsCur_dbg 8
puts SYMBOL_PART_3 tmp tmp2
print_qword symbolsCur_dbg tmp tmp2 tmp3 tmp4
putchar LINE_FEED tmp

incaddr symbolsCur_dbg 8
puts SYMBOL_PART_4 tmp tmp2
print_qword symbolsCur_dbg tmp tmp2 tmp3 tmp4
putchar LINE_FEED tmp

incaddr symbolsCur_dbg 8
lbljmp DBG_LOOP

label DBG_LINES
addr linesPass2Cur_dbg 0
setaddr linesPass2Cur_dbg linesPass2Begin tmp tmp2
var linesLeft_dbg 0
mov linesLeft_dbg linesPass2Len tmp

label DBG_LOOP_2
decleq linesLeft_dbg 0 LINE_PRINT_END
dec linesLeft_dbg 1

puts LINE_PART_1 tmp tmp2
puts linesPass2Cur_dbg tmp tmp2
putchar LINE_FEED tmp

incaddr linesPass2Cur_dbg 18
puts LINE_PART_2 tmp tmp2

addr tokensBuf 0
setaddr tokensBuf linesPass2Cur_dbg tmp tmp2
incaddr linesPass2Cur_dbg 8
var tokenCount 0
mov tokenCount linesPass2Cur_dbg tmp

label TOKEN_PRINT_LOOP
decleq tokenCount 0 TOKEN_PRINT_END
dec tokenCount 1
puts tokensBuf tmp tmp2

set tmp 2c
putchar tmp tmp2
putchar SPACE tmp
incaddr tokensBuf 18
lbljmp TOKEN_PRINT_LOOP

label TOKEN_PRINT_END
putchar LINE_FEED tmp


incaddr linesPass2Cur_dbg 18
puts LINE_PART_3 tmp tmp2
puts linesPass2Cur_dbg tmp tmp2
putchar LINE_FEED tmp

incaddr linesPass2Cur_dbg 18
puts LINE_PART_4 tmp tmp2
print_qword linesPass2Cur_dbg tmp tmp2 tmp3 tmp4
putchar LINE_FEED tmp

incaddr linesPass2Cur_dbg 8
putchar LINE_FEED tmp
lbljmp DBG_LOOP_2

label LINE_PRINT_END
addr curSymsArr_dbg 0
setaddr curSymsArr_dbg symsAtAddrStart tmp tmp2

var i_dbg 0
mov i_dbg size tmp
label DBG_LOOP_3
decleq i_dbg 0 HALT
dec i_dbg 8

addr curSymsBuf_dbg 0
setaddr curSymsBuf_dbg curSymsArr_dbg tmp tmp2
incaddr curSymsArr_dbg 8
var symsLeft_dbg 0
mov symsLeft_dbg curSymsArr_dbg tmp
incaddr curSymsArr_dbg 18

label DBG_LOOP_3_1
decleq symsLeft_dbg 0 DBG_LOOP_3_1_END
dec symsLeft_dbg 1

addr curSym_dbg 0
setaddr curSym_dbg curSymsBuf_dbg tmp tmp2
puts curSym_dbg tmp tmp2
putchar SPACE tmp

incaddr curSymsBuf_dbg 8
lbljmp DBG_LOOP_3_1

label DBG_LOOP_3_1_END
putchar LINE_FEED tmp2
lbljmp DBG_LOOP_3

label HALT
halt tmp tmp2


def_string HEX_HEADER # hex
rem Notice the single space
def_string EMPTY_STRING 
def_string NEWLINE newline
def_string REM rem
def_string END end

def_string VAR var
def_string LABEL label
def_string ADDR addr

def_string ABSSQ abssq
def_string RELSQ relsq
def_string LBLSQ lblsq
def_string SUBADDR subaddr
def_string ZEROADDR zeroaddr
def_string RAW raw
def_string RAW_REF raw_ref
def_string ADDRREF _addrRef_

def_string ONE 1

def_string LINE_PART_1 inst: 
def_string LINE_PART_2 tokens: 
def_string LINE_PART_3 comment: 
def_string LINE_PART_4 offset: 

def_string SYMBOL_PART_1 name: 
def_string SYMBOL_PART_2 addr: 
def_string SYMBOL_PART_3 refCount: 
def_string SYMBOL_PART_4 val: 

def_string STEP3_MISSING_SYMBOL STEP3_MISSING_SYMBOL
def_string STEP4_LABEL_MISSING_SYMBOL STEP4_LABEL_MISSING_SYMBOL
def_string STEP4_SQ_MISSING_SYMBOL STEP4_SQ_MISSING_SYMBOL
def_string STEP5_VALUE_IS_NONE STEP5_VALUE_IS_NONE

def_string STEP0_PRINT_PREFIX # Step 0: Processed 
def_string STEP0_PRINT_SUFFIX  lines

def_string STEP1_PRINT_PREFIX # Step 1: Found 
def_string STEP1_PRINT_SUFFIX  symbols

def_string STEP2_PRINT_PREFIX # Step 2: Now with 
def_string STEP2_PRINT_MIDDLE  symbols and 
def_string STEP2_PRINT_SUFFIX  references

def_string STEP3_PRINT_PREFIX # Step 3: Now with 
def_string STEP3_PRINT_MIDDLE  symbols and 
def_string STEP3_PRINT_SUFFIX  lines

def_string STEP4_PRINT_PREFIX # Step 4: Current size is 
def_string STEP4_PRINT_SUFFIX  bytes

def_string STEP5_PRINT_PREFIX # Step 5: Size is now 
def_string STEP5_PRINT_SUFFIX  bytes

def_string STEP6_PRINT_PREFIX # Step 6: Found 
def_string STEP6_PRINT_SUFFIX  symbols at address 0

rem WA for `assert sym.val is not None` errors
inc inst_step3 0
inc sym1_step3 0
inc curTokens_step3 0
subaddr ONE ZERO
inc ONE 0
inc curTokens_step5 0